#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerAIComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EPlayerAIBattleThinkType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FPlayerAIBattleThinkTransitionData_structs.hpp"
#include "EPlayerAIBattleThinkTransition_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "FPlayerAIBattleThinkData_structs.hpp"
#include "SNpcSelfRecoveryData_structs.hpp"
#include "EPlayerAIMoveMode_structs.hpp"
#include "EPlayerAIThinkTableType_structs.hpp"
#include "FNotifyAttackData_structs.hpp"
#include "EPlayerAIBattleThinkParam_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ExecuteUbergraph_BP_PlayerAIComponent
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(float DeltaSeconds)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_1;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6863[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_Check_Battle_Action_Start_bActionStart; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EREDActorStatType                             CallFunc_GetActorStatType_ReturnValue;             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6864[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6865[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerAiGoalActor_C*                CallFunc_FinishSpawningActor_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent) == 0x000010, "Wrong alignment on BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent");
static_assert(sizeof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent) == 0x0000A0, "Wrong size on BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000005, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, Temp_bool_IsClosed_Variable_1) == 0x000006, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, Temp_bool_Has_Been_Initd_Variable_1) == 0x000007, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_GetEvaluateLocation_ReturnValue_1) == 0x000020, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_GetEvaluateLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, K2Node_Event_EndPlayReason) == 0x000038, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, Temp_bool_Has_Been_Initd_Variable_2) == 0x000039, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, K2Node_CustomEvent_DeltaSeconds) == 0x00003C, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_Update_Check_Battle_Action_Start_bActionStart) == 0x000040, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_Update_Check_Battle_Action_Start_bActionStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, Temp_bool_IsClosed_Variable_2) == 0x000041, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_GetActorStatType_ReturnValue) == 0x000042, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_GetActorStatType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000044, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_IsValid_ReturnValue_1) == 0x000054, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000058, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_MakeTransform_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000090, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent, CallFunc_FinishSpawningActor_ReturnValue) == 0x000098, "Member 'BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnCheckBattleActionStartTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_OnCheckBattleActionStartTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_OnCheckBattleActionStartTick) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_OnCheckBattleActionStartTick");
static_assert(sizeof(BP_PlayerAIComponent_C_OnCheckBattleActionStartTick) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_OnCheckBattleActionStartTick");
static_assert(offsetof(BP_PlayerAIComponent_C_OnCheckBattleActionStartTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerAIComponent_C_OnCheckBattleActionStartTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_PlayerAIComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_PlayerAIComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PlayerAIComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAIComponent_C_Update final
{
public:
	class FString                                 WorkStr;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpdate_bUpdate;                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Update) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_Update");
static_assert(sizeof(BP_PlayerAIComponent_C_Update) == 0x000018, "Wrong size on BP_PlayerAIComponent_C_Update");
static_assert(offsetof(BP_PlayerAIComponent_C_Update, WorkStr) == 0x000000, "Member 'BP_PlayerAIComponent_C_Update::WorkStr' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_Update::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update, CallFunc_IsUpdate_bUpdate) == 0x000011, "Member 'BP_PlayerAIComponent_C_Update::CallFunc_IsUpdate_bUpdate' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateMovePos final
{
public:
	float                                         UpdateInterval;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMove_result;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckMovePos_bReset;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateMovePos) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_UpdateMovePos");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateMovePos) == 0x000008, "Wrong size on BP_PlayerAIComponent_C_UpdateMovePos");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos, UpdateInterval) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateMovePos::UpdateInterval' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_UpdateMovePos::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos, CallFunc_IsEventMove_result) == 0x000005, "Member 'BP_PlayerAIComponent_C_UpdateMovePos::CallFunc_IsEventMove_result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'BP_PlayerAIComponent_C_UpdateMovePos::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos, CallFunc_CheckMovePos_bReset) == 0x000007, "Member 'BP_PlayerAIComponent_C_UpdateMovePos::CallFunc_CheckMovePos_bReset' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Initialize
// 0x0300 (0x0300 - 0x0000)
struct BP_PlayerAIComponent_C_Initialize final
{
public:
	int32                                         NewLocalVar_1;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6866[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NewLocalVar_0;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6867[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6868[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6869[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerAIEvaluateTargetParameter       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0050(0x0048)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_686A[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_1;        // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_686B[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetName_ReturnValue;                      // 0x00AC(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_686C[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerAIParameter                     CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00B8(0x0050)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_686D[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_686E[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1;    // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_686F[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetLeftPlayerBP_Player;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetMainPlayerBP_Player;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6870[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6871[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6872[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x019C(0x00D0)(NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6873[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerAIEvaluateTargetParameter       Temp_struct_Variable;                              // 0x0270(0x0048)(ConstParm)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6874[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  CallFunc_GetIsBattleMode_self_CastInput;           // 0x02C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattleMode_IsBattleMode;             // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6875[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x02D4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_6876[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Initialize) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_Initialize");
static_assert(sizeof(BP_PlayerAIComponent_C_Initialize) == 0x000300, "Wrong size on BP_PlayerAIComponent_C_Initialize");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, NewLocalVar_1) == 0x000000, "Member 'BP_PlayerAIComponent_C_Initialize::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, NewLocalVar_0) == 0x000008, "Member 'BP_PlayerAIComponent_C_Initialize::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, Temp_int_Variable) == 0x000018, "Member 'BP_PlayerAIComponent_C_Initialize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000048, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetDataTableRowFromName_OutRow) == 0x000050, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000098, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_Array_Add_ReturnValue) == 0x00009C, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetEvaluateLocation_ReturnValue_1) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetEvaluateLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_IsValid_ReturnValue_1) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetName_ReturnValue) == 0x0000AC, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000108, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetGameMode_ReturnValue) == 0x000110, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetPlayerManager_PlayerManager) == 0x000118, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x000120, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1) == 0x000138, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_bSuccess_1) == 0x000148, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetLeftPlayerBP_Player) == 0x000150, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetLeftPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetMainPlayerBP_Player) == 0x000158, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetMainPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_AsRSBattle_Player) == 0x000160, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_bSuccess_2) == 0x000168, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000170, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000180, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_MakeLiteralInt_ReturnValue) == 0x000184, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetPlayerID_self_CastInput) == 0x000188, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetPlayerID_ReturnValue) == 0x000198, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x00019C, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_Not_PreBool_ReturnValue) == 0x00026C, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, Temp_struct_Variable) == 0x000270, "Member 'BP_PlayerAIComponent_C_Initialize::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_Array_Add_ReturnValue_1) == 0x0002B8, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetIsBattleMode_self_CastInput) == 0x0002C0, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetIsBattleMode_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetIsBattleMode_IsBattleMode) == 0x0002D0, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetIsBattleMode_IsBattleMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_CreateDelegate_OutputDelegate) == 0x0002D4, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_GetOwner_ReturnValue) == 0x0002E8, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x0002F0, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, K2Node_DynamicCast_bSuccess_3) == 0x0002F8, "Member 'BP_PlayerAIComponent_C_Initialize::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Initialize, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0002F9, "Member 'BP_PlayerAIComponent_C_Initialize::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetMoveMode
// 0x03E0 (0x03E0 - 0x0000)
struct BP_PlayerAIComponent_C_SetMoveMode final
{
public:
	EPlayerAIMoveModeCPP                          ModeCPP;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   LCurrentThinkCPP;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          LPrevMoveModeCPP;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6877[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LOtherNpc;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbBattleRangeFar;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbDisableLocation;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6878[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LTargetLocation;                                   // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LTempLocation;                                     // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LTargetToPlayerRotate;                             // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LRadius;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDir;                                              // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LArmAngle;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LArmLength;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6879[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_687A[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPartyPlayerKind_self_CastInput;        // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_687B[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player;                    // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_687C[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_687D[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_687E[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIBattleRange                                CallFunc_GetAIBattleRangeType_ReturnValue;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_687F[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6880[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_1;        // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAIBattleRange_ReturnValue;             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6881[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_2;        // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLocationPriorityRank_outRank;          // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationPriorityRank_outLocation;      // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLocationPriorityRank_ReturnValue;      // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6882[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6883[0x3];                                     // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6884[0x4];                                     // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_3;        // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAIBattleRange_ReturnValue_1;           // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAIBattleRange_ReturnValue_2;           // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_4;        // 0x0268(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHighPriorityLocationByRange_outLocation; // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHighPriorityLocationByRange_ReturnValue; // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6885[0x3];                                     // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_5;        // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHighPriorityLocation_outLocation;      // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHighPriorityLocation_ReturnValue;      // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6886[0x2];                                     // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6887[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface_1;         // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6888[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_Radius_1;                // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_6;        // 0x02F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_7;        // 0x0300(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLocationPriorityRank_outRank_1;        // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationPriorityRank_outLocation_1;    // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLocationPriorityRank_ReturnValue_1;    // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6889[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLocationPriorityRank_outRank_2;        // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationPriorityRank_outLocation_2;    // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLocationPriorityRank_ReturnValue_2;    // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x032D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688A[0x2];                                     // 0x032E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_8;        // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_9;        // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688B[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_8;        // 0x0370(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHighPriorityLocationByRange_outLocation_1; // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHighPriorityLocationByRange_ReturnValue_1; // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0385(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688C[0x2];                                     // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_9;        // 0x0388(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHighPriorityLocationByRange_outLocation_2; // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHighPriorityLocationByRange_ReturnValue_2; // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x039D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688D[0x2];                                     // 0x039E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_10;       // 0x03A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHighPriorityLocationByRange_outLocation_3; // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHighPriorityLocationByRange_ReturnValue_3; // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x03B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688E[0x2];                                     // 0x03B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUpdate_bUpdate;                         // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_688F[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetMoveMode) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SetMoveMode");
static_assert(sizeof(BP_PlayerAIComponent_C_SetMoveMode) == 0x0003E0, "Wrong size on BP_PlayerAIComponent_C_SetMoveMode");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, ModeCPP) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetMoveMode::ModeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LCurrentThinkCPP) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LCurrentThinkCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LPrevMoveModeCPP) == 0x000002, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LPrevMoveModeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LOtherNpc) == 0x000008, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LOtherNpc' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LbBattleRangeFar) == 0x000010, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LbBattleRangeFar' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LbDisableLocation) == 0x000011, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LbDisableLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LTargetLocation) == 0x000014, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LTempLocation) == 0x000020, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LTempLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LTargetToPlayerRotate) == 0x00002C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LTargetToPlayerRotate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LRadius) == 0x000038, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LRadius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LDir) == 0x00003C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LArmAngle) == 0x000048, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LArmAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, LArmLength) == 0x00004C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::LArmLength' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_SwitchEnum_CmpSuccess) == 0x000051, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, Temp_bool_Variable) == 0x000052, "Member 'BP_PlayerAIComponent_C_SetMoveMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000054, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetPartyPlayerKind_self_CastInput) == 0x000068, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetPartyPlayerKind_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x000078, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetRightPlayer_Player) == 0x000080, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetRightPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_SwitchEnum_CmpSuccess_1) == 0x000088, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLeftPlayer_Player) == 0x000090, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLeftPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsValid_ReturnValue_1) == 0x000098, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00009C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_VSize_ReturnValue) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetAIBattleRangeType_ReturnValue) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetAIBattleRangeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000C9, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_MathExpression_ReturnValue) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeVector_ReturnValue) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_VectorVector_ReturnValue) == 0x0000EC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_DynamicCast_AsCommon_AIInterface) == 0x0000F8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetCapsuleRadius_Radius) == 0x00010C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_1) == 0x000110, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetAIBattleRange_ReturnValue) == 0x000118, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetAIBattleRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_FloatFloat_ReturnValue) == 0x00011C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000120, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00012C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_VSize_ReturnValue_1) == 0x000138, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeRotator_ReturnValue) == 0x00013C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeRotator_ReturnValue_1) == 0x000148, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000154, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_FindLookAtRotation_ReturnValue) == 0x000160, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00016C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakRotator_Roll) == 0x000178, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakRotator_Pitch) == 0x00017C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakRotator_Yaw) == 0x000180, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_VSize_ReturnValue_2) == 0x000184, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_SelectFloat_ReturnValue) == 0x000188, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_2) == 0x000190, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000198, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_outRank) == 0x0001A4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_outRank' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_outLocation) == 0x0001A8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_outLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_ReturnValue) == 0x0001B4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0001B8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x0001C4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x0001D0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetForwardVector_ReturnValue) == 0x0001DC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakVector_X) == 0x0001E8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakVector_Y) == 0x0001EC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakVector_Z) == 0x0001F0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001F4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeVector_ReturnValue_1) == 0x000200, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x00020C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Normal_ReturnValue) == 0x000218, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BooleanAND_ReturnValue) == 0x000224, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000228, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_3) == 0x000238, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x000240, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetAIBattleRange_ReturnValue_1) == 0x000244, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetAIBattleRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_MathExpression_ReturnValue_1) == 0x000248, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetAIBattleRange_ReturnValue_2) == 0x00024C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetAIBattleRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeVector_ReturnValue_2) == 0x000250, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00025C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_4) == 0x000268, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_outLocation) == 0x000270, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_outLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_ReturnValue) == 0x00027C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_5) == 0x000280, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocation_outLocation) == 0x000288, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocation_outLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocation_ReturnValue) == 0x000294, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, Temp_bool_Variable_1) == 0x000295, "Member 'BP_PlayerAIComponent_C_SetMoveMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000298, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0002A4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_Select_Default) == 0x0002B0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_DynamicCast_AsCommon_AIInterface_1) == 0x0002B8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_DynamicCast_AsCommon_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_DynamicCast_bSuccess_1) == 0x0002C8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x0002CC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetCapsuleRadius_Radius_1) == 0x0002D8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetCapsuleRadius_Radius_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0002DC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0002E8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0002EC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_6) == 0x0002F8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_7) == 0x000300, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_outRank_1) == 0x000308, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_outRank_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_outLocation_1) == 0x00030C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_outLocation_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_ReturnValue_1) == 0x000318, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_outRank_2) == 0x00031C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_outRank_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_outLocation_2) == 0x000320, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_outLocation_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetLocationPriorityRank_ReturnValue_2) == 0x00032C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetLocationPriorityRank_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_Less_IntInt_ReturnValue) == 0x00032D, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_8) == 0x000330, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_K2_GetActorLocation_ReturnValue_9) == 0x00033C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_K2_GetActorLocation_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsValid_ReturnValue_2) == 0x000348, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x00034C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakRotator_Roll_1) == 0x000358, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakRotator_Pitch_1) == 0x00035C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_BreakRotator_Yaw_1) == 0x000360, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeRotator_ReturnValue_2) == 0x000364, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_8) == 0x000370, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_outLocation_1) == 0x000378, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_outLocation_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_ReturnValue_1) == 0x000384, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsValid_ReturnValue_3) == 0x000385, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_9) == 0x000388, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_outLocation_2) == 0x000390, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_outLocation_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_ReturnValue_2) == 0x00039C, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsValid_ReturnValue_4) == 0x00039D, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetEvaluateLocation_ReturnValue_10) == 0x0003A0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetEvaluateLocation_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_outLocation_3) == 0x0003A8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_outLocation_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GetHighPriorityLocationByRange_ReturnValue_3) == 0x0003B4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GetHighPriorityLocationByRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsValid_ReturnValue_5) == 0x0003B5, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, Temp_float_Variable) == 0x0003B8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_IsUpdate_bUpdate) == 0x0003BC, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_IsUpdate_bUpdate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, Temp_float_Variable_1) == 0x0003C0, "Member 'BP_PlayerAIComponent_C_SetMoveMode::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, K2Node_Select_Default_1) == 0x0003C4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_MakeRotator_ReturnValue_3) == 0x0003C8, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveMode, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x0003D4, "Member 'BP_PlayerAIComponent_C_SetMoveMode::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update Data
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerAIComponent_C_Update_Data final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6890[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_Update_Data) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_Update_Data");
static_assert(sizeof(BP_PlayerAIComponent_C_Update_Data) == 0x000028, "Wrong size on BP_PlayerAIComponent_C_Update_Data");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Data, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_Update_Data::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Data, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_Update_Data::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Data, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000010, "Member 'BP_PlayerAIComponent_C_Update_Data::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Data, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_Update_Data::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update Battle Target Actor
// 0x00D8 (0x00D8 - 0x0000)
struct BP_PlayerAIComponent_C_Update_Battle_Target_Actor final
{
public:
	float                                         IntervalTime;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6891[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PrevTargetActor;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdate;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6892[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6893[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetTargetLock_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetBattleActorList_ReturnValue;           // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_SearchTarget_Target;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6894[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6895[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6896[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6897[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_Update_Battle_Target_Actor");
static_assert(sizeof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor) == 0x0000D8, "Wrong size on BP_PlayerAIComponent_C_Update_Battle_Target_Actor");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, IntervalTime) == 0x000000, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::IntervalTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, PrevTargetActor) == 0x000008, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::PrevTargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, bUpdate) == 0x000010, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::bUpdate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, Temp_float_Variable) == 0x000014, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_GetActorForwardVector_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_GetBattleManager_BattleManager) == 0x000028, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_GetTargetLock_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_GetTargetLock_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_GetBattleActorList_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_GetBattleActorList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_SearchTarget_Target) == 0x000048, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_SearchTarget_Target' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, Temp_float_Variable_1) == 0x000050, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, Temp_bool_Variable) == 0x000054, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000064, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000070, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_BreakVector_X) == 0x00007C, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_BreakVector_Y) == 0x000080, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_BreakVector_Z) == 0x000084, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_IsValid_ReturnValue_2) == 0x000088, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_MakeVector_ReturnValue) == 0x00008C, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, Temp_bool_Variable_1) == 0x000098, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_IsActionStatusAI_bResult) == 0x0000B1, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, K2Node_Select_Default) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, Temp_float_Variable_2) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_Normal_ReturnValue) == 0x0000BC, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, Temp_float_Variable_3) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, K2Node_Select_Default_1) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_IsEnable_ReturnValue) == 0x0000D4, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_IsOver_ReturnValue) == 0x0000D5, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Battle_Target_Actor, CallFunc_Not_PreBool_ReturnValue) == 0x0000D6, "Member 'BP_PlayerAIComponent_C_Update_Battle_Target_Actor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleTarget
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAIComponent_C_SetBattleTarget final
{
public:
	class ARSCharacterBase*                       TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetCurrentTargetActor_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWaitBattleStart_bWait;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetBattleTarget) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SetBattleTarget");
static_assert(sizeof(BP_PlayerAIComponent_C_SetBattleTarget) == 0x000018, "Wrong size on BP_PlayerAIComponent_C_SetBattleTarget");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, TargetActor) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, CallFunc_GetCurrentTargetActor_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::CallFunc_GetCurrentTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, CallFunc_IsWaitBattleStart_bWait) == 0x000011, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::CallFunc_IsWaitBattleStart_bWait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, CallFunc_IsValid_ReturnValue) == 0x000013, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleTarget, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_SetBattleTarget::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleMode
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_SetBattleMode final
{
public:
	bool                                          bBattle;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6898[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpdate_bUpdate;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetBattleMode) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SetBattleMode");
static_assert(sizeof(BP_PlayerAIComponent_C_SetBattleMode) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_SetBattleMode");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleMode, bBattle) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetBattleMode::bBattle' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleMode, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000008, "Member 'BP_PlayerAIComponent_C_SetBattleMode::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleMode, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000018, "Member 'BP_PlayerAIComponent_C_SetBattleMode::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleMode, CallFunc_IsUpdate_bUpdate) == 0x000019, "Member 'BP_PlayerAIComponent_C_SetBattleMode::CallFunc_IsUpdate_bUpdate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleMode, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'BP_PlayerAIComponent_C_SetBattleMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos_ApproachTarget
// 0x007C (0x007C - 0x0000)
struct BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6899[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget) == 0x00007C, "Wrong size on BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, Temp_bool_Variable) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_IsOver_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_GetRate_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Ease_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds) == 0x00001C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, K2Node_MathExpression_ReturnValue) == 0x000020, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, K2Node_Select_Default) == 0x000048, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00004C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x00005C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, K2Node_MathExpression_ReturnValue_1) == 0x000060, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_MakeVector_ReturnValue_1) == 0x000064, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000070, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_ApproachTarget::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.PreUpdate
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerAIComponent_C_PreUpdate final
{
public:
	class AActor*                                 LLockTarget;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEvaluateActorType                            LActorType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_689A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LMainPlayer;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LBattleActor;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               LBattleActorList;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     LEvalueateLocation;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetableCharacter_ReturnValue;     // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PreUpdateCPP_RangeAttack_BPImplement_ReturnValue; // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_PreUpdate) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_PreUpdate");
static_assert(sizeof(BP_PlayerAIComponent_C_PreUpdate) == 0x000040, "Wrong size on BP_PlayerAIComponent_C_PreUpdate");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, LLockTarget) == 0x000000, "Member 'BP_PlayerAIComponent_C_PreUpdate::LLockTarget' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, LActorType) == 0x000008, "Member 'BP_PlayerAIComponent_C_PreUpdate::LActorType' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, LMainPlayer) == 0x000010, "Member 'BP_PlayerAIComponent_C_PreUpdate::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, LBattleActor) == 0x000018, "Member 'BP_PlayerAIComponent_C_PreUpdate::LBattleActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, LBattleActorList) == 0x000020, "Member 'BP_PlayerAIComponent_C_PreUpdate::LBattleActorList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, LEvalueateLocation) == 0x000030, "Member 'BP_PlayerAIComponent_C_PreUpdate::LEvalueateLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds) == 0x000038, "Member 'BP_PlayerAIComponent_C_PreUpdate::CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, CallFunc_BooleanAND_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_PreUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, CallFunc_CheckTargetableCharacter_ReturnValue) == 0x00003D, "Member 'BP_PlayerAIComponent_C_PreUpdate::CallFunc_CheckTargetableCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdate, CallFunc_PreUpdateCPP_RangeAttack_BPImplement_ReturnValue) == 0x00003E, "Member 'BP_PlayerAIComponent_C_PreUpdate::CallFunc_PreUpdateCPP_RangeAttack_BPImplement_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.MainUpdate
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_MainUpdate final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_MainUpdate) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_MainUpdate");
static_assert(sizeof(BP_PlayerAIComponent_C_MainUpdate) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_MainUpdate");
static_assert(offsetof(BP_PlayerAIComponent_C_MainUpdate, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_MainUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.PostUpdate
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerAIComponent_C_PostUpdate final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableStickInput_bEnable;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689D[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalcStickDir_Stick;                       // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_PostUpdate) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_PostUpdate");
static_assert(sizeof(BP_PlayerAIComponent_C_PostUpdate) == 0x000030, "Wrong size on BP_PlayerAIComponent_C_PostUpdate");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_PostUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, CallFunc_BreakVector2D_X) == 0x000004, "Member 'BP_PlayerAIComponent_C_PostUpdate::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'BP_PlayerAIComponent_C_PostUpdate::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, CallFunc_IsEnableStickInput_bEnable) == 0x00000C, "Member 'BP_PlayerAIComponent_C_PostUpdate::CallFunc_IsEnableStickInput_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000010, "Member 'BP_PlayerAIComponent_C_PostUpdate::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerAIComponent_C_PostUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PostUpdate, CallFunc_CalcStickDir_Stick) == 0x000024, "Member 'BP_PlayerAIComponent_C_PostUpdate::CallFunc_CalcStickDir_Stick' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodge
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateDodge final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateDodge) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_UpdateDodge");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateDodge) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_UpdateDodge");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateDodge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateDodge::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge, CallFunc_BooleanAND_ReturnValue_1) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateDodge::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodge_Battle
// 0x00B8 (0x00B8 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateDodge_Battle final
{
public:
	bool                                          LbFoceDodge;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbDodgeRangeAttack;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbDodgeNormalAttack;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689E[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        LDodgeDirList;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<float>                                 DODGE_DIR_ROTATE;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         DODGE_CHECK_LENGTH;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDodgeDir;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFNotifyAttackData                     LAttackData;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateDodgeBattle_Enpc_BPImplement_bOK;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutDodgeNormalAttack; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutDodgeRangeAttack; // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutForceDodge; // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689F[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A0[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A1[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CheckDodgeRangeAttack_DodgeDir;           // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDodgeRangeAttack_ReturnValue;        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A2[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckInAttackArea_bIn;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A3[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_IsMetalMode_self_CastInput;               // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionDodge_bEnable;              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateDodge_Battle) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateDodge_Battle");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateDodge_Battle) == 0x0000B8, "Wrong size on BP_PlayerAIComponent_C_UpdateDodge_Battle");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, LbFoceDodge) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::LbFoceDodge' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, LbDodgeRangeAttack) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::LbDodgeRangeAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, LbDodgeNormalAttack) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::LbDodgeNormalAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, LDodgeDirList) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::LDodgeDirList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, DODGE_DIR_ROTATE) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::DODGE_DIR_ROTATE' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, DODGE_CHECK_LENGTH) == 0x000028, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::DODGE_CHECK_LENGTH' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, LDodgeDir) == 0x00002C, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::LDodgeDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, LAttackData) == 0x000038, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::LAttackData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_UpdateDodgeBattle_Enpc_BPImplement_bOK) == 0x000048, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_UpdateDodgeBattle_Enpc_BPImplement_bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutDodgeNormalAttack) == 0x000049, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutDodgeNormalAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutDodgeRangeAttack) == 0x00004A, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutDodgeRangeAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutForceDodge) == 0x00004B, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_UpdateDodgeBattle_Enpc_BPImplement_OutForceDodge' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, K2Node_MakeArray_Array) == 0x000050, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000068, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000079, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_CheckDodgeRangeAttack_DodgeDir) == 0x00007C, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_CheckDodgeRangeAttack_DodgeDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_CheckDodgeRangeAttack_ReturnValue) == 0x000088, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_CheckDodgeRangeAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00008C, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_IsOver_ReturnValue) == 0x000098, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_CheckInAttackArea_bIn) == 0x000099, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_CheckInAttackArea_bIn' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_IsMetalMode_self_CastInput) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_IsMetalMode_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_IsMetalMode_bMetal) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_Battle, CallFunc_IsEnableActionDodge_bEnable) == 0x0000B2, "Member 'BP_PlayerAIComponent_C_UpdateDodge_Battle::CallFunc_IsEnableActionDodge_bEnable' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodge_FollowPlayer
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result_1;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A4[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_IsActionStatus_Result) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_IsActionStatus_Result_1) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_IsActionStatus_Result_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000004, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer, CallFunc_IsActionStatusAI_bResult) == 0x000019, "Member 'BP_PlayerAIComponent_C_UpdateDodge_FollowPlayer::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcStickDir
// 0x0160 (0x0160 - 0x0000)
struct BP_PlayerAIComponent_C_CalcStickDir final
{
public:
	struct FVector2D                              Stick;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDir;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LStickDir;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalcStickDirCPP_ReturnValue;              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A5[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68A6[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A7[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCameraRotation_cameraRotate;           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsJumpAble_bEnable;                       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A8[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMovePosActor_MovePosActor;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStickDir_BattleAttack_Dir;            // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A9[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68AA[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStickDir_BattleDodge_Dir;             // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_CalcStickDir) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CalcStickDir");
static_assert(sizeof(BP_PlayerAIComponent_C_CalcStickDir) == 0x000160, "Wrong size on BP_PlayerAIComponent_C_CalcStickDir");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, Stick) == 0x000000, "Member 'BP_PlayerAIComponent_C_CalcStickDir::Stick' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, LDir) == 0x000008, "Member 'BP_PlayerAIComponent_C_CalcStickDir::LDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, LStickDir) == 0x000014, "Member 'BP_PlayerAIComponent_C_CalcStickDir::LStickDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_CalcStickDirCPP_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_CalcStickDirCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000024, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BooleanAND_ReturnValue_1) == 0x000026, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_NegateVector_ReturnValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_GetDebuggingManager_Manager) == 0x000038, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_GetCameraRotation_cameraRotate) == 0x000044, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_GetCameraRotation_cameraRotate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_IsJumpAble_bEnable) == 0x00005C, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_IsJumpAble_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_Normal_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00006C, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_GetMovePosActor_MovePosActor) == 0x000078, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_GetMovePosActor_MovePosActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00008C, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_CalcStickDir_BattleAttack_Dir) == 0x000098, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_CalcStickDir_BattleAttack_Dir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_X) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Y) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Z) == 0x0000AC, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_IsActionStatus_Result) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_MakeVector_ReturnValue) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_Normal_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_VSizeSquared_ReturnValue) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_MakeRotFromX_ReturnValue) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_GetForwardVector_ReturnValue) == 0x0000EC, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_X_1) == 0x0000F8, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Y_1) == 0x0000FC, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Z_1) == 0x000100, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_MakeVector2D_ReturnValue) == 0x000104, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00010C, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000118, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_CalcStickDir_BattleDodge_Dir) == 0x000124, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_CalcStickDir_BattleDodge_Dir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_X_2) == 0x000130, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Y_2) == 0x000134, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Z_2) == 0x000138, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_X_3) == 0x00013C, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Y_3) == 0x000140, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_BreakVector_Z_3) == 0x000144, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_MakeVector_ReturnValue_1) == 0x000148, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir, CallFunc_MakeVector_ReturnValue_2) == 0x000154, "Member 'BP_PlayerAIComponent_C_CalcStickDir::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EnableStickInput
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_EnableStickInput final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_EnableStickInput) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_EnableStickInput");
static_assert(sizeof(BP_PlayerAIComponent_C_EnableStickInput) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_EnableStickInput");
static_assert(offsetof(BP_PlayerAIComponent_C_EnableStickInput, ClaimantName) == 0x000000, "Member 'BP_PlayerAIComponent_C_EnableStickInput::ClaimantName' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EnableStickInput, Temp_bool_Variable) == 0x000008, "Member 'BP_PlayerAIComponent_C_EnableStickInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EnableStickInput, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'BP_PlayerAIComponent_C_EnableStickInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DisableStickInput
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_DisableStickInput final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_DisableStickInput) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_DisableStickInput");
static_assert(sizeof(BP_PlayerAIComponent_C_DisableStickInput) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_DisableStickInput");
static_assert(offsetof(BP_PlayerAIComponent_C_DisableStickInput, ClaimantName) == 0x000000, "Member 'BP_PlayerAIComponent_C_DisableStickInput::ClaimantName' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DisableStickInput, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_DisableStickInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DisableStickInput, CallFunc_Map_Remove_ReturnValue) == 0x000009, "Member 'BP_PlayerAIComponent_C_DisableStickInput::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnAttackHit
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_OnAttackHit final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_OnAttackHit) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_OnAttackHit");
static_assert(sizeof(BP_PlayerAIComponent_C_OnAttackHit) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_OnAttackHit");
static_assert(offsetof(BP_PlayerAIComponent_C_OnAttackHit, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_OnAttackHit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NextBattleThink
// 0x01B8 (0x01B8 - 0x0000)
struct BP_PlayerAIComponent_C_NextBattleThink final
{
public:
	TArray<struct FFPlayerAIBattleThinkTransitionData> TransitionData;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FFPlayerAIBattleThinkTransitionData    Element;                                           // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68AB[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68AC[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68AD[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68AE[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0068(0x0018)()
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0090(0x0040)(HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x00D8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00F0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0140(0x0018)()
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugNextBattleThinkLog_Return;           // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBattleThinkTransition_bOK;           // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68AF[0x1];                                     // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBattleThinkTransition_bOK_1;         // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBattleThinkTransition_bOK_2;         // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBattleThinkTransition_bOK_3;         // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBattleThinkTransition_bOK_4;         // 0x0167(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_CalcThinkTransitionProbability_Result;    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_GetStealthThink_return;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsThinkTimerOverByIndex_ReturnValue;      // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B0[0x2];                                     // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPlayerAIBattleThinkTransitionData    K2Node_MakeStruct_FPlayerAIBattleThinkTransitionData; // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStealthThink_return;                    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackThink_return;                     // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B1[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_GetCurrentThinkTable_Table;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPlayerAIBattleThinkData              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0190(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B2[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_NextBattleThink) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_NextBattleThink");
static_assert(sizeof(BP_PlayerAIComponent_C_NextBattleThink) == 0x0001B8, "Wrong size on BP_PlayerAIComponent_C_NextBattleThink");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, TransitionData) == 0x000000, "Member 'BP_PlayerAIComponent_C_NextBattleThink::TransitionData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, Element) == 0x000010, "Member 'BP_PlayerAIComponent_C_NextBattleThink::Element' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_PlayerAIComponent_C_NextBattleThink::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'BP_PlayerAIComponent_C_NextBattleThink::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_PlayerAIComponent_C_NextBattleThink::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000038, "Member 'BP_PlayerAIComponent_C_NextBattleThink::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerAIComponent_C_NextBattleThink::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_GetObjectName_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000060, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Conv_StringToText_ReturnValue) == 0x000068, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000080, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, K2Node_MakeStruct_FormatArgumentData) == 0x000090, "Member 'BP_PlayerAIComponent_C_NextBattleThink::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Conv_StringToName_ReturnValue) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Conv_NameToText_ReturnValue) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000F0, "Member 'BP_PlayerAIComponent_C_NextBattleThink::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, K2Node_MakeArray_Array) == 0x000130, "Member 'BP_PlayerAIComponent_C_NextBattleThink::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Format_ReturnValue) == 0x000140, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Array_LastIndex_ReturnValue) == 0x000158, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00015C, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_DebugNextBattleThinkLog_Return) == 0x00015D, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_DebugNextBattleThinkLog_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_CheckBattleThinkTransition_bOK) == 0x00015E, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_CheckBattleThinkTransition_bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_CheckBattleThinkTransition_bOK_1) == 0x000164, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_CheckBattleThinkTransition_bOK_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_CheckBattleThinkTransition_bOK_2) == 0x000165, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_CheckBattleThinkTransition_bOK_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_CheckBattleThinkTransition_bOK_3) == 0x000166, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_CheckBattleThinkTransition_bOK_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_CheckBattleThinkTransition_bOK_4) == 0x000167, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_CheckBattleThinkTransition_bOK_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_CalcThinkTransitionProbability_Result) == 0x000168, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_CalcThinkTransitionProbability_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00016C, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_GetStealthThink_return) == 0x000170, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_GetStealthThink_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_IsThinkTimerOverByIndex_ReturnValue) == 0x000171, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_IsThinkTimerOverByIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, K2Node_MakeStruct_FPlayerAIBattleThinkTransitionData) == 0x000174, "Member 'BP_PlayerAIComponent_C_NextBattleThink::K2Node_MakeStruct_FPlayerAIBattleThinkTransitionData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_IsStealthThink_return) == 0x000180, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_IsStealthThink_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_IsAttackThink_return) == 0x000181, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_IsAttackThink_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_GetCurrentThinkTable_Table) == 0x000188, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_GetCurrentThinkTable_Table' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_GetDataTableRowFromName_OutRow) == 0x000190, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001A8, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0001AC, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001B0, "Member 'BP_PlayerAIComponent_C_NextBattleThink::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ResetBattleThink
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_ResetBattleThink final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_ResetBattleThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_ResetBattleThink");
static_assert(sizeof(BP_PlayerAIComponent_C_ResetBattleThink) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_ResetBattleThink");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetBattleThink, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_ResetBattleThink::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Set Battle Think
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_Set_Battle_Think final
{
public:
	EPlayerAIBattleThinkType                      Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParam                     Param;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68B3[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LTargetDist;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   LPrevThinkTypeCPP;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkParam_CPPEnum; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum; // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_Set_Battle_Think) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_Set_Battle_Think");
static_assert(sizeof(BP_PlayerAIComponent_C_Set_Battle_Think) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_Set_Battle_Think");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Battle_Think, Action) == 0x000000, "Member 'BP_PlayerAIComponent_C_Set_Battle_Think::Action' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Battle_Think, Param) == 0x000001, "Member 'BP_PlayerAIComponent_C_Set_Battle_Think::Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Battle_Think, LTargetDist) == 0x000004, "Member 'BP_PlayerAIComponent_C_Set_Battle_Think::LTargetDist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Battle_Think, LPrevThinkTypeCPP) == 0x000008, "Member 'BP_PlayerAIComponent_C_Set_Battle_Think::LPrevThinkTypeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Battle_Think, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkParam_CPPEnum) == 0x000009, "Member 'BP_PlayerAIComponent_C_Set_Battle_Think::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkParam_CPPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Battle_Think, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum) == 0x00000A, "Member 'BP_PlayerAIComponent_C_Set_Battle_Think::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Set Move Mode From Think
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_Set_Move_Mode_From_Think final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ThinkCPP;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSelfRecovery_bRecovery;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Set_Move_Mode_From_Think) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_Set_Move_Mode_From_Think");
static_assert(sizeof(BP_PlayerAIComponent_C_Set_Move_Mode_From_Think) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_Set_Move_Mode_From_Think");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Move_Mode_From_Think, ThinkCPP) == 0x000000, "Member 'BP_PlayerAIComponent_C_Set_Move_Mode_From_Think::ThinkCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Move_Mode_From_Think, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_Set_Move_Mode_From_Think::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Move_Mode_From_Think, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_PlayerAIComponent_C_Set_Move_Mode_From_Think::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Set_Move_Mode_From_Think, CallFunc_IsSelfRecovery_bRecovery) == 0x000003, "Member 'BP_PlayerAIComponent_C_Set_Move_Mode_From_Think::CallFunc_IsSelfRecovery_bRecovery' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DebugUpdate
// 0x01E0 (0x01E0 - 0x0000)
struct BP_PlayerAIComponent_C_DebugUpdate final
{
public:
	TArray<float>                                 LRotateList;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B4[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0034(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68B5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B6[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B7[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0100(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B8[0x2];                                     // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFNotifyAttackData                     CallFunc_GetNotifyAttackData_Data;                 // 0x011C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B9[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0150(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68BA[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68BB[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue_1;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68BC[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x0194(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68BD[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_2;         // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68BE[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_DebugUpdate) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_DebugUpdate");
static_assert(sizeof(BP_PlayerAIComponent_C_DebugUpdate) == 0x0001E0, "Wrong size on BP_PlayerAIComponent_C_DebugUpdate");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, LRotateList) == 0x000000, "Member 'BP_PlayerAIComponent_C_DebugUpdate::LRotateList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_bool_Variable) == 0x000010, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_struct_Variable) == 0x000014, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_struct_Variable_1) == 0x000024, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_float_Variable) == 0x000034, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000048, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00005A, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00005C, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000068, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetActorForwardVector_ReturnValue) == 0x000074, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000080, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_MathExpression_ReturnValue) == 0x000084, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x000088, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_MakeVector_ReturnValue) == 0x00008C, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_MathExpression_ReturnValue_1) == 0x000098, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Add_VectorVector_ReturnValue) == 0x00009C, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_MakeVector_ReturnValue_1) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Array_Add_ReturnValue) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_MakeRotator_ReturnValue) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Array_Length_ReturnValue) == 0x0000EC, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000F0, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Less_IntInt_ReturnValue) == 0x0000FC, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_float_Variable_1) == 0x000100, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Array_Add_ReturnValue_1) == 0x000104, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000108, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_IsValid_ReturnValue_1) == 0x000119, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetNotifyAttackData_Data) == 0x00011C, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetNotifyAttackData_Data' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00012C, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000130, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_MakeVector_ReturnValue_2) == 0x000134, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_SwitchEnum_CmpSuccess) == 0x000140, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000144, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_float_Variable_2) == 0x000150, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000154, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Array_Add_ReturnValue_2) == 0x000160, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetPlayerManager_PlayerManager) == 0x000168, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetPlayer_ReturnValue) == 0x000170, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetPlayerManager_PlayerManager_1) == 0x000178, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000180, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetPlayer_ReturnValue_1) == 0x000188, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000190, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, Temp_float_Variable_3) == 0x000194, "Member 'BP_PlayerAIComponent_C_DebugUpdate::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000198, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetPlayerManager_PlayerManager_2) == 0x0001A8, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetPlayerManager_PlayerManager_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_Array_Add_ReturnValue_3) == 0x0001B0, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetEvaluateLocation_ReturnValue) == 0x0001B8, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_GetDebuggingManager_Manager) == 0x0001C0, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, K2Node_Select_Default) == 0x0001C8, "Member 'BP_PlayerAIComponent_C_DebugUpdate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate, CallFunc_IsValid_ReturnValue_2) == 0x0001D8, "Member 'BP_PlayerAIComponent_C_DebugUpdate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetAttackInputKind
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerAIComponent_C_GetAttackInputKind final
{
public:
	ERSAttackInputKind                            AttackKind;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_7;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_8;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_9;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_10;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_11;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_12;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_13;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_14;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_15;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_16;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_17;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_18;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_19;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_20;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_21;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_22;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_23;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_24;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_25;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_26;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_27;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_28;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_29;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_30;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_31;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_32;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_33;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_34;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_35;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_36;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_37;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_38;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_39;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_40;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_41;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_42;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_43;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_44;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_45;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_46;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            Temp_byte_Variable_47;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            CallFunc_GetAttackInputKindCPP_ReturnValue;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable_48;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkTypeCPP                   Temp_byte_Variable_49;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68BF[0x1];                                     // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isEnemyDamageLaunch_bool;                 // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            Temp_byte_Variable_50;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSAttackInputKind                            K2Node_Select_Default;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C0[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_OverwriteAttackInputKindAI_self_CastInput; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSAttackInputKind                            CallFunc_OverwriteAttackInputKindAI_Kind;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetAttackInputKind) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetAttackInputKind");
static_assert(sizeof(BP_PlayerAIComponent_C_GetAttackInputKind) == 0x000068, "Wrong size on BP_PlayerAIComponent_C_GetAttackInputKind");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, AttackKind) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::AttackKind' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_1) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_2) == 0x000003, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_3) == 0x000004, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_4) == 0x000005, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_5) == 0x000006, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_6) == 0x000007, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_7) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_8) == 0x000009, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_9) == 0x00000A, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_10) == 0x00000B, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_11) == 0x00000C, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_12) == 0x00000D, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_13) == 0x00000E, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_14) == 0x00000F, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_15) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_16) == 0x000011, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_17) == 0x000012, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_18) == 0x000013, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_19) == 0x000014, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_20) == 0x000015, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_21) == 0x000016, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_22) == 0x000017, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_23) == 0x000018, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_24) == 0x000019, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_25) == 0x00001A, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_26) == 0x00001B, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_27) == 0x00001C, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_28) == 0x00001D, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_29) == 0x00001E, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_30) == 0x00001F, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_31) == 0x000020, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_32) == 0x000021, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_33) == 0x000022, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_34) == 0x000023, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_35) == 0x000024, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_36) == 0x000025, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_37) == 0x000026, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_38) == 0x000027, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_39) == 0x000028, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_40) == 0x000029, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_41) == 0x00002A, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_42) == 0x00002B, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_43) == 0x00002C, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_44) == 0x00002D, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_45) == 0x00002E, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_46) == 0x00002F, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_47) == 0x000030, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_GetAttackInputKindCPP_ReturnValue) == 0x000031, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_GetAttackInputKindCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_48) == 0x000033, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000034, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000035, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_49) == 0x000036, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000038, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_isEnemyDamageLaunch_bool) == 0x00004A, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_isEnemyDamageLaunch_bool' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, Temp_byte_Variable_50) == 0x00004B, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::Temp_byte_Variable_50' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, K2Node_Select_Default) == 0x00004C, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_OverwriteAttackInputKindAI_self_CastInput) == 0x000050, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_OverwriteAttackInputKindAI_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackInputKind, CallFunc_OverwriteAttackInputKindAI_Kind) == 0x000060, "Member 'BP_PlayerAIComponent_C_GetAttackInputKind::CallFunc_OverwriteAttackInputKindAI_Kind' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcStickDir_BattleDodge
// 0x001C (0x001C - 0x0000)
struct BP_PlayerAIComponent_C_CalcStickDir_BattleDodge final
{
public:
	struct FVector                                Dir;                                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStickDir_BattleDodgeCPP_ReturnValue;  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CalcStickDir_BattleDodge) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_CalcStickDir_BattleDodge");
static_assert(sizeof(BP_PlayerAIComponent_C_CalcStickDir_BattleDodge) == 0x00001C, "Wrong size on BP_PlayerAIComponent_C_CalcStickDir_BattleDodge");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleDodge, Dir) == 0x000000, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleDodge::Dir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleDodge, CallFunc_CalcStickDir_BattleDodgeCPP_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleDodge::CallFunc_CalcStickDir_BattleDodgeCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleDodge, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleDodge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos_Circle
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateMovePos_Circle final
{
public:
	struct FVector                                LTargetLocation;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C1[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C2[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_1;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIBattleRange                                CallFunc_GetAIBattleRangeType_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C3[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAIBattleRange_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C4[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAIBattleRange_ReturnValue_1;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C6[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C7[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateMovePos_Circle) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateMovePos_Circle");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateMovePos_Circle) == 0x0000C0, "Wrong size on BP_PlayerAIComponent_C_UpdateMovePos_Circle");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, LTargetLocation) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::LTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, Temp_bool_Variable) == 0x00000C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, Temp_float_Variable) == 0x000010, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, Temp_float_Variable_1) == 0x000014, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, Temp_bool_Variable_1) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000020, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetEvaluateLocation_ReturnValue_1) == 0x000028, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetEvaluateLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetAIBattleRangeType_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetAIBattleRangeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetAIBattleRange_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetAIBattleRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetAIBattleRange_ReturnValue_1) == 0x00003C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetAIBattleRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, K2Node_Select_Default) == 0x000040, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000048, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetCapsuleRadius_Radius) == 0x00005C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, K2Node_Select_Default_1) == 0x000064, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_IsValid_ReturnValue) == 0x000074, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_FindLookAtRotation_ReturnValue) == 0x000078, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000090, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00009C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, K2Node_MathExpression_ReturnValue) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_MakeVector_ReturnValue) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_Circle, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_Circle::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateChainAttack
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateChainAttack final
{
public:
	class ARSCharacterBase*                       Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateChainAttack) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateChainAttack");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateChainAttack) == 0x000008, "Wrong size on BP_PlayerAIComponent_C_UpdateChainAttack");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateChainAttack, Target) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateChainAttack::Target' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.JumpOrder
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerAIComponent_C_JumpOrder final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68C9[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68CA[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_JumpOrder) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_JumpOrder");
static_assert(sizeof(BP_PlayerAIComponent_C_JumpOrder) == 0x000080, "Wrong size on BP_PlayerAIComponent_C_JumpOrder");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, Destination) == 0x000000, "Member 'BP_PlayerAIComponent_C_JumpOrder::Destination' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_X) == 0x00000C, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_Z) == 0x000014, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, Temp_bool_Variable) == 0x000018, "Member 'BP_PlayerAIComponent_C_JumpOrder::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, Temp_int_Variable) == 0x00001C, "Member 'BP_PlayerAIComponent_C_JumpOrder::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, Temp_int_Variable_1) == 0x000020, "Member 'BP_PlayerAIComponent_C_JumpOrder::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_X_1) == 0x000040, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_Y_1) == 0x000044, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_Z_1) == 0x000048, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_MakeVector_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000058, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_X_2) == 0x000064, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_Y_2) == 0x000068, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_BreakVector_Z_2) == 0x00006C, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000074, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_PlayerAIComponent_C_JumpOrder::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_JumpOrder, K2Node_Select_Default) == 0x00007C, "Member 'BP_PlayerAIComponent_C_JumpOrder::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnMovementCollisionLand
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_OnMovementCollisionLand final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_OnMovementCollisionLand) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_OnMovementCollisionLand");
static_assert(sizeof(BP_PlayerAIComponent_C_OnMovementCollisionLand) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_OnMovementCollisionLand");
static_assert(offsetof(BP_PlayerAIComponent_C_OnMovementCollisionLand, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_OnMovementCollisionLand::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnJump
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_OnJump final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68CB[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_OnJump) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_OnJump");
static_assert(sizeof(BP_PlayerAIComponent_C_OnJump) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_OnJump");
static_assert(offsetof(BP_PlayerAIComponent_C_OnJump, Temp_int_Variable) == 0x000000, "Member 'BP_PlayerAIComponent_C_OnJump::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_OnJump, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_OnJump::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_OnJump, CallFunc_Greater_IntInt_ReturnValue) == 0x000005, "Member 'BP_PlayerAIComponent_C_OnJump::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_OnJump, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_OnJump::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.InitializeParam
// 0x0070 (0x0070 - 0x0000)
struct BP_PlayerAIComponent_C_InitializeParam final
{
public:
	int32                                         L_total;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Value;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EPlayerAIBattleThinkTypeCPP>           K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FPlayerAIComponentInitializeParam      K2Node_MakeStruct_PlayerAIComponentInitializeParam; // 0x0030(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_InitializeParam) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_InitializeParam");
static_assert(sizeof(BP_PlayerAIComponent_C_InitializeParam) == 0x000070, "Wrong size on BP_PlayerAIComponent_C_InitializeParam");
static_assert(offsetof(BP_PlayerAIComponent_C_InitializeParam, L_total) == 0x000000, "Member 'BP_PlayerAIComponent_C_InitializeParam::L_total' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_InitializeParam, L_Value) == 0x000004, "Member 'BP_PlayerAIComponent_C_InitializeParam::L_Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_InitializeParam, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_PlayerAIComponent_C_InitializeParam::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_InitializeParam, CallFunc_GetPlayerFixParam_Param) == 0x000018, "Member 'BP_PlayerAIComponent_C_InitializeParam::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_InitializeParam, K2Node_MakeArray_Array_1) == 0x000020, "Member 'BP_PlayerAIComponent_C_InitializeParam::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_InitializeParam, K2Node_MakeStruct_PlayerAIComponentInitializeParam) == 0x000030, "Member 'BP_PlayerAIComponent_C_InitializeParam::K2Node_MakeStruct_PlayerAIComponentInitializeParam' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyForceWarp
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_NotifyForceWarp final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_NotifyForceWarp) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_NotifyForceWarp");
static_assert(sizeof(BP_PlayerAIComponent_C_NotifyForceWarp) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_NotifyForceWarp");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyForceWarp, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_NotifyForceWarp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyAttackStart
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_NotifyAttackStart final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68CC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_NotifyAttackStart) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_NotifyAttackStart");
static_assert(sizeof(BP_PlayerAIComponent_C_NotifyAttackStart) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_NotifyAttackStart");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyAttackStart, Temp_int_Variable) == 0x000000, "Member 'BP_PlayerAIComponent_C_NotifyAttackStart::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyAttackStart, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_NotifyAttackStart::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyAttackStart, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_NotifyAttackStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Request Use Item
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_Request_Use_Item final
{
public:
	EConsumeItemID                                Item_id_in;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAssist;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Request_Use_Item) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_Request_Use_Item");
static_assert(sizeof(BP_PlayerAIComponent_C_Request_Use_Item) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_Request_Use_Item");
static_assert(offsetof(BP_PlayerAIComponent_C_Request_Use_Item, Item_id_in) == 0x000000, "Member 'BP_PlayerAIComponent_C_Request_Use_Item::Item_id_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Request_Use_Item, bAssist) == 0x000001, "Member 'BP_PlayerAIComponent_C_Request_Use_Item::bAssist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Request_Use_Item, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_Request_Use_Item::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsUseItemThink
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_IsUseItemThink final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseItemThinkCPP_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsUseItemThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsUseItemThink");
static_assert(sizeof(BP_PlayerAIComponent_C_IsUseItemThink) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_IsUseItemThink");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUseItemThink, Return) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsUseItemThink::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUseItemThink, CallFunc_IsUseItemThinkCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsUseItemThink::CallFunc_IsUseItemThinkCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUseItemThink, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsUseItemThink::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetupUseItem
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_SetupUseItem final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetupUseItem) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetupUseItem");
static_assert(sizeof(BP_PlayerAIComponent_C_SetupUseItem) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_SetupUseItem");
static_assert(offsetof(BP_PlayerAIComponent_C_SetupUseItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetupUseItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsAttackThink
// 0x0006 (0x0006 - 0x0000)
struct BP_PlayerAIComponent_C_IsAttackThink final
{
public:
	EPlayerAIBattleThinkType                      Think_type_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackThinkCPP_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsAttackThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsAttackThink");
static_assert(sizeof(BP_PlayerAIComponent_C_IsAttackThink) == 0x000006, "Wrong size on BP_PlayerAIComponent_C_IsAttackThink");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackThink, Think_type_in) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsAttackThink::Think_type_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackThink, Return) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsAttackThink::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackThink, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsAttackThink::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackThink, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsAttackThink::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackThink, CallFunc_IsAttackThinkCPP_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsAttackThink::CallFunc_IsAttackThinkCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackThink, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'BP_PlayerAIComponent_C_IsAttackThink::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetStealthThink
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetStealthThink final
{
public:
	EPlayerAIBattleThinkType                      Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_GetStealthThink_CPPType_return;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetStealthThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetStealthThink");
static_assert(sizeof(BP_PlayerAIComponent_C_GetStealthThink) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetStealthThink");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink, Return) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetStealthThink::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink, CallFunc_GetStealthThink_CPPType_return) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetStealthThink::CallFunc_GetStealthThink_CPPType_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetStealthThink::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetEventMove
// 0x00F8 (0x00F8 - 0x0000)
struct BP_PlayerAIComponent_C_SetEventMove final
{
public:
	TArray<struct FVector>                        Pos_list_in;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<float>                                 Radius_list_in;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bWalk;                                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAfterWait;                                        // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68CD[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxMoveTime;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_SetPlayerInputRestriction_self_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68CE[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68CF[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D0[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D1[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetEventMove) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SetEventMove");
static_assert(sizeof(BP_PlayerAIComponent_C_SetEventMove) == 0x0000F8, "Wrong size on BP_PlayerAIComponent_C_SetEventMove");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, Pos_list_in) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetEventMove::Pos_list_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, Radius_list_in) == 0x000010, "Member 'BP_PlayerAIComponent_C_SetEventMove::Radius_list_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, bWalk) == 0x000020, "Member 'BP_PlayerAIComponent_C_SetEventMove::bWalk' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, bAfterWait) == 0x000021, "Member 'BP_PlayerAIComponent_C_SetEventMove::bAfterWait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, MaxMoveTime) == 0x000024, "Member 'BP_PlayerAIComponent_C_SetEventMove::MaxMoveTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_SetPlayerInputRestriction_self_CastInput) == 0x000028, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_SetPlayerInputRestriction_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_SetPlayerInputRestriction_bDummy) == 0x000038, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_SetPlayerInputRestriction_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_IsPlayerStatus_Result) == 0x000039, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000040, "Member 'BP_PlayerAIComponent_C_SetEventMove::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PlayerAIComponent_C_SetEventMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_SelectFloat_ReturnValue) == 0x000054, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_ScaleMaxSpeed_Result) == 0x000058, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000064, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_Less_IntInt_ReturnValue) == 0x000065, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000068, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventMove, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000F0, "Member 'BP_PlayerAIComponent_C_SetEventMove::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEventMove
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_IsEventMove final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMoveCPP_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsEventMove) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsEventMove");
static_assert(sizeof(BP_PlayerAIComponent_C_IsEventMove) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_IsEventMove");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMove, Result) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsEventMove::Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMove, CallFunc_IsEventMoveCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsEventMove::CallFunc_IsEventMoveCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMove, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsEventMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetEventMovePosActor
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerAIComponent_C_GetEventMovePosActor final
{
public:
	class AActor*                                 Pos_actor;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Accept_Radius;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68D2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetEventMovePosActorCPP_OutPosActor;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEventMovePosActorCPP_OutAcceptRadius;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D3[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMovePosActor_MovePosActor;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetEventMovePosActor) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetEventMovePosActor");
static_assert(sizeof(BP_PlayerAIComponent_C_GetEventMovePosActor) == 0x000028, "Wrong size on BP_PlayerAIComponent_C_GetEventMovePosActor");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMovePosActor, Pos_actor) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetEventMovePosActor::Pos_actor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMovePosActor, Accept_Radius) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetEventMovePosActor::Accept_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMovePosActor, CallFunc_GetEventMovePosActorCPP_OutPosActor) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetEventMovePosActor::CallFunc_GetEventMovePosActorCPP_OutPosActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMovePosActor, CallFunc_GetEventMovePosActorCPP_OutAcceptRadius) == 0x000018, "Member 'BP_PlayerAIComponent_C_GetEventMovePosActor::CallFunc_GetEventMovePosActorCPP_OutAcceptRadius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMovePosActor, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_GetEventMovePosActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMovePosActor, CallFunc_GetMovePosActor_MovePosActor) == 0x000020, "Member 'BP_PlayerAIComponent_C_GetEventMovePosActor::CallFunc_GetMovePosActor_MovePosActor' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckEventMovePos
// 0x00AC (0x00AC - 0x0000)
struct BP_PlayerAIComponent_C_CheckEventMovePos final
{
public:
	bool                                          Check_distance;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Goal;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_wait;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventMovePosCPP_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D4[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D5[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D6[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckEventMovePos) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_CheckEventMovePos");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckEventMovePos) == 0x0000AC, "Wrong size on BP_PlayerAIComponent_C_CheckEventMovePos");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, Check_distance) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::Check_distance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, Goal) == 0x000001, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::Goal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, L_wait) == 0x000002, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::L_wait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_CheckEventMovePosCPP_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_CheckEventMovePosCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_CheckDistance_bResult) == 0x000014, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000018, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckEventMovePos, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_CheckEventMovePos::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEventMoveEnd
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_IsEventMoveEnd final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventMoveEndCPP_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsEventMoveEnd) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsEventMoveEnd");
static_assert(sizeof(BP_PlayerAIComponent_C_IsEventMoveEnd) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_IsEventMoveEnd");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMoveEnd, Result) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsEventMoveEnd::Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMoveEnd, CallFunc_IsEventMoveEndCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsEventMoveEnd::CallFunc_IsEventMoveEndCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMoveEnd, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsEventMoveEnd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventMoveEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsEventMoveEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateEventMove
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateEventMove final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventMovePos_Goal;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D7[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68D8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D9[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalcStickDir_Stick;                       // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateEventMove) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateEventMove");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateEventMove) == 0x000030, "Wrong size on BP_PlayerAIComponent_C_UpdateEventMove");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, CallFunc_IsPlayerStatus_Result) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, CallFunc_CheckEventMovePos_Goal) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::CallFunc_CheckEventMovePos_Goal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, CallFunc_BreakVector2D_X) == 0x000004, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000010, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateEventMove, CallFunc_CalcStickDir_Stick) == 0x000024, "Member 'BP_PlayerAIComponent_C_UpdateEventMove::CallFunc_CalcStickDir_Stick' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetEventMoveLeftStickX
// 0x0014 (0x0014 - 0x0000)
struct BP_PlayerAIComponent_C_GetEventMoveLeftStickX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEventMoveLeftStickX_CPP_ReturnValue;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68DA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_GetEventMoveLeftStickX");
static_assert(sizeof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX) == 0x000014, "Wrong size on BP_PlayerAIComponent_C_GetEventMoveLeftStickX");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX, Value) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickX::Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX, CallFunc_GetEventMoveLeftStickX_CPP_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickX::CallFunc_GetEventMoveLeftStickX_CPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickX::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickX::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickX, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickX::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetEventMoveLeftStickY
// 0x0014 (0x0014 - 0x0000)
struct BP_PlayerAIComponent_C_GetEventMoveLeftStickY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEventMoveLeftStickY_CPP_ReturnValue;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68DB[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_GetEventMoveLeftStickY");
static_assert(sizeof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY) == 0x000014, "Wrong size on BP_PlayerAIComponent_C_GetEventMoveLeftStickY");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY, Value) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickY::Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY, CallFunc_GetEventMoveLeftStickY_CPP_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickY::CallFunc_GetEventMoveLeftStickY_CPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickY::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickY::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetEventMoveLeftStickY, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetEventMoveLeftStickY::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetTargetSearchMode
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_SetTargetSearchMode final
{
public:
	EPlayerAITargetSearchModeCPP                  Param_TargetSearchMode;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetTargetSearchMode) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetTargetSearchMode");
static_assert(sizeof(BP_PlayerAIComponent_C_SetTargetSearchMode) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_SetTargetSearchMode");
static_assert(offsetof(BP_PlayerAIComponent_C_SetTargetSearchMode, Param_TargetSearchMode) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetTargetSearchMode::Param_TargetSearchMode' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetOrder
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_SetOrder final
{
public:
	EPlayerAIOrder                                Param_Order;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAITargetSearchModeCPP                  Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAITargetSearchModeCPP                  Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAITargetSearchModeCPP                  Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAITargetSearchModeCPP                  Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAITargetSearchModeCPP                  Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAITargetSearchModeCPP                  Temp_byte_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWaitBattleStart_bWait;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIOrder                                Temp_byte_Variable_6;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAITargetSearchModeCPP                  K2Node_Select_Default;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetOrder) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetOrder");
static_assert(sizeof(BP_PlayerAIComponent_C_SetOrder) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_SetOrder");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Param_Order) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetOrder::Param_Order' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable_1) == 0x000002, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable_2) == 0x000003, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable_3) == 0x000004, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable_4) == 0x000005, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_PlayerAIComponent_C_SetOrder::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable_5) == 0x000007, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, CallFunc_IsWaitBattleStart_bWait) == 0x000008, "Member 'BP_PlayerAIComponent_C_SetOrder::CallFunc_IsWaitBattleStart_bWait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000009, "Member 'BP_PlayerAIComponent_C_SetOrder::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, Temp_byte_Variable_6) == 0x00000A, "Member 'BP_PlayerAIComponent_C_SetOrder::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetOrder, K2Node_Select_Default) == 0x00000B, "Member 'BP_PlayerAIComponent_C_SetOrder::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SearchTarget
// 0x00F0 (0x00F0 - 0x0000)
struct BP_PlayerAIComponent_C_SearchTarget final
{
public:
	TArray<class ARSCharacterBase*>               TargetList;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       Target;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SAME_TARGET_EVALUATEVALUE;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OTHER_TARGET_EVALUATEVALUE;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CONFUSION_EVALUATEVALUE;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EvaluateValue;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempEvaluateValue;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68DC[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HateTargetActor;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MainPlayerTargetACtor;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       TargetElement;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       TargetActor;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68DD[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_SearchTargetCPP_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68DE[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcTargetEvaluate_EvaluateValue;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue_1; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue_2; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68DF[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E0[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E1[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetTargetLock_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E2[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETeamKind                                     CallFunc_GetTeam_Team;                             // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetableCharacter_ReturnValue;     // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_SearchTarget) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SearchTarget");
static_assert(sizeof(BP_PlayerAIComponent_C_SearchTarget) == 0x0000F0, "Wrong size on BP_PlayerAIComponent_C_SearchTarget");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, TargetList) == 0x000000, "Member 'BP_PlayerAIComponent_C_SearchTarget::TargetList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, Target) == 0x000010, "Member 'BP_PlayerAIComponent_C_SearchTarget::Target' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, SAME_TARGET_EVALUATEVALUE) == 0x000018, "Member 'BP_PlayerAIComponent_C_SearchTarget::SAME_TARGET_EVALUATEVALUE' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, OTHER_TARGET_EVALUATEVALUE) == 0x00001C, "Member 'BP_PlayerAIComponent_C_SearchTarget::OTHER_TARGET_EVALUATEVALUE' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CONFUSION_EVALUATEVALUE) == 0x000020, "Member 'BP_PlayerAIComponent_C_SearchTarget::CONFUSION_EVALUATEVALUE' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, EvaluateValue) == 0x000024, "Member 'BP_PlayerAIComponent_C_SearchTarget::EvaluateValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, TempEvaluateValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_SearchTarget::TempEvaluateValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, HateTargetActor) == 0x000030, "Member 'BP_PlayerAIComponent_C_SearchTarget::HateTargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, MainPlayerTargetACtor) == 0x000038, "Member 'BP_PlayerAIComponent_C_SearchTarget::MainPlayerTargetACtor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, TargetElement) == 0x000040, "Member 'BP_PlayerAIComponent_C_SearchTarget::TargetElement' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, TargetActor) == 0x000048, "Member 'BP_PlayerAIComponent_C_SearchTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, Temp_int_Loop_Num_Variable) == 0x000050, "Member 'BP_PlayerAIComponent_C_SearchTarget::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_SearchTargetCPP_ReturnValue) == 0x000058, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_SearchTargetCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'BP_PlayerAIComponent_C_SearchTarget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_CalcTargetEvaluate_EvaluateValue) == 0x000064, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_CalcTargetEvaluate_EvaluateValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue) == 0x000074, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Add_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000080, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue_1) == 0x00008C, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000090, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00009C, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue_2) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Calc_Distance_Target_Evaluate_EvaluateValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, Temp_int_Array_Index_Variable) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_SearchTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000AD, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_SearchTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_BooleanAND_ReturnValue) == 0x0000BC, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_GetTargetLock_ReturnValue) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_GetTargetLock_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C9, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_GetCurrentTargetActor_TargetActor) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_SearchTarget::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_PlayerAIComponent_C_SearchTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_GetTeam_Team) == 0x0000E9, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_GetTeam_Team' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000EA, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_CheckTargetableCharacter_ReturnValue) == 0x0000EB, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_CheckTargetableCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchTarget, CallFunc_Array_Length_ReturnValue) == 0x0000EC, "Member 'BP_PlayerAIComponent_C_SearchTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcThinkTransitionProbability
// 0x00E8 (0x00E8 - 0x0000)
struct BP_PlayerAIComponent_C_CalcThinkTransitionProbability final
{
public:
	int32                                         Probability;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      Action;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68E3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHPRate;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LResult;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum; // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68E4[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CalcThinkTransitionProbabilityCPP_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68E5[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNpcThinkAssistAttack_return;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E6[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainCrashAccessInterface_bAccess;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E7[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAttackThink_return;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E8[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68E9[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBattleTargetActor_TargetActor;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleTargetAttack_bPossible;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDisableActionDodge_ReturnValue;         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68EA[0x2];                                     // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRegisterThreatActor_ReturnValue;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68EB[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68EC[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_3;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_4;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68ED[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_CanBattleAction_self_CastInput;           // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBattleAction_CanAction;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68EE[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_5;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_6;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHPPercent_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CalcThinkTransitionProbability");
static_assert(sizeof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability) == 0x0000E8, "Wrong size on BP_PlayerAIComponent_C_CalcThinkTransitionProbability");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, Probability) == 0x000000, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::Probability' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, Action) == 0x000004, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::Action' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, Result) == 0x000008, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, LHPRate) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::LHPRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, LResult) == 0x000010, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::LResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum) == 0x000014, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_CalcThinkTransitionProbabilityCPP_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_CalcThinkTransitionProbabilityCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsNpcThinkAssistAttack_return) == 0x000029, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsNpcThinkAssistAttack_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000030, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsBrainCrashAccessInterface_bAccess) == 0x000041, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsBrainCrashAccessInterface_bAccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsAttackThink_return) == 0x000048, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsAttackThink_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000050, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsValid_ReturnValue_1) == 0x000061, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_GetBattleTargetActor_TargetActor) == 0x000068, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_GetBattleTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000070, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsPossibleTargetAttack_bPossible) == 0x000081, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsPossibleTargetAttack_bPossible' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsValid_ReturnValue_2) == 0x000082, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_BooleanAND_ReturnValue) == 0x000083, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsDisableActionDodge_ReturnValue) == 0x000084, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsDisableActionDodge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000085, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue_1) == 0x00008C, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsRegisterThreatActor_ReturnValue) == 0x000090, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsRegisterThreatActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_SwitchEnum_CmpSuccess) == 0x000091, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Subtract_IntInt_ReturnValue) == 0x000094, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue_2) == 0x000098, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue_3) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue_4) == 0x0000AC, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0000B1, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_CanBattleAction_self_CastInput) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_CanBattleAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_CanBattleAction_CanAction) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_CanBattleAction_CanAction' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_IsActionStatus_Result) == 0x0000C9, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue_5) == 0x0000D4, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Clamp_ReturnValue_6) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Clamp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_Less_IntInt_ReturnValue) == 0x0000DD, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000DE, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000DF, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, CallFunc_GetHPPercent_ReturnValue) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::CallFunc_GetHPPercent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcThinkTransitionProbability, K2Node_SwitchEnum_CmpSuccess_2) == 0x0000E4, "Member 'BP_PlayerAIComponent_C_CalcThinkTransitionProbability::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckSelfRecovery
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PlayerAIComponent_C_CheckSelfRecovery final
{
public:
	struct FSNpcSelfRecoveryData                  LCheckData;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LProbability;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHPRate;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68EF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F0[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F1[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F2[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F3[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F4[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F5[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F6[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F7[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F8[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68F9[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_GetHPPercent_self_CastInput;              // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckSelfRecovery) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CheckSelfRecovery");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckSelfRecovery) == 0x0000A0, "Wrong size on BP_PlayerAIComponent_C_CheckSelfRecovery");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, LCheckData) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::LCheckData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, LProbability) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::LProbability' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, LHPRate) == 0x000010, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::LHPRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_bool_True_if_break_was_hit_Variable) == 0x000014, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Loop_Num_Variable_1) == 0x000024, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Array_Index_Variable_1) == 0x000028, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000034, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Array_Index_Variable_2) == 0x000038, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Not_PreBool_ReturnValue_1) == 0x00003C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Loop_Num_Variable_2) == 0x000040, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_bool_True_if_break_was_hit_Variable_2) == 0x000044, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_BooleanAND_ReturnValue) == 0x000046, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Not_PreBool_ReturnValue_2) == 0x000047, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000054, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Array_Length_ReturnValue_2) == 0x000058, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x00005C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00005D, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Less_IntInt_ReturnValue_1) == 0x000069, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_BooleanAND_ReturnValue_1) == 0x000070, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, Temp_int_Loop_Counter_Variable_2) == 0x000074, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, K2Node_SwitchEnum_CmpSuccess) == 0x000078, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Less_IntInt_ReturnValue_2) == 0x000079, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_Add_IntInt_ReturnValue_2) == 0x00007C, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_BooleanAND_ReturnValue_2) == 0x000080, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_GetHPPercent_self_CastInput) == 0x000088, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_GetHPPercent_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery, CallFunc_GetHPPercent_Percent) == 0x000098, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery::CallFunc_GetHPPercent_Percent' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Cancel Use Item
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_Cancel_Use_Item final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Cancel_Use_Item) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_Cancel_Use_Item");
static_assert(sizeof(BP_PlayerAIComponent_C_Cancel_Use_Item) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_Cancel_Use_Item");
static_assert(offsetof(BP_PlayerAIComponent_C_Cancel_Use_Item, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_Cancel_Use_Item::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DecreaseSelfRecoveryNum
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68FA[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum");
static_assert(sizeof(BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum");
static_assert(offsetof(BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum, Temp_int_Variable) == 0x000000, "Member 'BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum, CallFunc_Greater_IntInt_ReturnValue) == 0x000005, "Member 'BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_DecreaseSelfRecoveryNum::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateCounter
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateCounter final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionCounter_return;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAutoCounter_return;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68FB[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateCounter) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateCounter");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateCounter) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_UpdateCounter");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateCounter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, CallFunc_IsEnableActionCounter_return) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateCounter::CallFunc_IsEnableActionCounter_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, CallFunc_CheckAutoCounter_return) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateCounter::CallFunc_CheckAutoCounter_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateCounter::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateCounter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, CallFunc_IsEnemyStateAttack_Return) == 0x000019, "Member 'BP_PlayerAIComponent_C_UpdateCounter::CallFunc_IsEnemyStateAttack_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateCounter, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'BP_PlayerAIComponent_C_UpdateCounter::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReserveNextThink
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_ReserveNextThink final
{
public:
	EPlayerAIBattleThinkType                      ThinkType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParam                     Param;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkParam_CPPEnum; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_ReserveNextThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_ReserveNextThink");
static_assert(sizeof(BP_PlayerAIComponent_C_ReserveNextThink) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_ReserveNextThink");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink, ThinkType) == 0x000000, "Member 'BP_PlayerAIComponent_C_ReserveNextThink::ThinkType' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink, Param) == 0x000001, "Member 'BP_PlayerAIComponent_C_ReserveNextThink::Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_ReserveNextThink::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkParam_CPPEnum) == 0x000003, "Member 'BP_PlayerAIComponent_C_ReserveNextThink::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkParam_CPPEnum' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RegisterEvaluateLocation
// 0x0118 (0x0118 - 0x0000)
struct BP_PlayerAIComponent_C_RegisterEvaluateLocation final
{
public:
	EEvaluateActorStatus                          LActorStatus;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEvaluateActorType                            LActorType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68FC[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LBattleActor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               LBattleActorList;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class AActor*                                 LLockTarget;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       LMainPlayer;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     LEvaluateLocation;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68FD[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68FE[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68FF[0x1];                                     // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFriendTeam_ReturnValue;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6900[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6901[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6902[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6903[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6904[0x6];                                     // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6905[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6906[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetBattleActorList_ReturnValue;           // 0x0100(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_RegisterEvaluateLocation) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_RegisterEvaluateLocation");
static_assert(sizeof(BP_PlayerAIComponent_C_RegisterEvaluateLocation) == 0x000118, "Wrong size on BP_PlayerAIComponent_C_RegisterEvaluateLocation");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LActorStatus) == 0x000000, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LActorStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LActorType) == 0x000001, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LActorType' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LBattleActor) == 0x000008, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LBattleActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LBattleActorList) == 0x000010, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LBattleActorList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LLockTarget) == 0x000020, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LLockTarget' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LMainPlayer) == 0x000028, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, LEvaluateLocation) == 0x000030, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::LEvaluateLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, Temp_int_Loop_Num_Variable) == 0x000048, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_BooleanAND_ReturnValue) == 0x00004D, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000050, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_IsEnemyStateAttack_Return) == 0x000061, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_IsEnemyStateAttack_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_IsValid_ReturnValue_1) == 0x000062, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000068, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_IsFriendTeam_ReturnValue) == 0x000070, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_IsFriendTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000078, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetCapsuleRadius_Radius) == 0x00008C, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000090, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000094, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000098, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_MakeVector_ReturnValue) == 0x00009C, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetPlayerManager_PlayerManager) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_IsValid_ReturnValue_2) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0000D9, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetPlayer_ReturnValue) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000E8, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetBattleManager_BattleManager) == 0x0000F0, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_IsValid_ReturnValue_3) == 0x0000F8, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetBattleActorList_ReturnValue) == 0x000100, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetBattleActorList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RegisterEvaluateLocation, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000110, "Member 'BP_PlayerAIComponent_C_RegisterEvaluateLocation::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetMoveLocation
// 0x0240 (0x0240 - 0x0000)
struct BP_PlayerAIComponent_C_SetMoveLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmLength;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LOffset;                                           // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDir;                                              // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LLength;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6907[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6908[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6909[0x2];                                     // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_690A[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_690B[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetMoveLocation) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SetMoveLocation");
static_assert(sizeof(BP_PlayerAIComponent_C_SetMoveLocation) == 0x000240, "Wrong size on BP_PlayerAIComponent_C_SetMoveLocation");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, Location) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, ArmLength) == 0x00000C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::ArmLength' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, Yaw) == 0x000010, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, LOffset) == 0x000014, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::LOffset' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, LDir) == 0x000020, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::LDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, LLength) == 0x00002C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::LLength' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, Temp_object_Variable) == 0x000030, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000044, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_GetForwardVector_ReturnValue) == 0x00005C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000074, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_SphereTraceSingle_OutHit) == 0x000080, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_SphereTraceSingle_ReturnValue) == 0x000108, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00010C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x000118, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x000119, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_Time) == 0x00011C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_Distance) == 0x000120, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_Location) == 0x000124, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x000130, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_Normal) == 0x00013C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x000148, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_PhysMat) == 0x000158, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_HitActor) == 0x000160, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_HitComponent) == 0x000168, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_HitBoneName) == 0x000170, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_HitItem) == 0x000178, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_FaceIndex) == 0x00017C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_TraceStart) == 0x000180, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_BreakHitResult_TraceEnd) == 0x00018C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000198, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_FMax_ReturnValue) == 0x00019C, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001A0, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0001A4, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0001B0, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000238, "Member 'BP_PlayerAIComponent_C_SetMoveLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetThinkKeepOut
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_SetThinkKeepOut final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetThinkKeepOut) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetThinkKeepOut");
static_assert(sizeof(BP_PlayerAIComponent_C_SetThinkKeepOut) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_SetThinkKeepOut");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkKeepOut, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetThinkKeepOut::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkKeepOut, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetThinkKeepOut::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkKeepOut, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_PlayerAIComponent_C_SetThinkKeepOut::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos_FollowPlayer
// 0x005C (0x005C - 0x0000)
struct BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_690C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_690D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer) == 0x00005C, "Wrong size on BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, Temp_bool_Variable) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, Temp_float_Variable) == 0x000004, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, Temp_float_Variable_1) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_BreakRotator_Roll) == 0x00001C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_BreakRotator_Pitch) == 0x000020, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_BreakRotator_Yaw) == 0x000024, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, K2Node_Select_Default) == 0x000028, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, K2Node_MathExpression_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_UpdateMovePos_FollowPlayer::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnUpdateUpdateEvaluateLocation
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation final
{
public:
	bool                                          CallFunc_IsWaitBattleStart_bWait;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation");
static_assert(sizeof(BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation");
static_assert(offsetof(BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation, CallFunc_IsWaitBattleStart_bWait) == 0x000000, "Member 'BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation::CallFunc_IsWaitBattleStart_bWait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_OnUpdateUpdateEvaluateLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckGoalLocationKeepOut
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerAIComponent_C_CheckGoalLocationKeepOut final
{
public:
	bool                                          LbGoalKeepOut;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_690E[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckKeepOutArea_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_690F[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue_1;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckKeepOutArea_ReturnValue_1;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CheckGoalLocationKeepOut");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut) == 0x000038, "Wrong size on BP_PlayerAIComponent_C_CheckGoalLocationKeepOut");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, LbGoalKeepOut) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::LbGoalKeepOut' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_CheckKeepOutArea_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_CheckKeepOutArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_GetEvaluateLocation_ReturnValue_1) == 0x000028, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_GetEvaluateLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckGoalLocationKeepOut, CallFunc_CheckKeepOutArea_ReturnValue_1) == 0x000030, "Member 'BP_PlayerAIComponent_C_CheckGoalLocationKeepOut::CallFunc_CheckKeepOutArea_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckInAttackArea
// 0x01D0 (0x01D0 - 0x0000)
struct BP_PlayerAIComponent_C_CheckInAttackArea final
{
public:
	struct FVector                                CheckLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bin;                                               // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6910[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFNotifyAttackData                     LData;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DOT_CHECK_COS45;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LForwardDot;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDir;                                              // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbResult;                                          // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6911[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6912[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6913[0xC];                                     // 0x0074(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0080(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPointInBoxWithTransform_ReturnValue;    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6914[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6915[0x1];                                     // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6916[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFNotifyAttackData                     CallFunc_GetNotifyAttackData_Data;                 // 0x01BC(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckInAttackArea) == 0x000010, "Wrong alignment on BP_PlayerAIComponent_C_CheckInAttackArea");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckInAttackArea) == 0x0001D0, "Wrong size on BP_PlayerAIComponent_C_CheckInAttackArea");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CheckLocation) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CheckLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, bin) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::bin' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, LData) == 0x000010, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::LData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, DOT_CHECK_COS45) == 0x000020, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::DOT_CHECK_COS45' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, LForwardDot) == 0x000024, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::LForwardDot' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, LDir) == 0x000028, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::LDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, LbResult) == 0x000034, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::LbResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, K2Node_SwitchEnum_CmpSuccess) == 0x000035, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_CheckDistance_bResult) == 0x000044, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_X) == 0x000048, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_Y) == 0x00004C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_Z) == 0x000050, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_MakeVector_ReturnValue) == 0x000054, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_GetActorForwardVector_ReturnValue) == 0x000060, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_GetTransform_ReturnValue) == 0x000080, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_MakeVector_ReturnValue_1) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakTransform_Location) == 0x0000BC, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakTransform_Rotation) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakTransform_Scale) == 0x0000D4, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Add_VectorVector_ReturnValue) == 0x0000EC, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_X_1) == 0x0000F8, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_Y_1) == 0x0000FC, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_Z_1) == 0x000100, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_MakeVector_ReturnValue_2) == 0x000104, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_IsPointInBoxWithTransform_ReturnValue) == 0x000140, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_IsPointInBoxWithTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_GetActorRightVector_ReturnValue) == 0x000144, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Dot_VectorVector_ReturnValue) == 0x000150, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000154, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000158, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000159, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00015A, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x00015C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000168, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00016C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000178, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_X_2) == 0x000184, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_Y_2) == 0x000188, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_BreakVector_Z_2) == 0x00018C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_MakeVector_ReturnValue_3) == 0x000190, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_Normal_ReturnValue) == 0x00019C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0001A8, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_GetNotifyAttackData_Data) == 0x0001BC, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_GetNotifyAttackData_Data' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea, CallFunc_IsValid_ReturnValue) == 0x0001CC, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateBattleDodgeDir
// 0x0530 (0x0530 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateBattleDodgeDir final
{
public:
	float                                         LAllowDistance;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LLimitDistance;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDodgeLocation;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IGNORE_ANGLE_DOT;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LToTargetDir;                                      // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPriorityDot;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LTempDot;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6917[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        LForwardDirList;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                LForwardDir;                                       // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DODGE_LENGTH;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LTempRank;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LDodgeDir;                                         // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LDodgeDirList;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FFNotifyAttackData                     LAttackData;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6918[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6919[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691A[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691B[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691C[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691D[0x1];                                     // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691E[0x2];                                     // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691F[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInAttackArea_bIn;                    // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6920[0x1];                                     // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_3; // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6921[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_4; // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_5; // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0190(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x01A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6922[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6923[0x2];                                     // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6924[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6925[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_6; // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_7; // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_8; // 0x02E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_9;                  // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0314(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6926[0x3];                                     // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0340(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0358(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLocationPriorityRank_outRank;          // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationPriorityRank_outLocation;      // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLocationPriorityRank_ReturnValue;      // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0395(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6927[0x2];                                     // 0x0396(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x039D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6928[0x2];                                     // 0x039E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_10;                 // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_11;                 // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_12;                 // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6929[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x03B0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692A[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x03C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x03DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692B[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0468(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692C[0x3];                                     // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFNotifyAttackData                     CallFunc_GetNotifyAttackData_Data;                 // 0x047C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x048D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692D[0x2];                                     // 0x048E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x04A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x04B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x04BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x04D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x04FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0514(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0520(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x052C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateBattleDodgeDir");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir) == 0x000530, "Wrong size on BP_PlayerAIComponent_C_UpdateBattleDodgeDir");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LAllowDistance) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LAllowDistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LLimitDistance) == 0x000004, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LLimitDistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LDodgeLocation) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LDodgeLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, IGNORE_ANGLE_DOT) == 0x000014, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::IGNORE_ANGLE_DOT' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LToTargetDir) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LToTargetDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LPriorityDot) == 0x000024, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LPriorityDot' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LTempDot) == 0x000028, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LTempDot' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LForwardDirList) == 0x000030, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LForwardDirList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LForwardDir) == 0x000040, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LForwardDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, DODGE_LENGTH) == 0x00004C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::DODGE_LENGTH' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LTempRank) == 0x000050, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LTempRank' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LDodgeDir) == 0x000054, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LDodgeDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LDodgeDirList) == 0x000060, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LDodgeDirList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, LAttackData) == 0x000070, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::LAttackData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Loop_Num_Variable) == 0x000080, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Loop_Counter_Variable_1) == 0x000090, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Less_IntInt_ReturnValue) == 0x000094, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_IntInt_ReturnValue_1) == 0x000098, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Loop_Num_Variable_1) == 0x00009C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Loop_Counter_Variable_2) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_byte_Variable) == 0x0000AC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Array_Index_Variable_1) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, K2Node_SwitchEnum_CmpSuccess) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Array_Index_Variable_2) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Loop_Counter_Variable_3) == 0x0000BC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_bool_True_if_break_was_hit_Variable) == 0x0000C4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_int_Array_Index_Variable_3) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Not_PreBool_ReturnValue) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_bool_True_if_break_was_hit_Variable_1) == 0x0000CD, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000CE, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Get_Item) == 0x0000F4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Less_IntInt_ReturnValue_2) == 0x000104, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BooleanAND_ReturnValue) == 0x000105, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue) == 0x000108, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00010C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000118, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_1) == 0x000124, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_2) == 0x000128, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, K2Node_DynamicCast_AsPlayer_Interface) == 0x000130, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetPlayerID_ReturnValue) == 0x000141, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_CheckInAttackArea_bIn) == 0x000142, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_CheckInAttackArea_bIn' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x000144, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_3) == 0x000150, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Length_ReturnValue_1) == 0x00015C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_3) == 0x000160, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_4) == 0x000164, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000168, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, K2Node_SwitchEnum_CmpSuccess_1) == 0x000174, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_4) == 0x000178, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_5) == 0x000184, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_object_Variable) == 0x000190, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_LineTraceSingle_OutHit) == 0x0001A0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_LineTraceSingle_ReturnValue) == 0x000228, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Dot_VectorVector_ReturnValue) == 0x00022C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_bBlockingHit) == 0x000230, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_bInitialOverlap) == 0x000231, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Time) == 0x000234, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Distance) == 0x000238, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Location) == 0x00023C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_ImpactPoint) == 0x000248, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Normal) == 0x000254, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_ImpactNormal) == 0x000260, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_PhysMat) == 0x000270, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitActor) == 0x000278, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitComponent) == 0x000280, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitBoneName) == 0x000288, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitItem) == 0x000290, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_FaceIndex) == 0x000294, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_TraceStart) == 0x000298, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_TraceEnd) == 0x0002A4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0002B0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Length_ReturnValue_2) == 0x0002B4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetActorForwardVector_ReturnValue) == 0x0002B8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_6) == 0x0002C4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_7) == 0x0002D0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_5) == 0x0002DC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_6) == 0x0002E0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GreaterGreater_VectorRotator_ReturnValue_8) == 0x0002E4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GreaterGreater_VectorRotator_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_7) == 0x0002F0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_8) == 0x0002F4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0002F8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_9) == 0x000304, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000308, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000314, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000320, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x00032C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakVector_X) == 0x000330, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakVector_Y) == 0x000334, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakVector_Z) == 0x000338, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Less_FloatFloat_ReturnValue) == 0x00033C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_MakeVector_ReturnValue) == 0x000340, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Normal_ReturnValue) == 0x00034C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000358, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000360, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00036C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Get_Item_1) == 0x000378, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetLocationPriorityRank_outRank) == 0x000384, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetLocationPriorityRank_outRank' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetLocationPriorityRank_outLocation) == 0x000388, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetLocationPriorityRank_outLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetLocationPriorityRank_ReturnValue) == 0x000394, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetLocationPriorityRank_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000395, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Length_ReturnValue_3) == 0x000398, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Less_IntInt_ReturnValue_3) == 0x00039C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BooleanAND_ReturnValue_1) == 0x00039D, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_10) == 0x0003A0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_11) == 0x0003A4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Array_Add_ReturnValue_12) == 0x0003A8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Array_Add_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, Temp_object_Variable_1) == 0x0003B0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003C0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0003C4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0003D0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_LineTraceSingle_OutHit_1) == 0x0003DC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_LineTraceSingle_ReturnValue_1) == 0x000464, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000468, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, K2Node_DynamicCast_bSuccess_1) == 0x000478, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetNotifyAttackData_Data) == 0x00047C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetNotifyAttackData_Data' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_bBlockingHit_1) == 0x00048C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00048D, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Time_1) == 0x000490, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Distance_1) == 0x000494, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Location_1) == 0x000498, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0004A4, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_Normal_1) == 0x0004B0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0004BC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_PhysMat_1) == 0x0004C8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitActor_1) == 0x0004D0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitComponent_1) == 0x0004D8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitBoneName_1) == 0x0004E0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_HitItem_1) == 0x0004E8, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_FaceIndex_1) == 0x0004EC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_TraceStart_1) == 0x0004F0, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_BreakHitResult_TraceEnd_1) == 0x0004FC, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000508, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000514, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000520, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir, CallFunc_IsValid_ReturnValue) == 0x00052C, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcTargetEvaluate
// 0x0210 (0x0210 - 0x0000)
struct BP_PlayerAIComponent_C_CalcTargetEvaluate final
{
public:
	class ARSCharacterBase*                       EvaluateTarget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EvaluateValue;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTargeted;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LElementPlayer;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               LPlayerList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	struct FPlayerAIEvaluateTargetParameter       LEvaluateData;                                     // 0x0028(0x0048)(Edit, BlueprintVisible)
	float                                         LValue;                                            // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_692F[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6930[0x1];                                     // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6931[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6932[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBadStatusFlooded_bBadStatus;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6933[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater_1;    // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6934[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBadStatusOil_bBadStatus;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6935[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyStateFloating_IsFloating;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6936[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6937[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetLockOnTargetInterface_TargetActor;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6938[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0120(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6939[0x2];                                     // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_8;             // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1; // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693A[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetLockOnTargetInterface_TargetActor_1;   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693B[0x5];                                     // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater_2;    // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693C[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_9;             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHPPercent_Percent;                     // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693D[0x3];                                     // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerAIEvaluateTargetParameter       CallFunc_GetTargetEvaluateData_Data;               // 0x01A0(0x0048)()
	float                                         CallFunc_Add_FloatFloat_ReturnValue_10;            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_11;            // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_12;            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIBattleRange                                CallFunc_GetLocationRangeType_ReturnValue;         // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CalcTargetEvaluate) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CalcTargetEvaluate");
static_assert(sizeof(BP_PlayerAIComponent_C_CalcTargetEvaluate) == 0x000210, "Wrong size on BP_PlayerAIComponent_C_CalcTargetEvaluate");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, EvaluateTarget) == 0x000000, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::EvaluateTarget' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, EvaluateValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::EvaluateValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, bTargeted) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::bTargeted' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, LElementPlayer) == 0x000010, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::LElementPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, LPlayerList) == 0x000018, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::LPlayerList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, LEvaluateData) == 0x000028, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::LEvaluateData' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, LValue) == 0x000070, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::LValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, Temp_int_Array_Index_Variable) == 0x000080, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, Temp_byte_Variable) == 0x000084, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_SwitchEnum_CmpSuccess) == 0x000085, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsValid_ReturnValue_1) == 0x000086, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000090, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsBadStatusFlooded_bBadStatus) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsBadStatusFlooded_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsBPI_Character_Paramater_1) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsBPI_Character_Paramater_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000C4, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsBadStatusOil_bBadStatus) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsBadStatusOil_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, Temp_bool_True_if_break_was_hit_Variable) == 0x0000C9, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Not_PreBool_ReturnValue) == 0x0000CA, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsStealthMode_ReturnValue) == 0x0000CB, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess_2) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0000E4, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsEnemyStateFloating_IsFloating) == 0x0000E8, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsEnemyStateFloating_IsFloating' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0000EC, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0000F0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess_3) == 0x000100, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetLockOnTargetInterface_TargetActor) == 0x000108, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetLockOnTargetInterface_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000110, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000111, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetPlayerManager_PlayerManager) == 0x000118, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetPlayerList_ReturnValue) == 0x000120, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, Temp_int_Loop_Num_Variable) == 0x000130, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Less_IntInt_ReturnValue) == 0x000134, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_BooleanAND_ReturnValue) == 0x000135, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000138, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x00013C, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x000140, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_8) == 0x000144, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1) == 0x000148, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsBPI_Battle_Character_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess_4) == 0x000158, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetLockOnTargetInterface_TargetActor_1) == 0x000160, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetLockOnTargetInterface_TargetActor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsPlayer_Interface) == 0x000168, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess_5) == 0x000178, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetPlayerID_ReturnValue) == 0x000179, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_IsValid_ReturnValue_2) == 0x00017A, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_AsBPI_Character_Paramater_2) == 0x000180, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_AsBPI_Character_Paramater_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_DynamicCast_bSuccess_6) == 0x000190, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_9) == 0x000194, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetHPPercent_Percent) == 0x000198, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetHPPercent_Percent' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Less_FloatFloat_ReturnValue) == 0x00019C, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetTargetEvaluateData_Data) == 0x0001A0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetTargetEvaluateData_Data' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_10) == 0x0001E8, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_11) == 0x0001EC, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_Add_FloatFloat_ReturnValue_12) == 0x0001F0, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_Add_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001F4, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000200, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, CallFunc_GetLocationRangeType_ReturnValue) == 0x000208, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::CallFunc_GetLocationRangeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate, K2Node_SwitchEnum_CmpSuccess_1) == 0x000209, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Calc Distance Target Evaluate
// 0x0044 (0x0044 - 0x0000)
struct BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EvaluateValue;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_DISTANCE_VALUE;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LValue;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcDistanceTargetEvaluateCPP_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate");
static_assert(sizeof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate) == 0x000044, "Wrong size on BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, TargetLocation) == 0x000000, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, EvaluateValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::EvaluateValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, MAX_DISTANCE_VALUE) == 0x000010, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::MAX_DISTANCE_VALUE' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, LValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::LValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_CalcDistanceTargetEvaluateCPP_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_CalcDistanceTargetEvaluateCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_VSizeXY_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyResetBehaviorTree
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_NotifyResetBehaviorTree final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_NotifyResetBehaviorTree) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_NotifyResetBehaviorTree");
static_assert(sizeof(BP_PlayerAIComponent_C_NotifyResetBehaviorTree) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_NotifyResetBehaviorTree");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyResetBehaviorTree, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_NotifyResetBehaviorTree::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckMovePos
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_CheckMovePos final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbReset;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckMovePosCPP_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6940[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckMovePos) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_CheckMovePos");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckMovePos) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_CheckMovePos");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, bReset) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckMovePos::bReset' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, LbReset) == 0x000001, "Member 'BP_PlayerAIComponent_C_CheckMovePos::LbReset' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_CheckMovePosCPP_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_CheckMovePosCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_PlayerAIComponent_C_CheckMovePos::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMovePos, CallFunc_CheckDistance_bResult) == 0x00001D, "Member 'BP_PlayerAIComponent_C_CheckMovePos::CallFunc_CheckDistance_bResult' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckPsychicObject
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_CheckPsychicObject final
{
public:
	bool                                          bCapture;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAttack;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOK;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPsychicObjectCPP_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6941[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_CheckAIPsychicObject_self_CastInput;      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAIPsychicObject_bOK;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckPsychicObject) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CheckPsychicObject");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckPsychicObject) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_CheckPsychicObject");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, bCapture) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::bCapture' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, bAttack) == 0x000001, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::bAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, bOK) == 0x000002, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, CallFunc_CheckPsychicObjectCPP_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::CallFunc_CheckPsychicObjectCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, CallFunc_CheckAIPsychicObject_self_CastInput) == 0x000008, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::CallFunc_CheckAIPsychicObject_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckPsychicObject, CallFunc_CheckAIPsychicObject_bOK) == 0x000018, "Member 'BP_PlayerAIComponent_C_CheckPsychicObject::CallFunc_CheckAIPsychicObject_bOK' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsPsychicAble
// 0x003A (0x003A - 0x0000)
struct BP_PlayerAIComponent_C_IsPsychicAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      Temp_byte_Variable;                                // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPsychicAbleCPP_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionPsychic_bEnable;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsPsychicAble) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsPsychicAble");
static_assert(sizeof(BP_PlayerAIComponent_C_IsPsychicAble) == 0x00003A, "Wrong size on BP_PlayerAIComponent_C_IsPsychicAble");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, bEnable) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_1) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_2) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_3) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_4) == 0x000005, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_5) == 0x000006, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_6) == 0x000007, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_7) == 0x000008, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_8) == 0x000009, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_9) == 0x00000A, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_10) == 0x00000B, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_11) == 0x00000C, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_12) == 0x00000D, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_13) == 0x00000E, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_14) == 0x00000F, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_15) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_16) == 0x000011, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_17) == 0x000012, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_18) == 0x000013, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_19) == 0x000014, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_20) == 0x000015, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_21) == 0x000016, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_22) == 0x000017, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_23) == 0x000018, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_24) == 0x000019, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_25) == 0x00001A, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_26) == 0x00001B, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_27) == 0x00001C, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_28) == 0x00001D, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_29) == 0x00001E, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_30) == 0x00001F, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_31) == 0x000020, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_32) == 0x000021, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_33) == 0x000022, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_34) == 0x000023, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_35) == 0x000024, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_36) == 0x000025, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_37) == 0x000026, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_38) == 0x000027, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_39) == 0x000028, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_40) == 0x000029, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_41) == 0x00002A, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_42) == 0x00002B, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_43) == 0x00002C, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_44) == 0x00002D, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_45) == 0x00002E, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_46) == 0x00002F, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_47) == 0x000030, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_48) == 0x000031, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_bool_Variable_49) == 0x000032, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, Temp_byte_Variable) == 0x000033, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, CallFunc_IsPsychicAbleCPP_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::CallFunc_IsPsychicAbleCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, CallFunc_BooleanAND_ReturnValue) == 0x000035, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000036, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, K2Node_Select_Default) == 0x000037, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicAble, CallFunc_IsEnableActionPsychic_bEnable) == 0x000039, "Member 'BP_PlayerAIComponent_C_IsPsychicAble::CallFunc_IsEnableActionPsychic_bEnable' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckMoveWall
// 0x04D8 (0x04D8 - 0x0000)
struct BP_PlayerAIComponent_C_CheckMoveWall final
{
public:
	EPlayerAIMoveWallCPP                          Wall;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6942[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveWallCPP                          LTypeCPP;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6943[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LOutLocation;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LJumpTargetLocation;                               // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LWallUpDir;                                        // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LWallNormal;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LWallLocation;                                     // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LCheckStartLocation;                               // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LMoveDir;                                          // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0068(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	EPlayerAIMoveWallCPP                          CallFunc_CheckMoveWallCPP_OutWall;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6944[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CheckMoveWallCPP_OutLocation;             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6945[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0098(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6946[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x0148(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetWalkableFloorAngle_ReturnValue;     // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0170(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6947[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0184(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x020E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6948[0x1];                                     // 0x020F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0258(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x02B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x02C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6949[0x3];                                     // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x0360(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_2;       // 0x0370(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_2;  // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_694A[0x3];                                     // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0401(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_694B[0x2];                                     // 0x0402(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_694C[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0450(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue_1;                     // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_694D[0x3];                                     // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UASCharacterMovementComponent*          K2Node_DynamicCast_AsASCharacter_Movement_Component; // 0x0488(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_694E[0x3];                                     // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcInputWorldVector_ReturnValue;         // 0x0494(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLastNavMoveVelocity_ReturnValue;       // 0x04A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x04B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_694F[0x3];                                     // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x04C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckMoveWall) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CheckMoveWall");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckMoveWall) == 0x0004D8, "Wrong size on BP_PlayerAIComponent_C_CheckMoveWall");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, Wall) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::Wall' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, Location) == 0x000004, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LTypeCPP) == 0x000010, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LTypeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LOutLocation) == 0x000014, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LOutLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LJumpTargetLocation) == 0x000020, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LJumpTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LWallUpDir) == 0x00002C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LWallUpDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LWallNormal) == 0x000038, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LWallNormal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LWallLocation) == 0x000044, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LWallLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LCheckStartLocation) == 0x000050, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LCheckStartLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, LMoveDir) == 0x00005C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::LMoveDir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, Temp_object_Variable) == 0x000068, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_CheckMoveWallCPP_OutWall) == 0x000078, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_CheckMoveWallCPP_OutWall' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_CheckMoveWallCPP_OutLocation) == 0x00007C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_CheckMoveWallCPP_OutLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000088, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_MakeVector_ReturnValue) == 0x00008C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, Temp_object_Variable_1) == 0x000098, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BooleanAND_ReturnValue) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Add_VectorVector_ReturnValue) == 0x0000AC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_X) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_Y) == 0x0000BC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_Z) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_X_1) == 0x0000C4, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_Y_1) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_Z_1) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_MakeVector_ReturnValue_1) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_MakeVector_ReturnValue_2) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000F4, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000100, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x00010C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000118, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000124, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_MakeVector_ReturnValue_3) == 0x000130, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Cross_VectorVector_ReturnValue) == 0x00013C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, Temp_object_Variable_2) == 0x000148, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000158, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_K2_GetWalkableFloorAngle_ReturnValue) == 0x000164, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_K2_GetWalkableFloorAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Dot_VectorVector_ReturnValue) == 0x000168, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_DegCos_ReturnValue) == 0x00016C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, K2Node_MakeArray_Array) == 0x000170, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Less_FloatFloat_ReturnValue) == 0x000180, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000184, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x00020C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_bBlockingHit) == 0x00020D, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_bInitialOverlap) == 0x00020E, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Time) == 0x000210, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Distance) == 0x000214, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Location) == 0x000218, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_ImpactPoint) == 0x000224, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Normal) == 0x000230, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_ImpactNormal) == 0x00023C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_PhysMat) == 0x000248, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitActor) == 0x000250, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitComponent) == 0x000258, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitBoneName) == 0x000260, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitItem) == 0x000268, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_FaceIndex) == 0x00026C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_TraceStart) == 0x000270, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_TraceEnd) == 0x00027C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000288, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000294, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0002A0, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0002AC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, K2Node_MakeArray_Array_1) == 0x0002B8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x0002C8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x000350, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_GetActorForwardVector_ReturnValue) == 0x000354, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, K2Node_MakeArray_Array_2) == 0x000360, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_LineTraceSingleForObjects_OutHit_2) == 0x000370, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_LineTraceSingleForObjects_OutHit_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_LineTraceSingleForObjects_ReturnValue_2) == 0x0003F8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_LineTraceSingleForObjects_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0003FC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000400, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000401, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Time_1) == 0x000404, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Distance_1) == 0x000408, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Location_1) == 0x00040C, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000418, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_Normal_1) == 0x000424, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000430, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_PhysMat_1) == 0x000440, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitActor_1) == 0x000448, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitComponent_1) == 0x000450, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitBoneName_1) == 0x000458, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_HitItem_1) == 0x000460, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_FaceIndex_1) == 0x000464, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_TraceStart_1) == 0x000468, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakHitResult_TraceEnd_1) == 0x000474, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_DegCos_ReturnValue_1) == 0x000480, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_DegCos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000484, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, K2Node_DynamicCast_AsASCharacter_Movement_Component) == 0x000488, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::K2Node_DynamicCast_AsASCharacter_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, K2Node_DynamicCast_bSuccess) == 0x000490, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_CalcInputWorldVector_ReturnValue) == 0x000494, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_CalcInputWorldVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_GetLastNavMoveVelocity_ReturnValue) == 0x0004A0, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_GetLastNavMoveVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_X_2) == 0x0004AC, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_Y_2) == 0x0004B0, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_BreakVector_Z_2) == 0x0004B4, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_MakeVector_ReturnValue_4) == 0x0004B8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_IsPlayerStatus_Result) == 0x0004C4, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckMoveWall, CallFunc_Normal_ReturnValue) == 0x0004C8, "Member 'BP_PlayerAIComponent_C_CheckMoveWall::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetMoveStickBack
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAIComponent_C_SetMoveStickBack final
{
public:
	bool                                          bBack;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetMoveStickBack) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetMoveStickBack");
static_assert(sizeof(BP_PlayerAIComponent_C_SetMoveStickBack) == 0x000002, "Wrong size on BP_PlayerAIComponent_C_SetMoveStickBack");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveStickBack, bBack) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetMoveStickBack::bBack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetMoveStickBack, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetMoveStickBack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EndEventMove
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerAIComponent_C_EndEventMove final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6950[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_SetPlayerInputRestriction_self_CastInput; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerInputRestriction_bDummy;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6951[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  CallFunc_RestoreMaxSpeed_self_CastInput;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RestoreMaxSpeed_Result;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_EndEventMove) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_EndEventMove");
static_assert(sizeof(BP_PlayerAIComponent_C_EndEventMove) == 0x000038, "Wrong size on BP_PlayerAIComponent_C_EndEventMove");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_SetPlayerInputRestriction_self_CastInput) == 0x000008, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_SetPlayerInputRestriction_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_SetPlayerInputRestriction_bDummy) == 0x000018, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_SetPlayerInputRestriction_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_IsPlayerStatus_Result) == 0x00001A, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_RestoreMaxSpeed_self_CastInput) == 0x000020, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_RestoreMaxSpeed_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEventMove, CallFunc_RestoreMaxSpeed_Result) == 0x000030, "Member 'BP_PlayerAIComponent_C_EndEventMove::CallFunc_RestoreMaxSpeed_Result' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.On Event Start
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_On_Event_Start final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_On_Event_Start) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_On_Event_Start");
static_assert(sizeof(BP_PlayerAIComponent_C_On_Event_Start) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_On_Event_Start");
static_assert(offsetof(BP_PlayerAIComponent_C_On_Event_Start, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_On_Event_Start::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsPsychicComboThink
// 0x0037 (0x0037 - 0x0000)
struct BP_PlayerAIComponent_C_IsPsychicComboThink final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkTypeCPP                   Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPsychicComboThinkCPP_ReturnValue;       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsPsychicComboThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsPsychicComboThink");
static_assert(sizeof(BP_PlayerAIComponent_C_IsPsychicComboThink) == 0x000037, "Wrong size on BP_PlayerAIComponent_C_IsPsychicComboThink");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, bResult) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_byte_Variable) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_1) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_2) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_3) == 0x000005, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_4) == 0x000006, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_5) == 0x000007, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_6) == 0x000008, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_7) == 0x000009, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_8) == 0x00000A, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_9) == 0x00000B, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_10) == 0x00000C, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_11) == 0x00000D, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_12) == 0x00000E, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_13) == 0x00000F, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_14) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_15) == 0x000011, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_16) == 0x000012, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_17) == 0x000013, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_18) == 0x000014, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_19) == 0x000015, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_20) == 0x000016, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_21) == 0x000017, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_22) == 0x000018, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_23) == 0x000019, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_24) == 0x00001A, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_25) == 0x00001B, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_26) == 0x00001C, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_27) == 0x00001D, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_28) == 0x00001E, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_29) == 0x00001F, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_30) == 0x000020, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_31) == 0x000021, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_32) == 0x000022, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_33) == 0x000023, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_34) == 0x000024, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_35) == 0x000025, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_36) == 0x000026, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_37) == 0x000027, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_38) == 0x000028, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_39) == 0x000029, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_40) == 0x00002A, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_41) == 0x00002B, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_42) == 0x00002C, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_43) == 0x00002D, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_44) == 0x00002E, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_45) == 0x00002F, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_46) == 0x000030, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_47) == 0x000031, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_48) == 0x000032, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, Temp_bool_Variable_49) == 0x000033, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, CallFunc_IsPsychicComboThinkCPP_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::CallFunc_IsPsychicComboThinkCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, CallFunc_BooleanAND_ReturnValue) == 0x000035, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsPsychicComboThink, K2Node_Select_Default) == 0x000036, "Member 'BP_PlayerAIComponent_C_IsPsychicComboThink::K2Node_Select_Default' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetEventWait
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAIComponent_C_SetEventWait final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetEventWait) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetEventWait");
static_assert(sizeof(BP_PlayerAIComponent_C_SetEventWait) == 0x000002, "Wrong size on BP_PlayerAIComponent_C_SetEventWait");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventWait, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetEventWait::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetEventWait, CallFunc_IsControlAI_bAI) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetEventWait::CallFunc_IsControlAI_bAI' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.End Event Wait
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_End_Event_Wait final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_End_Event_Wait) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_End_Event_Wait");
static_assert(sizeof(BP_PlayerAIComponent_C_End_Event_Wait) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_End_Event_Wait");
static_assert(offsetof(BP_PlayerAIComponent_C_End_Event_Wait, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_End_Event_Wait::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ChangeThinkTableType
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerAIComponent_C_ChangeThinkTableType final
{
public:
	EPlayerAIThinkTableType                       ThinkTableType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResetThink;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIThinkTableTypeCPP                    CallFunc_ConvertEnumBPtoCPP_PlayerAIThinkTableType_CPPEnum; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIThinkTableTypeCPP                    CallFunc_ConvertEnumBPtoCPP_PlayerAIThinkTableType_CPPEnum_1; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_ChangeThinkTableType) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_ChangeThinkTableType");
static_assert(sizeof(BP_PlayerAIComponent_C_ChangeThinkTableType) == 0x000005, "Wrong size on BP_PlayerAIComponent_C_ChangeThinkTableType");
static_assert(offsetof(BP_PlayerAIComponent_C_ChangeThinkTableType, ThinkTableType) == 0x000000, "Member 'BP_PlayerAIComponent_C_ChangeThinkTableType::ThinkTableType' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ChangeThinkTableType, bResetThink) == 0x000001, "Member 'BP_PlayerAIComponent_C_ChangeThinkTableType::bResetThink' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ChangeThinkTableType, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_ChangeThinkTableType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ChangeThinkTableType, CallFunc_ConvertEnumBPtoCPP_PlayerAIThinkTableType_CPPEnum) == 0x000003, "Member 'BP_PlayerAIComponent_C_ChangeThinkTableType::CallFunc_ConvertEnumBPtoCPP_PlayerAIThinkTableType_CPPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ChangeThinkTableType, CallFunc_ConvertEnumBPtoCPP_PlayerAIThinkTableType_CPPEnum_1) == 0x000004, "Member 'BP_PlayerAIComponent_C_ChangeThinkTableType::CallFunc_ConvertEnumBPtoCPP_PlayerAIThinkTableType_CPPEnum_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ResetSelfRecoveryData
// 0x0078 (0x0078 - 0x0000)
struct BP_PlayerAIComponent_C_ResetSelfRecoveryData final
{
public:
	struct FSNpcSelfRecoveryData                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6952[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSNpcSelfRecoveryData                  CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6953[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSNpcSelfRecoveryData                  CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6954[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSNpcSelfRecoveryData                  CallFunc_GetDataTableRowFromName_OutRow_3;         // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_3;    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6955[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSNpcSelfRecoveryData                  CallFunc_GetDataTableRowFromName_OutRow_4;         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_4;    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6956[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSNpcSelfRecoveryData                  CallFunc_GetDataTableRowFromName_OutRow_5;         // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_5;    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6957[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_ResetSelfRecoveryData) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_ResetSelfRecoveryData");
static_assert(sizeof(BP_PlayerAIComponent_C_ResetSelfRecoveryData) == 0x000078, "Wrong size on BP_PlayerAIComponent_C_ResetSelfRecoveryData");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000000, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000010, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x000020, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x00002C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_OutRow_3) == 0x000030, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_OutRow_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_ReturnValue_3) == 0x00003C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_OutRow_4) == 0x000040, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_OutRow_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_ReturnValue_4) == 0x00004C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_Array_Add_ReturnValue_1) == 0x000054, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_Array_Add_ReturnValue_2) == 0x000058, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_OutRow_5) == 0x00005C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_OutRow_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_GetDataTableRowFromName_ReturnValue_5) == 0x000068, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_GetDataTableRowFromName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_Array_Add_ReturnValue_3) == 0x00006C, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_Array_Add_ReturnValue_4) == 0x000070, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ResetSelfRecoveryData, CallFunc_Array_Add_ReturnValue_5) == 0x000074, "Member 'BP_PlayerAIComponent_C_ResetSelfRecoveryData::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetFinishMetamorphosis
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_SetFinishMetamorphosis final
{
public:
	bool                                          bFinish;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetFinishMetamorphosisCPP_ReturnValue;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetFinishMetamorphosis) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetFinishMetamorphosis");
static_assert(sizeof(BP_PlayerAIComponent_C_SetFinishMetamorphosis) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_SetFinishMetamorphosis");
static_assert(offsetof(BP_PlayerAIComponent_C_SetFinishMetamorphosis, bFinish) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetFinishMetamorphosis::bFinish' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetFinishMetamorphosis, Dummy) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetFinishMetamorphosis::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetFinishMetamorphosis, CallFunc_SetFinishMetamorphosisCPP_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_SetFinishMetamorphosis::CallFunc_SetFinishMetamorphosisCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetFinishMetamorphosis, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_SetFinishMetamorphosis::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetThinkPhaseTransition
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerAIComponent_C_SetThinkPhaseTransition final
{
public:
	int32                                         NewPhase;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetThinkPhaseTransitionCPP_ReturnValue;   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetThinkPhaseTransition) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_SetThinkPhaseTransition");
static_assert(sizeof(BP_PlayerAIComponent_C_SetThinkPhaseTransition) == 0x000008, "Wrong size on BP_PlayerAIComponent_C_SetThinkPhaseTransition");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkPhaseTransition, NewPhase) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetThinkPhaseTransition::NewPhase' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkPhaseTransition, Dummy) == 0x000004, "Member 'BP_PlayerAIComponent_C_SetThinkPhaseTransition::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkPhaseTransition, CallFunc_SetThinkPhaseTransitionCPP_ReturnValue) == 0x000005, "Member 'BP_PlayerAIComponent_C_SetThinkPhaseTransition::CallFunc_SetThinkPhaseTransitionCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetThinkPhaseTransition, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_PlayerAIComponent_C_SetThinkPhaseTransition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetDisableChangeTargetResetThink
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink final
{
public:
	bool                                          InDisable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink");
static_assert(sizeof(BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink) == 0x000002, "Wrong size on BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink");
static_assert(offsetof(BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink, InDisable) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink::InDisable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetInvalidKeepOut
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAIComponent_C_SetInvalidKeepOut final
{
public:
	bool                                          IsInvalid;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetInvalidKeepOut) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetInvalidKeepOut");
static_assert(sizeof(BP_PlayerAIComponent_C_SetInvalidKeepOut) == 0x000002, "Wrong size on BP_PlayerAIComponent_C_SetInvalidKeepOut");
static_assert(offsetof(BP_PlayerAIComponent_C_SetInvalidKeepOut, IsInvalid) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetInvalidKeepOut::IsInvalid' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetInvalidKeepOut, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetInvalidKeepOut::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RestartBattleAI
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerAIComponent_C_RestartBattleAI final
{
public:
	bool                                          bInEvent;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInAvatar;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbPreBattleActionStartFlag;                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6958[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInvokeBrainField_InvokeBrainField;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6959[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetActiveSpTrigger_bActiveSpTrigger;      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpTriggerAll_IsSpTrigger;               // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattlefieldManager_C*               CallFunc_GetBattlefieldManager_BP_BattlefieldManager; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695C[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyFenceEnabled_ReturnValue;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_RestartBattleAI) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_RestartBattleAI");
static_assert(sizeof(BP_PlayerAIComponent_C_RestartBattleAI) == 0x000068, "Wrong size on BP_PlayerAIComponent_C_RestartBattleAI");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, bInEvent) == 0x000000, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::bInEvent' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, bInAvatar) == 0x000001, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::bInAvatar' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, LbPreBattleActionStartFlag) == 0x000002, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::LbPreBattleActionStartFlag' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_GetBrainFieldManager_Manager) == 0x000008, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsInvokeBrainField_InvokeBrainField) == 0x000010, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsInvokeBrainField_InvokeBrainField' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000018, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_GetEnpcComp_ReturnComp) == 0x000030, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_GetActiveSpTrigger_bActiveSpTrigger) == 0x00003A, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_GetActiveSpTrigger_bActiveSpTrigger' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsSpTriggerAll_IsSpTrigger) == 0x00003B, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsSpTriggerAll_IsSpTrigger' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_GetBattlefieldManager_BP_BattlefieldManager) == 0x000040, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_GetBattlefieldManager_BP_BattlefieldManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000050, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000060, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI, CallFunc_IsAnyFenceEnabled_ReturnValue) == 0x000061, "Member 'BP_PlayerAIComponent_C_RestartBattleAI::CallFunc_IsAnyFenceEnabled_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsBattleActionStart
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_IsBattleActionStart final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleActionStartCPP_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsBattleActionStart) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsBattleActionStart");
static_assert(sizeof(BP_PlayerAIComponent_C_IsBattleActionStart) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_IsBattleActionStart");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleActionStart, bStart) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsBattleActionStart::bStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleActionStart, CallFunc_IsBattleActionStartCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsBattleActionStart::CallFunc_IsBattleActionStartCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleActionStart, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsBattleActionStart::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update Check Battle Action Start
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start final
{
public:
	bool                                          bActionStart;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LbStart;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LMainPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateCheckBattleActionStartCPP_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpperActionStatus_bResult_1;            // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695E[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start");
static_assert(sizeof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start) == 0x000028, "Wrong size on BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, bActionStart) == 0x000000, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::bActionStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, LbStart) == 0x000001, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::LbStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, LMainPlayer) == 0x000008, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::LMainPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_UpdateCheckBattleActionStartCPP_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_UpdateCheckBattleActionStartCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_IsUpperActionStatus_bResult) == 0x000012, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_IsUpperActionStatus_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_IsUpperActionStatus_bResult_1) == 0x000013, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_IsUpperActionStatus_bResult_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_IsActionStatus_Result) == 0x000014, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start, CallFunc_GetMainPlayer_Player) == 0x000020, "Member 'BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start::CallFunc_GetMainPlayer_Player' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyMoveBrainField
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAIComponent_C_NotifyMoveBrainField final
{
public:
	bool                                          bToBrainField;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_695F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIEvaluateLocationComponent*     CallFunc_GetEvaluateLocation_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_NotifyMoveBrainField) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_NotifyMoveBrainField");
static_assert(sizeof(BP_PlayerAIComponent_C_NotifyMoveBrainField) == 0x000018, "Wrong size on BP_PlayerAIComponent_C_NotifyMoveBrainField");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyMoveBrainField, bToBrainField) == 0x000000, "Member 'BP_PlayerAIComponent_C_NotifyMoveBrainField::bToBrainField' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyMoveBrainField, CallFunc_GetEvaluateLocation_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_NotifyMoveBrainField::CallFunc_GetEvaluateLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_NotifyMoveBrainField, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_NotifyMoveBrainField::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleThink_CPPType
// 0x0098 (0x0098 - 0x0000)
struct BP_PlayerAIComponent_C_SetBattleThink_CPPType final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ActionCPP;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  ParamCPP;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6960[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LUniqueID;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   LNewThinkTypeCPP;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6961[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LTargetDist;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   LPrevThinkTypeCPP;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6962[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIMoveModeCPP                          Temp_byte_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6963[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_1; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6964[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_2; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_3; // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          Temp_byte_Variable_2;                              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          Temp_byte_Variable_3;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          Temp_byte_Variable_4;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6965[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_OnChangeBattleThink_self_CastInput;       // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnChangeBattleThink_bDummy;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIMoveModeCPP                          Temp_byte_Variable_5;                              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6966[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_GetCurrentThinkTable_Table;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPlayerAIBattleThinkData              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0078(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIMoveModeCPP                          Temp_byte_Variable_6;                              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          K2Node_Select_Default;                             // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetBattleThink_CPPType) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SetBattleThink_CPPType");
static_assert(sizeof(BP_PlayerAIComponent_C_SetBattleThink_CPPType) == 0x000098, "Wrong size on BP_PlayerAIComponent_C_SetBattleThink_CPPType");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, ActionCPP) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::ActionCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, ParamCPP) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::ParamCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, LUniqueID) == 0x000004, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::LUniqueID' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, LNewThinkTypeCPP) == 0x000008, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::LNewThinkTypeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, LTargetDist) == 0x00000C, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::LTargetDist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, LPrevThinkTypeCPP) == 0x000010, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::LPrevThinkTypeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable) == 0x000011, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_GetId_ReturnValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable_1) == 0x000019, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x00001C, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000020, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_1) == 0x000030, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_Conv_StringToName_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_2) == 0x000040, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_3) == 0x000041, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable_2) == 0x000042, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable_3) == 0x000043, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_GetActorForwardVector_ReturnValue) == 0x000044, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable_4) == 0x000050, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_OnChangeBattleThink_self_CastInput) == 0x000058, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_OnChangeBattleThink_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_OnChangeBattleThink_bDummy) == 0x000068, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_OnChangeBattleThink_bDummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable_5) == 0x000069, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_GetCurrentThinkTable_Table) == 0x000070, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_GetCurrentThinkTable_Table' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_GetDataTableRowFromName_OutRow) == 0x000078, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000090, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, Temp_byte_Variable_6) == 0x000091, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, K2Node_Select_Default) == 0x000092, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000093, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000094, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000095, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000096, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CPPType, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000097, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CPPType::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReserveNextThink_CPPType
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_ReserveNextThink_CPPType final
{
public:
	EPlayerAIBattleThinkTypeCPP                   ThinkTypeCPP;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  ParamCPP;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_ReserveNextThink_CPPType) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_ReserveNextThink_CPPType");
static_assert(sizeof(BP_PlayerAIComponent_C_ReserveNextThink_CPPType) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_ReserveNextThink_CPPType");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink_CPPType, ThinkTypeCPP) == 0x000000, "Member 'BP_PlayerAIComponent_C_ReserveNextThink_CPPType::ThinkTypeCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink_CPPType, ParamCPP) == 0x000001, "Member 'BP_PlayerAIComponent_C_ReserveNextThink_CPPType::ParamCPP' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_ReserveNextThink_CPPType, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_ReserveNextThink_CPPType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetStealthThink_CPPType
// 0x0024 (0x0024 - 0x0000)
struct BP_PlayerAIComponent_C_GetStealthThink_CPPType final
{
public:
	EPlayerAIBattleThinkTypeCPP                   Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_GetStealthThinkCPP_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6967[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetStealthThink_CPPType) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_GetStealthThink_CPPType");
static_assert(sizeof(BP_PlayerAIComponent_C_GetStealthThink_CPPType) == 0x000024, "Wrong size on BP_PlayerAIComponent_C_GetStealthThink_CPPType");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, Return) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, Temp_bool_True_if_break_was_hit_Variable) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_GetStealthThinkCPP_ReturnValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_GetStealthThinkCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_Less_IntInt_ReturnValue) == 0x000015, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_BooleanAND_ReturnValue_1) == 0x000016, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_RandomInteger_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetStealthThink_CPPType, CallFunc_Less_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_PlayerAIComponent_C_GetStealthThink_CPPType::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.BeginEvaluateLocation_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.BindCheckBattleActionStart_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UnbindCheckBattleActionStart_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RestartBattleAI_CallFromCPP
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP final
{
public:
	bool                                          bInEvent;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP) == 0x000002, "Wrong size on BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP, bInEvent) == 0x000000, "Member 'BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP::bInEvent' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP, ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckInAttackArea_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP final
{
public:
	struct FVector                                CheckLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckInAttackArea_bIn;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP) == 0x000010, "Wrong size on BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP, CheckLocation) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP::CheckLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP, ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP, CallFunc_CheckInAttackArea_bIn) == 0x00000D, "Member 'BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP::CallFunc_CheckInAttackArea_bIn' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EndEvaluateLocation_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckBattleThinkTransition_CallFromCPP
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP final
{
public:
	EPlayerAIBattleThinkTransitionCPP             Transition;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkTransition                CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkTransition_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBattleThinkTransition_bOK;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP, Transition) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP::Transition' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP, ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkTransition_BPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkTransition_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP, CallFunc_CheckBattleThinkTransition_bOK) == 0x000003, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP::CallFunc_CheckBattleThinkTransition_bOK' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DebugUpdate_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NextBattleThink_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleThink_CallFromCPP
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP final
{
public:
	EPlayerAIBattleThinkTypeCPP                   Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  Param;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP, Action) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP::Action' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP, Param) == 0x000001, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP::Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP, ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateBattleDodgeDir_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodgeBattle_Enpc_BPImplement
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement final
{
public:
	bool                                          bOK;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutDodgeNormalAttack;                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutDodgeRangeAttack;                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutForceDodge;                                     // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6968[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6969[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPossibleDodgeNormalAttack_bPossible;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPossibleDodgeNormalAttack_bForceDodge;  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDodgeRangeAttack_bEnable;         // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement");
static_assert(sizeof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement) == 0x000030, "Wrong size on BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, bOK) == 0x000000, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, OutDodgeNormalAttack) == 0x000001, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::OutDodgeNormalAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, OutDodgeRangeAttack) == 0x000002, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::OutDodgeRangeAttack' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, OutForceDodge) == 0x000003, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::OutForceDodge' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000008, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, CallFunc_GetEnpcComp_ReturnComp) == 0x000020, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, CallFunc_IsPossibleDodgeNormalAttack_bPossible) == 0x000028, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::CallFunc_IsPossibleDodgeNormalAttack_bPossible' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, CallFunc_IsPossibleDodgeNormalAttack_bForceDodge) == 0x000029, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::CallFunc_IsPossibleDodgeNormalAttack_bForceDodge' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement, CallFunc_IsEnableDodgeRangeAttack_bEnable) == 0x00002B, "Member 'BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement::CallFunc_IsEnableDodgeRangeAttack_bEnable' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.PreUpdateCPP_RangeAttack_BPImplement
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_696A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_696B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnemyPlayer_self_CastInput;             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDodgeRangeAttack_bEnable;         // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_696C[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitManager_C*                          CallFunc_GetHitManager_Manager_1;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement");
static_assert(sizeof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement) == 0x000050, "Wrong size on BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_GetHitManager_Manager) == 0x000008, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_GetHitManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000010, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_GetEnpcComp_ReturnComp) == 0x000028, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_IsEnemyPlayer_self_CastInput) == 0x000030, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_IsEnemyPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x000040, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_IsEnableDodgeRangeAttack_bEnable) == 0x000042, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_IsEnableDodgeRangeAttack_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement, CallFunc_GetHitManager_Manager_1) == 0x000048, "Member 'BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement::CallFunc_GetHitManager_Manager_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetupUseItem_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckSelfRecoveryCallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RunBehaviorTree
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_RunBehaviorTree final
{
public:
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_696D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIC_Player_C*                          K2Node_DynamicCast_AsAIC_Player;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_RunBehaviorTree) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_RunBehaviorTree");
static_assert(sizeof(BP_PlayerAIComponent_C_RunBehaviorTree) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_RunBehaviorTree");
static_assert(offsetof(BP_PlayerAIComponent_C_RunBehaviorTree, CallFunc_GetAIController_ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_RunBehaviorTree::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RunBehaviorTree, CallFunc_IsControlAI_bAI) == 0x000008, "Member 'BP_PlayerAIComponent_C_RunBehaviorTree::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RunBehaviorTree, K2Node_DynamicCast_AsAIC_Player) == 0x000010, "Member 'BP_PlayerAIComponent_C_RunBehaviorTree::K2Node_DynamicCast_AsAIC_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_RunBehaviorTree, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerAIComponent_C_RunBehaviorTree::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcTargetEvaluate_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP final
{
public:
	class ARSCharacterBase*                       EvaluateTarget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcTargetEvaluate_EvaluateValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP) == 0x000010, "Wrong size on BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP, EvaluateTarget) == 0x000000, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP::EvaluateTarget' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP, ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP, CallFunc_CalcTargetEvaluate_EvaluateValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP::CallFunc_CalcTargetEvaluate_EvaluateValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckSelfRecovery_CallFromCPP
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP::ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCollisionObjectTypesForGroundHit_CallFromCPP
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP final
{
public:
	TArray<EObjectTypeQuery>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetMoveMode
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetMoveMode final
{
public:
	EPlayerAIMoveMode                             MoveMode;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          CallFunc_GetMoveMode_CPPType_MoveMode;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveMode                             CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetMoveMode) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetMoveMode");
static_assert(sizeof(BP_PlayerAIComponent_C_GetMoveMode) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetMoveMode");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMoveMode, MoveMode) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetMoveMode::MoveMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMoveMode, CallFunc_GetMoveMode_CPPType_MoveMode) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetMoveMode::CallFunc_GetMoveMode_CPPType_MoveMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMoveMode, CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetMoveMode::CallFunc_ConvertEnumCPPtoBP_PlayerAIMoveMode_BPEnum' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsUpdate
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAIComponent_C_IsUpdate final
{
public:
	bool                                          bUpdate;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpdateCPP_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_696E[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_GetCurrentThinkTable_Table;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsUpdate) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_IsUpdate");
static_assert(sizeof(BP_PlayerAIComponent_C_IsUpdate) == 0x000018, "Wrong size on BP_PlayerAIComponent_C_IsUpdate");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, bUpdate) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsUpdate::bUpdate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_IsUpdateCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_IsUpdateCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_GetCurrentThinkTable_Table) == 0x000008, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_GetCurrentThinkTable_Table' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_IsControlAI_bAI) == 0x000012, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsUpdate, CallFunc_IsValid_ReturnValue_2) == 0x000013, "Member 'BP_PlayerAIComponent_C_IsUpdate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetControlPlayerDist
// 0x001C (0x001C - 0x0000)
struct BP_PlayerAIComponent_C_GetControlPlayerDist final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlPlayerDistCPP_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetControlPlayerDist) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_GetControlPlayerDist");
static_assert(sizeof(BP_PlayerAIComponent_C_GetControlPlayerDist) == 0x00001C, "Wrong size on BP_PlayerAIComponent_C_GetControlPlayerDist");
static_assert(offsetof(BP_PlayerAIComponent_C_GetControlPlayerDist, Dist) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetControlPlayerDist::Dist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetControlPlayerDist, CallFunc_GetControlPlayerDistCPP_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_GetControlPlayerDist::CallFunc_GetControlPlayerDistCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetControlPlayerDist, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_GetControlPlayerDist::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetMoveMode_CPPType
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetMoveMode_CPPType final
{
public:
	EPlayerAIMoveModeCPP                          MoveMode;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIMoveModeCPP                          CallFunc_GetMoveModeCPP_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetMoveMode_CPPType) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetMoveMode_CPPType");
static_assert(sizeof(BP_PlayerAIComponent_C_GetMoveMode_CPPType) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetMoveMode_CPPType");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMoveMode_CPPType, MoveMode) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetMoveMode_CPPType::MoveMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMoveMode_CPPType, CallFunc_GetMoveModeCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetMoveMode_CPPType::CallFunc_GetMoveModeCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMoveMode_CPPType, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetMoveMode_CPPType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetMovePosActor
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAIComponent_C_GetMovePosActor final
{
public:
	class AActor*                                 MovePosActor;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMovePosActorCPP_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetMovePosActor) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetMovePosActor");
static_assert(sizeof(BP_PlayerAIComponent_C_GetMovePosActor) == 0x000018, "Wrong size on BP_PlayerAIComponent_C_GetMovePosActor");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMovePosActor, MovePosActor) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetMovePosActor::MovePosActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMovePosActor, CallFunc_GetMovePosActorCPP_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetMovePosActor::CallFunc_GetMovePosActorCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetMovePosActor, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetMovePosActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetBattleTargetActor
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAIComponent_C_GetBattleTargetActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBattleTargetActorCPP_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetBattleTargetActor) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetBattleTargetActor");
static_assert(sizeof(BP_PlayerAIComponent_C_GetBattleTargetActor) == 0x000018, "Wrong size on BP_PlayerAIComponent_C_GetBattleTargetActor");
static_assert(offsetof(BP_PlayerAIComponent_C_GetBattleTargetActor, Target) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetBattleTargetActor::Target' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetBattleTargetActor, CallFunc_GetBattleTargetActorCPP_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetBattleTargetActor::CallFunc_GetBattleTargetActorCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetBattleTargetActor, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetBattleTargetActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsAttackAble
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerAIComponent_C_IsAttackAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_696F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dist;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_24;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_25;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_26;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_27;                             // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_28;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_29;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_30;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_31;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_32;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_33;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_34;                             // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_35;                             // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_36;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_37;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_38;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_39;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_40;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_41;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_42;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_43;                             // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_44;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_45;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_46;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_47;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_48;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_49;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackAbleCPP_ReturnValue;              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionAttack_bEnable;             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsAttackAble) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_IsAttackAble");
static_assert(sizeof(BP_PlayerAIComponent_C_IsAttackAble) == 0x000050, "Wrong size on BP_PlayerAIComponent_C_IsAttackAble");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, bEnable) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsAttackAble::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Range) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Range' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Dist) == 0x000008, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Dist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable) == 0x000014, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_1) == 0x000015, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_2) == 0x000016, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_3) == 0x000017, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_4) == 0x000018, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_5) == 0x000019, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_6) == 0x00001A, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_7) == 0x00001B, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_8) == 0x00001C, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_9) == 0x00001D, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_10) == 0x00001E, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_11) == 0x00001F, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_12) == 0x000020, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_13) == 0x000021, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_14) == 0x000022, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_15) == 0x000023, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_16) == 0x000024, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_17) == 0x000025, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_18) == 0x000026, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_19) == 0x000027, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_20) == 0x000028, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_21) == 0x000029, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_22) == 0x00002A, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_23) == 0x00002B, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_24) == 0x00002C, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_25) == 0x00002D, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_26) == 0x00002E, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_27) == 0x00002F, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_28) == 0x000030, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_29) == 0x000031, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_30) == 0x000032, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_31) == 0x000033, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_32) == 0x000034, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_33) == 0x000035, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_34) == 0x000036, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_35) == 0x000037, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_36) == 0x000038, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_37) == 0x000039, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_38) == 0x00003A, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_39) == 0x00003B, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_40) == 0x00003C, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_41) == 0x00003D, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_42) == 0x00003E, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_43) == 0x00003F, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_44) == 0x000040, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_45) == 0x000041, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_45' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_46) == 0x000042, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_46' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_47) == 0x000043, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_47' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_48) == 0x000044, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_48' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_bool_Variable_49) == 0x000045, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_bool_Variable_49' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, CallFunc_IsAttackAbleCPP_ReturnValue) == 0x000046, "Member 'BP_PlayerAIComponent_C_IsAttackAble::CallFunc_IsAttackAbleCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000047, "Member 'BP_PlayerAIComponent_C_IsAttackAble::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, Temp_byte_Variable) == 0x000048, "Member 'BP_PlayerAIComponent_C_IsAttackAble::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, CallFunc_BooleanAND_ReturnValue) == 0x000049, "Member 'BP_PlayerAIComponent_C_IsAttackAble::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, K2Node_Select_Default) == 0x00004A, "Member 'BP_PlayerAIComponent_C_IsAttackAble::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004B, "Member 'BP_PlayerAIComponent_C_IsAttackAble::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_IsAttackAble::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsAttackAble, CallFunc_IsEnableActionAttack_bEnable) == 0x00004D, "Member 'BP_PlayerAIComponent_C_IsAttackAble::CallFunc_IsEnableActionAttack_bEnable' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsDodgeAble
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerAIComponent_C_IsDodgeAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDodgeAbleCPP_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionDodge_bEnable;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsDodgeAble) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsDodgeAble");
static_assert(sizeof(BP_PlayerAIComponent_C_IsDodgeAble) == 0x000005, "Wrong size on BP_PlayerAIComponent_C_IsDodgeAble");
static_assert(offsetof(BP_PlayerAIComponent_C_IsDodgeAble, bEnable) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsDodgeAble::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsDodgeAble, CallFunc_IsDodgeAbleCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsDodgeAble::CallFunc_IsDodgeAbleCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsDodgeAble, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsDodgeAble::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsDodgeAble, CallFunc_IsEnableActionDodge_bEnable) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsDodgeAble::CallFunc_IsEnableActionDodge_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsDodgeAble, CallFunc_BooleanAND_ReturnValue_1) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsDodgeAble::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEnableStickInput
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_IsEnableStickInput final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableStickInputCPP_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6970[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsEnableStickInput) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_IsEnableStickInput");
static_assert(sizeof(BP_PlayerAIComponent_C_IsEnableStickInput) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_IsEnableStickInput");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEnableStickInput, bEnable) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsEnableStickInput::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEnableStickInput, CallFunc_IsEnableStickInputCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsEnableStickInput::CallFunc_IsEnableStickInputCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEnableStickInput, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsEnableStickInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEnableStickInput, CallFunc_Map_Length_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsEnableStickInput::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEnableStickInput, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_IsEnableStickInput::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckBattleThinkTransition
// 0x0410 (0x0410 - 0x0000)
struct BP_PlayerAIComponent_C_CheckBattleThinkTransition final
{
public:
	EPlayerAIBattleThinkTransition                Transition;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6971[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LEnemyTargetActor;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LTargetActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6972[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnableCreateCopy_self_CastInput;        // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableCreateCopy_enable;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6973[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6974[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_Result;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6975[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6976[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsUniqueConditionTransition_self_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueConditionTransition_bResult;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6977[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsUniqueConditionTransition_self_CastInput_1; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueConditionTransition_bResult_1;    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6978[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsUniqueConditionTransition_self_CastInput_2; // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueConditionTransition_bResult_2;    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6979[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsUniqueConditionTransition_self_CastInput_3; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueConditionTransition_bResult_3;    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealth_return;                         // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_697A[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_697B[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfo                            CallFunc_GetPartyMemberInfo_ReturnValue;           // 0x00DC(0x00D0)(NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_697C[0x2];                                     // 0x01AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnableDriveAttack_self_CastInput;       // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDriveAttack_enable;               // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_ReturnValue;                  // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_697D[0x6];                                     // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnableDrive_self_CastInput;             // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableDrive_Enable;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_697E[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_697F[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnableRegistSAS_self_CastInput;         // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableRegistSAS_Enable;                 // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableUseSeeThrough_bEnable;              // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6980[0x6];                                     // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager_1;         // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_Under_Siege_bSiege;                 // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6981[0x6];                                     // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player_1;                   // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6982[0x5];                                     // 0x022B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateFloating_IsFloating;          // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealth_return_1;                       // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SearchPsychicObject_bFound;               // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6983[0x2];                                     // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsActiveEnpcSasFire_self_CastInput;       // 0x0248(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSasFire_IsActive;             // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6984[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_CanEnpcOpenBrainField_self_CastInput;     // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanEnpcOpenBrainField_CanDo;              // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6985[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6986[0x2];                                     // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x0280(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6987[0x7];                                     // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsActiveEnpcSasElectric_self_CastInput;   // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSasElectric_IsActive;         // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return;                // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x02AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x02AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6988[0x2];                                     // 0x02AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsActiveEnpcSasTeleport_self_CastInput;   // 0x02B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveEnpcSasTeleport_IsActive;         // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6989[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_698A[0x5];                                     // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_CanSpecialMoveTrigger_self_CastInput;     // 0x02E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSpecialMoveTrigger_CanDo;              // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_698B[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsEnpcBarrier_self_CastInput;             // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnpcBarrier_IsBarrier;                  // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_698C[0x6];                                     // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsUseFog_self_CastInput;                  // 0x0310(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseFog_IsFog;                           // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_698D[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_698E[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetTargetLockHate_actor;                  // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_698F[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetId_ReturnValue;                        // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6990[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy_1;             // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6991[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetTargetLockHate_actor_1;                // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6992[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor_1;      // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNpcRevive_bRevive;                   // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6993[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_IsMetalMode_self_CastInput;               // 0x0388(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMetalMode_bMetal;                       // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNpcRevive_bRevive_1;                 // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeTooFar_bResutlt;                   // 0x039A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6994[0x5];                                     // 0x039B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_IsInScreen_self_CastInput;                // 0x03A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInScreen_InScreen;                      // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6995[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6996[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_2;        // 0x03C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyStateAttack_Return_1;              // 0x03DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x03DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6997[0x3];                                     // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_IsTargetCanBeAttacked_self_CastInput;     // 0x03E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetCanBeAttacked_CanDo;              // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeFar_bResult;                       // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeMiddle_bResult;                    // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeNear_bResult;                      // 0x03F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6998[0x4];                                     // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_CheckBattleStartTimer_self_CastInput;     // 0x03F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBattleStartTimer_enable;             // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckBattleThinkTransition) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CheckBattleThinkTransition");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckBattleThinkTransition) == 0x000410, "Wrong size on BP_PlayerAIComponent_C_CheckBattleThinkTransition");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, Transition) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::Transition' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, bOK) == 0x000001, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::bOK' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, LEnemyTargetActor) == 0x000008, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::LEnemyTargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, LTargetActor) == 0x000010, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::LTargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableCreateCopy_self_CastInput) == 0x000020, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableCreateCopy_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableCreateCopy_enable) == 0x000030, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableCreateCopy_enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetPlayerManager_PlayerManager) == 0x000038, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetMainPlayer_Player) == 0x000048, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsPlayerStatus_Result) == 0x000051, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsPlayerStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_2) == 0x000053, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsRSBattle_Player) == 0x000058, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_3) == 0x000061, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_self_CastInput) == 0x000068, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_bResult) == 0x000078, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_self_CastInput_1) == 0x000080, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_bResult_1) == 0x000090, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_bResult_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_self_CastInput_2) == 0x000098, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_bResult_2) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_bResult_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_self_CastInput_3) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUniqueConditionTransition_bResult_3) == 0x0000C0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUniqueConditionTransition_bResult_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsStealth_return) == 0x0000C1, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsStealth_return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C2, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000C3, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0000C4, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x0000C5, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetPlayerID_self_CastInput) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetPlayerID_ReturnValue) == 0x0000D8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetPartyMemberInfo_ReturnValue) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetPartyMemberInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsStealthMode_ReturnValue) == 0x0001AC, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001AD, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableDriveAttack_self_CastInput) == 0x0001B0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableDriveAttack_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableDriveAttack_enable) == 0x0001C0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableDriveAttack_enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsDriveMode_ReturnValue) == 0x0001C1, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsDriveMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableDrive_self_CastInput) == 0x0001C8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableDrive_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableDrive_Enable) == 0x0001D8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableDrive_Enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0001E0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableRegistSAS_self_CastInput) == 0x0001F8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableRegistSAS_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnableRegistSAS_Enable) == 0x000208, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnableRegistSAS_Enable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EnableUseSeeThrough_bEnable) == 0x000209, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EnableUseSeeThrough_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetPlayerManager_PlayerManager_1) == 0x000210, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetPlayerManager_PlayerManager_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_Check_Under_Siege_bSiege) == 0x000218, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_Check_Under_Siege_bSiege' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_4) == 0x000219, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetMainPlayer_Player_1) == 0x000220, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetMainPlayer_Player_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_5) == 0x000228, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_6) == 0x000229, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_7) == 0x00022A, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000230, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_2) == 0x000240, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnemyStateFloating_IsFloating) == 0x000241, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnemyStateFloating_IsFloating' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_8) == 0x000242, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsStealth_return_1) == 0x000243, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsStealth_return_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_9) == 0x000244, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_SearchPsychicObject_bFound) == 0x000245, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_SearchPsychicObject_bFound' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActiveEnpcSasFire_self_CastInput) == 0x000248, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActiveEnpcSasFire_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActiveEnpcSasFire_IsActive) == 0x000258, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActiveEnpcSasFire_IsActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CanEnpcOpenBrainField_self_CastInput) == 0x000260, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CanEnpcOpenBrainField_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CanEnpcOpenBrainField_CanDo) == 0x000270, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CanEnpcOpenBrainField_CanDo' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_Abs_ReturnValue) == 0x000274, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_Abs_ReturnValue_1) == 0x000278, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00027C, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00027D, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x000280, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_3) == 0x000290, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActiveEnpcSasElectric_self_CastInput) == 0x000298, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActiveEnpcSasElectric_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActiveEnpcSasElectric_IsActive) == 0x0002A8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActiveEnpcSasElectric_IsActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnemyStateAttack_Return) == 0x0002A9, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnemyStateAttack_Return' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_10) == 0x0002AA, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x0002AB, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x0002AC, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x0002AD, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActiveEnpcSasTeleport_self_CastInput) == 0x0002B0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActiveEnpcSasTeleport_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActiveEnpcSasTeleport_IsActive) == 0x0002C0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActiveEnpcSasTeleport_IsActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x0002C8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_4) == 0x0002D8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_11) == 0x0002D9, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsActionStatusAI_bResult) == 0x0002DA, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CanSpecialMoveTrigger_self_CastInput) == 0x0002E0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CanSpecialMoveTrigger_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CanSpecialMoveTrigger_CanDo) == 0x0002F0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CanSpecialMoveTrigger_CanDo' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnpcBarrier_self_CastInput) == 0x0002F8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnpcBarrier_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnpcBarrier_IsBarrier) == 0x000308, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnpcBarrier_IsBarrier' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_Not_PreBool_ReturnValue_1) == 0x000309, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUseFog_self_CastInput) == 0x000310, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUseFog_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsUseFog_IsFog) == 0x000320, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsUseFog_IsFog' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000328, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_5) == 0x000330, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000338, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetTargetLockHate_actor) == 0x000340, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetTargetLockHate_actor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000348, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetId_ReturnValue) == 0x00034C, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000350, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsRSBattle_Enemy_1) == 0x000358, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsRSBattle_Enemy_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_6) == 0x000360, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetTargetLockHate_actor_1) == 0x000368, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetTargetLockHate_actor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000370, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_GetCurrentTargetActor_TargetActor_1) == 0x000378, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_GetCurrentTargetActor_TargetActor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CheckNpcRevive_bRevive) == 0x000380, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CheckNpcRevive_bRevive' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsMetalMode_self_CastInput) == 0x000388, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsMetalMode_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsMetalMode_bMetal) == 0x000398, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsMetalMode_bMetal' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CheckNpcRevive_bRevive_1) == 0x000399, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CheckNpcRevive_bRevive_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsRangeTooFar_bResutlt) == 0x00039A, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsRangeTooFar_bResutlt' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsInScreen_self_CastInput) == 0x0003A0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsInScreen_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsInScreen_InScreen) == 0x0003B0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsInScreen_InScreen' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsRSBattle_Character) == 0x0003B8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_7) == 0x0003C0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_AsBPI_Enemy_Interface_2) == 0x0003C8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_AsBPI_Enemy_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, K2Node_DynamicCast_bSuccess_8) == 0x0003D8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_DoesSocketExist_ReturnValue) == 0x0003D9, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsEnemyStateAttack_Return_1) == 0x0003DA, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsEnemyStateAttack_Return_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_Not_PreBool_ReturnValue_2) == 0x0003DB, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsValid_ReturnValue_12) == 0x0003DC, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsTargetCanBeAttacked_self_CastInput) == 0x0003E0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsTargetCanBeAttacked_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsTargetCanBeAttacked_CanDo) == 0x0003F0, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsTargetCanBeAttacked_CanDo' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsRangeFar_bResult) == 0x0003F1, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsRangeFar_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsRangeMiddle_bResult) == 0x0003F2, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsRangeMiddle_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_IsRangeNear_bResult) == 0x0003F3, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_IsRangeNear_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CheckBattleStartTimer_self_CastInput) == 0x0003F8, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CheckBattleStartTimer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckBattleThinkTransition, CallFunc_CheckBattleStartTimer_enable) == 0x000408, "Member 'BP_PlayerAIComponent_C_CheckBattleThinkTransition::CallFunc_CheckBattleStartTimer_enable' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeNear
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerAIComponent_C_IsRangeNear final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6999[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRange;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRangeNearCPP_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDistanceFromVector_bResult;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699A[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699C[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsRangeNear) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_IsRangeNear");
static_assert(sizeof(BP_PlayerAIComponent_C_IsRangeNear) == 0x000038, "Wrong size on BP_PlayerAIComponent_C_IsRangeNear");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, Dist) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsRangeNear::Dist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, bResult) == 0x00000C, "Member 'BP_PlayerAIComponent_C_IsRangeNear::bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, LRange) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsRangeNear::LRange' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, CallFunc_IsRangeNearCPP_ReturnValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_IsRangeNear::CallFunc_IsRangeNearCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'BP_PlayerAIComponent_C_IsRangeNear::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, CallFunc_CheckDistanceFromVector_bResult) == 0x000016, "Member 'BP_PlayerAIComponent_C_IsRangeNear::CallFunc_CheckDistanceFromVector_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000018, "Member 'BP_PlayerAIComponent_C_IsRangeNear::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerAIComponent_C_IsRangeNear::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, CallFunc_GetCapsuleRadius_Radius) == 0x00002C, "Member 'BP_PlayerAIComponent_C_IsRangeNear::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_IsRangeNear::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeNear, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_IsRangeNear::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeMiddle
// 0x0014 (0x0014 - 0x0000)
struct BP_PlayerAIComponent_C_IsRangeMiddle final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeMiddleCPP_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeFar_bResult;                       // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRangeNear_bResult;                      // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsRangeMiddle) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_IsRangeMiddle");
static_assert(sizeof(BP_PlayerAIComponent_C_IsRangeMiddle) == 0x000014, "Wrong size on BP_PlayerAIComponent_C_IsRangeMiddle");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeMiddle, Dist) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsRangeMiddle::Dist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeMiddle, bResult) == 0x00000C, "Member 'BP_PlayerAIComponent_C_IsRangeMiddle::bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeMiddle, CallFunc_IsRangeMiddleCPP_ReturnValue) == 0x00000D, "Member 'BP_PlayerAIComponent_C_IsRangeMiddle::CallFunc_IsRangeMiddleCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeMiddle, CallFunc_IsRangeFar_bResult) == 0x00000E, "Member 'BP_PlayerAIComponent_C_IsRangeMiddle::CallFunc_IsRangeFar_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeMiddle, CallFunc_IsRangeNear_bResult) == 0x00000F, "Member 'BP_PlayerAIComponent_C_IsRangeMiddle::CallFunc_IsRangeNear_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeMiddle, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsRangeMiddle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeFar
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerAIComponent_C_IsRangeFar final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRange;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRangeFarCPP_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699E[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDistanceFromVector_bResult;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699F[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A0[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsRangeFar) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_IsRangeFar");
static_assert(sizeof(BP_PlayerAIComponent_C_IsRangeFar) == 0x000040, "Wrong size on BP_PlayerAIComponent_C_IsRangeFar");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, Dist) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsRangeFar::Dist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, bResult) == 0x00000C, "Member 'BP_PlayerAIComponent_C_IsRangeFar::bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, LRange) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsRangeFar::LRange' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_IsRangeFarCPP_ReturnValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_IsRangeFarCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000018, "Member 'BP_PlayerAIComponent_C_IsRangeFar::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerAIComponent_C_IsRangeFar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_CheckDistanceFromVector_bResult) == 0x000029, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_CheckDistanceFromVector_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_GetCapsuleRadius_Radius) == 0x00002C, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeFar, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_IsRangeFar::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentThinkTable
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerAIComponent_C_GetCurrentThinkTable final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIThinkTableTypeCPP                    Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIOrder                                Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A2[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             K2Node_Select_Default_1;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             K2Node_Select_Default_2;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCurrentThinkTable) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetCurrentThinkTable");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCurrentThinkTable) == 0x000030, "Wrong size on BP_PlayerAIComponent_C_GetCurrentThinkTable");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, Table) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::Table' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, Temp_byte_Variable) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, Temp_bool_Variable) == 0x000009, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, Temp_byte_Variable_1) == 0x00000A, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, K2Node_Select_Default) == 0x000010, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, K2Node_Select_Default_1) == 0x000020, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable, K2Node_Select_Default_2) == 0x000028, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcStickDir_BattleAttack
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerAIComponent_C_CalcStickDir_BattleAttack final
{
public:
	struct FVector                                Dir;                                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStickDir_BattleAttackCPP_ReturnValue; // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A3[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A4[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_CalcStickDir_BattleAttack");
static_assert(sizeof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack) == 0x000050, "Wrong size on BP_PlayerAIComponent_C_CalcStickDir_BattleAttack");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, Dir) == 0x000000, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::Dir' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_CalcStickDir_BattleAttackCPP_ReturnValue) == 0x00000C, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_CalcStickDir_BattleAttackCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_GetActorForwardVector_ReturnValue) == 0x00001C, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000034, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CalcStickDir_BattleAttack, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'BP_PlayerAIComponent_C_CalcStickDir_BattleAttack::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsBattleThink
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerAIComponent_C_IsBattleThink final
{
public:
	EPlayerAIBattleThinkType                      Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBattleThinkCPP_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsBattleThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsBattleThink");
static_assert(sizeof(BP_PlayerAIComponent_C_IsBattleThink) == 0x000008, "Wrong size on BP_PlayerAIComponent_C_IsBattleThink");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, Type) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsBattleThink::Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, bResult) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsBattleThink::bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsBattleThink::CallFunc_ConvertEnumBPtoCPP_PlayerAIBattleThinkType_CPPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsBattleThink::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, CallFunc_IsBattleThinkCPP_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsBattleThink::CallFunc_IsBattleThinkCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000005, "Member 'BP_PlayerAIComponent_C_IsBattleThink::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'BP_PlayerAIComponent_C_IsBattleThink::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsBattleThink, CallFunc_BooleanAND_ReturnValue_1) == 0x000007, "Member 'BP_PlayerAIComponent_C_IsBattleThink::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThinkParam
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetCurrentBattleThinkParam final
{
public:
	EPlayerAIBattleThinkParam                     Param;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  CallFunc_GetCurrentBattleThinkParam_CPPType_Param; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParam                     CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkParam_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetCurrentBattleThinkParam");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetCurrentBattleThinkParam");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam, Param) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThinkParam::Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam, CallFunc_GetCurrentBattleThinkParam_CPPType_Param) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThinkParam::CallFunc_GetCurrentBattleThinkParam_CPPType_Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkParam_BPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThinkParam::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkParam_BPEnum' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsJumpAble
// 0x0006 (0x0006 - 0x0000)
struct BP_PlayerAIComponent_C_IsJumpAble final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsJumpAbleCPP_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableActionJump_bEnable;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsJumpAble) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsJumpAble");
static_assert(sizeof(BP_PlayerAIComponent_C_IsJumpAble) == 0x000006, "Wrong size on BP_PlayerAIComponent_C_IsJumpAble");
static_assert(offsetof(BP_PlayerAIComponent_C_IsJumpAble, bEnable) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsJumpAble::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsJumpAble, CallFunc_IsJumpAbleCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsJumpAble::CallFunc_IsJumpAbleCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsJumpAble, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsJumpAble::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsJumpAble, CallFunc_Greater_IntInt_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsJumpAble::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsJumpAble, CallFunc_IsEnableActionJump_bEnable) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsJumpAble::CallFunc_IsEnableActionJump_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsJumpAble, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'BP_PlayerAIComponent_C_IsJumpAble::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetAttackCount
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_GetAttackCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAttackCountCPP_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetAttackCount) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_GetAttackCount");
static_assert(sizeof(BP_PlayerAIComponent_C_GetAttackCount) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_GetAttackCount");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackCount, Count) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetAttackCount::Count' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackCount, CallFunc_GetAttackCountCPP_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_GetAttackCount::CallFunc_GetAttackCountCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetAttackCount, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetAttackCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeTooFar
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerAIComponent_C_IsRangeTooFar final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResutlt;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A5[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LRange;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRangeTooFarCPP_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A6[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDistanceFromVector_bResult;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A7[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69A8[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsRangeTooFar) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_IsRangeTooFar");
static_assert(sizeof(BP_PlayerAIComponent_C_IsRangeTooFar) == 0x000040, "Wrong size on BP_PlayerAIComponent_C_IsRangeTooFar");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, Dist) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::Dist' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, bResutlt) == 0x00000C, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::bResutlt' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, LRange) == 0x000010, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::LRange' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_IsRangeTooFarCPP_ReturnValue) == 0x000014, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_IsRangeTooFarCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000018, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_CheckDistanceFromVector_bResult) == 0x000029, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_CheckDistanceFromVector_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_GetCapsuleRadius_Radius) == 0x00002C, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsRangeTooFar, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PlayerAIComponent_C_IsRangeTooFar::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsSelfRecovery
// 0x0005 (0x0005 - 0x0000)
struct BP_PlayerAIComponent_C_IsSelfRecovery final
{
public:
	bool                                          bRecovery;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSelfRecoveryCPP_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsSelfRecovery) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsSelfRecovery");
static_assert(sizeof(BP_PlayerAIComponent_C_IsSelfRecovery) == 0x000005, "Wrong size on BP_PlayerAIComponent_C_IsSelfRecovery");
static_assert(offsetof(BP_PlayerAIComponent_C_IsSelfRecovery, bRecovery) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsSelfRecovery::bRecovery' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsSelfRecovery, CallFunc_IsSelfRecoveryCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsSelfRecovery::CallFunc_IsSelfRecoveryCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsSelfRecovery, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsSelfRecovery::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsSelfRecovery, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsSelfRecovery::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsSelfRecovery, CallFunc_BooleanAND_ReturnValue_1) == 0x000004, "Member 'BP_PlayerAIComponent_C_IsSelfRecovery::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetUseItemID
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAIComponent_C_GetUseItemID final
{
public:
	EConsumeItemID                                ItemId;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetUseItemID) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetUseItemID");
static_assert(sizeof(BP_PlayerAIComponent_C_GetUseItemID) == 0x000001, "Wrong size on BP_PlayerAIComponent_C_GetUseItemID");
static_assert(offsetof(BP_PlayerAIComponent_C_GetUseItemID, ItemId) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetUseItemID::ItemId' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThink
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetCurrentBattleThink final
{
public:
	EPlayerAIBattleThinkType                      NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_GetCurrentBattleThink_CPPType_NewParam;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkType                      CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCurrentBattleThink) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetCurrentBattleThink");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCurrentBattleThink) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetCurrentBattleThink");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThink, NewParam) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThink::NewParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThink, CallFunc_GetCurrentBattleThink_CPPType_NewParam) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThink::CallFunc_GetCurrentBattleThink_CPPType_NewParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThink, CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThink::CallFunc_ConvertEnumCPPtoBP_PlayerAIBattleThinkType_BPEnum' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetTargetEvaluateData
// 0x0090 (0x0090 - 0x0000)
struct BP_PlayerAIComponent_C_GetTargetEvaluateData final
{
public:
	struct FPlayerAIEvaluateTargetParameter       Data;                                              // 0x0000(0x0048)(Parm, OutParm)
	int32                                         LBondsLevel;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69A9[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserParamManager*                      CallFunc_GetUserParamManager_UserParamManager;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69AA[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput_1;             // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69AB[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBondsLevel_ReturnValue;                // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetTargetEvaluateData) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetTargetEvaluateData");
static_assert(sizeof(BP_PlayerAIComponent_C_GetTargetEvaluateData) == 0x000090, "Wrong size on BP_PlayerAIComponent_C_GetTargetEvaluateData");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, Data) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::Data' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, LBondsLevel) == 0x000048, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::LBondsLevel' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_GetUserParamManager_UserParamManager) == 0x000050, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_GetUserParamManager_UserParamManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_GetPlayerID_self_CastInput) == 0x000058, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_GetPlayerID_ReturnValue) == 0x000068, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000069, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_GetPlayerID_self_CastInput_1) == 0x000070, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_GetPlayerID_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_GetPlayerID_ReturnValue_1) == 0x000080, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_GetBondsLevel_ReturnValue) == 0x000084, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_GetBondsLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData, CallFunc_Greater_IntInt_ReturnValue) == 0x000088, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsResetBehaviorTree
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_IsResetBehaviorTree final
{
public:
	bool                                          Param_bResetBehaviorTree;                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsResetBehaviorTreeCPP_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsResetBehaviorTree) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsResetBehaviorTree");
static_assert(sizeof(BP_PlayerAIComponent_C_IsResetBehaviorTree) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_IsResetBehaviorTree");
static_assert(offsetof(BP_PlayerAIComponent_C_IsResetBehaviorTree, Param_bResetBehaviorTree) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsResetBehaviorTree::Param_bResetBehaviorTree' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsResetBehaviorTree, CallFunc_IsResetBehaviorTreeCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsResetBehaviorTree::CallFunc_IsResetBehaviorTreeCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsResetBehaviorTree, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsResetBehaviorTree::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SearchPsychicObject
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAIComponent_C_SearchPsychicObject final
{
public:
	bool                                          bFound;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SearchPsychicObjectCPP_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69AC[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> CallFunc_SearchAIPsychicObject_self_CastInput;     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SearchAIPsychicObject_bFiound;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_SearchPsychicObject) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_SearchPsychicObject");
static_assert(sizeof(BP_PlayerAIComponent_C_SearchPsychicObject) == 0x000020, "Wrong size on BP_PlayerAIComponent_C_SearchPsychicObject");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchPsychicObject, bFound) == 0x000000, "Member 'BP_PlayerAIComponent_C_SearchPsychicObject::bFound' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchPsychicObject, CallFunc_SearchPsychicObjectCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_SearchPsychicObject::CallFunc_SearchPsychicObjectCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchPsychicObject, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_SearchPsychicObject::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchPsychicObject, CallFunc_SearchAIPsychicObject_self_CastInput) == 0x000008, "Member 'BP_PlayerAIComponent_C_SearchPsychicObject::CallFunc_SearchAIPsychicObject_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_SearchPsychicObject, CallFunc_SearchAIPsychicObject_bFiound) == 0x000018, "Member 'BP_PlayerAIComponent_C_SearchPsychicObject::CallFunc_SearchAIPsychicObject_bFiound' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThink_CPPType
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType final
{
public:
	EPlayerAIBattleThinkTypeCPP                   NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkTypeCPP                   CallFunc_GetCurrentBattleThinkCPP_ReturnValue;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType, NewParam) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType::NewParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType, CallFunc_GetCurrentBattleThinkCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType::CallFunc_GetCurrentBattleThinkCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsWaitBattleStart
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAIComponent_C_IsWaitBattleStart final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWaitBattleStartCPP_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsWaitBattleStart) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsWaitBattleStart");
static_assert(sizeof(BP_PlayerAIComponent_C_IsWaitBattleStart) == 0x000004, "Wrong size on BP_PlayerAIComponent_C_IsWaitBattleStart");
static_assert(offsetof(BP_PlayerAIComponent_C_IsWaitBattleStart, bWait) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsWaitBattleStart::bWait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsWaitBattleStart, CallFunc_IsWaitBattleStartCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsWaitBattleStart::CallFunc_IsWaitBattleStartCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsWaitBattleStart, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsWaitBattleStart::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsWaitBattleStart, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_PlayerAIComponent_C_IsWaitBattleStart::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Check Under Siege
// 0x00C8 (0x00C8 - 0x0000)
struct BP_PlayerAIComponent_C_Check_Under_Siege final
{
public:
	bool                                          bSiege;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69AD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SiegeRange;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OwnerLocation;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69AE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       LBattleActor;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               BattleActorList;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         EnemyCount;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69AF[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckUnderSiegeCPP_ReturnValue;           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B0[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B1[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_Radius;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXYSquared_ReturnValue;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B2[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTargetableCharacter_ReturnValue;     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B3[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetBattleActorList_ReturnValue;           // 0x00B8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_Check_Under_Siege) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_Check_Under_Siege");
static_assert(sizeof(BP_PlayerAIComponent_C_Check_Under_Siege) == 0x0000C8, "Wrong size on BP_PlayerAIComponent_C_Check_Under_Siege");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, bSiege) == 0x000000, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::bSiege' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, SiegeRange) == 0x000004, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::SiegeRange' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, OwnerLocation) == 0x000008, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::OwnerLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, LBattleActor) == 0x000018, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::LBattleActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, BattleActorList) == 0x000020, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::BattleActorList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, EnemyCount) == 0x000030, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::EnemyCount' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, Temp_int_Variable) == 0x000034, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_BooleanAND_ReturnValue) == 0x00003C, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, Temp_int_Loop_Num_Variable) == 0x000048, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_CheckUnderSiegeCPP_ReturnValue) == 0x00004D, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_CheckUnderSiegeCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000058, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_GetCapsuleRadius_Radius) == 0x00006C, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_GetCapsuleRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00007C, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000080, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_VSizeXYSquared_ReturnValue) == 0x00008C, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000090, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A1, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A4, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_CheckTargetableCharacter_ReturnValue) == 0x0000A8, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_CheckTargetableCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_GetBattleManager_BattleManager) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Check_Under_Siege, CallFunc_GetBattleActorList_ReturnValue) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_Check_Under_Siege::CallFunc_GetBattleActorList_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEventWait
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_IsEventWait final
{
public:
	bool                                          bWait;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventWaitCPP_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsEventWait) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsEventWait");
static_assert(sizeof(BP_PlayerAIComponent_C_IsEventWait) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_IsEventWait");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventWait, bWait) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsEventWait::bWait' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventWait, CallFunc_IsEventWaitCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsEventWait::CallFunc_IsEventWaitCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsEventWait, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsEventWait::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsFinishMetamorphosis
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_IsFinishMetamorphosis final
{
public:
	bool                                          bFinish;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFinishMetamorphosisCPP_ReturnValue;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_IsFinishMetamorphosis) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_IsFinishMetamorphosis");
static_assert(sizeof(BP_PlayerAIComponent_C_IsFinishMetamorphosis) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_IsFinishMetamorphosis");
static_assert(offsetof(BP_PlayerAIComponent_C_IsFinishMetamorphosis, bFinish) == 0x000000, "Member 'BP_PlayerAIComponent_C_IsFinishMetamorphosis::bFinish' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsFinishMetamorphosis, CallFunc_IsFinishMetamorphosisCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_IsFinishMetamorphosis::CallFunc_IsFinishMetamorphosisCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_IsFinishMetamorphosis, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_IsFinishMetamorphosis::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetThinkPhaseTransition
// 0x000C (0x000C - 0x0000)
struct BP_PlayerAIComponent_C_GetThinkPhaseTransition final
{
public:
	int32                                         CurPhase;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetThinkPhaseTransitionCPP_ReturnValue;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetThinkPhaseTransition) == 0x000004, "Wrong alignment on BP_PlayerAIComponent_C_GetThinkPhaseTransition");
static_assert(sizeof(BP_PlayerAIComponent_C_GetThinkPhaseTransition) == 0x00000C, "Wrong size on BP_PlayerAIComponent_C_GetThinkPhaseTransition");
static_assert(offsetof(BP_PlayerAIComponent_C_GetThinkPhaseTransition, CurPhase) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetThinkPhaseTransition::CurPhase' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetThinkPhaseTransition, CallFunc_GetThinkPhaseTransitionCPP_ReturnValue) == 0x000004, "Member 'BP_PlayerAIComponent_C_GetThinkPhaseTransition::CallFunc_GetThinkPhaseTransitionCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetThinkPhaseTransition, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetThinkPhaseTransition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Get Order
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_Get_Order final
{
public:
	EPlayerAIOrder                                Param_Order;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIOrder                                CallFunc_GetOrderCPP_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_Get_Order) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_Get_Order");
static_assert(sizeof(BP_PlayerAIComponent_C_Get_Order) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_Get_Order");
static_assert(offsetof(BP_PlayerAIComponent_C_Get_Order, Param_Order) == 0x000000, "Member 'BP_PlayerAIComponent_C_Get_Order::Param_Order' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Get_Order, CallFunc_GetOrderCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_Get_Order::CallFunc_GetOrderCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_Get_Order, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_Get_Order::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckNpcRevive
// 0x0120 (0x0120 - 0x0000)
struct BP_PlayerAIComponent_C_CheckNpcRevive final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRevive;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B4[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               LBattleActorList;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          LbRevive;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B5[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LPlayer;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNpcReviveCPP_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B6[0x1];                                     // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBattleEnemyInterface> K2Node_DynamicCast_AsBattle_Enemy_Interface;       // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B7[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTarget_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B8[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsBadStatusConfusion_self_CastInput;      // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBadStatusConfusion_bBadStatus;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69B9[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69BA[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetBattleActorList_ReturnValue;           // 0x0090(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_IsDying_self_CastInput;                   // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDying_bDying;                           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69BB[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69BC[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69BD[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecNpcReviveDirection_bExec;           // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExecResurrect_bExec;                    // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69BE[0x1];                                     // 0x00DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsDead_self_CastInput;                    // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatus_Result;                    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_bAI;                          // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69BF[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetRightPlayer_Player;                    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPartyPlayerKind_self_CastInput;        // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERSPartyPlayerKind                            CallFunc_GetPartyPlayerKind_ReturnValue;           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69C0[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetLeftPlayer_Player;                     // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_CheckNpcRevive) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_CheckNpcRevive");
static_assert(sizeof(BP_PlayerAIComponent_C_CheckNpcRevive) == 0x000120, "Wrong size on BP_PlayerAIComponent_C_CheckNpcRevive");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, InDistance) == 0x000000, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::InDistance' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, bRevive) == 0x000004, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::bRevive' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, LBattleActorList) == 0x000008, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::LBattleActorList' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, LbRevive) == 0x000018, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::LbRevive' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, LPlayer) == 0x000020, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::LPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, Temp_bool_True_if_break_was_hit_Variable) == 0x000028, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_CheckNpcReviveCPP_ReturnValue) == 0x000029, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_CheckNpcReviveCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, Temp_int_Loop_Num_Variable) == 0x000030, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, K2Node_DynamicCast_AsBattle_Enemy_Interface) == 0x000038, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::K2Node_DynamicCast_AsBattle_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetCurrentTarget_ReturnValue) == 0x000050, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetCurrentTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsBadStatusConfusion_self_CastInput) == 0x000060, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsBadStatusConfusion_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsBadStatusConfusion_bBadStatus) == 0x000070, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsBadStatusConfusion_bBadStatus' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, Temp_object_Variable) == 0x000078, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000080, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetBattleManager_BattleManager) == 0x000088, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetBattleActorList_ReturnValue) == 0x000090, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetBattleActorList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsDying_self_CastInput) == 0x0000A0, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsDying_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsDying_bDying) == 0x0000B0, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsDying_bDying' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B8, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_Add_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_BooleanAND_ReturnValue_1) == 0x0000CC, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000D0, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_CheckDistance_bResult) == 0x0000DC, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsExecNpcReviveDirection_bExec) == 0x0000DD, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsExecNpcReviveDirection_bExec' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsExecResurrect_bExec) == 0x0000DE, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsExecResurrect_bExec' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsDead_self_CastInput) == 0x0000E0, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsDead_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsDead_bDead) == 0x0000F0, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsActionStatus_Result) == 0x0000F1, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsActionStatus_Result' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsControlAI_bAI) == 0x0000F2, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsControlAI_bAI' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000F3, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_IsValid_ReturnValue) == 0x0000F4, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetRightPlayer_Player) == 0x0000F8, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetRightPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetPartyPlayerKind_self_CastInput) == 0x000100, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetPartyPlayerKind_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetPartyPlayerKind_ReturnValue) == 0x000110, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetPartyPlayerKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, K2Node_SwitchEnum_CmpSuccess) == 0x000111, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_CheckNpcRevive, CallFunc_GetLeftPlayer_Player) == 0x000118, "Member 'BP_PlayerAIComponent_C_CheckNpcRevive::CallFunc_GetLeftPlayer_Player' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThinkParam_CPPType
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType final
{
public:
	EPlayerAIBattleThinkParamCPP                  Param;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerAIBattleThinkParamCPP                  CallFunc_GetCurrentBattleThinkParamCPP_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType) == 0x000001, "Wrong alignment on BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType) == 0x000003, "Wrong size on BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType, Param) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType::Param' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType, CallFunc_GetCurrentBattleThinkParamCPP_ReturnValue) == 0x000001, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType::CallFunc_GetCurrentBattleThinkParamCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentThinkTable_CallFromCPP
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_GetCurrentThinkTable_Table;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP) == 0x000010, "Wrong size on BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP, ReturnValue) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP, CallFunc_GetCurrentThinkTable_Table) == 0x000008, "Member 'BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP::CallFunc_GetCurrentThinkTable_Table' has a wrong offset!");

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetTargetEvaluateData_CallFromCPP
// 0x0090 (0x0090 - 0x0000)
struct BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP final
{
public:
	struct FPlayerAIEvaluateTargetParameter       OutParam;                                          // 0x0000(0x0048)(Parm, OutParm)
	struct FPlayerAIEvaluateTargetParameter       CallFunc_GetTargetEvaluateData_Data;               // 0x0048(0x0048)()
};
static_assert(alignof(BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP) == 0x000008, "Wrong alignment on BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP");
static_assert(sizeof(BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP) == 0x000090, "Wrong size on BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP, OutParam) == 0x000000, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP::OutParam' has a wrong offset!");
static_assert(offsetof(BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP, CallFunc_GetTargetEvaluateData_Data) == 0x000048, "Member 'BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP::CallFunc_GetTargetEvaluateData_Data' has a wrong offset!");

}

