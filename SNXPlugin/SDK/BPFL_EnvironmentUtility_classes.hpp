#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_EnvironmentUtility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_EnvironmentUtility.BPFL_EnvironmentUtility_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_EnvironmentUtility_C final : public UBlueprintFunctionLibrary
{
public:
	static void CalcSplineBound(TArray<class USplineMeshComponent*>& Splines, ESplineMeshAxis ForwardAxis, const struct FRotator& BaseRotator, bool OneStaticMesh, class UObject* __WorldContext, struct FVector* BoxCenter, struct FVector* BoxExtent, struct FVector* BoxMin, struct FVector* BoxMax);
	static void GetWorldBound(const struct FVector& LocalBoundMin, const struct FVector& LocalBoundMax, const struct FTransform& WorldTransform, class UObject* __WorldContext, struct FVector* BoundMin, struct FVector* BoundMax);
	static void AddStaticMeshBound(class UStaticMeshComponent* StaticMesh, const struct FVector& BaseBoundMin, const struct FVector& BaseBoundMax, class UObject* __WorldContext, struct FVector* BoundMin, struct FVector* BoundMax);
	static void AddInstancedStaticMeshBound(class UInstancedStaticMeshComponent* InstancedStaticMesh, const struct FVector& BaseBoundMin, const struct FVector& BaseBoundMax, class UObject* __WorldContext, struct FVector* BoundMin, struct FVector* BoundMax);
	static void GetTargetSplineComponent(class USplineComponent* BaseSpline, class ABP_SplineBase_C* ParentActor, class UObject* __WorldContext, class USplineComponent** TargetComponent, bool* UseParentSpline);
	static void SetupSplineMaterial(class UPrimitiveComponent* Primitive, TArray<class UMaterialInterface*>& Materials, class UObject* __WorldContext);
	static void CalcStaticMeshBound(TArray<class UStaticMeshComponent*>& StaticMeshes, class UObject* __WorldContext, struct FVector* BoxCenter, struct FVector* BoxExtent, struct FVector* BoxMin, struct FVector* BoxMax);
	static void DirtyParentSplineActors(class AActor* SelfActor, class UObject* __WorldContext);
	static void GetEventCutsceneTransform(ECutsceneRootTransformID CutsceneTransformID, class FName ExtraName, class UObject* __WorldContext, struct FTransform* Transform);
	static void GetTargetAnySplineComponent(class USplineComponent* BaseSpline, class ABP_SplineBase_C* ParentActor, class UObject* __WorldContext, class USplineComponent** TargetComponent, bool* UseParentSpline);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_EnvironmentUtility_C">();
	}
	static class UBPFL_EnvironmentUtility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_EnvironmentUtility_C>();
	}
};
static_assert(alignof(UBPFL_EnvironmentUtility_C) == 0x000008, "Wrong alignment on UBPFL_EnvironmentUtility_C");
static_assert(sizeof(UBPFL_EnvironmentUtility_C) == 0x000028, "Wrong size on UBPFL_EnvironmentUtility_C");

}

