#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyDamageMoveComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_EnemyDamageMoveComponent.BP_EnemyDamageMoveComponent_C.ExecuteUbergraph_BP_EnemyDamageMoveComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent) == 0x000004, "Wrong alignment on BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent");
static_assert(sizeof(BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent) == 0x000008, "Wrong size on BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent, EntryPoint) == 0x000000, "Member 'BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_EnemyDamageMoveComponent_C_ExecuteUbergraph_BP_EnemyDamageMoveComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_EnemyDamageMoveComponent.BP_EnemyDamageMoveComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_EnemyDamageMoveComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyDamageMoveComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_EnemyDamageMoveComponent_C_ReceiveTick");
static_assert(sizeof(BP_EnemyDamageMoveComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_EnemyDamageMoveComponent_C_ReceiveTick");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_EnemyDamageMoveComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_EnemyDamageMoveComponent.BP_EnemyDamageMoveComponent_C.Update
// 0x0028 (0x0028 - 0x0000)
struct BP_EnemyDamageMoveComponent_C_Update final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_AddLocation;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CalcLocation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   L_Function;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_rate;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead; // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyDamageMoveComponent_C_Update) == 0x000004, "Wrong alignment on BP_EnemyDamageMoveComponent_C_Update");
static_assert(sizeof(BP_EnemyDamageMoveComponent_C_Update) == 0x000028, "Wrong size on BP_EnemyDamageMoveComponent_C_Update");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Update, DeltaSec) == 0x000000, "Member 'BP_EnemyDamageMoveComponent_C_Update::DeltaSec' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Update, L_AddLocation) == 0x000004, "Member 'BP_EnemyDamageMoveComponent_C_Update::L_AddLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Update, L_CalcLocation) == 0x000010, "Member 'BP_EnemyDamageMoveComponent_C_Update::L_CalcLocation' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Update, L_Function) == 0x00001C, "Member 'BP_EnemyDamageMoveComponent_C_Update::L_Function' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Update, L_rate) == 0x000020, "Member 'BP_EnemyDamageMoveComponent_C_Update::L_rate' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Update, CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead) == 0x000024, "Member 'BP_EnemyDamageMoveComponent_C_Update::CallFunc_Is_Brain_Crash_Dead_State_IsBrainCrashDead' has a wrong offset!");

// Function BP_EnemyDamageMoveComponent.BP_EnemyDamageMoveComponent_C.Start
// 0x0030 (0x0030 - 0x0000)
struct BP_EnemyDamageMoveComponent_C_Start final
{
public:
	struct FVector                                DamageDir;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadMove;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyDamageMoveComponent_C_Start) == 0x000008, "Wrong alignment on BP_EnemyDamageMoveComponent_C_Start");
static_assert(sizeof(BP_EnemyDamageMoveComponent_C_Start) == 0x000030, "Wrong size on BP_EnemyDamageMoveComponent_C_Start");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Start, DamageDir) == 0x000000, "Member 'BP_EnemyDamageMoveComponent_C_Start::DamageDir' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Start, Power) == 0x00000C, "Member 'BP_EnemyDamageMoveComponent_C_Start::Power' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Start, DeadMove) == 0x000010, "Member 'BP_EnemyDamageMoveComponent_C_Start::DeadMove' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Start, Attacker) == 0x000018, "Member 'BP_EnemyDamageMoveComponent_C_Start::Attacker' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Start, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000020, "Member 'BP_EnemyDamageMoveComponent_C_Start::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyDamageMoveComponent_C_Start, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_EnemyDamageMoveComponent_C_Start::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

