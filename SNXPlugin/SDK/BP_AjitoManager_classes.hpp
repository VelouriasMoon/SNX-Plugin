#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AjitoManager

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Engine_structs.hpp"
#include "S_AjitoCharaTable_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AjitoManager.BP_AjitoManager_C
// 0x03A0 (0x05D8 - 0x0238)
class ABP_AjitoManager_C final : public AAjitoManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            Name3tofull;                                       // 0x0248(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         SpawnedActors_old;                                 // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FName, struct FAjitoArrangementPatternInfo> ArrangementPatternDataBase;                        // 0x02A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayerID, class UClass*>                AjitoMemberActorClassMap;                          // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FAjitoArrangementPatternCondition> LotteryPatternConditions;                          // 0x0348(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class ABP_AjitoMember_C*>   PlacedAjitoMemberList;                             // 0x0398(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   DefaultPatternName;                                // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastPatternName;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPlayerID, class ABP_AjitoPlacementManagerBase_C*> PlacementManagerMap;                               // 0x03F8(0x0050)(Edit, BlueprintVisible)
	TMap<EPlayerID, TSoftObjectPtr<class UObject>> MemberLevels;                                      // 0x0448(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<class FName, struct FAjitoArrangementMasterInfo> ArrangementMasterInfo;                             // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayerID, struct FS_AjitoCharaTable>    AjitoCharaTableMap;                                // 0x04E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_AjitoMember_C*>              SpawnedAjitoActor;                                 // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           LotteryAvailablePatternNames;                      // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EPlayerID                                     PresentChrTo;                                      // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     PresentChrFrom;                                    // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64AD[0x2];                                     // 0x055A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PresentItemName;                                   // 0x055C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64AE[0x4];                                     // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FAjitoUniqueIconOffset> UniqueIconOffset;                                  // 0x0568(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         ActionHideActors;                                  // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   LastPresentId;                                     // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangePlayerEvent;                               // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsChangePlayerHitAjitoMember;                      // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AjitoManager(int32 EntryPoint);
	void InitializeAtScene();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void DelayActorUpdate(class ASkeletalMeshActor* NewParam);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetHoodAjitoNpc(class AActor* Actor);
	void DestroyAllSpawnedAjitoMember();
	void GetArrangementPatternInfo(class FName PatternName, struct FAjitoArrangementPatternInfo* PatternInfo);
	void _SetVisibleAllAtLevelActors_Deprecated(bool Visibility);
	void VisibleAtLevelActor(const struct FAjitoArrangementMasterInfo& ArrangementInfo);
	void SpawnDummyMember(const class FString& CharaRoma, const class FString& Action);
	struct FAjitoArrangementMasterInfo VisibleDummyMember(class FName PlaceCandicateName);
	struct FAjitoArrangementMasterInfo GetPlaceCandicateToMemberInfo(class FName PlaceCandicateName);
	void _SpawnMemberFromMemberInfo(const struct FAjitoArrangementMasterInfo& MasterInfo, bool PIE);
	void GetCharacterActorClass(EPlayerID PlayerId, class UClass** AjitoMemberActorClass);
	void Initialize();
	void GetArrangementInfo(class FName MasterKey, struct FAjitoArrangementMasterInfo* ArrangementInfo);
	void LoadLotteryData();
	void LoadAjitoCharacterTable();
	void GetLotteryMemberPattern(struct FAjitoArrangementPatternInfo* Pattern, class FName* PatternName);
	void GetProgressID();
	void LoadArrangementPatternData();
	void IsAllMemberInParty(TArray<EPlayerID>& PlayerIDs, bool* Ok);
	void CheckPatternPresentItem(class FName ItemName, TArray<EPlayerID>& TargetChr, bool* Ok);
	void CheckProgressIdPeriods(TArray<struct FAjitoArrangementPatternInfoProgress>& ProgressPeriods, bool* Ok);
	void GetWinLottery(TMap<class FName, struct FS_AjitoLotteryTable>& LotteryTable, int32 LotteryMax, class FName* TablaName);
	void Set_Pattern_Member_Visible_Internal(const struct FAjitoArrangementPatternInfo& Pattern, class FName PatternKey, bool Force);
	void GetPlacedAllAjitoMembers();
	void GetPlacedAjitoMemberID(EPlayerID PlayerId, class FName ActionName, class FName* AjitoMemberID);
	void GetPlacedMember(EPlayerID PlayerId, class FName ActionName, class ABP_AjitoMember_C** Actor);
	void SetAllMemberUnvisible();
	void GetAnimationName(class FName ActionName, class FString* AnimID);
	void SetPatternMemberVisibleByName(class FName PatternName, bool Force);
	void SetPatternMemberVisibleLottery();
	void RequestSetPatternMemberVisibleLottery();
	void RequestResetSamePatternMemberVisible();
	void SetPlacementLevelVisible(EPlayerID PlayerId, bool Visible);
	void RequestVisiblePersonalLevelAndItems();
	bool EventManagerStart(bool EnableTick, bool Visibility);
	bool EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility);
	void GetItemList(EPlayerID PlayerId, TArray<class FName>* ItemNameList);
	void GetPlacementPlayerIdList(TArray<EPlayerID>* PlacementPlayerIdList);
	void GetPlacementItemName(EPlayerID PlayerId, class FName ItemId, TArray<class FString>* ItemActorName, TArray<class FString>* HiddenItemActorName);
	void SetPlacementLevelVisiblePIE(EPlayerID PlayerId, bool Visible);
	void Reset();
	void SpawnAjitoMember(class FName ActionKey, class ABP_AjitoMember_C** Actor);
	void LoadArrangementMasterInfo();
	void TestFormat();
	void TestSpawnAjitoMember();
	void IsRelaxingMemberInAjito(EPlayerID TargetPlayerId, bool Force, bool* Relaxing);
	void GetLotteryAvailablePatternNames(TArray<class FName>* Names);
	void Debug_EventManagerStart();
	void Debug_EventManagerEnd();
	void CheckExistPlayer(EPlayerID PlayerId, bool* bExist);
	void IsMemberPlacementShouldVisible(EPlayerID PlayerId, bool* ShouldVisible);
	void OnAjitoMemberActionSystemInitializeCallback(EPlayerID PlayerId, class FName AttachmentActorName);
	void GetPlacementManager(const EPlayerID& PlayerId, class ABP_AjitoPlacementManagerBase_C** PlacementManager, bool* Found);
	void Debug_ResetAll();
	void Reset_Present_Item();
	void GetPresentPatternInfo(bool* Exist, struct FAjitoArrangementPatternInfo* Pattern, class FName* PatternName);
	void Set_Present_Item(EPlayerID Param_PresentChrFrom, EPlayerID Param_PresentChrTo, class FName Param_PresentItemName);
	void RequestSetPatternMemberAfterPresent(bool* PatternChanged);
	void UpdateMemberEquip();
	void CheckItemPresented(EPlayerID TargetChr, class FName PresentID, bool* Presented);
	void LoadIconUniqueOffset();
	void AddActionHideActor(class AActor* HideActor);
	void AddActionHideActors(TArray<class AActor*>& HideActor);
	void ResetActionHideActors();
	void IsPresentNeedResetPlayerPos(bool* NeedReset);
	void Set_Member_Interfere_Actor_Visible(class FName RowName);
	void PostPresentAccompanyKizunaLvUp(EPlayerID PresentCharaFrom, EPlayerID PresentCharaTo, class FName Param_PresentItemName, class FName RowName);
	void IsClearScenario(EPlayerID PlayerId, bool* Cleared);
	void GetRandomSelectChar(class AAjitoMember** AjitoMemberArray);
	void RemoveRandomSelectChar(EPlayerID CharID);
	void ChangePlayerEventStart();
	void ChangePlayerEventEnd();
	void On_Player_Hit_Component_Ajito_Member(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AjitoManager_C">();
	}
	static class ABP_AjitoManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AjitoManager_C>();
	}
};
static_assert(alignof(ABP_AjitoManager_C) == 0x000008, "Wrong alignment on ABP_AjitoManager_C");
static_assert(sizeof(ABP_AjitoManager_C) == 0x0005D8, "Wrong size on ABP_AjitoManager_C");
static_assert(offsetof(ABP_AjitoManager_C, UberGraphFrame) == 0x000238, "Member 'ABP_AjitoManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, DefaultSceneRoot) == 0x000240, "Member 'ABP_AjitoManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, Name3tofull) == 0x000248, "Member 'ABP_AjitoManager_C::Name3tofull' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, SpawnedActors_old) == 0x000298, "Member 'ABP_AjitoManager_C::SpawnedActors_old' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, ArrangementPatternDataBase) == 0x0002A8, "Member 'ABP_AjitoManager_C::ArrangementPatternDataBase' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, AjitoMemberActorClassMap) == 0x0002F8, "Member 'ABP_AjitoManager_C::AjitoMemberActorClassMap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, LotteryPatternConditions) == 0x000348, "Member 'ABP_AjitoManager_C::LotteryPatternConditions' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, PlacedAjitoMemberList) == 0x000398, "Member 'ABP_AjitoManager_C::PlacedAjitoMemberList' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, DefaultPatternName) == 0x0003E8, "Member 'ABP_AjitoManager_C::DefaultPatternName' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, LastPatternName) == 0x0003F0, "Member 'ABP_AjitoManager_C::LastPatternName' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, PlacementManagerMap) == 0x0003F8, "Member 'ABP_AjitoManager_C::PlacementManagerMap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, MemberLevels) == 0x000448, "Member 'ABP_AjitoManager_C::MemberLevels' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, ArrangementMasterInfo) == 0x000498, "Member 'ABP_AjitoManager_C::ArrangementMasterInfo' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, AjitoCharaTableMap) == 0x0004E8, "Member 'ABP_AjitoManager_C::AjitoCharaTableMap' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, SpawnedAjitoActor) == 0x000538, "Member 'ABP_AjitoManager_C::SpawnedAjitoActor' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, LotteryAvailablePatternNames) == 0x000548, "Member 'ABP_AjitoManager_C::LotteryAvailablePatternNames' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, PresentChrTo) == 0x000558, "Member 'ABP_AjitoManager_C::PresentChrTo' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, PresentChrFrom) == 0x000559, "Member 'ABP_AjitoManager_C::PresentChrFrom' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, PresentItemName) == 0x00055C, "Member 'ABP_AjitoManager_C::PresentItemName' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, UniqueIconOffset) == 0x000568, "Member 'ABP_AjitoManager_C::UniqueIconOffset' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, ActionHideActors) == 0x0005B8, "Member 'ABP_AjitoManager_C::ActionHideActors' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, LastPresentId) == 0x0005C8, "Member 'ABP_AjitoManager_C::LastPresentId' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, IsChangePlayerEvent) == 0x0005D0, "Member 'ABP_AjitoManager_C::IsChangePlayerEvent' has a wrong offset!");
static_assert(offsetof(ABP_AjitoManager_C, IsChangePlayerHitAjitoMember) == 0x0005D1, "Member 'ABP_AjitoManager_C::IsChangePlayerHitAjitoMember' has a wrong offset!");

}

