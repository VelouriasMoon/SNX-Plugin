#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMaterialManageComponent

#include "Basic.hpp"

#include "BP_PlayerMaterialManageComponent_classes.hpp"
#include "BP_PlayerMaterialManageComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.OnCompletedMaterialSetting__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerMaterialManageType               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::OnCompletedMaterialSetting__DelegateSignature(EPlayerMaterialManageType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "OnCompletedMaterialSetting__DelegateSignature");

	Params::BP_PlayerMaterialManageComponent_C_OnCompletedMaterialSetting__DelegateSignature Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.ExecuteUbergraph_BP_PlayerMaterialManageComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::ExecuteUbergraph_BP_PlayerMaterialManageComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "ExecuteUbergraph_BP_PlayerMaterialManageComponent");

	Params::BP_PlayerMaterialManageComponent_C_ExecuteUbergraph_BP_PlayerMaterialManageComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "ReceiveEndPlay");

	Params::BP_PlayerMaterialManageComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "ReceiveTick");

	Params::BP_PlayerMaterialManageComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.Update
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "Update");

	Params::BP_PlayerMaterialManageComponent_C_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.StartScalarMaterialDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerMaterialManageType               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::StartScalarMaterialDirection(EPlayerMaterialManageType Type, float StartValue, float EndValue, float Time, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "StartScalarMaterialDirection");

	Params::BP_PlayerMaterialManageComponent_C_StartScalarMaterialDirection Parms{};

	Parms.Type = Type;
	Parms.StartValue = StartValue;
	Parms.EndValue = EndValue;
	Parms.Time = Time;
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.UpdateScalarMaterial
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFPlayerMaterialManageData       InData                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCompleted                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFPlayerMaterialManageData       UpdateData                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::UpdateScalarMaterial(const struct FFPlayerMaterialManageData& InData, float DeltaSeconds, bool* bCompleted, struct FFPlayerMaterialManageData* UpdateData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "UpdateScalarMaterial");

	Params::BP_PlayerMaterialManageComponent_C_UpdateScalarMaterial Parms{};

	Parms.InData = std::move(InData);
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (bCompleted != nullptr)
		*bCompleted = Parms.bCompleted;

	if (UpdateData != nullptr)
		*UpdateData = std::move(Parms.UpdateData);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.StartScalarMaterialCurveDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerMaterialManageType               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::StartScalarMaterialCurveDirection(EPlayerMaterialManageType Type, class UCurveFloat* Curve, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "StartScalarMaterialCurveDirection");

	Params::BP_PlayerMaterialManageComponent_C_StartScalarMaterialCurveDirection Parms{};

	Parms.Type = Type;
	Parms.Curve = Curve;
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetMaterialScalarParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::SetMaterialScalarParameter(class FName ParamName, float Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetMaterialScalarParameter");

	Params::BP_PlayerMaterialManageComponent_C_SetMaterialScalarParameter Parms{};

	Parms.ParamName = ParamName;
	Parms.Value = Value;
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.UpdateMaterialCurve
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFPlayerMaterialManageCurveData  InData                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCompleted                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFPlayerMaterialManageCurveData  UpdateData                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::UpdateMaterialCurve(const struct FFPlayerMaterialManageCurveData& InData, float DeltaSeconds, bool* bCompleted, struct FFPlayerMaterialManageCurveData* UpdateData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "UpdateMaterialCurve");

	Params::BP_PlayerMaterialManageComponent_C_UpdateMaterialCurve Parms{};

	Parms.InData = std::move(InData);
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (bCompleted != nullptr)
		*bCompleted = Parms.bCompleted;

	if (UpdateData != nullptr)
		*UpdateData = std::move(Parms.UpdateData);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetMaterialVectorParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::SetMaterialVectorParameter(class FName ParamName, const struct FVector& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetMaterialVectorParameter");

	Params::BP_PlayerMaterialManageComponent_C_SetMaterialVectorParameter Parms{};

	Parms.ParamName = ParamName;
	Parms.Value = std::move(Value);
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.StartVectorMaterialDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerMaterialManageType               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          StartValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::StartVectorMaterialDirection(EPlayerMaterialManageType Type, const struct FVector& StartValue, const struct FVector& EndParam, float Time, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "StartVectorMaterialDirection");

	Params::BP_PlayerMaterialManageComponent_C_StartVectorMaterialDirection Parms{};

	Parms.Type = Type;
	Parms.StartValue = std::move(StartValue);
	Parms.EndParam = std::move(EndParam);
	Parms.Time = Time;
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.UpdateVectorMaterial
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFPlayerVectorMaterialManageData InData                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCompleted                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFPlayerVectorMaterialManageData UpdateDataParam                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::UpdateVectorMaterial(struct FFPlayerVectorMaterialManageData& InData, float DeltaSeconds, bool* bCompleted, struct FFPlayerVectorMaterialManageData* UpdateDataParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "UpdateVectorMaterial");

	Params::BP_PlayerMaterialManageComponent_C_UpdateVectorMaterial Parms{};

	Parms.InData = std::move(InData);
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	InData = std::move(Parms.InData);

	if (bCompleted != nullptr)
		*bCompleted = Parms.bCompleted;

	if (UpdateDataParam != nullptr)
		*UpdateDataParam = std::move(Parms.UpdateDataParam);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.StartMaterialLight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterMaterialLightType             MaterialLightType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::StartMaterialLight(ECharacterMaterialLightType MaterialLightType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "StartMaterialLight");

	Params::BP_PlayerMaterialManageComponent_C_StartMaterialLight Parms{};

	Parms.MaterialLightType = MaterialLightType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.UpdateLight
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::UpdateLight(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "UpdateLight");

	Params::BP_PlayerMaterialManageComponent_C_UpdateLight Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.IsActionLight
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Action                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::IsActionLight(bool* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "IsActionLight");

	Params::BP_PlayerMaterialManageComponent_C_IsActionLight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Action != nullptr)
		*Action = Parms.Action;
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.InitializeLightDataTable
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::InitializeLightDataTable(class UDataTable* DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "InitializeLightDataTable");

	Params::BP_PlayerMaterialManageComponent_C_InitializeLightDataTable Parms{};

	Parms.DataTable = DataTable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.EndMaterialLight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterMaterialLightType             MaterialLightType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::EndMaterialLight(ECharacterMaterialLightType MaterialLightType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "EndMaterialLight");

	Params::BP_PlayerMaterialManageComponent_C_EndMaterialLight Parms{};

	Parms.MaterialLightType = MaterialLightType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetMaterialLightParameter
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCharacterMaterialLightSetting   LightSetting                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_PlayerMaterialManageComponent_C::SetMaterialLightParameter(float Rate, const struct FCharacterMaterialLightSetting& LightSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetMaterialLightParameter");

	Params::BP_PlayerMaterialManageComponent_C_SetMaterialLightParameter Parms{};

	Parms.Rate = Rate;
	Parms.LightSetting = std::move(LightSetting);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.ClearMaterialLightParameter
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::ClearMaterialLightParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "ClearMaterialLightParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetDriveModeMaterial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableDrive                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::SetDriveModeMaterial(bool EnableDrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetDriveModeMaterial");

	Params::BP_PlayerMaterialManageComponent_C_SetDriveModeMaterial Parms{};

	Parms.EnableDrive = EnableDrive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SwitchMaterial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ExcludeMaterialSlots                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Handle                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::SwitchMaterial(class UMaterialInterface* NewMaterial, TArray<class FName>& ExcludeMaterialSlots, bool bPlayer, bool bWeapon, bool bCable, bool bCopy, int32* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SwitchMaterial");

	Params::BP_PlayerMaterialManageComponent_C_SwitchMaterial Parms{};

	Parms.NewMaterial = NewMaterial;
	Parms.ExcludeMaterialSlots = std::move(ExcludeMaterialSlots);
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);

	ExcludeMaterialSlots = std::move(Parms.ExcludeMaterialSlots);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.RestoreSwitchMaterial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_MaterialSwitchHandle                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OneFrameSetting                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::RestoreSwitchMaterial(int32 Param_MaterialSwitchHandle, bool OneFrameSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "RestoreSwitchMaterial");

	Params::BP_PlayerMaterialManageComponent_C_RestoreSwitchMaterial Parms{};

	Parms.Param_MaterialSwitchHandle = Param_MaterialSwitchHandle;
	Parms.OneFrameSetting = OneFrameSetting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.UpdateRestoreSwitch
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::UpdateRestoreSwitch(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "UpdateRestoreSwitch");

	Params::BP_PlayerMaterialManageComponent_C_UpdateRestoreSwitch Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetMaterialVector4Parameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::SetMaterialVector4Parameter(class FName ParamName, const struct FLinearColor& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetMaterialVector4Parameter");

	Params::BP_PlayerMaterialManageComponent_C_SetMaterialVector4Parameter Parms{};

	Parms.ParamName = ParamName;
	Parms.Value = std::move(Value);
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetMaterialScalarArrayParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::SetMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetMaterialScalarArrayParameter");

	Params::BP_PlayerMaterialManageComponent_C_SetMaterialScalarArrayParameter Parms{};

	Parms.ParamName = std::move(ParamName);
	Parms.Value = std::move(Value);
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);

	ParamName = std::move(Parms.ParamName);
	Value = std::move(Parms.Value);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetMaterialVector4ArrayParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FLinearColor>             Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bPlayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeapon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCopy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::SetMaterialVector4ArrayParameter(TArray<class FName>& ParamName, TArray<struct FLinearColor>& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetMaterialVector4ArrayParameter");

	Params::BP_PlayerMaterialManageComponent_C_SetMaterialVector4ArrayParameter Parms{};

	Parms.ParamName = std::move(ParamName);
	Parms.Value = std::move(Value);
	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bCable = bCable;
	Parms.bCopy = bCopy;

	UObject::ProcessEvent(Func, &Parms);

	ParamName = std::move(Parms.ParamName);
	Value = std::move(Parms.Value);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.GetMaterialScalarParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Find                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FPlayerMaterialManageScalar      Value                                                  (Parm, OutParm, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::GetMaterialScalarParameter(class FName ParamName, bool* Find, struct FPlayerMaterialManageScalar* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "GetMaterialScalarParameter");

	Params::BP_PlayerMaterialManageComponent_C_GetMaterialScalarParameter Parms{};

	Parms.ParamName = ParamName;

	UObject::ProcessEvent(Func, &Parms);

	if (Find != nullptr)
		*Find = Parms.Find;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.GetMaterialVectorParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Find                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FPlayerMaterialManageVector      Value                                                  (Parm, OutParm, NoDestructor)

void UBP_PlayerMaterialManageComponent_C::GetMaterialVectorParameter(class FName ParamName, bool* Find, struct FPlayerMaterialManageVector* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "GetMaterialVectorParameter");

	Params::BP_PlayerMaterialManageComponent_C_GetMaterialVectorParameter Parms{};

	Parms.ParamName = ParamName;

	UObject::ProcessEvent(Func, &Parms);

	if (Find != nullptr)
		*Find = Parms.Find;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.ResetupMaterialParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::ResetupMaterialParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "ResetupMaterialParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.DumpMaterialParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::DumpMaterialParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "DumpMaterialParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.EventStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::EventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "EventStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.EventEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::EventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "EventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.InitializeLightMaterial
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::InitializeLightMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "InitializeLightMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.UpdatePreskinFacial
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::UpdatePreskinFacial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "UpdatePreskinFacial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PreChangeMesh
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PreChangeMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PreChangeMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PostChangeMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PostChangeMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PostChangeMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PostWeaponChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PostWeaponChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PostWeaponChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PreWeaponChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PreWeaponChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PreWeaponChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.CompleteRestoreSwitchMaterial
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::CompleteRestoreSwitchMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "CompleteRestoreSwitchMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.OnEventAttachmentLoadCompleted
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::OnEventAttachmentLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "OnEventAttachmentLoadCompleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PostAttachmentChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PostAttachmentChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PostAttachmentChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.InitializeOptimize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::InitializeOptimize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "InitializeOptimize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.GetOptimizeMaterialSwitcher
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBPC_OptimizeSwitchMaterial_C*    Param_OptimizeSwitchComp                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::GetOptimizeMaterialSwitcher(class UBPC_OptimizeSwitchMaterial_C** Param_OptimizeSwitchComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "GetOptimizeMaterialSwitcher");

	Params::BP_PlayerMaterialManageComponent_C_GetOptimizeMaterialSwitcher Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_OptimizeSwitchComp != nullptr)
		*Param_OptimizeSwitchComp = Parms.Param_OptimizeSwitchComp;
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.Finalize
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::Finalize(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "Finalize");

	Params::BP_PlayerMaterialManageComponent_C_Finalize Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PreCostumeChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PreCostumeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PreCostumeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PostCostumeChanged
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PostCostumeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PostCostumeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.SetWireNeonParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>                           ScalarValues                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     ScalarNames                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FLinearColor>             VectorValues                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     VectorNames                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_PlayerMaterialManageComponent_C::SetWireNeonParameter(TArray<float>& ScalarValues, TArray<class FName>& ScalarNames, TArray<struct FLinearColor>& VectorValues, TArray<class FName>& VectorNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "SetWireNeonParameter");

	Params::BP_PlayerMaterialManageComponent_C_SetWireNeonParameter Parms{};

	Parms.ScalarValues = std::move(ScalarValues);
	Parms.ScalarNames = std::move(ScalarNames);
	Parms.VectorValues = std::move(VectorValues);
	Parms.VectorNames = std::move(VectorNames);

	UObject::ProcessEvent(Func, &Parms);

	ScalarValues = std::move(Parms.ScalarValues);
	ScalarNames = std::move(Parms.ScalarNames);
	VectorValues = std::move(Parms.VectorValues);
	VectorNames = std::move(Parms.VectorNames);
}


// Function BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C.PreAttachmentChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMaterialManageComponent_C::PreAttachmentChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMaterialManageComponent_C", "PreAttachmentChanged");

	UObject::ProcessEvent(Func, nullptr);
}

}

