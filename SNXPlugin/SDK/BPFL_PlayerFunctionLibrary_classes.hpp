#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_PlayerFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EPlayerAIBattleThinkType_structs.hpp"
#include "EPlayerAIBattleThinkTransition_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "EPlayerAIThinkTableType_structs.hpp"
#include "EPlayerAIMoveMode_structs.hpp"
#include "EPlayerAIBattleThinkParam_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_PlayerFunctionLibrary.BPFL_PlayerFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_PlayerFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void CalcArrowRainLocation(class AActor* PlayerActor, class AActor* TargetActor, float CheckUnderHeight, float CHeckUpperHeight, class UObject* __WorldContext, struct FVector* Location);
	static void Change_Player_Materials_from_Slot(class USkeletalMeshComponent* SkelMeshComp, class UMaterialInterface* MaterialBody, class UMaterialInterface* MaterialEye, class UMaterialInterface* MaterialHair, class UMaterialInterface* MaterialSkin, class UMaterialInterface* MaterialOutline, class UMaterialInterface* MaterialWire0, class UMaterialInterface* MaterialWire1, class UMaterialInterface* MaterialMask, class UMaterialInterface* MaterialOther, class UObject* __WorldContext);
	static void ChangePlayerMaterialsHologram(class UMeshComponent* MeshComp, bool IsWeapon, bool UseCustomStencil, class UObject* __WorldContext);
	static void SetMaterialParameterHologram(class UMeshComponent* MeshComp, float NoiseRate, float VisibleRate, float EmissiveRate, bool UseVisibleRate, class UObject* __WorldContext);
	static void SetMaterialParameterHologramSASCurve(class UCurveLinearColor* Curve, const struct FLinearColor& DefaultScanlineColor, float Time, E_SASKindNative SasKind, TArray<class USkeletalMeshComponent*>& CharacterMeshes, TArray<class USkeletalMeshComponent*>& WeaponMeshes, struct FMaterialSwitchCache& InOutStealthSwitch, bool& InOutNowStealth, TArray<class UMeshComponent*>& AttachmentMeshes, class UObject* __WorldContext, bool* Finish);
	static void SetMaterialParameterHologramSAS(const struct FLinearColor& SettingValue, const struct FLinearColor& DefaultScanlineColor, E_SASKindNative SasKind, TArray<class USkeletalMeshComponent*>& CharacterMeshes, TArray<class USkeletalMeshComponent*>& WeaponMeshes, struct FMaterialSwitchCache& InOutStealthSwitch, bool& InOutNowStealth, TArray<class UMeshComponent*>& AttachmentMeshes, class UObject* __WorldContext);
	static void SetMaterialParameterHologramSASMetal(const struct FLinearColor& SettingValue, TArray<class UMeshComponent*>& CharacterMeshes, TArray<class UMeshComponent*>& WeaponMeshes, TArray<class UMeshComponent*>& AttachmentMeshes, class UObject* __WorldContext);
	static void SetMaterialParameterHologramSASTelepo(const struct FLinearColor& SettingValue, const struct FLinearColor& DefaultColor, TArray<class UMeshComponent*>& CharacterMeshes, TArray<class UMeshComponent*>& WeaponMeshes, TArray<class UMeshComponent*>& AttachmentMeshes, class UObject* __WorldContext);
	static void SetMaterialParameterHologramSASCopy(const struct FLinearColor& CopyColorValue, const struct FLinearColor& DefaultColor, TArray<class UMeshComponent*>& CharacterMeshes, TArray<class UMeshComponent*>& WeaponMeshes, TArray<class UMeshComponent*>& AttachmentMeshes, class UObject* __WorldContext);
	static void SetMaterialParameterHologramSASStealth(const struct FLinearColor& SettingValue, TArray<class UMeshComponent*>& CharacterMeshes, TArray<class UMeshComponent*>& WeaponMeshes, struct FMaterialSwitchCache& InOutStealthSwitch, bool& InOutNowStealth, TArray<class UMeshComponent*>& AttachmentMeshes, class UObject* __WorldContext);
	static void GetMaterialParameterHologramDefaultLineColor(class UObject* __WorldContext, struct FLinearColor* Color);
	static void ConvertEnumBPtoCPP_PlayerAIBattleThinkType(EPlayerAIBattleThinkType BPEnum, class UObject* __WorldContext, EPlayerAIBattleThinkTypeCPP* CPPEnum);
	static void ConvertEnumCPPtoBP_PlayerAIBattleThinkType(EPlayerAIBattleThinkTypeCPP CPPEnum, class UObject* __WorldContext, EPlayerAIBattleThinkType* BPEnum);
	static void ConvertEnumBPtoCPP_PlayerAIBattleThinkParam(EPlayerAIBattleThinkParam BPEnum, class UObject* __WorldContext, EPlayerAIBattleThinkParamCPP* CPPEnum);
	static void ConvertEnumCPPtoBP_PlayerAIBattleThinkParam(EPlayerAIBattleThinkParamCPP CPPEnum, class UObject* __WorldContext, EPlayerAIBattleThinkParam* BPEnum);
	static void ConvertEnumBPtoCPP_PlayerAIThinkTableType(EPlayerAIThinkTableType BPEnum, class UObject* __WorldContext, EPlayerAIThinkTableTypeCPP* CPPEnum);
	static void ConvertEnumCPPtoBP_PlayerAIThinkTableType(EPlayerAIThinkTableTypeCPP CPPEnum, class UObject* __WorldContext, EPlayerAIThinkTableType* BPEnum);
	static void ConvertEnumBPtoCPP_PlayerAIBattleThinkTransition(EPlayerAIBattleThinkTransition BPEnum, class UObject* __WorldContext, EPlayerAIBattleThinkTransitionCPP* CPPEnum);
	static void ConvertEnumCPPtoBP_PlayerAIBattleThinkTransition(EPlayerAIBattleThinkTransitionCPP CPPEnum, class UObject* __WorldContext, EPlayerAIBattleThinkTransition* BPEnum);
	static void ConvertEnumBPtoCPP_PlayerAIMoveMode(EPlayerAIMoveMode BPEnum, class UObject* __WorldContext, EPlayerAIMoveModeCPP* CPPEnum);
	static void ConvertEnumCPPtoBP_PlayerAIMoveMode(EPlayerAIMoveModeCPP CPPEnum, class UObject* __WorldContext, EPlayerAIMoveMode* BPEnum);
	static void CheckTelepoAbleTarget(class AActor* Target, class UObject* __WorldContext, bool* bBattleFieldEnemy);
	static void SetHologramCustomStencil(class UMeshComponent* Mesh, class UObject* __WorldContext);
	static void IsExistGenmaWeaponMesh(int32 WeaponId, class UObject* __WorldContext, bool* bExist);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_PlayerFunctionLibrary_C">();
	}
	static class UBPFL_PlayerFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_PlayerFunctionLibrary_C>();
	}
};
static_assert(alignof(UBPFL_PlayerFunctionLibrary_C) == 0x000008, "Wrong alignment on UBPFL_PlayerFunctionLibrary_C");
static_assert(sizeof(UBPFL_PlayerFunctionLibrary_C) == 0x000028, "Wrong size on UBPFL_PlayerFunctionLibrary_C");

}

