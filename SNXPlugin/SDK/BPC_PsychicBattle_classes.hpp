#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PsychicBattle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PsychicBattle.BPC_PsychicBattle_C
// 0x0388 (0x0448 - 0x00C0)
class UBPC_PsychicBattle_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Initialized;                                       // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Playing;                                           // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InBattleSequence;                                  // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87A4[0x5];                                     // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 SequenceAssetsCh0100;                              // 0x00D8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 SequenceAssetsCh0200;                              // 0x00E8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class ARSCharacterBase*                       HookPlayerActor;                                   // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnFinished;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnStart;                                           // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBattleStart;                                     // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBattleFinish;                                    // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ARSCharacterBase*                       HookEnemyActor;                                    // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SeamlessCameraRoot_C*               SeamlessCamera;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicBattleType                            BattleType;                                        // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     UserId;                                            // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A5[0x2];                                     // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQualifiedFrameTime                    SequencerEndFrame;                                 // 0x0154(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A6[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               PsychicObjectActor;                                // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DamageDataTable;                                   // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequestSetupEventEndTransform;                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicBattleType                            PlayStartPsychicBattleType;                        // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A7[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   PlayStartUser;                                     // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayStart;                                         // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPsychicBattleAnimationPhaseType              BattleAnimationPhase;                              // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A8[0x6];                                     // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NowPlayMontagePlayer;                              // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           NowPlayMontageEnemy;                               // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0100_0100Ref;                      // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   ElecPoleMontages0100;                              // 0x01B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   ElecPoleMontages0200;                              // 0x01C0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0100_0200Ref;                      // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0200_0100Ref;                      // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0200_0200Ref;                      // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0100_0100ObjRef;                   // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0100_0200ObjRef;                   // 0x0210(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0200_0100ObjRef;                   // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    ElecPoleMontages0200_0200ObjRef;                   // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   BattleObjectClassRef;                              // 0x0240(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 BattleObjectActor;                                 // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           ElecPoleAnimationMeshRef;                          // 0x0270(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   ElecPoleMontages0100Obj;                           // 0x0298(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   ElecPoleMontages0200Obj;                           // 0x02A8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class USkeletalMesh*                          AnimationMesh;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             ElecPoleMeshRef;                                   // 0x02C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMesh*                            AppendMesh;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BattleWin;                                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87A9[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Loaded;                                            // 0x02F8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BattleObjectAnimationDelayTime;                    // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87AA[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         ParticleKatakanaRef;                               // 0x0310(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         ParticleHandAura0100Ref;                           // 0x0338(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         ParticleHandAura0200Ref;                           // 0x0360(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         ParticleObjRef;                                    // 0x0388(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class URSParticleSystemComponentBase*> EmitParticles;                                     // 0x03B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class UParticleSystem*                        ParticleKatakana;                                  // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ParticleHandAura0100;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ParticleHandAura0200;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ParticleObj;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UParticleSystem>> ParticleObjEfEventRef;                             // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                ParticleObjEfEvent;                                // 0x03F0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             ElecPoleMeshBreakRef;                              // 0x0400(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMesh*                            AppendMeshBreak;                                   // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSkip;                                           // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87AB[0x3];                                     // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BGActorDitherInterpolateSeconds;                   // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGActorDitherSeconds;                              // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartBGActorHide;                                  // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87AC[0x3];                                     // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LockOnRecoverActor;                                // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnFinished__DelegateSignature(EPsychicBattleType PsychicBattleType);
	void OnStart__DelegateSignature(EPsychicBattleType PsychicBattleType);
	void OnBattleStart__DelegateSignature(EPsychicBattleType PsychicBattleType);
	void OnBattleFinish__DelegateSignature(EPsychicBattleType PsychicBattleType, bool Win);
	void ExecuteUbergraph_BPC_PsychicBattle(int32 EntryPoint);
	void PlayBatleObjectAnimation(EPsychicBattleAnimationPhaseType BattlePhase);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Start(EPsychicBattleType PsychicBattleType, class ARSBattleCharacter_C* User);
	void ProtectedInitialize();
	void ProtectedFinalize(EEndPlayReason EndPlayReason);
	void ProtectedOnFinishedSequencer();
	void LoadAsset(EPsychicBattleType PsychicBattleType, EPlayerID UserPlayerID);
	void GetParameter(EPsychicBattleType PsychicBattleType, struct FPsychicBattleParameter* Parameter);
	void ProtectedGetSequencerAsset(EPsychicBattleType PsychicBattleType, EPlayerID UserPlayerID, TSoftObjectPtr<class ULevelSequence>* LevelSequence);
	void Reset();
	void ProtectedGetLevelSequence(EPsychicBattleType PsychicBattleType, EPlayerID UserPlayerID, class ULevelSequence** Asset);
	void ProtectedRestoreCharacter();
	void EventStartBattleSequence();
	void EventEndBattleSequence(bool IsWin);
	void SetBattleRate(float Rate);
	void EventStartInputPlayer();
	void EventStartInputEnemy();
	void Initialize();
	void Finalize();
	void EventDamagePlayer();
	void EventDamageEnemy();
	void ProtectedEventStartInput(class ARSCharacterBase* Character);
	void ProtectedStartBinding(class ARSCharacterBase* Player, class ARSCharacterBase* Enemy, bool* BindingPlayer, bool* BindingEnemy);
	void ProtectedOnWaitResult();
	void ProtectedGetWinLoseShot(EPsychicBattleType PsychicBattleType, EPlayerID UserPlayerID, class FText* WinShotName, class FText* LoseShotName);
	void UpdateSequence(float DeltaSeconds);
	void ProtectedOnSkipStart();
	void ProtectedDamageInternal(class ARSCharacterBase* DamageActor, class ARSCharacterBase* AttackActor);
	void UpdateSequenceCharacterTransform(class ARSCharacterBase* Character);
	void PrivateStartSequencer(EPsychicBattleType PsychicBattleType, class ARSBattleCharacter_C* User);
	void CheckPlayStart();
	void EventBattleAnimation();
	void PrivatePlayPhaseAnimation();
	void PrivateStopBattleAnimation();
	void PrivateOnFinishAnimation(class UAnimMontage* PlayMontage, bool Interrupted);
	void PrivateLoadAssetElectricPole(EPlayerID UsePlayerID);
	void SetBattleParticle(bool Enable);
	void SetPsychicObjectActor(class ABP_PsychicObjectBasic_C* Param_PsychicObjectActor);
	void EventEmitPoleParticle();
	void EventChangePoleBreak();
	void ProtectedSetupPlayRangeMarkWait();
	void ProtectedSetupPlayRangeMarkSkip();
	void ProtectedSetupPlayRangeMarkInternal(const class FString& MarkName, bool* HasMark);
	void PrivateSetBGActorsDither(bool Visible, bool OneShot, float DeltaSeconds);
	void PrivateUpdateBGActorsDither(float DeltaSeconds);
	void EventBGActorVisible();

	void IsPlaying(bool* Param_Playing) const;
	void ProtectedIsPlayerCh0100(EPlayerID UserPlayerID, bool* Ch0100) const;
	void IsBattleSequence(bool* Param_Playing) const;
	void ProtectedGetLevelSequenceInternal(EPsychicBattleType PsychicBattleType, TArray<class ULevelSequence*>& AssetList, class ULevelSequence** Asset) const;
	void IsInitialize(bool* Param_Initialized) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PsychicBattle_C">();
	}
	static class UBPC_PsychicBattle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PsychicBattle_C>();
	}
};
static_assert(alignof(UBPC_PsychicBattle_C) == 0x000008, "Wrong alignment on UBPC_PsychicBattle_C");
static_assert(sizeof(UBPC_PsychicBattle_C) == 0x000448, "Wrong size on UBPC_PsychicBattle_C");
static_assert(offsetof(UBPC_PsychicBattle_C, UberGraphFrame) == 0x0000C0, "Member 'UBPC_PsychicBattle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, Initialized) == 0x0000C8, "Member 'UBPC_PsychicBattle_C::Initialized' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, Playing) == 0x0000C9, "Member 'UBPC_PsychicBattle_C::Playing' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, InBattleSequence) == 0x0000CA, "Member 'UBPC_PsychicBattle_C::InBattleSequence' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, Sequencer) == 0x0000D0, "Member 'UBPC_PsychicBattle_C::Sequencer' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, SequenceAssetsCh0100) == 0x0000D8, "Member 'UBPC_PsychicBattle_C::SequenceAssetsCh0100' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, SequenceAssetsCh0200) == 0x0000E8, "Member 'UBPC_PsychicBattle_C::SequenceAssetsCh0200' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, HookPlayerActor) == 0x0000F8, "Member 'UBPC_PsychicBattle_C::HookPlayerActor' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, OnFinished) == 0x000100, "Member 'UBPC_PsychicBattle_C::OnFinished' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, OnStart) == 0x000110, "Member 'UBPC_PsychicBattle_C::OnStart' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, OnBattleStart) == 0x000120, "Member 'UBPC_PsychicBattle_C::OnBattleStart' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, OnBattleFinish) == 0x000130, "Member 'UBPC_PsychicBattle_C::OnBattleFinish' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, HookEnemyActor) == 0x000140, "Member 'UBPC_PsychicBattle_C::HookEnemyActor' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, SeamlessCamera) == 0x000148, "Member 'UBPC_PsychicBattle_C::SeamlessCamera' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BattleType) == 0x000150, "Member 'UBPC_PsychicBattle_C::BattleType' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, UserId) == 0x000151, "Member 'UBPC_PsychicBattle_C::UserId' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, SequencerEndFrame) == 0x000154, "Member 'UBPC_PsychicBattle_C::SequencerEndFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, PsychicObjectActor) == 0x000168, "Member 'UBPC_PsychicBattle_C::PsychicObjectActor' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, DamageDataTable) == 0x000170, "Member 'UBPC_PsychicBattle_C::DamageDataTable' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, RequestSetupEventEndTransform) == 0x000178, "Member 'UBPC_PsychicBattle_C::RequestSetupEventEndTransform' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, PlayStartPsychicBattleType) == 0x00017C, "Member 'UBPC_PsychicBattle_C::PlayStartPsychicBattleType' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, PlayStartUser) == 0x000180, "Member 'UBPC_PsychicBattle_C::PlayStartUser' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, PlayStart) == 0x000188, "Member 'UBPC_PsychicBattle_C::PlayStart' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BattleAnimationPhase) == 0x000189, "Member 'UBPC_PsychicBattle_C::BattleAnimationPhase' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, NowPlayMontagePlayer) == 0x000190, "Member 'UBPC_PsychicBattle_C::NowPlayMontagePlayer' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, NowPlayMontageEnemy) == 0x000198, "Member 'UBPC_PsychicBattle_C::NowPlayMontageEnemy' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0100_0100Ref) == 0x0001A0, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0100_0100Ref' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0100) == 0x0001B0, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0100' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0200) == 0x0001C0, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0200' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0100_0200Ref) == 0x0001D0, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0100_0200Ref' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0200_0100Ref) == 0x0001E0, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0200_0100Ref' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0200_0200Ref) == 0x0001F0, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0200_0200Ref' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0100_0100ObjRef) == 0x000200, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0100_0100ObjRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0100_0200ObjRef) == 0x000210, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0100_0200ObjRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0200_0100ObjRef) == 0x000220, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0200_0100ObjRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0200_0200ObjRef) == 0x000230, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0200_0200ObjRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BattleObjectClassRef) == 0x000240, "Member 'UBPC_PsychicBattle_C::BattleObjectClassRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BattleObjectActor) == 0x000268, "Member 'UBPC_PsychicBattle_C::BattleObjectActor' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleAnimationMeshRef) == 0x000270, "Member 'UBPC_PsychicBattle_C::ElecPoleAnimationMeshRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0100Obj) == 0x000298, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0100Obj' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMontages0200Obj) == 0x0002A8, "Member 'UBPC_PsychicBattle_C::ElecPoleMontages0200Obj' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, AnimationMesh) == 0x0002B8, "Member 'UBPC_PsychicBattle_C::AnimationMesh' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMeshRef) == 0x0002C0, "Member 'UBPC_PsychicBattle_C::ElecPoleMeshRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, AppendMesh) == 0x0002E8, "Member 'UBPC_PsychicBattle_C::AppendMesh' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BattleWin) == 0x0002F0, "Member 'UBPC_PsychicBattle_C::BattleWin' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, Loaded) == 0x0002F8, "Member 'UBPC_PsychicBattle_C::Loaded' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BattleObjectAnimationDelayTime) == 0x000308, "Member 'UBPC_PsychicBattle_C::BattleObjectAnimationDelayTime' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleKatakanaRef) == 0x000310, "Member 'UBPC_PsychicBattle_C::ParticleKatakanaRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleHandAura0100Ref) == 0x000338, "Member 'UBPC_PsychicBattle_C::ParticleHandAura0100Ref' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleHandAura0200Ref) == 0x000360, "Member 'UBPC_PsychicBattle_C::ParticleHandAura0200Ref' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleObjRef) == 0x000388, "Member 'UBPC_PsychicBattle_C::ParticleObjRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, EmitParticles) == 0x0003B0, "Member 'UBPC_PsychicBattle_C::EmitParticles' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleKatakana) == 0x0003C0, "Member 'UBPC_PsychicBattle_C::ParticleKatakana' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleHandAura0100) == 0x0003C8, "Member 'UBPC_PsychicBattle_C::ParticleHandAura0100' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleHandAura0200) == 0x0003D0, "Member 'UBPC_PsychicBattle_C::ParticleHandAura0200' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleObj) == 0x0003D8, "Member 'UBPC_PsychicBattle_C::ParticleObj' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleObjEfEventRef) == 0x0003E0, "Member 'UBPC_PsychicBattle_C::ParticleObjEfEventRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ParticleObjEfEvent) == 0x0003F0, "Member 'UBPC_PsychicBattle_C::ParticleObjEfEvent' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, ElecPoleMeshBreakRef) == 0x000400, "Member 'UBPC_PsychicBattle_C::ElecPoleMeshBreakRef' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, AppendMeshBreak) == 0x000428, "Member 'UBPC_PsychicBattle_C::AppendMeshBreak' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, UseSkip) == 0x000430, "Member 'UBPC_PsychicBattle_C::UseSkip' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BGActorDitherInterpolateSeconds) == 0x000434, "Member 'UBPC_PsychicBattle_C::BGActorDitherInterpolateSeconds' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, BGActorDitherSeconds) == 0x000438, "Member 'UBPC_PsychicBattle_C::BGActorDitherSeconds' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, StartBGActorHide) == 0x00043C, "Member 'UBPC_PsychicBattle_C::StartBGActorHide' has a wrong offset!");
static_assert(offsetof(UBPC_PsychicBattle_C, LockOnRecoverActor) == 0x000440, "Member 'UBPC_PsychicBattle_C::LockOnRecoverActor' has a wrong offset!");

}

