#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_BrainTalk_DataBase

#include "Basic.hpp"

#include "BPFL_BrainTalk_DataBase_classes.hpp"
#include "BPFL_BrainTalk_DataBase_parameters.hpp"


namespace SDK
{

// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.GetRowItem
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       BrainTalkDataTable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FBrainTalkData                   RowItem                                                (Parm, OutParm)

void UBPFL_BrainTalk_DataBase_C::GetRowItem(class UDataTable* BrainTalkDataTable, int32 Param_Index, class UObject* __WorldContext, bool* IsSuccess, struct FBrainTalkData* RowItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "GetRowItem");

	Params::BPFL_BrainTalk_DataBase_C_GetRowItem Parms{};

	Parms.BrainTalkDataTable = BrainTalkDataTable;
	Parms.Param_Index = Param_Index;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;

	if (RowItem != nullptr)
		*RowItem = std::move(Parms.RowItem);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.StartBrainTalk
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BrainTalkID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBrainTalkCategory                      Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEventCallEnable                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsGameOverCheck                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::StartBrainTalk(class FName BrainTalkID, EBrainTalkCategory Category, bool IsEventCallEnable, bool IsGameOverCheck, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "StartBrainTalk");

	Params::BPFL_BrainTalk_DataBase_C_StartBrainTalk Parms{};

	Parms.BrainTalkID = BrainTalkID;
	Parms.Category = Category;
	Parms.IsEventCallEnable = IsEventCallEnable;
	Parms.IsGameOverCheck = IsGameOverCheck;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.EndBrainTalk
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::EndBrainTalk(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "EndBrainTalk");

	Params::BPFL_BrainTalk_DataBase_C_EndBrainTalk Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.SetBrainTalk
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_BrainTalk_DataBase_C::SetBrainTalk(int32 Param_Index, class UObject* __WorldContext, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "SetBrainTalk");

	Params::BPFL_BrainTalk_DataBase_C_SetBrainTalk Parms{};

	Parms.Param_Index = Param_Index;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.InitializeBrainTalk
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBrainTalkMasterData             BrainTalkData                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FBrainTalk_CategoryDatatable     CategoryDatatable                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::InitializeBrainTalk(const struct FBrainTalkMasterData& BrainTalkData, const struct FBrainTalk_CategoryDatatable& CategoryDatatable, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "InitializeBrainTalk");

	Params::BPFL_BrainTalk_DataBase_C_InitializeBrainTalk Parms{};

	Parms.BrainTalkData = std::move(BrainTalkData);
	Parms.CategoryDatatable = std::move(CategoryDatatable);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.PauseBrainTalk
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::PauseBrainTalk(bool IsPause, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "PauseBrainTalk");

	Params::BPFL_BrainTalk_DataBase_C_PauseBrainTalk Parms{};

	Parms.IsPause = IsPause;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.StopBrainTalk
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOpenHold                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLowerPriorityOnly                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::StopBrainTalk(bool IsOpenHold, bool IsLowerPriorityOnly, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "StopBrainTalk");

	Params::BPFL_BrainTalk_DataBase_C_StopBrainTalk Parms{};

	Parms.IsOpenHold = IsOpenHold;
	Parms.IsLowerPriorityOnly = IsLowerPriorityOnly;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.PauseBrainTalkAtStartTalkEventBefore
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::PauseBrainTalkAtStartTalkEventBefore(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "PauseBrainTalkAtStartTalkEventBefore");

	Params::BPFL_BrainTalk_DataBase_C_PauseBrainTalkAtStartTalkEventBefore Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.PauseBrainTalkAtEndTalkEventAfter
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::PauseBrainTalkAtEndTalkEventAfter(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "PauseBrainTalkAtEndTalkEventAfter");

	Params::BPFL_BrainTalk_DataBase_C_PauseBrainTalkAtEndTalkEventAfter Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_BrainTalk_DataBase.BPFL_BrainTalk_DataBase_C.StartBrainTalk_Tag
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBrainTalkBt_PlayInfo            PlayInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsEventCallEnable                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsGameOverCheck                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_BrainTalk_DataBase_C::StartBrainTalk_Tag(const struct FBrainTalkBt_PlayInfo& PlayInfo, bool IsEventCallEnable, bool IsGameOverCheck, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_BrainTalk_DataBase_C", "StartBrainTalk_Tag");

	Params::BPFL_BrainTalk_DataBase_C_StartBrainTalk_Tag Parms{};

	Parms.PlayInfo = std::move(PlayInfo);
	Parms.IsEventCallEnable = IsEventCallEnable;
	Parms.IsGameOverCheck = IsGameOverCheck;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}

}

