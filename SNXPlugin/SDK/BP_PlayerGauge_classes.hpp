#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerGauge

#include "Basic.hpp"

#include "FBattleBonusData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EBattleBonusAddType_structs.hpp"
#include "EPsychicGaugeEffect_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerGauge.BP_PlayerGauge_C
// 0x00F0 (0x01B0 - 0x00C0)
class UBP_PlayerGauge_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         PsychicGauge;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicGaugeMax;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicGaugeAutoRecoveryValue;                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_466F[0x4];                                     // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicGaugeAutoRecoveryValueBattle;               // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicGaugeAddDefeated;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PsychicGaugeAddDefeatedBrainCrash;                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BattleBonusRate;                                   // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBattleBonusModeDrive;                             // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBattleBonusModeBrainField;                        // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4670[0x2];                                     // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFBattleBonusData                      BattleBonusData;                                   // 0x00F4(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOpenBattleBonusUI;                                // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4671[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, EPsychicGaugeEffect>        PsychicGaugeEffectRequest;                         // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PsychicGaugeRecoveryRate;                          // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4672[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BattleBonusClaimantList;                           // 0x0190(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameTimer                             OverkillBonusTimer;                                // 0x01A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPauseTimer;                                       // 0x01AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTutorialPsychicGauge;                             // 0x01AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerGauge(int32 EntryPoint);
	void EventOnPauseTimer(bool bPause);
	void UnbindOverkillBonus();
	void BindOverkillBonusTick();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void AddPsychicGauge(float Value);
	void SetPsychicGaugeMax(float Value);
	void AutoRecoveryPsychicGauge(float DeltaSeconds);
	void AddPsychicGaugeEnemyDestroy(bool bBrainCrash);
	void UpdatePsychicGaugeHUD(bool bUse, float UseParam, bool* bSucess);
	void InitPsychicGaugeMax();
	void AddBattleBonusRate(EBattleBonusAddType InType);
	void SetBattleBonusModeDrive(bool bON);
	void SetBattleBonusModeBrainField(bool bON);
	void ResetBattleBonusRate();
	void InitializeBattleBonusData();
	void EndBattleBonus();
	void SetPsychicGaugeEffect(EPsychicGaugeEffect Effect, class FName ClaimantName, bool bSet);
	void UpdatePsychicGaugeEffect();
	void ResetPsychicGauge();
	void SetPsychicGaugeRecoveryRate(float InRate);
	void ResetPsychicGaugeRecoveryRate();
	void SetEnableBattleBonus(bool bEnable, class FName ClaimantName);
	void TickBattleBonusOverkillBonus(float DeltaSeconds);
	void SetTutorialPsychicGauge(bool bTutorial);

	void GetPsychicGauge(float* Value) const;
	void GetPsychicGaugeMax(float* Value) const;
	void GetBattleBonusRate(float* Rate) const;
	void GetBattleBonusMaxRate(float* Rate) const;
	void IsEnableBattleBonus(bool* bEnable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerGauge_C">();
	}
	static class UBP_PlayerGauge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerGauge_C>();
	}
};
static_assert(alignof(UBP_PlayerGauge_C) == 0x000008, "Wrong alignment on UBP_PlayerGauge_C");
static_assert(sizeof(UBP_PlayerGauge_C) == 0x0001B0, "Wrong size on UBP_PlayerGauge_C");
static_assert(offsetof(UBP_PlayerGauge_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_PlayerGauge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGauge) == 0x0000C8, "Member 'UBP_PlayerGauge_C::PsychicGauge' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeMax) == 0x0000CC, "Member 'UBP_PlayerGauge_C::PsychicGaugeMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeAutoRecoveryValue) == 0x0000D0, "Member 'UBP_PlayerGauge_C::PsychicGaugeAutoRecoveryValue' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, OwnerPlayer) == 0x0000D8, "Member 'UBP_PlayerGauge_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeAutoRecoveryValueBattle) == 0x0000E0, "Member 'UBP_PlayerGauge_C::PsychicGaugeAutoRecoveryValueBattle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeAddDefeated) == 0x0000E4, "Member 'UBP_PlayerGauge_C::PsychicGaugeAddDefeated' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeAddDefeatedBrainCrash) == 0x0000E8, "Member 'UBP_PlayerGauge_C::PsychicGaugeAddDefeatedBrainCrash' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, BattleBonusRate) == 0x0000EC, "Member 'UBP_PlayerGauge_C::BattleBonusRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, bBattleBonusModeDrive) == 0x0000F0, "Member 'UBP_PlayerGauge_C::bBattleBonusModeDrive' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, bBattleBonusModeBrainField) == 0x0000F1, "Member 'UBP_PlayerGauge_C::bBattleBonusModeBrainField' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, BattleBonusData) == 0x0000F4, "Member 'UBP_PlayerGauge_C::BattleBonusData' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, bOpenBattleBonusUI) == 0x000134, "Member 'UBP_PlayerGauge_C::bOpenBattleBonusUI' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeEffectRequest) == 0x000138, "Member 'UBP_PlayerGauge_C::PsychicGaugeEffectRequest' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, PsychicGaugeRecoveryRate) == 0x000188, "Member 'UBP_PlayerGauge_C::PsychicGaugeRecoveryRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, BattleBonusClaimantList) == 0x000190, "Member 'UBP_PlayerGauge_C::BattleBonusClaimantList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, OverkillBonusTimer) == 0x0001A0, "Member 'UBP_PlayerGauge_C::OverkillBonusTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, bPauseTimer) == 0x0001AC, "Member 'UBP_PlayerGauge_C::bPauseTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerGauge_C, bTutorialPsychicGauge) == 0x0001AD, "Member 'UBP_PlayerGauge_C::bTutorialPsychicGauge' has a wrong offset!");

}

