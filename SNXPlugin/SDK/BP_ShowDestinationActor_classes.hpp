#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShowDestinationActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FScenarioFlagCheckData_structs.hpp"
#include "EEventEnableCheckType_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShowDestinationActor.BP_ShowDestinationActor_C
// 0x0078 (0x02A8 - 0x0230)
class ABP_ShowDestinationActor_C final : public AShowDestinationActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          ShowBoxComponent;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EEventEnableCheckType                         CheckType;                                         // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85F6[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProgressId;                                        // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpperLimitProgressID;                              // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85F7[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFScenarioFlagCheckData>        CheckScenarioFlagList;                             // 0x0258(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AActionIcon*                            ActionIconActor;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActionIcon*                            ActionIconActorSub;                                // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85F8[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPositionOffset;                               // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FShowDestinationDBDataCell>     ShowDesCheckList;                                  // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EActionIconType                               ActionIconType;                                    // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85F9[0x3];                                     // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubQuestID;                                        // 0x029C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionIconEnable;                                  // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ShowDestinationActor(int32 EntryPoint);
	void OnChangeBondsProgress(EPlayerID TargetID, float bondsProgress);
	void ChangeActiveSubQuest(class FName DatatableId);
	void ChangeSubQuestIcon(EUINoticeMessageCallType SenderType, class FName DatatableId);
	void EventShowDestinationCheck();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void CheckShowDestinationList_Old(bool* ReturnBool);
	void CheckShowDestination_old(EShowDestinationCheckType Param_CheckType, int32 Param_ProgressId, int32 Param_UpperLimitProgressID, const TArray<struct FFScenarioFlagCheckData>& ScenarioFlagArray, int32 MinBondsProgressID, int32 MaxBondsProgressID, EPlayerID HeroID, EPlayerID PartnerId, bool* ReturnBool);
	void OffVisibleShowIcon();
	void CheckShowDestinationList2(TArray<int32>* ReturnInt);
	void CheckShowDestination2(EQuestType QuestType, class FName QuestId, EEventEnableCheckType Param_CheckType, int32 Param_ProgressId, int32 Param_UpperLimitProgressID, const TArray<struct FFScenarioFlagCheckData>& ScenarioFlagArray, bool* ReturnBool);
	void CreateActionIcon(TArray<int32>& ClearArray);
	void CheckEnableDestinationTownPeople(bool* ReturnIsEnableDestinationTownPeople);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShowDestinationActor_C">();
	}
	static class ABP_ShowDestinationActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ShowDestinationActor_C>();
	}
};
static_assert(alignof(ABP_ShowDestinationActor_C) == 0x000008, "Wrong alignment on ABP_ShowDestinationActor_C");
static_assert(sizeof(ABP_ShowDestinationActor_C) == 0x0002A8, "Wrong size on ABP_ShowDestinationActor_C");
static_assert(offsetof(ABP_ShowDestinationActor_C, UberGraphFrame) == 0x000230, "Member 'ABP_ShowDestinationActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ShowBoxComponent) == 0x000238, "Member 'ABP_ShowDestinationActor_C::ShowBoxComponent' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, Capsule) == 0x000240, "Member 'ABP_ShowDestinationActor_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, CheckType) == 0x000248, "Member 'ABP_ShowDestinationActor_C::CheckType' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ProgressId) == 0x00024C, "Member 'ABP_ShowDestinationActor_C::ProgressId' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, UpperLimitProgressID) == 0x000250, "Member 'ABP_ShowDestinationActor_C::UpperLimitProgressID' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, CheckScenarioFlagList) == 0x000258, "Member 'ABP_ShowDestinationActor_C::CheckScenarioFlagList' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ActionIconActor) == 0x000268, "Member 'ABP_ShowDestinationActor_C::ActionIconActor' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ActionIconActorSub) == 0x000270, "Member 'ABP_ShowDestinationActor_C::ActionIconActorSub' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, IsVisible) == 0x000278, "Member 'ABP_ShowDestinationActor_C::IsVisible' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, WorldPositionOffset) == 0x00027C, "Member 'ABP_ShowDestinationActor_C::WorldPositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ShowDesCheckList) == 0x000288, "Member 'ABP_ShowDestinationActor_C::ShowDesCheckList' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ActionIconType) == 0x000298, "Member 'ABP_ShowDestinationActor_C::ActionIconType' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, SubQuestID) == 0x00029C, "Member 'ABP_ShowDestinationActor_C::SubQuestID' has a wrong offset!");
static_assert(offsetof(ABP_ShowDestinationActor_C, ActionIconEnable) == 0x0002A4, "Member 'ABP_ShowDestinationActor_C::ActionIconEnable' has a wrong offset!");

}

