#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyMaterialAccessorComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyMaterialAccessorComponent.BP_EnemyMaterialAccessorComponent_C
// 0x05D8 (0x0938 - 0x0360)
class UBP_EnemyMaterialAccessorComponent_C final : public UEnemyMaterialAccessorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FMACVariableFloat                      MatVertexColorEmissivePower;                       // 0x0368(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatVertexColorEmissivePowerOverride;               // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A0F[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWetEffectPower;                                 // 0x0398(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWetEffectPowerOverride;                         // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A10[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWetWaterToOil;                                  // 0x03C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWetWaterToOilOverride;                          // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A11[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatBerserkRate;                                    // 0x03F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatBerserkSignRate;                                // 0x0420(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatBerserkRateOverride;                            // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A12[0x7];                                     // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatFlashRate;                                      // 0x0450(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatFlashRateOverride;                              // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A13[0x7];                                     // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatVanishRate;                                     // 0x0480(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatVanishRateOverride;                             // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A14[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatVanishArmour;                                   // 0x04B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatVanishArmourOverride;                           // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A15[0x7];                                     // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWeakEmissiveRate;                               // 0x04E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWeakEmissiveRateOverride;                       // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A16[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWeakPointRate;                                  // 0x0510(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWeakPointRateOverride;                          // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A17[0x7];                                     // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatBrainFieldRate;                                 // 0x0540(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatBrainFieldRateOverride;                         // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A18[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatAvatarEffectPower;                              // 0x0570(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatAvatarEffectPowerOverride;                      // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A19[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatStealthRate;                                    // 0x05A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatStealthRateOverride;                            // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1A[0x7];                                     // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSeeThroughStealthRate;                          // 0x05D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSeeThroughStealthRateOverride;                  // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1B[0x3];                                     // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BerserkState;                                      // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BerserkCurveTimer;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1C[0x4];                                     // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      BerserkStartColorCurve;                            // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      BerserkLoopColorCurve;                             // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      BerserkSignStartColorCurve;                        // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      BerserkSignLoopColorCurve;                         // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      BerserkSignEndColorCurve;                          // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           WeakEmissiveCurve;                                 // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         SlotNames;                                         // 0x0638(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMACVariableFloat                      MatSlot00Visibility;                               // 0x0648(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSlot01Visibility;                               // 0x0670(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSlot02Visibility;                               // 0x0698(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSlot03Visibility;                               // 0x06C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSlot04Visibility;                               // 0x06E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatBrainCrashRate;                                 // 0x0710(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatBrainCrashRateOverride;                         // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1D[0x7];                                     // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatBrainCrashIntensity;                            // 0x0740(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatBrainCrashIntensityOverride;                    // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1E[0x7];                                     // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatTwistCenterOffsetX;                             // 0x0770(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatTwistCenterOffsetY;                             // 0x0798(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatTwistMaxRange;                                  // 0x07C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatTwistPower;                                     // 0x07E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatTwistOverride;                                  // 0x0810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1F[0x7];                                     // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatEm1210IcePhase;                                 // 0x0818(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatEm1210IcePhaseOverride;                         // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A20[0x7];                                     // 0x0841(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatEm1210IcePunch;                                 // 0x0848(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatEm1210IcePunchOverride;                         // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A21[0x7];                                     // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatAddRateMaskColor;                               // 0x0878(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatAddRateMaskColorOverride;                       // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A22[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatVanishRateSlotArmour;                           // 0x08A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SlotArmour;                                        // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMaterialAccessorSetupID                      MatVanishRateSlotArmourOverride;                   // 0x08D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A23[0x3];                                     // 0x08D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatVertexWavingRate;                               // 0x08D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatVertexWavingRateOverride;                       // 0x0900(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A24[0x7];                                     // 0x0901(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWeakVisible;                                    // 0x0908(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWeakVisibleOverride;                            // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A25[0x3];                                     // 0x0931(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotWeak;                                          // 0x0934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EnemyMaterialAccessorComponent(int32 EntryPoint);
	void SetEnemyMesh(class USkeletalMeshComponent* EnemyMesh);
	void SetupDefaultParameter(class ACharacter* Enemy);
	void UpdateMateiral();
	void RestoreParameter();
	void PrivateSetupEnemyMesh();
	void PrivateSetupDefaultParameter(class AActor* Enemy);
	void PrivateUpdateMaterial();
	void PrivateRestoreDefaultParameter();
	void PrivateInitialize();
	void PrivateUpdateMaterialBerserk();
	void PrivateUpdateMaterialWeakEmissive();
	void PrivateUpdateVisiblitySlot();
	void PrivateUpdateEm1210();
	void PrivateIinitializeSlot();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyMaterialAccessorComponent_C">();
	}
	static class UBP_EnemyMaterialAccessorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyMaterialAccessorComponent_C>();
	}
};
static_assert(alignof(UBP_EnemyMaterialAccessorComponent_C) == 0x000008, "Wrong alignment on UBP_EnemyMaterialAccessorComponent_C");
static_assert(sizeof(UBP_EnemyMaterialAccessorComponent_C) == 0x000938, "Wrong size on UBP_EnemyMaterialAccessorComponent_C");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, UberGraphFrame) == 0x000360, "Member 'UBP_EnemyMaterialAccessorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVertexColorEmissivePower) == 0x000368, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVertexColorEmissivePower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVertexColorEmissivePowerOverride) == 0x000390, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVertexColorEmissivePowerOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWetEffectPower) == 0x000398, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWetEffectPower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWetEffectPowerOverride) == 0x0003C0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWetEffectPowerOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWetWaterToOil) == 0x0003C8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWetWaterToOil' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWetWaterToOilOverride) == 0x0003F0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWetWaterToOilOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBerserkRate) == 0x0003F8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBerserkRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBerserkSignRate) == 0x000420, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBerserkSignRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBerserkRateOverride) == 0x000448, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBerserkRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatFlashRate) == 0x000450, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatFlashRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatFlashRateOverride) == 0x000478, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatFlashRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVanishRate) == 0x000480, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVanishRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVanishRateOverride) == 0x0004A8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVanishRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVanishArmour) == 0x0004B0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVanishArmour' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVanishArmourOverride) == 0x0004D8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVanishArmourOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWeakEmissiveRate) == 0x0004E0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWeakEmissiveRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWeakEmissiveRateOverride) == 0x000508, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWeakEmissiveRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWeakPointRate) == 0x000510, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWeakPointRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWeakPointRateOverride) == 0x000538, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWeakPointRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBrainFieldRate) == 0x000540, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBrainFieldRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBrainFieldRateOverride) == 0x000568, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBrainFieldRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatAvatarEffectPower) == 0x000570, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatAvatarEffectPower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatAvatarEffectPowerOverride) == 0x000598, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatAvatarEffectPowerOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatStealthRate) == 0x0005A0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatStealthRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatStealthRateOverride) == 0x0005C8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatStealthRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSeeThroughStealthRate) == 0x0005D0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSeeThroughStealthRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSeeThroughStealthRateOverride) == 0x0005F8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSeeThroughStealthRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkState) == 0x0005FC, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkState' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkCurveTimer) == 0x000600, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkCurveTimer' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkStartColorCurve) == 0x000608, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkStartColorCurve' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkLoopColorCurve) == 0x000610, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkLoopColorCurve' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkSignStartColorCurve) == 0x000618, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkSignStartColorCurve' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkSignLoopColorCurve) == 0x000620, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkSignLoopColorCurve' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, BerserkSignEndColorCurve) == 0x000628, "Member 'UBP_EnemyMaterialAccessorComponent_C::BerserkSignEndColorCurve' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, WeakEmissiveCurve) == 0x000630, "Member 'UBP_EnemyMaterialAccessorComponent_C::WeakEmissiveCurve' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, SlotNames) == 0x000638, "Member 'UBP_EnemyMaterialAccessorComponent_C::SlotNames' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSlot00Visibility) == 0x000648, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSlot00Visibility' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSlot01Visibility) == 0x000670, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSlot01Visibility' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSlot02Visibility) == 0x000698, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSlot02Visibility' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSlot03Visibility) == 0x0006C0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSlot03Visibility' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatSlot04Visibility) == 0x0006E8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatSlot04Visibility' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBrainCrashRate) == 0x000710, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBrainCrashRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBrainCrashRateOverride) == 0x000738, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBrainCrashRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBrainCrashIntensity) == 0x000740, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBrainCrashIntensity' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatBrainCrashIntensityOverride) == 0x000768, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatBrainCrashIntensityOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatTwistCenterOffsetX) == 0x000770, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatTwistCenterOffsetX' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatTwistCenterOffsetY) == 0x000798, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatTwistCenterOffsetY' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatTwistMaxRange) == 0x0007C0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatTwistMaxRange' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatTwistPower) == 0x0007E8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatTwistPower' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatTwistOverride) == 0x000810, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatTwistOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatEm1210IcePhase) == 0x000818, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatEm1210IcePhase' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatEm1210IcePhaseOverride) == 0x000840, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatEm1210IcePhaseOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatEm1210IcePunch) == 0x000848, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatEm1210IcePunch' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatEm1210IcePunchOverride) == 0x000870, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatEm1210IcePunchOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatAddRateMaskColor) == 0x000878, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatAddRateMaskColor' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatAddRateMaskColorOverride) == 0x0008A0, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatAddRateMaskColorOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVanishRateSlotArmour) == 0x0008A8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVanishRateSlotArmour' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, SlotArmour) == 0x0008D0, "Member 'UBP_EnemyMaterialAccessorComponent_C::SlotArmour' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVanishRateSlotArmourOverride) == 0x0008D4, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVanishRateSlotArmourOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVertexWavingRate) == 0x0008D8, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVertexWavingRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatVertexWavingRateOverride) == 0x000900, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatVertexWavingRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWeakVisible) == 0x000908, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWeakVisible' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, MatWeakVisibleOverride) == 0x000930, "Member 'UBP_EnemyMaterialAccessorComponent_C::MatWeakVisibleOverride' has a wrong offset!");
static_assert(offsetof(UBP_EnemyMaterialAccessorComponent_C, SlotWeak) == 0x000934, "Member 'UBP_EnemyMaterialAccessorComponent_C::SlotWeak' has a wrong offset!");

}

