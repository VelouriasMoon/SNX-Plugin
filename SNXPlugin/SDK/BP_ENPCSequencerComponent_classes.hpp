#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ENPCSequencerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_SequencerComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ENPCSequencerComponent.BP_ENPCSequencerComponent_C
// 0x02A0 (0x0500 - 0x0260)
class UBP_ENPCSequencerComponent_C final : public UBP_SequencerComponent_C
{
public:
	uint8                                         Pad_88D2[0x5];                                     // 0x0253(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ENPCSequencerComponent_C;        // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ACineCameraActor*                       SequenceFinalCamera;                               // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventCameraRoot_C*                  SequenceCameraRoot;                                // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CameraRootTransform;                               // 0x0270(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ARSBattleCharacter_C*                   OwnerPlayer;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88D3[0x8];                                     // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshReferenceTransform;                            // 0x02B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 DummyActor;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88D4[0x8];                                     // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MainPlayerMeshRefTrans;                            // 0x02F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             LeftPlayerMeshRefTrans;                            // 0x0320(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             RightPlayerMeshRefTrans;                           // 0x0350(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ACameraActor*                           WatchCamera;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88D5[0x8];                                     // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MainPlayerMeshRelativeTrans;                       // 0x0390(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             MainPlayerFinalTrans;                              // 0x03C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMainPlayerGetBoneTransOnce;                       // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLeftPlayerGetBoneTransOnce;                       // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRightPlayerGetBoneTransOnce;                      // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88D6[0xD];                                     // 0x03F3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftPlayerFinalTrans;                              // 0x0400(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             RightPlayerFinalTrans;                             // 0x0430(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_SeamlessCameraRoot_C*               SeamlessCamera;                                    // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88D7[0x8];                                     // 0x0468(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshReferenceTransform2;                           // 0x0470(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FText                                   CodeID;                                            // 0x04A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SequenceActorName;                                 // 0x04B8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_CableBase_C*>                DummyBrainCodeList;                                // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_CableBase_C*>                DummySasCodeList;                                  // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bLoadDummyCode;                                    // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ENPCSequencerComponent(int32 EntryPoint);
	void PauseDelayRestart(float DelayRestartTime);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void EndSequencer(int32 Param_SequencerIndex, bool* Dummy);
	void Update(bool* Dummy);
	void Initialize(bool* Dummy);
	void StartSequnecer(int32 Index_in, bool* Dummy);
	void PlaySequencer(bool* Return);
	void BindActor(const class FText& ObjName, class AActor* Param_BindActor, bool* Dummy);
	void CalcActorTransform(class ARSBattleCharacter_C* RSBattleCharacter, const struct FTransform& MeshRefTransform, struct FTransform* CalcTransform);
	void BindCineCamera(bool* Dummy);
	void SetPartyStoreTransform();
	void OnWaitResult();
	void CharacterDynamicEventEnd(class ARSCharacterBase* RSCharacter, bool* Dummy);
	void PlayerDynamicEventStart(class ARSBattlePlayer_C* RSPlayer, bool* Dummy);
	void SetEnemyStoreTransform();
	void Finalize(bool* Dummy);
	void BindingSetupCode();
	void SwappingCode();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ENPCSequencerComponent_C">();
	}
	static class UBP_ENPCSequencerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ENPCSequencerComponent_C>();
	}
};
static_assert(alignof(UBP_ENPCSequencerComponent_C) == 0x000010, "Wrong alignment on UBP_ENPCSequencerComponent_C");
static_assert(sizeof(UBP_ENPCSequencerComponent_C) == 0x000500, "Wrong size on UBP_ENPCSequencerComponent_C");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, UberGraphFrame_BP_ENPCSequencerComponent_C) == 0x000258, "Member 'UBP_ENPCSequencerComponent_C::UberGraphFrame_BP_ENPCSequencerComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, SequenceFinalCamera) == 0x000260, "Member 'UBP_ENPCSequencerComponent_C::SequenceFinalCamera' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, SequenceCameraRoot) == 0x000268, "Member 'UBP_ENPCSequencerComponent_C::SequenceCameraRoot' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, CameraRootTransform) == 0x000270, "Member 'UBP_ENPCSequencerComponent_C::CameraRootTransform' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, OwnerPlayer) == 0x0002A0, "Member 'UBP_ENPCSequencerComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, MeshReferenceTransform) == 0x0002B0, "Member 'UBP_ENPCSequencerComponent_C::MeshReferenceTransform' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, DummyActor) == 0x0002E0, "Member 'UBP_ENPCSequencerComponent_C::DummyActor' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, MainPlayerMeshRefTrans) == 0x0002F0, "Member 'UBP_ENPCSequencerComponent_C::MainPlayerMeshRefTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, LeftPlayerMeshRefTrans) == 0x000320, "Member 'UBP_ENPCSequencerComponent_C::LeftPlayerMeshRefTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, RightPlayerMeshRefTrans) == 0x000350, "Member 'UBP_ENPCSequencerComponent_C::RightPlayerMeshRefTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, WatchCamera) == 0x000380, "Member 'UBP_ENPCSequencerComponent_C::WatchCamera' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, MainPlayerMeshRelativeTrans) == 0x000390, "Member 'UBP_ENPCSequencerComponent_C::MainPlayerMeshRelativeTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, MainPlayerFinalTrans) == 0x0003C0, "Member 'UBP_ENPCSequencerComponent_C::MainPlayerFinalTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, bMainPlayerGetBoneTransOnce) == 0x0003F0, "Member 'UBP_ENPCSequencerComponent_C::bMainPlayerGetBoneTransOnce' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, bLeftPlayerGetBoneTransOnce) == 0x0003F1, "Member 'UBP_ENPCSequencerComponent_C::bLeftPlayerGetBoneTransOnce' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, bRightPlayerGetBoneTransOnce) == 0x0003F2, "Member 'UBP_ENPCSequencerComponent_C::bRightPlayerGetBoneTransOnce' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, LeftPlayerFinalTrans) == 0x000400, "Member 'UBP_ENPCSequencerComponent_C::LeftPlayerFinalTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, RightPlayerFinalTrans) == 0x000430, "Member 'UBP_ENPCSequencerComponent_C::RightPlayerFinalTrans' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, SeamlessCamera) == 0x000460, "Member 'UBP_ENPCSequencerComponent_C::SeamlessCamera' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, MeshReferenceTransform2) == 0x000470, "Member 'UBP_ENPCSequencerComponent_C::MeshReferenceTransform2' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, CodeID) == 0x0004A0, "Member 'UBP_ENPCSequencerComponent_C::CodeID' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, SequenceActorName) == 0x0004B8, "Member 'UBP_ENPCSequencerComponent_C::SequenceActorName' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, DummyBrainCodeList) == 0x0004D0, "Member 'UBP_ENPCSequencerComponent_C::DummyBrainCodeList' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, DummySasCodeList) == 0x0004E0, "Member 'UBP_ENPCSequencerComponent_C::DummySasCodeList' has a wrong offset!");
static_assert(offsetof(UBP_ENPCSequencerComponent_C, bLoadDummyCode) == 0x0004F0, "Member 'UBP_ENPCSequencerComponent_C::bLoadDummyCode' has a wrong offset!");

}

