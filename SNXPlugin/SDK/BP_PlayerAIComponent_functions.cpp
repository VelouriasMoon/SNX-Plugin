#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerAIComponent

#include "Basic.hpp"

#include "BP_PlayerAIComponent_classes.hpp"
#include "BP_PlayerAIComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ExecuteUbergraph_BP_PlayerAIComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::ExecuteUbergraph_BP_PlayerAIComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ExecuteUbergraph_BP_PlayerAIComponent");

	Params::BP_PlayerAIComponent_C_ExecuteUbergraph_BP_PlayerAIComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnCheckBattleActionStartTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::OnCheckBattleActionStartTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnCheckBattleActionStartTick");

	Params::BP_PlayerAIComponent_C_OnCheckBattleActionStartTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UnbindCheckBattleActionStart
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UnbindCheckBattleActionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UnbindCheckBattleActionStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.BindCheckBattleActionStart
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::BindCheckBattleActionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "BindCheckBattleActionStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnUpdateAI
// (Event, Protected, BlueprintEvent)

void UBP_PlayerAIComponent_C::OnUpdateAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnUpdateAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnInitializeAI
// (Event, Protected, BlueprintEvent)

void UBP_PlayerAIComponent_C::OnInitializeAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnInitializeAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ReceiveEndPlay");

	Params::BP_PlayerAIComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerAIComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RegisterLocationEvalueateTimerEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::RegisterLocationEvalueateTimerEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "RegisterLocationEvalueateTimerEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EndEvaluateLocation
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::EndEvaluateLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "EndEvaluateLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.BeginEvaluateLocation
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::BeginEvaluateLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "BeginEvaluateLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateMovePos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateMovePos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Initialize
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetMoveMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIMoveModeCPP                    ModeCPP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetMoveMode(EPlayerAIMoveModeCPP ModeCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetMoveMode");

	Params::BP_PlayerAIComponent_C_SetMoveMode Parms{};

	Parms.ModeCPP = ModeCPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update Data
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::Update_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Update Data");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update Battle Target Actor
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::Update_Battle_Target_Actor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Update Battle Target Actor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetBattleTarget(class ARSCharacterBase* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetBattleTarget");

	Params::BP_PlayerAIComponent_C_SetBattleTarget Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SetBattleMode(bool bBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetBattleMode");

	Params::BP_PlayerAIComponent_C_SetBattleMode Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos_ApproachTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateMovePos_ApproachTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateMovePos_ApproachTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.PreUpdate
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::PreUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "PreUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.MainUpdate
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::MainUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "MainUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.PostUpdate
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::PostUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "PostUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodge
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodge_Battle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateDodge_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateDodge_Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodge_FollowPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateDodge_FollowPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateDodge_FollowPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcStickDir
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Stick                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::CalcStickDir(struct FVector2D* Stick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CalcStickDir");

	Params::BP_PlayerAIComponent_C_CalcStickDir Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stick != nullptr)
		*Stick = std::move(Parms.Stick);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EnableStickInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::EnableStickInput(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "EnableStickInput");

	Params::BP_PlayerAIComponent_C_EnableStickInput Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DisableStickInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::DisableStickInput(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "DisableStickInput");

	Params::BP_PlayerAIComponent_C_DisableStickInput Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnAttackHit
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::OnAttackHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnAttackHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NextBattleThink
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::NextBattleThink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "NextBattleThink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ResetBattleThink
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::ResetBattleThink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ResetBattleThink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Set Battle Think
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::Set_Battle_Think(EPlayerAIBattleThinkType Action, EPlayerAIBattleThinkParam Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Set Battle Think");

	Params::BP_PlayerAIComponent_C_Set_Battle_Think Parms{};

	Parms.Action = Action;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Set Move Mode From Think
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             ThinkCPP                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::Set_Move_Mode_From_Think(EPlayerAIBattleThinkTypeCPP ThinkCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Set Move Mode From Think");

	Params::BP_PlayerAIComponent_C_Set_Move_Mode_From_Think Parms{};

	Parms.ThinkCPP = ThinkCPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DebugUpdate
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::DebugUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "DebugUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetAttackInputKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ERSAttackInputKind                      AttackKind                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetAttackInputKind(ERSAttackInputKind* AttackKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetAttackInputKind");

	Params::BP_PlayerAIComponent_C_GetAttackInputKind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackKind != nullptr)
		*AttackKind = Parms.AttackKind;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcStickDir_BattleDodge
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Dir                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::CalcStickDir_BattleDodge(struct FVector* Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CalcStickDir_BattleDodge");

	Params::BP_PlayerAIComponent_C_CalcStickDir_BattleDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dir != nullptr)
		*Dir = std::move(Parms.Dir);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos_Circle
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateMovePos_Circle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateMovePos_Circle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateChainAttack
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateChainAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateChainAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.JumpOrder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Destination                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::JumpOrder(const struct FVector& Destination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "JumpOrder");

	Params::BP_PlayerAIComponent_C_JumpOrder Parms{};

	Parms.Destination = std::move(Destination);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnMovementCollisionLand
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::OnMovementCollisionLand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnMovementCollisionLand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnJump
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::OnJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.InitializeParam
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::InitializeParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "InitializeParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyForceWarp
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::NotifyForceWarp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "NotifyForceWarp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyAttackStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::NotifyAttackStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "NotifyAttackStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Request Use Item
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConsumeItemID                          Item_id_in                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAssist                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::Request_Use_Item(EConsumeItemID Item_id_in, bool bAssist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Request Use Item");

	Params::BP_PlayerAIComponent_C_Request_Use_Item Parms{};

	Parms.Item_id_in = Item_id_in;
	Parms.bAssist = bAssist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsUseItemThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsUseItemThink(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsUseItemThink");

	Params::BP_PlayerAIComponent_C_IsUseItemThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetupUseItem
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::SetupUseItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetupUseItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsAttackThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPlayerAIBattleThinkType                Think_type_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsAttackThink(EPlayerAIBattleThinkType Think_type_in, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsAttackThink");

	Params::BP_PlayerAIComponent_C_IsAttackThink Parms{};

	Parms.Think_type_in = Think_type_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetStealthThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetStealthThink(EPlayerAIBattleThinkType* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetStealthThink");

	Params::BP_PlayerAIComponent_C_GetStealthThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetEventMove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Pos_list_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           Radius_list_in                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bWalk                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAfterWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   MaxMoveTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetEventMove(TArray<struct FVector>& Pos_list_in, TArray<float>& Radius_list_in, bool bWalk, bool bAfterWait, float MaxMoveTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetEventMove");

	Params::BP_PlayerAIComponent_C_SetEventMove Parms{};

	Parms.Pos_list_in = std::move(Pos_list_in);
	Parms.Radius_list_in = std::move(Radius_list_in);
	Parms.bWalk = bWalk;
	Parms.bAfterWait = bAfterWait;
	Parms.MaxMoveTime = MaxMoveTime;

	UObject::ProcessEvent(Func, &Parms);

	Pos_list_in = std::move(Parms.Pos_list_in);
	Radius_list_in = std::move(Parms.Radius_list_in);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEventMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsEventMove(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsEventMove");

	Params::BP_PlayerAIComponent_C_IsEventMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetEventMovePosActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Pos_actor                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Accept_Radius                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetEventMovePosActor(class AActor** Pos_actor, float* Accept_Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetEventMovePosActor");

	Params::BP_PlayerAIComponent_C_GetEventMovePosActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pos_actor != nullptr)
		*Pos_actor = Parms.Pos_actor;

	if (Accept_Radius != nullptr)
		*Accept_Radius = Parms.Accept_Radius;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckEventMovePos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Check_distance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Goal                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::CheckEventMovePos(bool Check_distance, bool* Goal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckEventMovePos");

	Params::BP_PlayerAIComponent_C_CheckEventMovePos Parms{};

	Parms.Check_distance = Check_distance;

	UObject::ProcessEvent(Func, &Parms);

	if (Goal != nullptr)
		*Goal = Parms.Goal;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEventMoveEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsEventMoveEnd(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsEventMoveEnd");

	Params::BP_PlayerAIComponent_C_IsEventMoveEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateEventMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateEventMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateEventMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetEventMoveLeftStickX
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetEventMoveLeftStickX(float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetEventMoveLeftStickX");

	Params::BP_PlayerAIComponent_C_GetEventMoveLeftStickX Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetEventMoveLeftStickY
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetEventMoveLeftStickY(float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetEventMoveLeftStickY");

	Params::BP_PlayerAIComponent_C_GetEventMoveLeftStickY Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetTargetSearchMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAITargetSearchModeCPP            Param_TargetSearchMode                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetTargetSearchMode(EPlayerAITargetSearchModeCPP Param_TargetSearchMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetTargetSearchMode");

	Params::BP_PlayerAIComponent_C_SetTargetSearchMode Parms{};

	Parms.Param_TargetSearchMode = Param_TargetSearchMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetOrder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIOrder                          Param_Order                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetOrder(EPlayerAIOrder Param_Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetOrder");

	Params::BP_PlayerAIComponent_C_SetOrder Parms{};

	Parms.Param_Order = Param_Order;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SearchTarget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ARSCharacterBase*>         TargetList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class ARSCharacterBase*                 Target                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SearchTarget(TArray<class ARSCharacterBase*>& TargetList, class ARSCharacterBase** Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SearchTarget");

	Params::BP_PlayerAIComponent_C_SearchTarget Parms{};

	Parms.TargetList = std::move(TargetList);

	UObject::ProcessEvent(Func, &Parms);

	TargetList = std::move(Parms.TargetList);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcThinkTransitionProbability
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Probability                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkType                Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::CalcThinkTransitionProbability(int32 Probability, EPlayerAIBattleThinkType Action, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CalcThinkTransitionProbability");

	Params::BP_PlayerAIComponent_C_CalcThinkTransitionProbability Parms{};

	Parms.Probability = Probability;
	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckSelfRecovery
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::CheckSelfRecovery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckSelfRecovery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Cancel Use Item
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::Cancel_Use_Item()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Cancel Use Item");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DecreaseSelfRecoveryNum
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::DecreaseSelfRecoveryNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "DecreaseSelfRecoveryNum");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateCounter
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReserveNextThink
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                ThinkType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::ReserveNextThink(EPlayerAIBattleThinkType ThinkType, EPlayerAIBattleThinkParam Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ReserveNextThink");

	Params::BP_PlayerAIComponent_C_ReserveNextThink Parms{};

	Parms.ThinkType = ThinkType;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RegisterEvaluateLocation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::RegisterEvaluateLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "RegisterEvaluateLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetMoveLocation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ArmLength                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetMoveLocation(const struct FVector& Location, float ArmLength, float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetMoveLocation");

	Params::BP_PlayerAIComponent_C_SetMoveLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.ArmLength = ArmLength;
	Parms.Yaw = Yaw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetThinkKeepOut
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::SetThinkKeepOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetThinkKeepOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateMovePos_FollowPlayer
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateMovePos_FollowPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateMovePos_FollowPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.OnUpdateUpdateEvaluateLocation
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::OnUpdateUpdateEvaluateLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "OnUpdateUpdateEvaluateLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckGoalLocationKeepOut
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::CheckGoalLocationKeepOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckGoalLocationKeepOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckInAttackArea
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CheckLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bin                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::CheckInAttackArea(const struct FVector& CheckLocation, bool* bin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckInAttackArea");

	Params::BP_PlayerAIComponent_C_CheckInAttackArea Parms{};

	Parms.CheckLocation = std::move(CheckLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (bin != nullptr)
		*bin = Parms.bin;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateBattleDodgeDir
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::UpdateBattleDodgeDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateBattleDodgeDir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcTargetEvaluate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 EvaluateTarget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EvaluateValue                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::CalcTargetEvaluate(class ARSCharacterBase* EvaluateTarget, float* EvaluateValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CalcTargetEvaluate");

	Params::BP_PlayerAIComponent_C_CalcTargetEvaluate Parms{};

	Parms.EvaluateTarget = EvaluateTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (EvaluateValue != nullptr)
		*EvaluateValue = Parms.EvaluateValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Calc Distance Target Evaluate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EvaluateValue                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::Calc_Distance_Target_Evaluate(const struct FVector& TargetLocation, float* EvaluateValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Calc Distance Target Evaluate");

	Params::BP_PlayerAIComponent_C_Calc_Distance_Target_Evaluate Parms{};

	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (EvaluateValue != nullptr)
		*EvaluateValue = Parms.EvaluateValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyResetBehaviorTree
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::NotifyResetBehaviorTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "NotifyResetBehaviorTree");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckMovePos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bReset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::CheckMovePos(bool* bReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckMovePos");

	Params::BP_PlayerAIComponent_C_CheckMovePos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReset != nullptr)
		*bReset = Parms.bReset;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckPsychicObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCapture                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAttack                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::CheckPsychicObject(bool bCapture, bool bAttack, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckPsychicObject");

	Params::BP_PlayerAIComponent_C_CheckPsychicObject Parms{};

	Parms.bCapture = bCapture;
	Parms.bAttack = bAttack;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsPsychicAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsPsychicAble(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsPsychicAble");

	Params::BP_PlayerAIComponent_C_IsPsychicAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckMoveWall
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIMoveWallCPP                    Wall                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::CheckMoveWall(EPlayerAIMoveWallCPP* Wall, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckMoveWall");

	Params::BP_PlayerAIComponent_C_CheckMoveWall Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Wall != nullptr)
		*Wall = Parms.Wall;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetMoveStickBack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBack                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SetMoveStickBack(bool bBack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetMoveStickBack");

	Params::BP_PlayerAIComponent_C_SetMoveStickBack Parms{};

	Parms.bBack = bBack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EndEventMove
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::EndEventMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "EndEventMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.On Event Start
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::On_Event_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "On Event Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsPsychicComboThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsPsychicComboThink(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsPsychicComboThink");

	Params::BP_PlayerAIComponent_C_IsPsychicComboThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetEventWait
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::SetEventWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetEventWait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.End Event Wait
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::End_Event_Wait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "End Event Wait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ChangeThinkTableType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIThinkTableType                 ThinkTableType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResetThink                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::ChangeThinkTableType(EPlayerAIThinkTableType ThinkTableType, bool bResetThink)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ChangeThinkTableType");

	Params::BP_PlayerAIComponent_C_ChangeThinkTableType Parms{};

	Parms.ThinkTableType = ThinkTableType;
	Parms.bResetThink = bResetThink;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ResetSelfRecoveryData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::ResetSelfRecoveryData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ResetSelfRecoveryData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetFinishMetamorphosis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFinish                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SetFinishMetamorphosis(bool bFinish, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetFinishMetamorphosis");

	Params::BP_PlayerAIComponent_C_SetFinishMetamorphosis Parms{};

	Parms.bFinish = bFinish;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetThinkPhaseTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewPhase                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SetThinkPhaseTransition(int32 NewPhase, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetThinkPhaseTransition");

	Params::BP_PlayerAIComponent_C_SetThinkPhaseTransition Parms{};

	Parms.NewPhase = NewPhase;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetDisableChangeTargetResetThink
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InDisable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SetDisableChangeTargetResetThink(bool InDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetDisableChangeTargetResetThink");

	Params::BP_PlayerAIComponent_C_SetDisableChangeTargetResetThink Parms{};

	Parms.InDisable = InDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetInvalidKeepOut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInvalid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SetInvalidKeepOut(bool IsInvalid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetInvalidKeepOut");

	Params::BP_PlayerAIComponent_C_SetInvalidKeepOut Parms{};

	Parms.IsInvalid = IsInvalid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RestartBattleAI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInEvent                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bInAvatar                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::RestartBattleAI(bool bInEvent, bool bInAvatar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "RestartBattleAI");

	Params::BP_PlayerAIComponent_C_RestartBattleAI Parms{};

	Parms.bInEvent = bInEvent;
	Parms.bInAvatar = bInAvatar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsBattleActionStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStart                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsBattleActionStart(bool* bStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsBattleActionStart");

	Params::BP_PlayerAIComponent_C_IsBattleActionStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bStart != nullptr)
		*bStart = Parms.bStart;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Update Check Battle Action Start
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActionStart                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::Update_Check_Battle_Action_Start(bool* bActionStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Update Check Battle Action Start");

	Params::BP_PlayerAIComponent_C_Update_Check_Battle_Action_Start Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bActionStart != nullptr)
		*bActionStart = Parms.bActionStart;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NotifyMoveBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToBrainField                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::NotifyMoveBrainField(bool bToBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "NotifyMoveBrainField");

	Params::BP_PlayerAIComponent_C_NotifyMoveBrainField Parms{};

	Parms.bToBrainField = bToBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleThink_CPPType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             ActionCPP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkParamCPP            ParamCPP                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::SetBattleThink_CPPType(EPlayerAIBattleThinkTypeCPP ActionCPP, EPlayerAIBattleThinkParamCPP ParamCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetBattleThink_CPPType");

	Params::BP_PlayerAIComponent_C_SetBattleThink_CPPType Parms{};

	Parms.ActionCPP = ActionCPP;
	Parms.ParamCPP = ParamCPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.ReserveNextThink_CPPType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             ThinkTypeCPP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkParamCPP            ParamCPP                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::ReserveNextThink_CPPType(EPlayerAIBattleThinkTypeCPP ThinkTypeCPP, EPlayerAIBattleThinkParamCPP ParamCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "ReserveNextThink_CPPType");

	Params::BP_PlayerAIComponent_C_ReserveNextThink_CPPType Parms{};

	Parms.ThinkTypeCPP = ThinkTypeCPP;
	Parms.ParamCPP = ParamCPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetStealthThink_CPPType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetStealthThink_CPPType(EPlayerAIBattleThinkTypeCPP* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetStealthThink_CPPType");

	Params::BP_PlayerAIComponent_C_GetStealthThink_CPPType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.BeginEvaluateLocation_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::BeginEvaluateLocation_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "BeginEvaluateLocation_CallFromCPP");

	Params::BP_PlayerAIComponent_C_BeginEvaluateLocation_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.BindCheckBattleActionStart_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::BindCheckBattleActionStart_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "BindCheckBattleActionStart_CallFromCPP");

	Params::BP_PlayerAIComponent_C_BindCheckBattleActionStart_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UnbindCheckBattleActionStart_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::UnbindCheckBattleActionStart_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UnbindCheckBattleActionStart_CallFromCPP");

	Params::BP_PlayerAIComponent_C_UnbindCheckBattleActionStart_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RestartBattleAI_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInEvent                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::RestartBattleAI_CallFromCPP(bool bInEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "RestartBattleAI_CallFromCPP");

	Params::BP_PlayerAIComponent_C_RestartBattleAI_CallFromCPP Parms{};

	Parms.bInEvent = bInEvent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckInAttackArea_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CheckLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::CheckInAttackArea_CallFromCPP(const struct FVector& CheckLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckInAttackArea_CallFromCPP");

	Params::BP_PlayerAIComponent_C_CheckInAttackArea_CallFromCPP Parms{};

	Parms.CheckLocation = std::move(CheckLocation);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.EndEvaluateLocation_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::EndEvaluateLocation_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "EndEvaluateLocation_CallFromCPP");

	Params::BP_PlayerAIComponent_C_EndEvaluateLocation_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckBattleThinkTransition_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTransitionCPP       Transition                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::CheckBattleThinkTransition_CallFromCPP(EPlayerAIBattleThinkTransitionCPP Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckBattleThinkTransition_CallFromCPP");

	Params::BP_PlayerAIComponent_C_CheckBattleThinkTransition_CallFromCPP Parms{};

	Parms.Transition = Transition;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.DebugUpdate_CallFromCPP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::DebugUpdate_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "DebugUpdate_CallFromCPP");

	Params::BP_PlayerAIComponent_C_DebugUpdate_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.NextBattleThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::NextBattleThink_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "NextBattleThink_CallFromCPP");

	Params::BP_PlayerAIComponent_C_NextBattleThink_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetBattleThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkParamCPP            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::SetBattleThink_CallFromCPP(EPlayerAIBattleThinkTypeCPP Action, EPlayerAIBattleThinkParamCPP Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetBattleThink_CallFromCPP");

	Params::BP_PlayerAIComponent_C_SetBattleThink_CallFromCPP Parms{};

	Parms.Action = Action;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateBattleDodgeDir_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::UpdateBattleDodgeDir_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateBattleDodgeDir_CallFromCPP");

	Params::BP_PlayerAIComponent_C_UpdateBattleDodgeDir_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.UpdateDodgeBattle_Enpc_BPImplement
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OutDodgeNormalAttack                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OutDodgeRangeAttack                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OutForceDodge                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::UpdateDodgeBattle_Enpc_BPImplement(bool* bOK, bool* OutDodgeNormalAttack, bool* OutDodgeRangeAttack, bool* OutForceDodge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "UpdateDodgeBattle_Enpc_BPImplement");

	Params::BP_PlayerAIComponent_C_UpdateDodgeBattle_Enpc_BPImplement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;

	if (OutDodgeNormalAttack != nullptr)
		*OutDodgeNormalAttack = Parms.OutDodgeNormalAttack;

	if (OutDodgeRangeAttack != nullptr)
		*OutDodgeRangeAttack = Parms.OutDodgeRangeAttack;

	if (OutForceDodge != nullptr)
		*OutForceDodge = Parms.OutForceDodge;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.PreUpdateCPP_RangeAttack_BPImplement
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::PreUpdateCPP_RangeAttack_BPImplement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "PreUpdateCPP_RangeAttack_BPImplement");

	Params::BP_PlayerAIComponent_C_PreUpdateCPP_RangeAttack_BPImplement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SetupUseItem_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::SetupUseItem_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SetupUseItem_CallFromCPP");

	Params::BP_PlayerAIComponent_C_SetupUseItem_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckSelfRecoveryCallFromCPP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::CheckSelfRecoveryCallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckSelfRecoveryCallFromCPP");

	Params::BP_PlayerAIComponent_C_CheckSelfRecoveryCallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.RunBehaviorTree
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PlayerAIComponent_C::RunBehaviorTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "RunBehaviorTree");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcTargetEvaluate_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 EvaluateTarget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_PlayerAIComponent_C::CalcTargetEvaluate_CallFromCPP(class ARSCharacterBase* EvaluateTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CalcTargetEvaluate_CallFromCPP");

	Params::BP_PlayerAIComponent_C_CalcTargetEvaluate_CallFromCPP Parms{};

	Parms.EvaluateTarget = EvaluateTarget;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckSelfRecovery_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerAIComponent_C::CheckSelfRecovery_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckSelfRecovery_CallFromCPP");

	Params::BP_PlayerAIComponent_C_CheckSelfRecovery_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCollisionObjectTypesForGroundHit_CallFromCPP
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EObjectTypeQuery>                ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

TArray<EObjectTypeQuery> UBP_PlayerAIComponent_C::GetCollisionObjectTypesForGroundHit_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCollisionObjectTypesForGroundHit_CallFromCPP");

	Params::BP_PlayerAIComponent_C_GetCollisionObjectTypesForGroundHit_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetMoveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIMoveMode                       MoveMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetMoveMode(EPlayerAIMoveMode* MoveMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetMoveMode");

	Params::BP_PlayerAIComponent_C_GetMoveMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MoveMode != nullptr)
		*MoveMode = Parms.MoveMode;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsUpdate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bUpdate                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsUpdate(bool* bUpdate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsUpdate");

	Params::BP_PlayerAIComponent_C_IsUpdate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bUpdate != nullptr)
		*bUpdate = Parms.bUpdate;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetControlPlayerDist
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Dist                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetControlPlayerDist(struct FVector* Dist) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetControlPlayerDist");

	Params::BP_PlayerAIComponent_C_GetControlPlayerDist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dist != nullptr)
		*Dist = std::move(Parms.Dist);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetMoveMode_CPPType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIMoveModeCPP                    MoveMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetMoveMode_CPPType(EPlayerAIMoveModeCPP* MoveMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetMoveMode_CPPType");

	Params::BP_PlayerAIComponent_C_GetMoveMode_CPPType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MoveMode != nullptr)
		*MoveMode = Parms.MoveMode;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetMovePosActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           MovePosActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetMovePosActor(class AActor** MovePosActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetMovePosActor");

	Params::BP_PlayerAIComponent_C_GetMovePosActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovePosActor != nullptr)
		*MovePosActor = Parms.MovePosActor;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetBattleTargetActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           Target                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetBattleTargetActor(class AActor** Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetBattleTargetActor");

	Params::BP_PlayerAIComponent_C_GetBattleTargetActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsAttackAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsAttackAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsAttackAble");

	Params::BP_PlayerAIComponent_C_IsAttackAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsDodgeAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsDodgeAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsDodgeAble");

	Params::BP_PlayerAIComponent_C_IsDodgeAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEnableStickInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsEnableStickInput(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsEnableStickInput");

	Params::BP_PlayerAIComponent_C_IsEnableStickInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckBattleThinkTransition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIBattleThinkTransition          Transition                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::CheckBattleThinkTransition(EPlayerAIBattleThinkTransition Transition, bool* bOK) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckBattleThinkTransition");

	Params::BP_PlayerAIComponent_C_CheckBattleThinkTransition Parms{};

	Parms.Transition = Transition;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeNear
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Dist                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsRangeNear(const struct FVector& Dist, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsRangeNear");

	Params::BP_PlayerAIComponent_C_IsRangeNear Parms{};

	Parms.Dist = std::move(Dist);

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeMiddle
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Dist                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsRangeMiddle(const struct FVector& Dist, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsRangeMiddle");

	Params::BP_PlayerAIComponent_C_IsRangeMiddle Parms{};

	Parms.Dist = std::move(Dist);

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeFar
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Dist                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsRangeFar(const struct FVector& Dist, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsRangeFar");

	Params::BP_PlayerAIComponent_C_IsRangeFar Parms{};

	Parms.Dist = std::move(Dist);

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentThinkTable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       Table                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetCurrentThinkTable(class UDataTable** Table) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCurrentThinkTable");

	Params::BP_PlayerAIComponent_C_GetCurrentThinkTable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Table != nullptr)
		*Table = Parms.Table;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CalcStickDir_BattleAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Dir                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::CalcStickDir_BattleAttack(struct FVector* Dir) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CalcStickDir_BattleAttack");

	Params::BP_PlayerAIComponent_C_CalcStickDir_BattleAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dir != nullptr)
		*Dir = std::move(Parms.Dir);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsBattleThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIBattleThinkType                Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsBattleThink(EPlayerAIBattleThinkType Type, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsBattleThink");

	Params::BP_PlayerAIComponent_C_IsBattleThink Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThinkParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIBattleThinkParam               Param                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetCurrentBattleThinkParam(EPlayerAIBattleThinkParam* Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCurrentBattleThinkParam");

	Params::BP_PlayerAIComponent_C_GetCurrentBattleThinkParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsJumpAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsJumpAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsJumpAble");

	Params::BP_PlayerAIComponent_C_IsJumpAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetAttackCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetAttackCount(int32* Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetAttackCount");

	Params::BP_PlayerAIComponent_C_GetAttackCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsRangeTooFar
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Dist                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResutlt                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsRangeTooFar(const struct FVector& Dist, bool* bResutlt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsRangeTooFar");

	Params::BP_PlayerAIComponent_C_IsRangeTooFar Parms{};

	Parms.Dist = std::move(Dist);

	UObject::ProcessEvent(Func, &Parms);

	if (bResutlt != nullptr)
		*bResutlt = Parms.bResutlt;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsSelfRecovery
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bRecovery                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsSelfRecovery(bool* bRecovery) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsSelfRecovery");

	Params::BP_PlayerAIComponent_C_IsSelfRecovery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bRecovery != nullptr)
		*bRecovery = Parms.bRecovery;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetUseItemID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EConsumeItemID                          ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetUseItemID(EConsumeItemID* ItemId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetUseItemID");

	Params::BP_PlayerAIComponent_C_GetUseItemID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIBattleThinkType                NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetCurrentBattleThink(EPlayerAIBattleThinkType* NewParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCurrentBattleThink");

	Params::BP_PlayerAIComponent_C_GetCurrentBattleThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetTargetEvaluateData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FPlayerAIEvaluateTargetParameter Data                                                   (Parm, OutParm)

void UBP_PlayerAIComponent_C::GetTargetEvaluateData(struct FPlayerAIEvaluateTargetParameter* Data) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetTargetEvaluateData");

	Params::BP_PlayerAIComponent_C_GetTargetEvaluateData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsResetBehaviorTree
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bResetBehaviorTree                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsResetBehaviorTree(bool* Param_bResetBehaviorTree) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsResetBehaviorTree");

	Params::BP_PlayerAIComponent_C_IsResetBehaviorTree Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bResetBehaviorTree != nullptr)
		*Param_bResetBehaviorTree = Parms.Param_bResetBehaviorTree;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.SearchPsychicObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bFound                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::SearchPsychicObject(bool* bFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "SearchPsychicObject");

	Params::BP_PlayerAIComponent_C_SearchPsychicObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFound != nullptr)
		*bFound = Parms.bFound;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThink_CPPType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetCurrentBattleThink_CPPType(EPlayerAIBattleThinkTypeCPP* NewParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCurrentBattleThink_CPPType");

	Params::BP_PlayerAIComponent_C_GetCurrentBattleThink_CPPType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsWaitBattleStart
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bWait                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsWaitBattleStart(bool* bWait) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsWaitBattleStart");

	Params::BP_PlayerAIComponent_C_IsWaitBattleStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bWait != nullptr)
		*bWait = Parms.bWait;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Check Under Siege
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bSiege                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::Check_Under_Siege(bool* bSiege) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Check Under Siege");

	Params::BP_PlayerAIComponent_C_Check_Under_Siege Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSiege != nullptr)
		*bSiege = Parms.bSiege;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsEventWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bWait                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsEventWait(bool* bWait) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsEventWait");

	Params::BP_PlayerAIComponent_C_IsEventWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bWait != nullptr)
		*bWait = Parms.bWait;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.IsFinishMetamorphosis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bFinish                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::IsFinishMetamorphosis(bool* bFinish) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "IsFinishMetamorphosis");

	Params::BP_PlayerAIComponent_C_IsFinishMetamorphosis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFinish != nullptr)
		*bFinish = Parms.bFinish;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetThinkPhaseTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   CurPhase                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetThinkPhaseTransition(int32* CurPhase) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetThinkPhaseTransition");

	Params::BP_PlayerAIComponent_C_GetThinkPhaseTransition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurPhase != nullptr)
		*CurPhase = Parms.CurPhase;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.Get Order
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIOrder                          Param_Order                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::Get_Order(EPlayerAIOrder* Param_Order) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "Get Order");

	Params::BP_PlayerAIComponent_C_Get_Order Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Order != nullptr)
		*Param_Order = Parms.Param_Order;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.CheckNpcRevive
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   InDistance                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRevive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerAIComponent_C::CheckNpcRevive(float InDistance, bool* bRevive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "CheckNpcRevive");

	Params::BP_PlayerAIComponent_C_CheckNpcRevive Parms{};

	Parms.InDistance = InDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (bRevive != nullptr)
		*bRevive = Parms.bRevive;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentBattleThinkParam_CPPType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerAIBattleThinkParamCPP            Param                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerAIComponent_C::GetCurrentBattleThinkParam_CPPType(EPlayerAIBattleThinkParamCPP* Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCurrentBattleThinkParam_CPPType");

	Params::BP_PlayerAIComponent_C_GetCurrentBattleThinkParam_CPPType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetCurrentThinkTable_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UDataTable* UBP_PlayerAIComponent_C::GetCurrentThinkTable_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetCurrentThinkTable_CallFromCPP");

	Params::BP_PlayerAIComponent_C_GetCurrentThinkTable_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerAIComponent.BP_PlayerAIComponent_C.GetTargetEvaluateData_CallFromCPP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FPlayerAIEvaluateTargetParameter OutParam                                               (Parm, OutParm)

void UBP_PlayerAIComponent_C::GetTargetEvaluateData_CallFromCPP(struct FPlayerAIEvaluateTargetParameter* OutParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerAIComponent_C", "GetTargetEvaluateData_CallFromCPP");

	Params::BP_PlayerAIComponent_C_GetTargetEvaluateData_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutParam != nullptr)
		*OutParam = std::move(Parms.OutParam);
}

}

