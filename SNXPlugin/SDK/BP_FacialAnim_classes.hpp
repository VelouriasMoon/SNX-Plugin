#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FacialAnim

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EPlayerFacialAnim_structs.hpp"
#include "CriWareRuntime_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FacialAnim.BP_FacialAnim_C
// 0x0060 (0x0120 - 0x00C0)
class UBP_FacialAnim_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ACharacter*                             OwnerCharacter;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CurrentAnim;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerFacialAnim                             CurrentAnimType;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEventAnim;                                        // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBattleFlag;                                       // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85DB[0x1];                                     // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x00DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85DC[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             PatternDataTable;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   PlayerBattleVoiceAtom;                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRipSync;                                          // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85DD[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VoiceSilentTime;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRipSyncSpeak;                                     // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPhotoModeFlag;                                    // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerFacialAnim                             PhotoModeBackup_AnimType;                          // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCurrentTalkAnim;                                  // 0x0103(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PhotoModeBackup_IsTalkAnim;                        // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85DE[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PhotoModeBackup_ClaimantName;                      // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PhotoModeBackup_IsPlayAnim;                        // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PhotoModeBackup_IsTickEnable;                      // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85DF[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PhotoModePlayerFacialManager_C*     PhotoModeFacialManager;                            // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FacialAnim(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PlayFacialAnim(EPlayerFacialAnim InAnim, bool bTalk, class FName InClaimantName);
	void StopFacialAnim(class FName InClaimantName, bool bInDefault);
	void PlayMontage(EPlayerFacialAnim FacialAnim, bool bTalk);
	void SetBattleFlag(bool bBattle);
	void StopFacialAnimForce();
	void DefaultFacialAnim();
	void PlayPlayerBattleVoiceFacialAnim(class URSAtomComponentBase* InAtomComponent, EPlayerFacialAnim InFacialAnim);
	void StopPlayerBattleVoiceFacialAnim();
	void PlayEventFacial(EPlayerFacialAnim InFacialAnim, class URSAtomComponentBase* InAtomComponent, bool bInRipSync);
	void SetPhotoMode(bool bPhotoMode);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FacialAnim_C">();
	}
	static class UBP_FacialAnim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FacialAnim_C>();
	}
};
static_assert(alignof(UBP_FacialAnim_C) == 0x000008, "Wrong alignment on UBP_FacialAnim_C");
static_assert(sizeof(UBP_FacialAnim_C) == 0x000120, "Wrong size on UBP_FacialAnim_C");
static_assert(offsetof(UBP_FacialAnim_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_FacialAnim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, OwnerCharacter) == 0x0000C8, "Member 'UBP_FacialAnim_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, CurrentAnim) == 0x0000D0, "Member 'UBP_FacialAnim_C::CurrentAnim' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, CurrentAnimType) == 0x0000D8, "Member 'UBP_FacialAnim_C::CurrentAnimType' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, bEventAnim) == 0x0000D9, "Member 'UBP_FacialAnim_C::bEventAnim' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, bBattleFlag) == 0x0000DA, "Member 'UBP_FacialAnim_C::bBattleFlag' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, ClaimantName) == 0x0000DC, "Member 'UBP_FacialAnim_C::ClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PatternDataTable) == 0x0000E8, "Member 'UBP_FacialAnim_C::PatternDataTable' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PlayerBattleVoiceAtom) == 0x0000F0, "Member 'UBP_FacialAnim_C::PlayerBattleVoiceAtom' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, bRipSync) == 0x0000F8, "Member 'UBP_FacialAnim_C::bRipSync' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, VoiceSilentTime) == 0x0000FC, "Member 'UBP_FacialAnim_C::VoiceSilentTime' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, bRipSyncSpeak) == 0x000100, "Member 'UBP_FacialAnim_C::bRipSyncSpeak' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, bPhotoModeFlag) == 0x000101, "Member 'UBP_FacialAnim_C::bPhotoModeFlag' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PhotoModeBackup_AnimType) == 0x000102, "Member 'UBP_FacialAnim_C::PhotoModeBackup_AnimType' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, bCurrentTalkAnim) == 0x000103, "Member 'UBP_FacialAnim_C::bCurrentTalkAnim' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PhotoModeBackup_IsTalkAnim) == 0x000104, "Member 'UBP_FacialAnim_C::PhotoModeBackup_IsTalkAnim' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PhotoModeBackup_ClaimantName) == 0x000108, "Member 'UBP_FacialAnim_C::PhotoModeBackup_ClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PhotoModeBackup_IsPlayAnim) == 0x000110, "Member 'UBP_FacialAnim_C::PhotoModeBackup_IsPlayAnim' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PhotoModeBackup_IsTickEnable) == 0x000111, "Member 'UBP_FacialAnim_C::PhotoModeBackup_IsTickEnable' has a wrong offset!");
static_assert(offsetof(UBP_FacialAnim_C, PhotoModeFacialManager) == 0x000118, "Member 'UBP_FacialAnim_C::PhotoModeFacialManager' has a wrong offset!");

}

