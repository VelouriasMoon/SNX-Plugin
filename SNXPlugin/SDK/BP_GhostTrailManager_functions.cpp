#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GhostTrailManager

#include "Basic.hpp"

#include "BP_GhostTrailManager_classes.hpp"
#include "BP_GhostTrailManager_parameters.hpp"


namespace SDK
{

// Function BP_GhostTrailManager.BP_GhostTrailManager_C.GhostSpawned__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FE_GhostInfo                     GhostInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::GhostSpawned__DelegateSignature(const struct FE_GhostInfo& GhostInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "GhostSpawned__DelegateSignature");

	Params::BP_GhostTrailManager_C_GhostSpawned__DelegateSignature Parms{};

	Parms.GhostInfo = std::move(GhostInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.ExecuteUbergraph_BP_GhostTrailManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::ExecuteUbergraph_BP_GhostTrailManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "ExecuteUbergraph_BP_GhostTrailManager");

	Params::BP_GhostTrailManager_C_ExecuteUbergraph_BP_GhostTrailManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_GhostTrailManager_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "ReceiveTick");

	Params::BP_GhostTrailManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SpawnStaticGhost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             MasterStaticMeshComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FE_GhostInfo                     GhostInfo                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::SpawnStaticGhost(class UStaticMeshComponent* MasterStaticMeshComponent, struct FE_GhostInfo* GhostInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SpawnStaticGhost");

	Params::BP_GhostTrailManager_C_SpawnStaticGhost Parms{};

	Parms.MasterStaticMeshComponent = MasterStaticMeshComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (GhostInfo != nullptr)
		*GhostInfo = std::move(Parms.GhostInfo);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SpawnTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::SpawnTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SpawnTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SpawnSkeletalGhost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           MasterStaticMeshComponent                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FE_GhostInfo                     GhostInfo                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::SpawnSkeletalGhost(class USkeletalMeshComponent* MasterStaticMeshComponent, struct FE_GhostInfo* GhostInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SpawnSkeletalGhost");

	Params::BP_GhostTrailManager_C_SpawnSkeletalGhost Parms{};

	Parms.MasterStaticMeshComponent = MasterStaticMeshComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (GhostInfo != nullptr)
		*GhostInfo = std::move(Parms.GhostInfo);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.UpdateGhostInfos
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::UpdateGhostInfos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "UpdateGhostInfos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SpawnGhosts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::SpawnGhosts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SpawnGhosts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.UpdateGhostVisual
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FE_GhostInfo                     GhostInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::UpdateGhostVisual(const struct FE_GhostInfo& GhostInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "UpdateGhostVisual");

	Params::BP_GhostTrailManager_C_UpdateGhostVisual Parms{};

	Parms.GhostInfo = std::move(GhostInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.RevealLastGhosts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::RevealLastGhosts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "RevealLastGhosts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.CalcVelocities
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::CalcVelocities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "CalcVelocities");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SetGhostMaterialParams
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FE_GhostInfo                     Ghost                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::SetGhostMaterialParams(const struct FE_GhostInfo& Ghost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SetGhostMaterialParams");

	Params::BP_GhostTrailManager_C_SetGhostMaterialParams Parms{};

	Parms.Ghost = std::move(Ghost);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.AddMeshToTrail
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::AddMeshToTrail(class UMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "AddMeshToTrail");

	Params::BP_GhostTrailManager_C_AddMeshToTrail Parms{};

	Parms.Mesh = Mesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.DestroyGhostAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::DestroyGhostAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "DestroyGhostAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.ChangeMasterRelative
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       InTransform                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_GhostTrailManager_C::ChangeMasterRelative(struct FTransform& InTransform, const struct FVector& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "ChangeMasterRelative");

	Params::BP_GhostTrailManager_C_ChangeMasterRelative Parms{};

	Parms.InTransform = std::move(InTransform);
	Parms.A = std::move(A);

	UObject::ProcessEvent(Func, &Parms);

	InTransform = std::move(Parms.InTransform);

	return Parms.ReturnValue;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SetIgnoreLastInvisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GhostTrailManager_C::SetIgnoreLastInvisible(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SetIgnoreLastInvisible");

	Params::BP_GhostTrailManager_C_SetIgnoreLastInvisible Parms{};

	Parms.Flag = Flag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SetColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::SetColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SetColor");

	Params::BP_GhostTrailManager_C_SetColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.PrivateCalcVelocity
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  LastLocations                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<struct FVector>                  Velocities                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::PrivateCalcVelocity(class UMeshComponent* Mesh, int32 Param_Index, TArray<struct FVector>& LastLocations, TArray<struct FVector>& Velocities, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "PrivateCalcVelocity");

	Params::BP_GhostTrailManager_C_PrivateCalcVelocity Parms{};

	Parms.Mesh = Mesh;
	Parms.Param_Index = Param_Index;
	Parms.LastLocations = std::move(LastLocations);
	Parms.Velocities = std::move(Velocities);
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	LastLocations = std::move(Parms.LastLocations);
	Velocities = std::move(Parms.Velocities);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.AddStaticMeshCache
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             AddedMesh                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::AddStaticMeshCache(class UStaticMeshComponent** AddedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "AddStaticMeshCache");

	Params::BP_GhostTrailManager_C_AddStaticMeshCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddedMesh != nullptr)
		*AddedMesh = Parms.AddedMesh;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.AddSkeletalMeshCache
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPoseableMeshComponent*           AddedMesh                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::AddSkeletalMeshCache(class UPoseableMeshComponent** AddedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "AddSkeletalMeshCache");

	Params::BP_GhostTrailManager_C_AddSkeletalMeshCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddedMesh != nullptr)
		*AddedMesh = Parms.AddedMesh;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SearchOrAddStaticMeshCache
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             CachedMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::SearchOrAddStaticMeshCache(class UStaticMeshComponent** CachedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SearchOrAddStaticMeshCache");

	Params::BP_GhostTrailManager_C_SearchOrAddStaticMeshCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CachedMesh != nullptr)
		*CachedMesh = Parms.CachedMesh;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.SearchOrAddSkeletalMeshCache
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPoseableMeshComponent*           CachedMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::SearchOrAddSkeletalMeshCache(class UPoseableMeshComponent** CachedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "SearchOrAddSkeletalMeshCache");

	Params::BP_GhostTrailManager_C_SearchOrAddSkeletalMeshCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CachedMesh != nullptr)
		*CachedMesh = Parms.CachedMesh;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.PrivateRemoveComponent
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::PrivateRemoveComponent(class UMeshComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "PrivateRemoveComponent");

	Params::BP_GhostTrailManager_C_PrivateRemoveComponent Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.PrivateSearchMaterialParamIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Param_Index                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::PrivateSearchMaterialParamIndex(class UMaterialInstanceDynamic* Mid, TArray<int32>* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "PrivateSearchMaterialParamIndex");

	Params::BP_GhostTrailManager_C_PrivateSearchMaterialParamIndex Parms{};

	Parms.Mid = Mid;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = std::move(Parms.Param_Index);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.GetGhostDeltaSeconds
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::GetGhostDeltaSeconds(float* DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "GetGhostDeltaSeconds");

	Params::BP_GhostTrailManager_C_GetGhostDeltaSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DeltaSeconds != nullptr)
		*DeltaSeconds = Parms.DeltaSeconds;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.RemoveMeshToTrail
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::RemoveMeshToTrail(class UMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "RemoveMeshToTrail");

	Params::BP_GhostTrailManager_C_RemoveMeshToTrail Parms{};

	Parms.Mesh = Mesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.ResetMaterialParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FE_GhostMaterialParam>    Params_0                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::ResetMaterialParams(const TArray<struct FE_GhostMaterialParam>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "ResetMaterialParams");

	Params::BP_GhostTrailManager_C_ResetMaterialParams Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.GetColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::GetColor(struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "GetColor");

	Params::BP_GhostTrailManager_C_GetColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.DestroyedComponents
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::DestroyedComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "DestroyedComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.AddExternalCache
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPoseableMeshComponent*>   PoseableMeshComps                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::AddExternalCache(TArray<class UPoseableMeshComponent*>& PoseableMeshComps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "AddExternalCache");

	Params::BP_GhostTrailManager_C_AddExternalCache Parms{};

	Parms.PoseableMeshComps = std::move(PoseableMeshComps);

	UObject::ProcessEvent(Func, &Parms);

	PoseableMeshComps = std::move(Parms.PoseableMeshComps);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.ClearExternalCache
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GhostTrailManager_C::ClearExternalCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "ClearExternalCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.PhotoModeTick
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GhostTrailManager_C::PhotoModeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "PhotoModeTick");

	Params::BP_GhostTrailManager_C_PhotoModeTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.EndPhotoMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GhostTrailManager_C::EndPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "EndPhotoMode");

	Params::BP_GhostTrailManager_C_EndPhotoMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.BeginPhotoMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MeshOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleRadius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GhostTrailManager_C::BeginPhotoMode(float MeshOffset, float CapsuleHeight, float CapsuleRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "BeginPhotoMode");

	Params::BP_GhostTrailManager_C_BeginPhotoMode Parms{};

	Parms.MeshOffset = MeshOffset;
	Parms.CapsuleHeight = CapsuleHeight;
	Parms.CapsuleRadius = CapsuleRadius;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GhostTrailManager.BP_GhostTrailManager_C.CalcRandomOffsetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTransform                       BaseTransform                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          OffsetLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GhostTrailManager_C::CalcRandomOffsetLocation(const struct FTransform& BaseTransform, struct FVector* OffsetLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GhostTrailManager_C", "CalcRandomOffsetLocation");

	Params::BP_GhostTrailManager_C_CalcRandomOffsetLocation Parms{};

	Parms.BaseTransform = std::move(BaseTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (OffsetLocation != nullptr)
		*OffsetLocation = std::move(Parms.OffsetLocation);
}

}

