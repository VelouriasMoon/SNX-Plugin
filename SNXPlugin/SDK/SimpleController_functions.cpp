#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleController

#include "Basic.hpp"

#include "SimpleController_classes.hpp"
#include "SimpleController_parameters.hpp"


namespace SDK
{

// Function SimpleController.SimpleControllerBPLibrary.breakDeviceForceFeedbackInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// bool                                    HasHaptic                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_CONSTANT                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_SINE                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_LEFTRIGHT                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_TRIANGLE                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_SAWTOOTHUP                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_SAWTOOTHDOWN                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_RAMP                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_SPRING                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_DAMPER                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_INERTIA                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_FRICTION                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_CUSTOM                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_GAIN                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_AUTOCENTER                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_STATUS                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_PAUSE                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_POLAR                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_CARTESIAN                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_SPHERICAL                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceFeedback_INFINITY                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSimultaneouslyEffects                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::breakDeviceForceFeedbackInfo(const struct FSimpleControllerDevice& Device, bool* HasHaptic, bool* ForceFeedback_CONSTANT, bool* ForceFeedback_SINE, bool* ForceFeedback_LEFTRIGHT, bool* ForceFeedback_TRIANGLE, bool* ForceFeedback_SAWTOOTHUP, bool* ForceFeedback_SAWTOOTHDOWN, bool* ForceFeedback_RAMP, bool* ForceFeedback_SPRING, bool* ForceFeedback_DAMPER, bool* ForceFeedback_INERTIA, bool* ForceFeedback_FRICTION, bool* ForceFeedback_CUSTOM, bool* ForceFeedback_GAIN, bool* ForceFeedback_AUTOCENTER, bool* ForceFeedback_STATUS, bool* ForceFeedback_PAUSE, bool* ForceFeedback_POLAR, bool* ForceFeedback_CARTESIAN, bool* ForceFeedback_SPHERICAL, bool* ForceFeedback_INFINITY, int32* MaxSimultaneouslyEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "breakDeviceForceFeedbackInfo");

	Params::SimpleControllerBPLibrary_breakDeviceForceFeedbackInfo Parms{};

	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HasHaptic != nullptr)
		*HasHaptic = Parms.HasHaptic;

	if (ForceFeedback_CONSTANT != nullptr)
		*ForceFeedback_CONSTANT = Parms.ForceFeedback_CONSTANT;

	if (ForceFeedback_SINE != nullptr)
		*ForceFeedback_SINE = Parms.ForceFeedback_SINE;

	if (ForceFeedback_LEFTRIGHT != nullptr)
		*ForceFeedback_LEFTRIGHT = Parms.ForceFeedback_LEFTRIGHT;

	if (ForceFeedback_TRIANGLE != nullptr)
		*ForceFeedback_TRIANGLE = Parms.ForceFeedback_TRIANGLE;

	if (ForceFeedback_SAWTOOTHUP != nullptr)
		*ForceFeedback_SAWTOOTHUP = Parms.ForceFeedback_SAWTOOTHUP;

	if (ForceFeedback_SAWTOOTHDOWN != nullptr)
		*ForceFeedback_SAWTOOTHDOWN = Parms.ForceFeedback_SAWTOOTHDOWN;

	if (ForceFeedback_RAMP != nullptr)
		*ForceFeedback_RAMP = Parms.ForceFeedback_RAMP;

	if (ForceFeedback_SPRING != nullptr)
		*ForceFeedback_SPRING = Parms.ForceFeedback_SPRING;

	if (ForceFeedback_DAMPER != nullptr)
		*ForceFeedback_DAMPER = Parms.ForceFeedback_DAMPER;

	if (ForceFeedback_INERTIA != nullptr)
		*ForceFeedback_INERTIA = Parms.ForceFeedback_INERTIA;

	if (ForceFeedback_FRICTION != nullptr)
		*ForceFeedback_FRICTION = Parms.ForceFeedback_FRICTION;

	if (ForceFeedback_CUSTOM != nullptr)
		*ForceFeedback_CUSTOM = Parms.ForceFeedback_CUSTOM;

	if (ForceFeedback_GAIN != nullptr)
		*ForceFeedback_GAIN = Parms.ForceFeedback_GAIN;

	if (ForceFeedback_AUTOCENTER != nullptr)
		*ForceFeedback_AUTOCENTER = Parms.ForceFeedback_AUTOCENTER;

	if (ForceFeedback_STATUS != nullptr)
		*ForceFeedback_STATUS = Parms.ForceFeedback_STATUS;

	if (ForceFeedback_PAUSE != nullptr)
		*ForceFeedback_PAUSE = Parms.ForceFeedback_PAUSE;

	if (ForceFeedback_POLAR != nullptr)
		*ForceFeedback_POLAR = Parms.ForceFeedback_POLAR;

	if (ForceFeedback_CARTESIAN != nullptr)
		*ForceFeedback_CARTESIAN = Parms.ForceFeedback_CARTESIAN;

	if (ForceFeedback_SPHERICAL != nullptr)
		*ForceFeedback_SPHERICAL = Parms.ForceFeedback_SPHERICAL;

	if (ForceFeedback_INFINITY != nullptr)
		*ForceFeedback_INFINITY = Parms.ForceFeedback_INFINITY;

	if (MaxSimultaneouslyEffects != nullptr)
		*MaxSimultaneouslyEffects = Parms.MaxSimultaneouslyEffects;
}


// Function SimpleController.SimpleControllerBPLibrary.breakDeviceInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ConnectionIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DeviceID                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DeviceName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ControllerName                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VendorID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProductID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumAxes                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumButtons                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumDirectionalPadAxes                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumBalls                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasHaptic                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::breakDeviceInfo(const struct FSimpleControllerDevice& Device, int32* DeviceIndex, int32* ConnectionIndex, class FString* DeviceID, class FString* DeviceName, class FString* ControllerName, int32* VendorID, int32* ProductID, int32* NumAxes, int32* NumButtons, int32* NumDirectionalPadAxes, int32* NumBalls, bool* HasHaptic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "breakDeviceInfo");

	Params::SimpleControllerBPLibrary_breakDeviceInfo Parms{};

	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeviceIndex != nullptr)
		*DeviceIndex = Parms.DeviceIndex;

	if (ConnectionIndex != nullptr)
		*ConnectionIndex = Parms.ConnectionIndex;

	if (DeviceID != nullptr)
		*DeviceID = std::move(Parms.DeviceID);

	if (DeviceName != nullptr)
		*DeviceName = std::move(Parms.DeviceName);

	if (ControllerName != nullptr)
		*ControllerName = std::move(Parms.ControllerName);

	if (VendorID != nullptr)
		*VendorID = Parms.VendorID;

	if (ProductID != nullptr)
		*ProductID = Parms.ProductID;

	if (NumAxes != nullptr)
		*NumAxes = Parms.NumAxes;

	if (NumButtons != nullptr)
		*NumButtons = Parms.NumButtons;

	if (NumDirectionalPadAxes != nullptr)
		*NumDirectionalPadAxes = Parms.NumDirectionalPadAxes;

	if (NumBalls != nullptr)
		*NumBalls = Parms.NumBalls;

	if (HasHaptic != nullptr)
		*HasHaptic = Parms.HasHaptic;
}


// Function SimpleController.SimpleControllerBPLibrary.breakForceFeedbackEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   EffectID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::breakForceFeedbackEffect(const struct FSimpleControllerForceFeedbackEffect& ForceFeedbackEffect, int32* EffectID, bool* Successful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "breakForceFeedbackEffect");

	Params::SimpleControllerBPLibrary_breakForceFeedbackEffect Parms{};

	Parms.ForceFeedbackEffect = std::move(ForceFeedbackEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EffectID != nullptr)
		*EffectID = Parms.EffectID;

	if (Successful != nullptr)
		*Successful = Parms.Successful;
}


// Function SimpleController.SimpleControllerBPLibrary.buttonIDToButton
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   buttonID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESimpleControllerButtons                buttons                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::buttonIDToButton(int32 buttonID, ESimpleControllerButtons* buttons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "buttonIDToButton");

	Params::SimpleControllerBPLibrary_buttonIDToButton Parms{};

	Parms.buttonID = buttonID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (buttons != nullptr)
		*buttons = Parms.buttons;
}


// Function SimpleController.SimpleControllerBPLibrary.destroyForceFeedbackEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DestroyForceFeedbackEffect(const struct FSimpleControllerForceFeedbackEffect& ForceFeedbackEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "destroyForceFeedbackEffect");

	Params::SimpleControllerBPLibrary_DestroyForceFeedbackEffect Parms{};

	Parms.ForceFeedbackEffect = std::move(ForceFeedbackEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.directinalPadValueToDirection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   DirectionalPadValue                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESimpleControllerDirectionalPad         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DirectinalPadValueToDirection(int32 DirectionalPadValue, ESimpleControllerDirectionalPad* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "directinalPadValueToDirection");

	Params::SimpleControllerBPLibrary_DirectinalPadValueToDirection Parms{};

	Parms.DirectionalPadValue = DirectionalPadValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Direction != nullptr)
		*Direction = Parms.Direction;
}


// Function SimpleController.SimpleControllerBPLibrary.getSimpleControllerTarget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USimpleControllerBPLibrary*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USimpleControllerBPLibrary* USimpleControllerBPLibrary::GetSimpleControllerTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "getSimpleControllerTarget");

	Params::SimpleControllerBPLibrary_GetSimpleControllerTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.simpleRumble
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// int32                                   Low_runble                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   High_rumble                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::SimpleRumble(const struct FSimpleControllerDevice& Device, int32 Low_runble, int32 High_rumble, int32 Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "simpleRumble");

	Params::SimpleControllerBPLibrary_SimpleRumble Parms{};

	Parms.Device = std::move(Device);
	Parms.Low_runble = Low_runble;
	Parms.High_rumble = High_rumble;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.uploadAndRunForceFeedbackEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Iterations                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerForceFeedbackEffectReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSimpleControllerForceFeedbackEffect USimpleControllerBPLibrary::UploadAndRunForceFeedbackEffect(bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerForceFeedbackEffect& ForceFeedbackEffect, int32 Iterations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SimpleControllerBPLibrary", "uploadAndRunForceFeedbackEffect");

	Params::SimpleControllerBPLibrary_UploadAndRunForceFeedbackEffect Parms{};

	Parms.ForceFeedbackEffect = std::move(ForceFeedbackEffect);
	Parms.Iterations = Iterations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.axisMovedEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AxisID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::AxisMovedEventDelegate(const class FString& DeviceID, const int32 AxisID, const float AxisValue, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "axisMovedEventDelegate");

	Params::SimpleControllerBPLibrary_AxisMovedEventDelegate Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.AxisID = AxisID;
	Parms.AxisValue = AxisValue;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.axisMovedEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AxisID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::AxisMovedEventDelegate__DelegateSignature(const class FString& DeviceID, int32 AxisID, float AxisValue, int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "axisMovedEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_AxisMovedEventDelegate__DelegateSignature Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.AxisID = AxisID;
	Parms.AxisValue = AxisValue;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.ballMovedEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ballID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   XRel                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   YRel                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ballMovedEventDelegate(const class FString& DeviceID, const int32 ballID, const int32 XRel, const int32 YRel, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "ballMovedEventDelegate");

	Params::SimpleControllerBPLibrary_ballMovedEventDelegate Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.ballID = ballID;
	Parms.XRel = XRel;
	Parms.YRel = YRel;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.ballMovedEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ballID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   XRel                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   YRel                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ballMovedEventDelegate__DelegateSignature(const class FString& DeviceID, int32 ballID, float XRel, int32 YRel, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "ballMovedEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_ballMovedEventDelegate__DelegateSignature Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.ballID = ballID;
	Parms.XRel = XRel;
	Parms.YRel = YRel;
	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.buttonDownEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   buttonID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::buttonDownEventDelegate(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "buttonDownEventDelegate");

	Params::SimpleControllerBPLibrary_buttonDownEventDelegate Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.buttonID = buttonID;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.buttonDownEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   buttonID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::buttonDownEventDelegate__DelegateSignature(const class FString& DeviceID, int32 buttonID, int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "buttonDownEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_buttonDownEventDelegate__DelegateSignature Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.buttonID = buttonID;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.buttonUpEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   buttonID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::buttonUpEventDelegate(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "buttonUpEventDelegate");

	Params::SimpleControllerBPLibrary_buttonUpEventDelegate Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.buttonID = buttonID;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.buttonUpEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   buttonID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::buttonUpEventDelegate__DelegateSignature(const class FString& DeviceID, int32 buttonID, int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "buttonUpEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_buttonUpEventDelegate__DelegateSignature Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.buttonID = buttonID;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.changeAxisMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OldAxisID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewAxisID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ChangeAxisMapping(int32 DeviceIndex, int32 OldAxisID, int32 NewAxisID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "changeAxisMapping");

	Params::SimpleControllerBPLibrary_ChangeAxisMapping Parms{};

	Parms.DeviceIndex = DeviceIndex;
	Parms.OldAxisID = OldAxisID;
	Parms.NewAxisID = NewAxisID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.changeButtonMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OldButtonID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewButtonID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ChangeButtonMapping(int32 DeviceIndex, int32 OldButtonID, int32 NewButtonID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "changeButtonMapping");

	Params::SimpleControllerBPLibrary_ChangeButtonMapping Parms{};

	Parms.DeviceIndex = DeviceIndex;
	Parms.OldButtonID = OldButtonID;
	Parms.NewButtonID = NewButtonID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectCondition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// ESimpleControllerForceFeedbackEffectConditionTypeConditionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseDirectionX                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseDirectionY                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseDirectionZ                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RightLevelIncreaseSpeed                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LeftLevelIncreaseSpeed                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Deadband                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Center                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::CreateForceFeedbackEffectCondition(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackEffectConditionType ConditionType, bool UseDirectionX, bool UseDirectionY, bool UseDirectionZ, int32 Length, int32 Delay, float RightLevel, float LeftLevel, int32 RightLevelIncreaseSpeed, int32 LeftLevelIncreaseSpeed, float Deadband, int32 Center)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "createForceFeedbackEffectCondition");

	Params::SimpleControllerBPLibrary_CreateForceFeedbackEffectCondition Parms{};

	Parms.Device = std::move(Device);
	Parms.ConditionType = ConditionType;
	Parms.UseDirectionX = UseDirectionX;
	Parms.UseDirectionY = UseDirectionY;
	Parms.UseDirectionZ = UseDirectionZ;
	Parms.Length = Length;
	Parms.Delay = Delay;
	Parms.RightLevel = RightLevel;
	Parms.LeftLevel = LeftLevel;
	Parms.RightLevelIncreaseSpeed = RightLevelIncreaseSpeed;
	Parms.LeftLevelIncreaseSpeed = LeftLevelIncreaseSpeed;
	Parms.Deadband = Deadband;
	Parms.Center = Center;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ForceFeedbackEffect != nullptr)
		*ForceFeedbackEffect = std::move(Parms.ForceFeedbackEffect);

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectConstant
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// ESimpleControllerForceFeedbackDirectionTypeDirectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionZ                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLength                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::CreateForceFeedbackEffectConstant(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackDirectionType DirectionType, int32 DirectionX, int32 DirectionY, int32 DirectionZ, int32 Length, int32 Delay, float Level, int32 AttackLength, float AttackLevel, int32 FadeLength, float FadeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "createForceFeedbackEffectConstant");

	Params::SimpleControllerBPLibrary_CreateForceFeedbackEffectConstant Parms{};

	Parms.Device = std::move(Device);
	Parms.DirectionType = DirectionType;
	Parms.DirectionX = DirectionX;
	Parms.DirectionY = DirectionY;
	Parms.DirectionZ = DirectionZ;
	Parms.Length = Length;
	Parms.Delay = Delay;
	Parms.Level = Level;
	Parms.AttackLength = AttackLength;
	Parms.AttackLevel = AttackLevel;
	Parms.FadeLength = FadeLength;
	Parms.FadeLevel = FadeLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ForceFeedbackEffect != nullptr)
		*ForceFeedbackEffect = std::move(Parms.ForceFeedbackEffect);

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectPeriodic
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// ESimpleControllerForceFeedbackEffectPeriodicTypePeriodicType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESimpleControllerForceFeedbackDirectionTypeDirectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionZ                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Period                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Magnitude                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLength                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::CreateForceFeedbackEffectPeriodic(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackEffectPeriodicType PeriodicType, ESimpleControllerForceFeedbackDirectionType DirectionType, int32 DirectionX, int32 DirectionY, int32 DirectionZ, int32 Length, int32 Delay, int32 Period, float Magnitude, int32 Offset, int32 Phase, int32 AttackLength, float AttackLevel, int32 FadeLength, float FadeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "createForceFeedbackEffectPeriodic");

	Params::SimpleControllerBPLibrary_CreateForceFeedbackEffectPeriodic Parms{};

	Parms.Device = std::move(Device);
	Parms.PeriodicType = PeriodicType;
	Parms.DirectionType = DirectionType;
	Parms.DirectionX = DirectionX;
	Parms.DirectionY = DirectionY;
	Parms.DirectionZ = DirectionZ;
	Parms.Length = Length;
	Parms.Delay = Delay;
	Parms.Period = Period;
	Parms.Magnitude = Magnitude;
	Parms.Offset = Offset;
	Parms.Phase = Phase;
	Parms.AttackLength = AttackLength;
	Parms.AttackLevel = AttackLevel;
	Parms.FadeLength = FadeLength;
	Parms.FadeLevel = FadeLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ForceFeedbackEffect != nullptr)
		*ForceFeedbackEffect = std::move(Parms.ForceFeedbackEffect);

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function SimpleController.SimpleControllerBPLibrary.createForceFeedbackEffectRamp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleControllerForceFeedbackEffectForceFeedbackEffect                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// ESimpleControllerForceFeedbackDirectionTypeDirectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionZ                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLength                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::CreateForceFeedbackEffectRamp(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackDirectionType DirectionType, int32 DirectionX, int32 DirectionY, int32 DirectionZ, int32 Length, int32 Delay, float StartLevel, float EndLevel, int32 AttackLength, float AttackLevel, int32 FadeLength, float FadeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "createForceFeedbackEffectRamp");

	Params::SimpleControllerBPLibrary_CreateForceFeedbackEffectRamp Parms{};

	Parms.Device = std::move(Device);
	Parms.DirectionType = DirectionType;
	Parms.DirectionX = DirectionX;
	Parms.DirectionY = DirectionY;
	Parms.DirectionZ = DirectionZ;
	Parms.Length = Length;
	Parms.Delay = Delay;
	Parms.StartLevel = StartLevel;
	Parms.EndLevel = EndLevel;
	Parms.AttackLength = AttackLength;
	Parms.AttackLevel = AttackLevel;
	Parms.FadeLength = FadeLength;
	Parms.FadeLevel = FadeLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ForceFeedbackEffect != nullptr)
		*ForceFeedbackEffect = std::move(Parms.ForceFeedbackEffect);

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function SimpleController.SimpleControllerBPLibrary.deviceAttachedEventDelegate
// (Final, Native, Public)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DeviceAttachedEventDelegate(const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "deviceAttachedEventDelegate");

	Params::SimpleControllerBPLibrary_DeviceAttachedEventDelegate Parms{};

	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.deviceAttachedEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DeviceAttachedEventDelegate__DelegateSignature(const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "deviceAttachedEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_DeviceAttachedEventDelegate__DelegateSignature Parms{};

	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.deviceDetachedEventDelegate
// (Final, Native, Public)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DeviceDetachedEventDelegate(const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "deviceDetachedEventDelegate");

	Params::SimpleControllerBPLibrary_DeviceDetachedEventDelegate Parms{};

	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.deviceDetachedEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DeviceDetachedEventDelegate__DelegateSignature(const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "deviceDetachedEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_DeviceDetachedEventDelegate__DelegateSignature Parms{};

	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.directionalPadEventDelegate
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionalPadValue                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DirectionalPadEventDelegate(const class FString& DeviceID, const int32 DirectionalPadValue, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "directionalPadEventDelegate");

	Params::SimpleControllerBPLibrary_DirectionalPadEventDelegate Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.DirectionalPadValue = DirectionalPadValue;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleController.SimpleControllerBPLibrary.directionalPadEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DirectionalPadValue                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::DirectionalPadEventDelegate__DelegateSignature(const class FString& DeviceID, int32 DirectionalPadValue, int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "directionalPadEventDelegate__DelegateSignature");

	Params::SimpleControllerBPLibrary_DirectionalPadEventDelegate__DelegateSignature Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.DirectionalPadValue = DirectionalPadValue;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleController.SimpleControllerBPLibrary.findControllerByDeviceID
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSimpleControllerDevice USimpleControllerBPLibrary::FindControllerByDeviceID(const class FString& DeviceID, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "findControllerByDeviceID");

	Params::SimpleControllerBPLibrary_FindControllerByDeviceID Parms{};

	Parms.DeviceID = std::move(DeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Found != nullptr)
		*Found = Parms.Found;

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.findControllerByDeviceIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSimpleControllerDevice USimpleControllerBPLibrary::FindControllerByDeviceIndex(int32 DeviceIndex, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "findControllerByDeviceIndex");

	Params::SimpleControllerBPLibrary_FindControllerByDeviceIndex Parms{};

	Parms.DeviceIndex = DeviceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Found != nullptr)
		*Found = Parms.Found;

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.getConnectedControllers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSimpleControllerDevice>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<struct FSimpleControllerDevice> USimpleControllerBPLibrary::GetConnectedControllers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "getConnectedControllers");

	Params::SimpleControllerBPLibrary_GetConnectedControllers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.initController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   RefreshRateButtonsAndAxis                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::InitController(float RefreshRateButtonsAndAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "initController");

	Params::SimpleControllerBPLibrary_InitController Parms{};

	Parms.RefreshRateButtonsAndAxis = RefreshRateButtonsAndAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.invertAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AxisID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::InvertAxis(int32 DeviceIndex, int32 AxisID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "invertAxis");

	Params::SimpleControllerBPLibrary_InvertAxis Parms{};

	Parms.DeviceIndex = DeviceIndex;
	Parms.AxisID = AxisID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.loadMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESimpleControllerDirectoryType          DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FileNameWithPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleControllerBPLibrary::LoadMapping(ESimpleControllerDirectoryType DirectoryType, int32 DeviceIndex, const class FString& FileNameWithPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "loadMapping");

	Params::SimpleControllerBPLibrary_LoadMapping Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.DeviceIndex = DeviceIndex;
	Parms.FileNameWithPath = std::move(FileNameWithPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.OnButtonDownEvent
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   buttonID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::OnButtonDownEvent(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "OnButtonDownEvent");

	Params::SimpleControllerBPLibrary_OnButtonDownEvent Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.buttonID = buttonID;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.OnButtonUpEvent
// (Final, Native, Public)
// Parameters:
// class FString                           DeviceID                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   buttonID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::OnButtonUpEvent(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "OnButtonUpEvent");

	Params::SimpleControllerBPLibrary_OnButtonUpEvent Parms{};

	Parms.DeviceID = std::move(DeviceID);
	Parms.buttonID = buttonID;
	Parms.DeviceIndex = DeviceIndex;
	Parms.Device = std::move(Device);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.resetAllAxisInverting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ResetAllAxisInverting(int32 DeviceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "resetAllAxisInverting");

	Params::SimpleControllerBPLibrary_ResetAllAxisInverting Parms{};

	Parms.DeviceIndex = DeviceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.resetAllAxisToDefaultMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ResetAllAxisToDefaultMapping(int32 DeviceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "resetAllAxisToDefaultMapping");

	Params::SimpleControllerBPLibrary_ResetAllAxisToDefaultMapping Parms{};

	Parms.DeviceIndex = DeviceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.resetAllButtonsToDefaultMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ResetAllButtonsToDefaultMapping(int32 DeviceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "resetAllButtonsToDefaultMapping");

	Params::SimpleControllerBPLibrary_ResetAllButtonsToDefaultMapping Parms{};

	Parms.DeviceIndex = DeviceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.resetAxisInverting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AxisID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ResetAxisInverting(int32 DeviceIndex, int32 AxisID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "resetAxisInverting");

	Params::SimpleControllerBPLibrary_ResetAxisInverting Parms{};

	Parms.DeviceIndex = DeviceIndex;
	Parms.AxisID = AxisID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.resetAxisToDefaultMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OldAxisID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ResetAxisToDefaultMapping(int32 DeviceIndex, int32 OldAxisID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "resetAxisToDefaultMapping");

	Params::SimpleControllerBPLibrary_ResetAxisToDefaultMapping Parms{};

	Parms.DeviceIndex = DeviceIndex;
	Parms.OldAxisID = OldAxisID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.resetButtonToDefaultMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OldButtonID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::ResetButtonToDefaultMapping(int32 DeviceIndex, int32 OldButtonID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "resetButtonToDefaultMapping");

	Params::SimpleControllerBPLibrary_ResetButtonToDefaultMapping Parms{};

	Parms.DeviceIndex = DeviceIndex;
	Parms.OldButtonID = OldButtonID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleController.SimpleControllerBPLibrary.rumble
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleControllerDevice          Device                                                 (Parm, NativeAccessSpecifierPublic)
// float                                   StrengthSmallMotor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StrengthLargeMotor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LengthInMilliseconds                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleControllerBPLibrary::Rumble(bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, float StrengthSmallMotor, float StrengthLargeMotor, int32 LengthInMilliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "rumble");

	Params::SimpleControllerBPLibrary_Rumble Parms{};

	Parms.Device = std::move(Device);
	Parms.StrengthSmallMotor = StrengthSmallMotor;
	Parms.StrengthLargeMotor = StrengthLargeMotor;
	Parms.LengthInMilliseconds = LengthInMilliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function SimpleController.SimpleControllerBPLibrary.saveMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESimpleControllerDirectoryType          DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DeviceIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FileNameWithPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateDirectory                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleControllerBPLibrary::SaveMapping(ESimpleControllerDirectoryType DirectoryType, int32 DeviceIndex, const class FString& FileNameWithPath, bool CreateDirectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "saveMapping");

	Params::SimpleControllerBPLibrary_SaveMapping Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.DeviceIndex = DeviceIndex;
	Parms.FileNameWithPath = std::move(FileNameWithPath);
	Parms.CreateDirectory = CreateDirectory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SimpleController.SimpleControllerBPLibrary.stopController
// (Final, Native, Public, BlueprintCallable)

void USimpleControllerBPLibrary::StopController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleControllerBPLibrary", "stopController");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

