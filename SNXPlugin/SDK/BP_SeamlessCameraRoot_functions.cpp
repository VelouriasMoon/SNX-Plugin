#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SeamlessCameraRoot

#include "Basic.hpp"

#include "BP_SeamlessCameraRoot_classes.hpp"
#include "BP_SeamlessCameraRoot_parameters.hpp"


namespace SDK
{

// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ED_SeamlessInFinish__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::ED_SeamlessInFinish__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ED_SeamlessInFinish__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ED_SeamlessOutFinish__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::ED_SeamlessOutFinish__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ED_SeamlessOutFinish__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ExecuteUbergraph_BP_SeamlessCameraRoot
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeamlessCameraRoot_C::ExecuteUbergraph_BP_SeamlessCameraRoot(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ExecuteUbergraph_BP_SeamlessCameraRoot");

	Params::BP_SeamlessCameraRoot_C_ExecuteUbergraph_BP_SeamlessCameraRoot Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeamlessCameraRoot_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ReceiveEndPlay");

	Params::BP_SeamlessCameraRoot_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeamlessCameraRoot_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ReceiveTick");

	Params::BP_SeamlessCameraRoot_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.InitializeInternal
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::InitializeInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "InitializeInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.FinalizeInternal
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::FinalizeInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "FinalizeInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.BindingSequencerCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>Binding                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_SeamlessCameraRoot_C::BindingSequencerCamera(class ARSLevelSequenceActor* Sequencer, TArray<struct FMovieSceneObjectBindingID>& Binding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "BindingSequencerCamera");

	Params::BP_SeamlessCameraRoot_C_BindingSequencerCamera Parms{};

	Parms.Sequencer = Sequencer;
	Parms.Binding = std::move(Binding);

	UObject::ProcessEvent(Func, &Parms);

	Binding = std::move(Parms.Binding);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.Bind
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindingSequencerCamera                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BindingSeamlessCamera                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeamlessCameraRoot_C::Bind(class ARSLevelSequenceActor* Sequencer, bool BindingSequencerCamera, bool BindingSeamlessCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "Bind");

	Params::BP_SeamlessCameraRoot_C_Bind Parms{};

	Parms.Sequencer = Sequencer;
	Parms.BindingSequencerCamera = BindingSequencerCamera;
	Parms.BindingSeamlessCamera = BindingSeamlessCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.UpdateInternal
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeamlessCameraRoot_C::UpdateInternal(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "UpdateInternal");

	Params::BP_SeamlessCameraRoot_C_UpdateInternal Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ResetPlayerCamera
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::ResetPlayerCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ResetPlayerCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.Start
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.End
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BeforeReplaceSequencerCamera                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeamlessCameraRoot_C::End(bool BeforeReplaceSequencerCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "End");

	Params::BP_SeamlessCameraRoot_C_End Parms{};

	Parms.BeforeReplaceSequencerCamera = BeforeReplaceSequencerCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.SetSeamlessOutCameraTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_SeamlessCameraRoot_C::SetSeamlessOutCameraTransform(const struct FTransform& CameraTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "SetSeamlessOutCameraTransform");

	Params::BP_SeamlessCameraRoot_C_SetSeamlessOutCameraTransform Parms{};

	Parms.CameraTransform = std::move(CameraTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.CalcSeamlessOutCameraTransformInternal
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_SeamlessCameraRoot_C::CalcSeamlessOutCameraTransformInternal(class ARSCharacterBase* Player, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "CalcSeamlessOutCameraTransformInternal");

	Params::BP_SeamlessCameraRoot_C_CalcSeamlessOutCameraTransformInternal Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.ResetCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_SeamlessCameraRoot_C::ResetCamera(const struct FTransform& CameraTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "ResetCamera");

	Params::BP_SeamlessCameraRoot_C_ResetCamera Parms{};

	Parms.CameraTransform = std::move(CameraTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.SetViewTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeamlessCameraRoot_C::SetViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "SetViewTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeamlessCameraRoot.BP_SeamlessCameraRoot_C.SetUsePlayerMeshRelative
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeamlessCameraRoot_C::SetUsePlayerMeshRelative(bool UseLocation, bool UseRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeamlessCameraRoot_C", "SetUsePlayerMeshRelative");

	Params::BP_SeamlessCameraRoot_C_SetUsePlayerMeshRelative Parms{};

	Parms.UseLocation = UseLocation;
	Parms.UseRotation = UseRotation;

	UObject::ProcessEvent(Func, &Parms);
}

}

