#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResourceManager

#include "Basic.hpp"

#include "BP_ResourceManager_classes.hpp"
#include "BP_ResourceManager_parameters.hpp"


namespace SDK
{

// Function BP_ResourceManager.BP_ResourceManager_C.ExecuteUbergraph_BP_ResourceManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::ExecuteUbergraph_BP_ResourceManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "ExecuteUbergraph_BP_ResourceManager");

	Params::BP_ResourceManager_C_ExecuteUbergraph_BP_ResourceManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "ReceiveTick");

	Params::BP_ResourceManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.RegisterLoadAsset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetList                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UObject>           AssetSoftRef                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          AssetRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::RegisterLoadAsset(class FName AssetList, TSoftObjectPtr<class UObject> AssetSoftRef, class UObject* AssetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "RegisterLoadAsset");

	Params::BP_ResourceManager_C_RegisterLoadAsset Parms{};

	Parms.AssetList = AssetList;
	Parms.AssetSoftRef = AssetSoftRef;
	Parms.AssetRef = AssetRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.UnregisterLoadAsset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           AssetSoftRef                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_ResourceManager_C::UnregisterLoadAsset(TSoftObjectPtr<class UObject> AssetSoftRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "UnregisterLoadAsset");

	Params::BP_ResourceManager_C_UnregisterLoadAsset Parms{};

	Parms.AssetSoftRef = AssetSoftRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.RegisterAssetList
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetList                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::RegisterAssetList(class FName AssetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "RegisterAssetList");

	Params::BP_ResourceManager_C_RegisterAssetList Parms{};

	Parms.AssetList = AssetList;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.UnregisterAssetList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetList                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ResourceManager_C::UnregisterAssetList(class FName AssetList, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "UnregisterAssetList");

	Params::BP_ResourceManager_C_UnregisterAssetList Parms{};

	Parms.AssetList = AssetList;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_ResourceManager.BP_ResourceManager_C.MakeLoadedAssetListAssets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ExcludeAssetList                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Assets                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_ResourceManager_C::MakeLoadedAssetListAssets(class FName ExcludeAssetList, TArray<TSoftObjectPtr<class UObject>>* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "MakeLoadedAssetListAssets");

	Params::BP_ResourceManager_C_MakeLoadedAssetListAssets Parms{};

	Parms.ExcludeAssetList = ExcludeAssetList;

	UObject::ProcessEvent(Func, &Parms);

	if (Assets != nullptr)
		*Assets = std::move(Parms.Assets);
}


// Function BP_ResourceManager.BP_ResourceManager_C.IsContainAssetInAssetList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             ExcludeAssetList                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ResourceManager_C::IsContainAssetInAssetList(TSoftObjectPtr<class UObject> Asset, class FName ExcludeAssetList, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "IsContainAssetInAssetList");

	Params::BP_ResourceManager_C_IsContainAssetInAssetList Parms{};

	Parms.Asset = Asset;
	Parms.ExcludeAssetList = ExcludeAssetList;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_ResourceManager.BP_ResourceManager_C.RequestLoadAssetList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetList                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::RequestLoadAssetList(class FName AssetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "RequestLoadAssetList");

	Params::BP_ResourceManager_C_RequestLoadAssetList Parms{};

	Parms.AssetList = AssetList;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.UnloadAllAsset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ResourceManager_C::UnloadAllAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "UnloadAllAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ResourceManager.BP_ResourceManager_C.RequestUnloadAssetList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetList                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ResourceManager_C::RequestUnloadAssetList(class FName AssetList, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "RequestUnloadAssetList");

	Params::BP_ResourceManager_C_RequestUnloadAssetList Parms{};

	Parms.AssetList = AssetList;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_ResourceManager.BP_ResourceManager_C.ProtectedGetMipPrestreamPlayerMeshes
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USkeletalMesh*>            SkeletalMeshes                                         (Parm, OutParm, HasGetValueTypeHash)
// TArray<class UStaticMesh*>              StaticMeshes                                           (Parm, OutParm, HasGetValueTypeHash)
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLoad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ResourceManager_C::ProtectedGetMipPrestreamPlayerMeshes(TArray<class USkeletalMesh*>* SkeletalMeshes, TArray<class UStaticMesh*>* StaticMeshes, EPlayerID PlayerId, bool bLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "ProtectedGetMipPrestreamPlayerMeshes");

	Params::BP_ResourceManager_C_ProtectedGetMipPrestreamPlayerMeshes Parms{};

	Parms.PlayerId = PlayerId;
	Parms.bLoad = bLoad;

	UObject::ProcessEvent(Func, &Parms);

	if (SkeletalMeshes != nullptr)
		*SkeletalMeshes = std::move(Parms.SkeletalMeshes);

	if (StaticMeshes != nullptr)
		*StaticMeshes = std::move(Parms.StaticMeshes);
}


// Function BP_ResourceManager.BP_ResourceManager_C.LoadWeaponMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InWeaponID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           InMeshComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class USkeletalMeshComponent*>   InExtraMeshComp                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    bDisableYuitoString                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ResourceManager_C::LoadWeaponMesh(int32 InWeaponID, class USkeletalMeshComponent* InMeshComp, TArray<class USkeletalMeshComponent*>& InExtraMeshComp, bool* bDisableYuitoString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "LoadWeaponMesh");

	Params::BP_ResourceManager_C_LoadWeaponMesh Parms{};

	Parms.InWeaponID = InWeaponID;
	Parms.InMeshComp = InMeshComp;
	Parms.InExtraMeshComp = std::move(InExtraMeshComp);

	UObject::ProcessEvent(Func, &Parms);

	InExtraMeshComp = std::move(Parms.InExtraMeshComp);

	if (bDisableYuitoString != nullptr)
		*bDisableYuitoString = Parms.bDisableYuitoString;
}


// Function BP_ResourceManager.BP_ResourceManager_C.LoadCostumeMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InCostumeItemID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           InMeshComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::LoadCostumeMesh(EPlayerID InPlayerID, int32 InCostumeItemID, class USkeletalMeshComponent* InMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "LoadCostumeMesh");

	Params::BP_ResourceManager_C_LoadCostumeMesh Parms{};

	Parms.InPlayerID = InPlayerID;
	Parms.InCostumeItemID = InCostumeItemID;
	Parms.InMeshComp = InMeshComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.MeshSetting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           InMeshComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    InNewMesh                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::MeshSetting(class USkeletalMeshComponent* InMeshComp, class USkeletalMesh* InNewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "MeshSetting");

	Params::BP_ResourceManager_C_MeshSetting Parms{};

	Parms.InMeshComp = InMeshComp;
	Parms.InNewMesh = InNewMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceManager.BP_ResourceManager_C.ProtectedGetMipPrestreamPlayerSoftMeshes
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class USkeletalMesh>>SkeletalMeshes                                         (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Attachment1Meshes                                      (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UMaterialInstance>>Attachment1Materials                                   (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Attachment2Meshes                                      (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UMaterialInstance>>Attachment2Materials                                   (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UObject>>   Attachment3Meshes                                      (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UMaterialInstance>>Attachment3Materials                                   (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceManager_C::ProtectedGetMipPrestreamPlayerSoftMeshes(TArray<TSoftObjectPtr<class USkeletalMesh>>* SkeletalMeshes, TArray<TSoftObjectPtr<class UObject>>* Attachment1Meshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Attachment1Materials, TArray<TSoftObjectPtr<class UObject>>* Attachment2Meshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Attachment2Materials, TArray<TSoftObjectPtr<class UObject>>* Attachment3Meshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Attachment3Materials, EPlayerID PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "ProtectedGetMipPrestreamPlayerSoftMeshes");

	Params::BP_ResourceManager_C_ProtectedGetMipPrestreamPlayerSoftMeshes Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	if (SkeletalMeshes != nullptr)
		*SkeletalMeshes = std::move(Parms.SkeletalMeshes);

	if (Attachment1Meshes != nullptr)
		*Attachment1Meshes = std::move(Parms.Attachment1Meshes);

	if (Attachment1Materials != nullptr)
		*Attachment1Materials = std::move(Parms.Attachment1Materials);

	if (Attachment2Meshes != nullptr)
		*Attachment2Meshes = std::move(Parms.Attachment2Meshes);

	if (Attachment2Materials != nullptr)
		*Attachment2Materials = std::move(Parms.Attachment2Materials);

	if (Attachment3Meshes != nullptr)
		*Attachment3Meshes = std::move(Parms.Attachment3Meshes);

	if (Attachment3Materials != nullptr)
		*Attachment3Materials = std::move(Parms.Attachment3Materials);
}


// Function BP_ResourceManager.BP_ResourceManager_C.ProtectedGetMipPrestreamPlayerSoftMeshes_0
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class USkeletalMesh>>SkeletalMeshes                                         (Parm, OutParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UStaticMesh>>StaticMeshes                                           (Parm, OutParm, HasGetValueTypeHash)
// TArray<TSoftObjectPtr<class UMaterialInstance>>Materials                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_ResourceManager_C::ProtectedGetMipPrestreamPlayerSoftMeshes_0(EPlayerID PlayerId, TArray<TSoftObjectPtr<class USkeletalMesh>>* SkeletalMeshes, TArray<TSoftObjectPtr<class UStaticMesh>>* StaticMeshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceManager_C", "ProtectedGetMipPrestreamPlayerSoftMeshes_0");

	Params::BP_ResourceManager_C_ProtectedGetMipPrestreamPlayerSoftMeshes_0 Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	if (SkeletalMeshes != nullptr)
		*SkeletalMeshes = std::move(Parms.SkeletalMeshes);

	if (StaticMeshes != nullptr)
		*StaticMeshes = std::move(Parms.StaticMeshes);

	if (Materials != nullptr)
		*Materials = std::move(Parms.Materials);
}

}

