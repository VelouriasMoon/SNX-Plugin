#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMaterialManageComponent

#include "Basic.hpp"

#include "FPlayerMaterialManageCurveData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FPlayerMaterialManageData_structs.hpp"
#include "EPlayerMaterialManageType_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "FPlayerVectorMaterialManageData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerMaterialManageComponent.BP_PlayerMaterialManageComponent_C
// 0x0268 (0x0328 - 0x00C0)
class UBP_PlayerMaterialManageComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFPlayerMaterialManageData>     ScalarManageData;                                  // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnCompletedMaterialSetting;                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FFPlayerMaterialManageCurveData> ScalarManageCurveData;                             // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FFPlayerVectorMaterialManageData> VectorManageData;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FCharacterMaterialLight>        LightTable;                                        // 0x0110(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UDataTable>              LightDataTableAsset;                               // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	ECharacterMaterialLightType                   ActionLightType;                                   // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6362[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionLightTime;                                   // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionLight;                                       // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6363[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             EditorLightDataTable;                              // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionLightLoop;                                   // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ActionLightEnd;                                    // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6364[0x6];                                     // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialSwitchCache                   MaterialSwitchCache;                               // 0x0168(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	int32                                         MaterialSwitchHandle;                              // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialSwitchActive;                              // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MaterialSwitchRestore;                             // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6365[0x2];                                     // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FPlayerMaterialManageScalar> ScalarParameter;                                   // 0x0180(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<class FName, struct FPlayerMaterialManageVector> VectorParameter;                                   // 0x01D0(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UBPC_OptimizeSwitchMaterialPlayer_C*    OptimizeSwitchComp;                                // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOptimize;                                       // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6366[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FArrayOfFloat>       LightSettingDefaultScalar;                         // 0x0230(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FArrayOfLinearColor> LightSettingDefaultVector;                         // 0x0280(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 PreSkinFacialMaterialSlots;                        // 0x02D0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialSwitchParamMataterial;                     // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           MaterialSwitchParamExcludeSlots;                   // 0x02E8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          MaterialSwitchParamWeapon;                         // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MaterialSwitchParamPlayer;                         // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6367[0x6];                                     // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SwitchPlayerLayerID;                               // 0x0300(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          PreCostumeVisibleHood;                             // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6368[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SwitchCopyLayerID;                                 // 0x0318(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void OnCompletedMaterialSetting__DelegateSignature(EPlayerMaterialManageType Type);
	void ExecuteUbergraph_BP_PlayerMaterialManageComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Update(float DeltaSeconds);
	void StartScalarMaterialDirection(EPlayerMaterialManageType Type, float StartValue, float EndValue, float Time, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void UpdateScalarMaterial(const struct FFPlayerMaterialManageData& InData, float DeltaSeconds, bool* bCompleted, struct FFPlayerMaterialManageData* UpdateData);
	void StartScalarMaterialCurveDirection(EPlayerMaterialManageType Type, class UCurveFloat* Curve, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void SetMaterialScalarParameter(class FName ParamName, float Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void UpdateMaterialCurve(const struct FFPlayerMaterialManageCurveData& InData, float DeltaSeconds, bool* bCompleted, struct FFPlayerMaterialManageCurveData* UpdateData);
	void SetMaterialVectorParameter(class FName ParamName, const struct FVector& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void StartVectorMaterialDirection(EPlayerMaterialManageType Type, const struct FVector& StartValue, const struct FVector& EndParam, float Time, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void UpdateVectorMaterial(struct FFPlayerVectorMaterialManageData& InData, float DeltaSeconds, bool* bCompleted, struct FFPlayerVectorMaterialManageData* UpdateDataParam);
	void StartMaterialLight(ECharacterMaterialLightType MaterialLightType);
	void Initialize();
	void UpdateLight(float DeltaSeconds);
	void IsActionLight(bool* Action);
	void InitializeLightDataTable(class UDataTable* DataTable);
	void EndMaterialLight(ECharacterMaterialLightType MaterialLightType);
	void SetMaterialLightParameter(float Rate, const struct FCharacterMaterialLightSetting& LightSetting);
	void ClearMaterialLightParameter();
	void SetDriveModeMaterial(bool EnableDrive);
	void SwitchMaterial(class UMaterialInterface* NewMaterial, TArray<class FName>& ExcludeMaterialSlots, bool bPlayer, bool bWeapon, bool bCable, bool bCopy, int32* Handle);
	void RestoreSwitchMaterial(int32 Param_MaterialSwitchHandle, bool OneFrameSetting);
	void UpdateRestoreSwitch(float DeltaSeconds);
	void SetMaterialVector4Parameter(class FName ParamName, const struct FLinearColor& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void SetMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void SetMaterialVector4ArrayParameter(TArray<class FName>& ParamName, TArray<struct FLinearColor>& Value, bool bPlayer, bool bWeapon, bool bCable, bool bCopy);
	void GetMaterialScalarParameter(class FName ParamName, bool* Find, struct FPlayerMaterialManageScalar* Value);
	void GetMaterialVectorParameter(class FName ParamName, bool* Find, struct FPlayerMaterialManageVector* Value);
	void ResetupMaterialParameter();
	void DumpMaterialParameter();
	void EventStart();
	void EventEnd();
	void InitializeLightMaterial();
	void UpdatePreskinFacial();
	void PreChangeMesh();
	void PostChangeMesh();
	void PostWeaponChanged();
	void PreWeaponChanged();
	void CompleteRestoreSwitchMaterial();
	void OnEventAttachmentLoadCompleted();
	void PostAttachmentChanged();
	void InitializeOptimize();
	void GetOptimizeMaterialSwitcher(class UBPC_OptimizeSwitchMaterial_C** Param_OptimizeSwitchComp);
	void Finalize(EEndPlayReason EndPlayReason);
	void PreCostumeChanged();
	void PostCostumeChanged();
	void SetWireNeonParameter(TArray<float>& ScalarValues, TArray<class FName>& ScalarNames, TArray<struct FLinearColor>& VectorValues, TArray<class FName>& VectorNames);
	void PreAttachmentChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerMaterialManageComponent_C">();
	}
	static class UBP_PlayerMaterialManageComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerMaterialManageComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerMaterialManageComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerMaterialManageComponent_C");
static_assert(sizeof(UBP_PlayerMaterialManageComponent_C) == 0x000328, "Wrong size on UBP_PlayerMaterialManageComponent_C");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_PlayerMaterialManageComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, OwnerPlayer) == 0x0000C8, "Member 'UBP_PlayerMaterialManageComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ScalarManageData) == 0x0000D0, "Member 'UBP_PlayerMaterialManageComponent_C::ScalarManageData' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, OnCompletedMaterialSetting) == 0x0000E0, "Member 'UBP_PlayerMaterialManageComponent_C::OnCompletedMaterialSetting' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ScalarManageCurveData) == 0x0000F0, "Member 'UBP_PlayerMaterialManageComponent_C::ScalarManageCurveData' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, VectorManageData) == 0x000100, "Member 'UBP_PlayerMaterialManageComponent_C::VectorManageData' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, LightTable) == 0x000110, "Member 'UBP_PlayerMaterialManageComponent_C::LightTable' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, LightDataTableAsset) == 0x000120, "Member 'UBP_PlayerMaterialManageComponent_C::LightDataTableAsset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ActionLightType) == 0x000148, "Member 'UBP_PlayerMaterialManageComponent_C::ActionLightType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ActionLightTime) == 0x00014C, "Member 'UBP_PlayerMaterialManageComponent_C::ActionLightTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ActionLight) == 0x000150, "Member 'UBP_PlayerMaterialManageComponent_C::ActionLight' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, EditorLightDataTable) == 0x000158, "Member 'UBP_PlayerMaterialManageComponent_C::EditorLightDataTable' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ActionLightLoop) == 0x000160, "Member 'UBP_PlayerMaterialManageComponent_C::ActionLightLoop' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ActionLightEnd) == 0x000161, "Member 'UBP_PlayerMaterialManageComponent_C::ActionLightEnd' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchCache) == 0x000168, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchCache' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchHandle) == 0x000178, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchActive) == 0x00017C, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchActive' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchRestore) == 0x00017D, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchRestore' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, ScalarParameter) == 0x000180, "Member 'UBP_PlayerMaterialManageComponent_C::ScalarParameter' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, VectorParameter) == 0x0001D0, "Member 'UBP_PlayerMaterialManageComponent_C::VectorParameter' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, OptimizeSwitchComp) == 0x000220, "Member 'UBP_PlayerMaterialManageComponent_C::OptimizeSwitchComp' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, UseOptimize) == 0x000228, "Member 'UBP_PlayerMaterialManageComponent_C::UseOptimize' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, LightSettingDefaultScalar) == 0x000230, "Member 'UBP_PlayerMaterialManageComponent_C::LightSettingDefaultScalar' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, LightSettingDefaultVector) == 0x000280, "Member 'UBP_PlayerMaterialManageComponent_C::LightSettingDefaultVector' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, PreSkinFacialMaterialSlots) == 0x0002D0, "Member 'UBP_PlayerMaterialManageComponent_C::PreSkinFacialMaterialSlots' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchParamMataterial) == 0x0002E0, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchParamMataterial' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchParamExcludeSlots) == 0x0002E8, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchParamExcludeSlots' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchParamWeapon) == 0x0002F8, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchParamWeapon' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, MaterialSwitchParamPlayer) == 0x0002F9, "Member 'UBP_PlayerMaterialManageComponent_C::MaterialSwitchParamPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, SwitchPlayerLayerID) == 0x000300, "Member 'UBP_PlayerMaterialManageComponent_C::SwitchPlayerLayerID' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, PreCostumeVisibleHood) == 0x000310, "Member 'UBP_PlayerMaterialManageComponent_C::PreCostumeVisibleHood' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialManageComponent_C, SwitchCopyLayerID) == 0x000318, "Member 'UBP_PlayerMaterialManageComponent_C::SwitchCopyLayerID' has a wrong offset!");

}

