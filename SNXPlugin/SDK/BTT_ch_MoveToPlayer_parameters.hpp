#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ch_MoveToPlayer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.ExecuteUbergraph_BTT_ch_MoveToPlayer
// 0x00B8 (0x00B8 - 0x0000)
struct BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62D7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62D8[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_1;     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionStatusAI_bResult;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62D9[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetControlPlayerDist_Dist;                // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistanceFromVector_bResult;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62DA[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62DB[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_2;     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62DC[0x5];                                     // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62DD[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_3;     // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetMoveMode_Dummy;                        // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer) == 0x0000B8, "Wrong size on BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, EntryPoint) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000020, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_AsBPI_Player_AIInterface_1) == 0x000038, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_AsBPI_Player_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_IsActionStatusAI_bResult) == 0x000049, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_IsActionStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_GetControlPlayerDist_Dist) == 0x00004C, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_GetControlPlayerDist_Dist' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_BreakVector_X) == 0x000058, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_BreakVector_Y) == 0x00005C, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_BreakVector_Z) == 0x000060, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_CheckDistanceFromVector_bResult) == 0x000064, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_CheckDistanceFromVector_bResult' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000068, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_AsBPI_Player_AIInterface_2) == 0x000070, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_AsBPI_Player_AIInterface_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_IsPlayerStatusAI_bResult) == 0x000081, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_BooleanOR_ReturnValue) == 0x000082, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_Event_OwnerController) == 0x000088, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_Event_ControlledPawn) == 0x000090, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_BooleanAND_ReturnValue) == 0x000098, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_AsBPI_Player_AIInterface_3) == 0x0000A0, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_AsBPI_Player_AIInterface_3' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer, CallFunc_SetMoveMode_Dummy) == 0x0000B1, "Member 'BTT_ch_MoveToPlayer_C_ExecuteUbergraph_BTT_ch_MoveToPlayer::CallFunc_SetMoveMode_Dummy' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_ch_MoveToPlayer_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_ch_MoveToPlayer_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTT_ch_MoveToPlayer_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_ReceiveTickAI");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_ReceiveTickAI) == 0x000018, "Wrong size on BTT_ch_MoveToPlayer_C_ReceiveTickAI");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.UpdateWalkSpeed
// 0x00E0 (0x00E0 - 0x0000)
struct BTT_ch_MoveToPlayer_C_UpdateWalkSpeed final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LChangeRunOrWalkDistThreshold;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbNeedsRun;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62DE[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LCalcScale;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LScale;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRate;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LMaxDistSq;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LMinDistSq;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDistSq;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SPEED_SCALE_RUN_CONST;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SPEED_SCALE_WALK_CONST;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RUN_TO_WALK_DIST_CONST;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WALK_TO_RUN_DIST_CONST;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_SCALE;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MIN_SCALE;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_DIST;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MIN_DIST;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62DF[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAIBaseComponent*                 CallFunc_GetOwnerPlayerAI_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerScriptComponent*                 CallFunc_GetOwnerPlayerScript_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimController_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E0[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWalkRunMoveScale_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlPlayerDist_Dist;                // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXYSquared_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E1[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcRunSpeedRate_SpeedScale;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E2[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_UpdateWalkSpeed");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed) == 0x0000E0, "Wrong size on BTT_ch_MoveToPlayer_C_UpdateWalkSpeed");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, ControlledPawn) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LChangeRunOrWalkDistThreshold) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LChangeRunOrWalkDistThreshold' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LbNeedsRun) == 0x00000C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LbNeedsRun' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LCalcScale) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LCalcScale' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LScale) == 0x000014, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LScale' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LRate) == 0x000018, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LRate' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LMaxDistSq) == 0x00001C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LMaxDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LMinDistSq) == 0x000020, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LMinDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, LDistSq) == 0x000024, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::LDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, SPEED_SCALE_RUN_CONST) == 0x000028, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::SPEED_SCALE_RUN_CONST' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, SPEED_SCALE_WALK_CONST) == 0x00002C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::SPEED_SCALE_WALK_CONST' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, RUN_TO_WALK_DIST_CONST) == 0x000030, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::RUN_TO_WALK_DIST_CONST' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, WALK_TO_RUN_DIST_CONST) == 0x000034, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::WALK_TO_RUN_DIST_CONST' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, MAX_SCALE) == 0x000038, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::MAX_SCALE' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, MIN_SCALE) == 0x00003C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::MIN_SCALE' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, MAX_DIST) == 0x000040, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::MAX_DIST' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, MIN_DIST) == 0x000044, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::MIN_DIST' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_float_Variable) == 0x000048, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_bool_Variable) == 0x00004C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_float_Variable_1) == 0x000050, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_float_Variable_2) == 0x000054, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_GetOwnerPlayerAI_ReturnValue) == 0x000058, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_GetOwnerPlayerAI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_GetOwnerPlayerScript_ReturnValue) == 0x000060, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_GetOwnerPlayerScript_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_GetPlayerAnimController_ReturnValue) == 0x000068, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_GetPlayerAnimController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000070, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_GetWalkRunMoveScale_ReturnValue) == 0x000084, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_GetWalkRunMoveScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_GetControlPlayerDist_Dist) == 0x000088, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_GetControlPlayerDist_Dist' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000094, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_VSizeXYSquared_ReturnValue) == 0x000098, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_bool_Variable_1) == 0x00009C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000A0, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_CalcRunSpeedRate_SpeedScale) == 0x0000A4, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_CalcRunSpeedRate_SpeedScale' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_Select_Default) == 0x0000A8, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_bool_Variable_2) == 0x0000AC, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000B4, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, Temp_float_Variable_3) == 0x0000B8, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000BC, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_Select_Default_1) == 0x0000C0, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_Select_Default_2) == 0x0000C4, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_DynamicCast_AsCommon_AIInterface) == 0x0000C8, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkSpeed, CallFunc_ScaleMaxSpeed_Result) == 0x0000D9, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkSpeed::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.Exit
// 0x0038 (0x0038 - 0x0000)
struct BTT_ch_MoveToPlayer_C_Exit final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerScriptComponent*                 CallFunc_GetOwnerPlayerScript_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICommonAIInterface_C>  K2Node_DynamicCast_AsCommon_AIInterface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ScaleMaxSpeed_Result;                     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E3[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAIBaseComponent*                 CallFunc_GetOwnerPlayerAI_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_Exit) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_Exit");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_Exit) == 0x000038, "Wrong size on BTT_ch_MoveToPlayer_C_Exit");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, OwnerController) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_Exit::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, ControlledPawn) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_Exit::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, CallFunc_GetOwnerPlayerScript_ReturnValue) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_Exit::CallFunc_GetOwnerPlayerScript_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, K2Node_DynamicCast_AsCommon_AIInterface) == 0x000018, "Member 'BTT_ch_MoveToPlayer_C_Exit::K2Node_DynamicCast_AsCommon_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTT_ch_MoveToPlayer_C_Exit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, CallFunc_ScaleMaxSpeed_Result) == 0x000029, "Member 'BTT_ch_MoveToPlayer_C_Exit::CallFunc_ScaleMaxSpeed_Result' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_Exit, CallFunc_GetOwnerPlayerAI_ReturnValue) == 0x000030, "Member 'BTT_ch_MoveToPlayer_C_Exit::CallFunc_GetOwnerPlayerAI_ReturnValue' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.InitializeWalkOrRun
// 0x0070 (0x0070 - 0x0000)
struct BTT_ch_MoveToPlayer_C_InitializeWalkOrRun final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerScriptComponent*                 CallFunc_GetOwnerPlayerScript_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerAnimControllerComponent*         CallFunc_GetPlayerAnimController_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBaseWalkSpeed_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E4[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetControlPlayerDist_Dist;                // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXYSquared_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62E5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerScriptComponent*                 CallFunc_GetOwnerPlayerScript_ReturnValue_1;       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E6[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlayerIsRun_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_InitializeWalkOrRun");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun) == 0x000070, "Wrong size on BTT_ch_MoveToPlayer_C_InitializeWalkOrRun");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, ControlledPawn) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetOwnerPlayerScript_ReturnValue) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetOwnerPlayerScript_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetPlayerAnimController_ReturnValue) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetPlayerAnimController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetBaseWalkSpeed_ReturnValue) == 0x00001C, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetBaseWalkSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000020, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetControlPlayerDist_Dist) == 0x000034, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetControlPlayerDist_Dist' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_VSizeXYSquared_ReturnValue) == 0x000040, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetOwnerPlayerScript_ReturnValue_1) == 0x000048, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetOwnerPlayerScript_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetPlayerManager_PlayerManager) == 0x000058, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_GetPlayer_ReturnValue) == 0x000060, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_InitializeWalkOrRun, CallFunc_CheckPlayerIsRun_ReturnValue) == 0x000068, "Member 'BTT_ch_MoveToPlayer_C_InitializeWalkOrRun::CallFunc_CheckPlayerIsRun_ReturnValue' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.UpdateWalkOrRun
// 0x00A0 (0x00A0 - 0x0000)
struct BTT_ch_MoveToPlayer_C_UpdateWalkOrRun final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDistSq;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LbNeedsRun;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LChangeRunOrWalkDistThreshold;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62E8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface;       // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62E9[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerAIInterface_C> K2Node_DynamicCast_AsBPI_Player_AIInterface_1;     // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatusAI_bResult;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62EA[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetControlPlayerDist_Dist;                // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62EB[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62EC[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInputRestriction_bRestriction;    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62ED[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62EE[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62EF[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun) == 0x000008, "Wrong alignment on BTT_ch_MoveToPlayer_C_UpdateWalkOrRun");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun) == 0x0000A0, "Wrong size on BTT_ch_MoveToPlayer_C_UpdateWalkOrRun");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, ControlledPawn) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, LDistSq) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::LDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, LbNeedsRun) == 0x00000C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::LbNeedsRun' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, LChangeRunOrWalkDistThreshold) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::LChangeRunOrWalkDistThreshold' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_DynamicCast_AsBPI_Player_AIInterface) == 0x000018, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_DynamicCast_AsBPI_Player_AIInterface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_DynamicCast_AsBPI_Player_AIInterface_1) == 0x000030, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_DynamicCast_AsBPI_Player_AIInterface_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_IsPlayerStatusAI_bResult) == 0x000041, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_IsPlayerStatusAI_bResult' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_GetControlPlayerDist_Dist) == 0x000044, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_GetControlPlayerDist_Dist' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_BreakVector_X) == 0x000050, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_BreakVector_Y) == 0x000054, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_BreakVector_Z) == 0x000058, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_Not_PreBool_ReturnValue) == 0x00005C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_MakeVector_ReturnValue) == 0x000064, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_VSizeSquared_ReturnValue) == 0x000070, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000078, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_DynamicCast_bSuccess_2) == 0x000088, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_IsPlayerInputRestriction_bRestriction) == 0x000089, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_IsPlayerInputRestriction_bRestriction' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00008C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000090, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, Temp_bool_Variable) == 0x000091, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000094, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000098, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_UpdateWalkOrRun, K2Node_Select_Default) == 0x00009C, "Member 'BTT_ch_MoveToPlayer_C_UpdateWalkOrRun::K2Node_Select_Default' has a wrong offset!");

// Function BTT_ch_MoveToPlayer.BTT_ch_MoveToPlayer_C.CalcRunSpeedRate
// 0x0018 (0x0018 - 0x0000)
struct BTT_ch_MoveToPlayer_C_CalcRunSpeedRate final
{
public:
	float                                         CurrentDistSq;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistSq;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistSq;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedScale;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcRate_Rate;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate) == 0x000004, "Wrong alignment on BTT_ch_MoveToPlayer_C_CalcRunSpeedRate");
static_assert(sizeof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate) == 0x000018, "Wrong size on BTT_ch_MoveToPlayer_C_CalcRunSpeedRate");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate, CurrentDistSq) == 0x000000, "Member 'BTT_ch_MoveToPlayer_C_CalcRunSpeedRate::CurrentDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate, MinDistSq) == 0x000004, "Member 'BTT_ch_MoveToPlayer_C_CalcRunSpeedRate::MinDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate, MaxDistSq) == 0x000008, "Member 'BTT_ch_MoveToPlayer_C_CalcRunSpeedRate::MaxDistSq' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate, SpeedScale) == 0x00000C, "Member 'BTT_ch_MoveToPlayer_C_CalcRunSpeedRate::SpeedScale' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate, CallFunc_CalcRate_Rate) == 0x000010, "Member 'BTT_ch_MoveToPlayer_C_CalcRunSpeedRate::CallFunc_CalcRate_Rate' has a wrong offset!");
static_assert(offsetof(BTT_ch_MoveToPlayer_C_CalcRunSpeedRate, CallFunc_Ease_ReturnValue) == 0x000014, "Member 'BTT_ch_MoveToPlayer_C_CalcRunSpeedRate::CallFunc_Ease_ReturnValue' has a wrong offset!");

}

