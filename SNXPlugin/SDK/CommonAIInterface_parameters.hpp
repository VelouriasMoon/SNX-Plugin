#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonAIInterface

#include "Basic.hpp"

#include "EAttackAttribute_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CommonAIInterface.CommonAIInterface_C.IsAbleMove
// 0x0001 (0x0001 - 0x0000)
struct CommonAIInterface_C_IsAbleMove final
{
public:
	bool                                          IsAble;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_IsAbleMove) == 0x000001, "Wrong alignment on CommonAIInterface_C_IsAbleMove");
static_assert(sizeof(CommonAIInterface_C_IsAbleMove) == 0x000001, "Wrong size on CommonAIInterface_C_IsAbleMove");
static_assert(offsetof(CommonAIInterface_C_IsAbleMove, IsAble) == 0x000000, "Member 'CommonAIInterface_C_IsAbleMove::IsAble' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.ScaleMaxSpeed
// 0x0010 (0x0010 - 0x0000)
struct CommonAIInterface_C_ScaleMaxSpeed final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_ScaleMaxSpeed) == 0x000004, "Wrong alignment on CommonAIInterface_C_ScaleMaxSpeed");
static_assert(sizeof(CommonAIInterface_C_ScaleMaxSpeed) == 0x000010, "Wrong size on CommonAIInterface_C_ScaleMaxSpeed");
static_assert(offsetof(CommonAIInterface_C_ScaleMaxSpeed, Scale) == 0x000000, "Member 'CommonAIInterface_C_ScaleMaxSpeed::Scale' has a wrong offset!");
static_assert(offsetof(CommonAIInterface_C_ScaleMaxSpeed, ClaimantName) == 0x000004, "Member 'CommonAIInterface_C_ScaleMaxSpeed::ClaimantName' has a wrong offset!");
static_assert(offsetof(CommonAIInterface_C_ScaleMaxSpeed, Result) == 0x00000C, "Member 'CommonAIInterface_C_ScaleMaxSpeed::Result' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.RestoreMaxSpeed
// 0x000C (0x000C - 0x0000)
struct CommonAIInterface_C_RestoreMaxSpeed final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_RestoreMaxSpeed) == 0x000004, "Wrong alignment on CommonAIInterface_C_RestoreMaxSpeed");
static_assert(sizeof(CommonAIInterface_C_RestoreMaxSpeed) == 0x00000C, "Wrong size on CommonAIInterface_C_RestoreMaxSpeed");
static_assert(offsetof(CommonAIInterface_C_RestoreMaxSpeed, ClaimantName) == 0x000000, "Member 'CommonAIInterface_C_RestoreMaxSpeed::ClaimantName' has a wrong offset!");
static_assert(offsetof(CommonAIInterface_C_RestoreMaxSpeed, Result) == 0x000008, "Member 'CommonAIInterface_C_RestoreMaxSpeed::Result' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.BeginMoveBackward
// 0x0001 (0x0001 - 0x0000)
struct CommonAIInterface_C_BeginMoveBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_BeginMoveBackward) == 0x000001, "Wrong alignment on CommonAIInterface_C_BeginMoveBackward");
static_assert(sizeof(CommonAIInterface_C_BeginMoveBackward) == 0x000001, "Wrong size on CommonAIInterface_C_BeginMoveBackward");
static_assert(offsetof(CommonAIInterface_C_BeginMoveBackward, Result) == 0x000000, "Member 'CommonAIInterface_C_BeginMoveBackward::Result' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.EndMoveBackward
// 0x0001 (0x0001 - 0x0000)
struct CommonAIInterface_C_EndMoveBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_EndMoveBackward) == 0x000001, "Wrong alignment on CommonAIInterface_C_EndMoveBackward");
static_assert(sizeof(CommonAIInterface_C_EndMoveBackward) == 0x000001, "Wrong size on CommonAIInterface_C_EndMoveBackward");
static_assert(offsetof(CommonAIInterface_C_EndMoveBackward, Result) == 0x000000, "Member 'CommonAIInterface_C_EndMoveBackward::Result' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.IsFlying
// 0x0001 (0x0001 - 0x0000)
struct CommonAIInterface_C_IsFlying final
{
public:
	bool                                          Param_IsFlying;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_IsFlying) == 0x000001, "Wrong alignment on CommonAIInterface_C_IsFlying");
static_assert(sizeof(CommonAIInterface_C_IsFlying) == 0x000001, "Wrong size on CommonAIInterface_C_IsFlying");
static_assert(offsetof(CommonAIInterface_C_IsFlying, Param_IsFlying) == 0x000000, "Member 'CommonAIInterface_C_IsFlying::Param_IsFlying' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.GetHeadLocation
// 0x000C (0x000C - 0x0000)
struct CommonAIInterface_C_GetHeadLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CommonAIInterface_C_GetHeadLocation) == 0x000004, "Wrong alignment on CommonAIInterface_C_GetHeadLocation");
static_assert(sizeof(CommonAIInterface_C_GetHeadLocation) == 0x00000C, "Wrong size on CommonAIInterface_C_GetHeadLocation");
static_assert(offsetof(CommonAIInterface_C_GetHeadLocation, Location) == 0x000000, "Member 'CommonAIInterface_C_GetHeadLocation::Location' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.GetFlightAltitude
// 0x0004 (0x0004 - 0x0000)
struct CommonAIInterface_C_GetFlightAltitude final
{
public:
	float                                         FlightAltitude;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CommonAIInterface_C_GetFlightAltitude) == 0x000004, "Wrong alignment on CommonAIInterface_C_GetFlightAltitude");
static_assert(sizeof(CommonAIInterface_C_GetFlightAltitude) == 0x000004, "Wrong size on CommonAIInterface_C_GetFlightAltitude");
static_assert(offsetof(CommonAIInterface_C_GetFlightAltitude, FlightAltitude) == 0x000000, "Member 'CommonAIInterface_C_GetFlightAltitude::FlightAltitude' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.GetCapsuleRadius
// 0x0004 (0x0004 - 0x0000)
struct CommonAIInterface_C_GetCapsuleRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CommonAIInterface_C_GetCapsuleRadius) == 0x000004, "Wrong alignment on CommonAIInterface_C_GetCapsuleRadius");
static_assert(sizeof(CommonAIInterface_C_GetCapsuleRadius) == 0x000004, "Wrong size on CommonAIInterface_C_GetCapsuleRadius");
static_assert(offsetof(CommonAIInterface_C_GetCapsuleRadius, Radius) == 0x000000, "Member 'CommonAIInterface_C_GetCapsuleRadius::Radius' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.AddSpringArm
// 0x0008 (0x0008 - 0x0000)
struct CommonAIInterface_C_AddSpringArm final
{
public:
	class USpringArmComponent*                    SpringArm;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CommonAIInterface_C_AddSpringArm) == 0x000008, "Wrong alignment on CommonAIInterface_C_AddSpringArm");
static_assert(sizeof(CommonAIInterface_C_AddSpringArm) == 0x000008, "Wrong size on CommonAIInterface_C_AddSpringArm");
static_assert(offsetof(CommonAIInterface_C_AddSpringArm, SpringArm) == 0x000000, "Member 'CommonAIInterface_C_AddSpringArm::SpringArm' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.DestroySpringArm
// 0x0010 (0x0010 - 0x0000)
struct CommonAIInterface_C_DestroySpringArm final
{
public:
	class USpringArmComponent*                    SpringArm;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_DestroySpringArm) == 0x000008, "Wrong alignment on CommonAIInterface_C_DestroySpringArm");
static_assert(sizeof(CommonAIInterface_C_DestroySpringArm) == 0x000010, "Wrong size on CommonAIInterface_C_DestroySpringArm");
static_assert(offsetof(CommonAIInterface_C_DestroySpringArm, SpringArm) == 0x000000, "Member 'CommonAIInterface_C_DestroySpringArm::SpringArm' has a wrong offset!");
static_assert(offsetof(CommonAIInterface_C_DestroySpringArm, Dummy) == 0x000008, "Member 'CommonAIInterface_C_DestroySpringArm::Dummy' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.GetCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct CommonAIInterface_C_GetCapsuleHalfHeight final
{
public:
	float                                         HalfHeight;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CommonAIInterface_C_GetCapsuleHalfHeight) == 0x000004, "Wrong alignment on CommonAIInterface_C_GetCapsuleHalfHeight");
static_assert(sizeof(CommonAIInterface_C_GetCapsuleHalfHeight) == 0x000004, "Wrong size on CommonAIInterface_C_GetCapsuleHalfHeight");
static_assert(offsetof(CommonAIInterface_C_GetCapsuleHalfHeight, HalfHeight) == 0x000000, "Member 'CommonAIInterface_C_GetCapsuleHalfHeight::HalfHeight' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.GetIsBattleMode
// 0x0001 (0x0001 - 0x0000)
struct CommonAIInterface_C_GetIsBattleMode final
{
public:
	bool                                          IsBattleMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_GetIsBattleMode) == 0x000001, "Wrong alignment on CommonAIInterface_C_GetIsBattleMode");
static_assert(sizeof(CommonAIInterface_C_GetIsBattleMode) == 0x000001, "Wrong size on CommonAIInterface_C_GetIsBattleMode");
static_assert(offsetof(CommonAIInterface_C_GetIsBattleMode, IsBattleMode) == 0x000000, "Member 'CommonAIInterface_C_GetIsBattleMode::IsBattleMode' has a wrong offset!");

// Function CommonAIInterface.CommonAIInterface_C.IsCurrentAttackAttributeAI
// 0x0002 (0x0002 - 0x0000)
struct CommonAIInterface_C_IsCurrentAttackAttributeAI final
{
public:
	EAttackAttribute                              Attribute;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CommonAIInterface_C_IsCurrentAttackAttributeAI) == 0x000001, "Wrong alignment on CommonAIInterface_C_IsCurrentAttackAttributeAI");
static_assert(sizeof(CommonAIInterface_C_IsCurrentAttackAttributeAI) == 0x000002, "Wrong size on CommonAIInterface_C_IsCurrentAttackAttributeAI");
static_assert(offsetof(CommonAIInterface_C_IsCurrentAttackAttributeAI, Attribute) == 0x000000, "Member 'CommonAIInterface_C_IsCurrentAttackAttributeAI::Attribute' has a wrong offset!");
static_assert(offsetof(CommonAIInterface_C_IsCurrentAttackAttributeAI, bResult) == 0x000001, "Member 'CommonAIInterface_C_IsCurrentAttackAttributeAI::bResult' has a wrong offset!");

}

