#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RadialBlurManager

#include "Basic.hpp"

#include "FSASStealthParam_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "FSASCommand_structs.hpp"
#include "FSASElectricParam_structs.hpp"
#include "FSASFireParam_structs.hpp"
#include "FSASMetalParam_structs.hpp"
#include "FSASSeeThroughParam_structs.hpp"
#include "FSASTelepoParam_structs.hpp"
#include "FSASCopyParam_structs.hpp"
#include "FSASPsychicParam_structs.hpp"
#include "AcceleratorParam_structs.hpp"


namespace SDK::Params
{

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.ExecuteUbergraph_BP_RadialBlurManager
// 0x0138 (0x0138 - 0x0000)
struct BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASElectricParam                     K2Node_Event_param_15;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_528E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_17;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASElectricParam                     K2Node_Event_param_14;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_528F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_16;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_8;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASFireParam                         K2Node_Event_param_13;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5290[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_15;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASFireParam                         K2Node_Event_param_12;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5291[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_14;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_7;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASMetalParam                        K2Node_Event_param_11;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5292[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_13;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASMetalParam                        K2Node_Event_param_10;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5293[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_12;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_6;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_9;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5294[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_11;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASSeeThroughParam                   K2Node_Event_param_8;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5295[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_10;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_5;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_7;                              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5296[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_9;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASTelepoParam                       K2Node_Event_param_6;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5297[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_8;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_4;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param_5;                              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5298[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_7;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASStealthParam                      K2Node_Event_param_4;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5299[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_6;                              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_3;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_3;                              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529A[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_5;                              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASCopyParam                         K2Node_Event_param_2;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529B[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_4;                              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_2;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASPsychicParam                      K2Node_Event_param_1;                              // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529C[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_3;                              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSASPsychicParam                      K2Node_Event_param;                                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529D[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_2;                              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime_1;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAcceleratorParam                      K2Node_Event_Parameter_1;                          // 0x0104(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_1;                              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram_1;                          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529E[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAcceleratorParam                      K2Node_Event_Parameter;                            // 0x011C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner;                                // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainTime;                           // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHologram;                            // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager");
static_assert(sizeof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager) == 0x000138, "Wrong size on BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, EntryPoint) == 0x000000, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_15) == 0x000004, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_15' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_17) == 0x000008, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_17' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_14) == 0x000010, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_14' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_16) == 0x000018, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_16' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_8) == 0x000020, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_8' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_13) == 0x000024, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_13' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_15) == 0x000028, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_15' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_12) == 0x000030, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_12' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_14) == 0x000038, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_14' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_7) == 0x000040, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_7' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_11) == 0x000044, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_11' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_13) == 0x000048, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_13' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_10) == 0x000050, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_10' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_12) == 0x000058, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_12' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_6) == 0x000060, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_6' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_9) == 0x000064, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_9' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_11) == 0x000068, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_11' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_8) == 0x000070, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_8' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_10) == 0x000078, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_10' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_5) == 0x000080, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_5' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_7) == 0x000084, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_7' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_9) == 0x000088, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_9' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_6) == 0x000090, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_6' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_8) == 0x000098, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_8' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_4) == 0x0000A0, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_4' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_5) == 0x0000A4, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_5' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_7) == 0x0000A8, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_7' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_4) == 0x0000B0, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_4' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_6) == 0x0000B8, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_6' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_3) == 0x0000C0, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_3' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_3) == 0x0000C4, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_3' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_5) == 0x0000C8, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_5' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_2) == 0x0000D0, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_2' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_4) == 0x0000D8, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_4' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_2) == 0x0000E0, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_2' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param_1) == 0x0000E4, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param_1' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_3) == 0x0000E8, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_3' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_param) == 0x0000F0, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_2) == 0x0000F8, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_2' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime_1) == 0x000100, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime_1' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Parameter_1) == 0x000104, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Parameter_1' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner_1) == 0x000110, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner_1' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_bHologram_1) == 0x000118, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_bHologram_1' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Parameter) == 0x00011C, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Parameter' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_Owner) == 0x000128, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_RemainTime) == 0x000130, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_RemainTime' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager, K2Node_Event_bHologram) == 0x000134, "Member 'BP_RadialBlurManager_C_ExecuteUbergraph_BP_RadialBlurManager::K2Node_Event_bHologram' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnAcceleratorEnd
// 0x0020 (0x0020 - 0x0000)
struct BP_RadialBlurManager_C_OnAcceleratorEnd final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RadialBlurManager_C_OnAcceleratorEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnAcceleratorEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnAcceleratorEnd) == 0x000020, "Wrong size on BP_RadialBlurManager_C_OnAcceleratorEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorEnd, Parameter) == 0x000000, "Member 'BP_RadialBlurManager_C_OnAcceleratorEnd::Parameter' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorEnd, Param_Owner) == 0x000010, "Member 'BP_RadialBlurManager_C_OnAcceleratorEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorEnd, RemainTime) == 0x000018, "Member 'BP_RadialBlurManager_C_OnAcceleratorEnd::RemainTime' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorEnd, bHologram) == 0x00001C, "Member 'BP_RadialBlurManager_C_OnAcceleratorEnd::bHologram' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnAcceleratorStart
// 0x0020 (0x0020 - 0x0000)
struct BP_RadialBlurManager_C_OnAcceleratorStart final
{
public:
	struct FAcceleratorParam                      Parameter;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHologram;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RadialBlurManager_C_OnAcceleratorStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnAcceleratorStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnAcceleratorStart) == 0x000020, "Wrong size on BP_RadialBlurManager_C_OnAcceleratorStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorStart, Parameter) == 0x000000, "Member 'BP_RadialBlurManager_C_OnAcceleratorStart::Parameter' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorStart, Param_Owner) == 0x000010, "Member 'BP_RadialBlurManager_C_OnAcceleratorStart::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnAcceleratorStart, bHologram) == 0x000018, "Member 'BP_RadialBlurManager_C_OnAcceleratorStart::bHologram' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnPsychicEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnPsychicEnd final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnPsychicEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnPsychicEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnPsychicEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnPsychicEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnPsychicEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnPsychicEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnPsychicEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnPsychicEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnPsychicEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnPsychicEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnPsychicStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnPsychicStart final
{
public:
	struct FFSASPsychicParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnPsychicStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnPsychicStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnPsychicStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnPsychicStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnPsychicStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnPsychicStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnPsychicStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnPsychicStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnCopyEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnCopyEnd final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnCopyEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnCopyEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnCopyEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnCopyEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnCopyEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnCopyEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnCopyEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnCopyEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnCopyEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnCopyEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnCopyStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnCopyStart final
{
public:
	struct FFSASCopyParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnCopyStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnCopyStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnCopyStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnCopyStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnCopyStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnCopyStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnCopyStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnCopyStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnStealthEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnStealthEnd final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnStealthEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnStealthEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnStealthEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnStealthEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnStealthEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnStealthEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnStealthEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnStealthEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnStealthEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnStealthEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnStealthStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnStealthStart final
{
public:
	struct FFSASStealthParam                      Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnStealthStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnStealthStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnStealthStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnStealthStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnStealthStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnStealthStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnStealthStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnStealthStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnTelepoEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnTelepoEnd final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnTelepoEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnTelepoEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnTelepoEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnTelepoEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnTelepoEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnTelepoEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnTelepoEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnTelepoEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnTelepoEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnTelepoEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnTelepoStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnTelepoStart final
{
public:
	struct FFSASTelepoParam                       Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnTelepoStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnTelepoStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnTelepoStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnTelepoStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnTelepoStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnTelepoStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnTelepoStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnTelepoStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnSeeThroughEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnSeeThroughEnd final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnSeeThroughEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnSeeThroughEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnSeeThroughEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnSeeThroughEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnSeeThroughEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnSeeThroughEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnSeeThroughEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnSeeThroughEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnSeeThroughEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnSeeThroughEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnSeeThroughStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnSeeThroughStart final
{
public:
	struct FFSASSeeThroughParam                   Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52AA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnSeeThroughStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnSeeThroughStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnSeeThroughStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnSeeThroughStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnSeeThroughStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnSeeThroughStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnSeeThroughStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnSeeThroughStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnMetalEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnMetalEnd final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52AB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnMetalEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnMetalEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnMetalEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnMetalEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnMetalEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnMetalEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnMetalEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnMetalEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnMetalEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnMetalEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnMetalStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnMetalStart final
{
public:
	struct FFSASMetalParam                        Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52AC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnMetalStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnMetalStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnMetalStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnMetalStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnMetalStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnMetalStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnMetalStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnMetalStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnFireEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnFireEnd final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52AD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnFireEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnFireEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnFireEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnFireEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnFireEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnFireEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnFireEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnFireEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnFireEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnFireEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnFireStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnFireStart final
{
public:
	struct FFSASFireParam                         Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52AE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnFireStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnFireStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnFireStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnFireStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnFireStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnFireStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnFireStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnFireStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnElectricEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_RadialBlurManager_C_OnElectricEnd final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52AF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainTime;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnElectricEnd) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnElectricEnd");
static_assert(sizeof(BP_RadialBlurManager_C_OnElectricEnd) == 0x000018, "Wrong size on BP_RadialBlurManager_C_OnElectricEnd");
static_assert(offsetof(BP_RadialBlurManager_C_OnElectricEnd, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnElectricEnd::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnElectricEnd, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnElectricEnd::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnElectricEnd, RemainTime) == 0x000010, "Member 'BP_RadialBlurManager_C_OnElectricEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.OnElectricStart
// 0x0010 (0x0010 - 0x0000)
struct BP_RadialBlurManager_C_OnElectricStart final
{
public:
	struct FFSASElectricParam                     Param;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52B0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_OnElectricStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_OnElectricStart");
static_assert(sizeof(BP_RadialBlurManager_C_OnElectricStart) == 0x000010, "Wrong size on BP_RadialBlurManager_C_OnElectricStart");
static_assert(offsetof(BP_RadialBlurManager_C_OnElectricStart, Param) == 0x000000, "Member 'BP_RadialBlurManager_C_OnElectricStart::Param' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_OnElectricStart, Param_Owner) == 0x000008, "Member 'BP_RadialBlurManager_C_OnElectricStart::Param_Owner' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.SAS_CommonStart
// 0x0038 (0x0038 - 0x0000)
struct BP_RadialBlurManager_C_SAS_CommonStart final
{
public:
	struct FFSASCommand                           SAS_Command;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RadialBlurManager_C_SAS_CommonStart) == 0x000008, "Wrong alignment on BP_RadialBlurManager_C_SAS_CommonStart");
static_assert(sizeof(BP_RadialBlurManager_C_SAS_CommonStart) == 0x000038, "Wrong size on BP_RadialBlurManager_C_SAS_CommonStart");
static_assert(offsetof(BP_RadialBlurManager_C_SAS_CommonStart, SAS_Command) == 0x000000, "Member 'BP_RadialBlurManager_C_SAS_CommonStart::SAS_Command' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_SAS_CommonStart, Dummy) == 0x000030, "Member 'BP_RadialBlurManager_C_SAS_CommonStart::Dummy' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.SAS_CommonEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_RadialBlurManager_C_SAS_CommonEnd final
{
public:
	E_SASKind                                     SAS_Kind;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCancelSASCost;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52B1[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainTime;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RadialBlurManager_C_SAS_CommonEnd) == 0x000004, "Wrong alignment on BP_RadialBlurManager_C_SAS_CommonEnd");
static_assert(sizeof(BP_RadialBlurManager_C_SAS_CommonEnd) == 0x000008, "Wrong size on BP_RadialBlurManager_C_SAS_CommonEnd");
static_assert(offsetof(BP_RadialBlurManager_C_SAS_CommonEnd, SAS_Kind) == 0x000000, "Member 'BP_RadialBlurManager_C_SAS_CommonEnd::SAS_Kind' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_SAS_CommonEnd, bCancelSASCost) == 0x000001, "Member 'BP_RadialBlurManager_C_SAS_CommonEnd::bCancelSASCost' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_SAS_CommonEnd, bDummy) == 0x000002, "Member 'BP_RadialBlurManager_C_SAS_CommonEnd::bDummy' has a wrong offset!");
static_assert(offsetof(BP_RadialBlurManager_C_SAS_CommonEnd, RemainTime) == 0x000004, "Member 'BP_RadialBlurManager_C_SAS_CommonEnd::RemainTime' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.IsAccelerating
// 0x0001 (0x0001 - 0x0000)
struct BP_RadialBlurManager_C_IsAccelerating final
{
public:
	bool                                          Accelerating;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RadialBlurManager_C_IsAccelerating) == 0x000001, "Wrong alignment on BP_RadialBlurManager_C_IsAccelerating");
static_assert(sizeof(BP_RadialBlurManager_C_IsAccelerating) == 0x000001, "Wrong size on BP_RadialBlurManager_C_IsAccelerating");
static_assert(offsetof(BP_RadialBlurManager_C_IsAccelerating, Accelerating) == 0x000000, "Member 'BP_RadialBlurManager_C_IsAccelerating::Accelerating' has a wrong offset!");

// Function BP_RadialBlurManager.BP_RadialBlurManager_C.IsAcceleratorValid
// 0x0001 (0x0001 - 0x0000)
struct BP_RadialBlurManager_C_IsAcceleratorValid final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RadialBlurManager_C_IsAcceleratorValid) == 0x000001, "Wrong alignment on BP_RadialBlurManager_C_IsAcceleratorValid");
static_assert(sizeof(BP_RadialBlurManager_C_IsAcceleratorValid) == 0x000001, "Wrong size on BP_RadialBlurManager_C_IsAcceleratorValid");
static_assert(offsetof(BP_RadialBlurManager_C_IsAcceleratorValid, Valid) == 0x000000, "Member 'BP_RadialBlurManager_C_IsAcceleratorValid::Valid' has a wrong offset!");

}

