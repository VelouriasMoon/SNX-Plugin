#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MenuPlayerBase

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MenuPlayerBase.BP_MenuPlayerBase_C
// 0x0178 (0x03A8 - 0x0230)
class ABP_MenuPlayerBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_AttachmentManageComponent_C*        BP_AttachmentManageComponent;                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponMesh;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUIMainPartyStart;                           // 0x0250(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    MontageUIMainPartyStartAsset;                      // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          VisibleOnlyOutline;                                // 0x0270(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VisibleHood;                                       // 0x0271(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA4[0x6];                                     // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UAnimMontage>>    MontageUIMainPartyLoopAsset;                       // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    MontageUIMainEquipStartAsset;                      // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    MontageUIMainEquipLoopAsset;                       // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    MontageUIMainCostumeStartAsset;                    // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUIMainPartyLoop;                            // 0x02B8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUIMainEquipStart;                           // 0x02C8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUIMainEquipLoop;                            // 0x02D8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUIMainCostumeStart;                         // 0x02E8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LoadAnimation;                                     // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          ControlVisibleWire;                                // 0x02F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseWeapon;                                         // 0x02FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HiddenWeaponNeutral;                               // 0x02FB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseMenuDepthComponent;                             // 0x02FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          DefaultCostume;                                    // 0x02FD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          NoAttachments;                                     // 0x02FE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_8BA5[0x1];                                     // 0x02FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponNeutralAttachSocketName;                     // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponBattleAttachSocketName;                      // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             TelepoTimer;                                       // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BeginMaterialTelepo;                               // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA6[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AnimSeqWeaponToBattle;                             // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimSeqWeaponBattleLoop;                           // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     PlayerId;                                          // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_8BA7[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   MontageUIMainCostumeLoop;                          // 0x0338(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUINextLoops;                                // 0x0348(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    MontageUIMainCostumeLoopAsset;                     // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageUIBlendOutTarget;                           // 0x0368(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         EquipWeaponID;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EquipCostumeID;                                    // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 DepthMeshComponents;                               // 0x0380(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class FString>                         ExcludeDepthMeshComponentNames;                    // 0x0390(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          MipPrestreamPlayer;                                // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MipPrestreamWeapon;                                // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MipPrestreamAttachments;                           // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MipPrestreamHighPriority;                          // 0x03A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCrashVision;                                     // 0x03A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_MenuPlayerBase(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void StartUIMainAnimation();
	void LoadAsset();
	void PrivateSetupVisibility();
	void StartUIMainEquipAnimation();
	void StartUIMainCostumeAnimation();
	void SetRenderLayer(uint8 Layer);
	void SetLightChannel(bool Channel0, bool Channel1, bool Channel2);
	void SetPauseFlag(int32 PauseFlag);
	void SwitchWeaponBattle(bool Battle);
	void BeginSASTelepo(float DisappearTime);
	void EndSASTelepo(float AppearTime);
	void UpdateTelepo();
	void SetTransAnim(bool Battle);
	void GetOptionalMeshes(TArray<class USkeletalMeshComponent*>* Meshes);
	void GetWeaponMeshes(TArray<class USkeletalMeshComponent*>* Meshes);
	void SetMaterialScalarParameter(class FName ParamName, float Value, bool Player, bool Weapon);
	void SetMaterialVectorParameter(class FName ParamName, const struct FLinearColor& Value, bool Player, bool Weapon);
	void SetMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value, bool Player, bool Weapon);
	void SetMaterialVectorArrayParameter(TArray<class FName>& ParamName, TArray<struct FLinearColor>& Value, bool Player, bool Weapon);
	void SetAttachment(bool CheckEquipAble);
	void EventUIMainMontageEnd(class UAnimMontage* Montage, bool Interrupt);
	void PlayUIMainAnimationInternal(TArray<class UAnimMontage*>& PlayMontages, bool StopMontage);
	void StopUIMainAnimation();
	void EquipWeapon(int32 WeaponId);
	void OnChangeWeapon();
	void PrivateWeaponInitialize();
	void EquipCostume(int32 CostumeId);
	void DispWeaponString(bool Visible);
	void SetupDepthMeshComponent(bool EquipIgnoreVisibility);
	void PrivateDestroyDepthMeshComponent();
	void PrivateCheckUseDepthMesh(const class FString& MeshName, bool* UseDepth);
	void PrivateCostumeInitialize();
	void SetForceMipLevelsToBeResident(bool TargetPlayer, bool TargetWeapon, bool TargetAttachments, bool HighPriority);
	void ResetForceMipLevelsToBeResident(bool TargetPlayer, bool TargetWeapon, bool TargetAttachments);
	void DoEquipWeaponAfter(bool bDisableYuitoString, bool* bDummy);
	void DestroyAttachmentMeshComponent(class USceneComponent* DestroyMeshComponent, bool* bDummy);
	void EquipAttachmentInterface(EPlayerAttachment Param_Index, int32 AttachmentItemID, EPlayerID EquipPlayerID, int32 EquipMeshIndex, bool* bDummy);
	void GetAttachedCharacterMesh(EPlayerID EquipPlayerID, int32 EquipMeshIndex, class USkeletalMeshComponent** Mesh);
	void AttachmentVisibilityOffOnHead(bool bOff, bool* bDummy);
	void AttachmentVisibilityOffOnBackBody(bool bVisibility, float FadeTime, bool* bDummy);

	void PrivateLoadMontage(TArray<TSoftObjectPtr<class UAnimMontage>>& MontageAsset, TArray<class UAnimMontage*>* MontageObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MenuPlayerBase_C">();
	}
	static class ABP_MenuPlayerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MenuPlayerBase_C>();
	}
};
static_assert(alignof(ABP_MenuPlayerBase_C) == 0x000008, "Wrong alignment on ABP_MenuPlayerBase_C");
static_assert(sizeof(ABP_MenuPlayerBase_C) == 0x0003A8, "Wrong size on ABP_MenuPlayerBase_C");
static_assert(offsetof(ABP_MenuPlayerBase_C, UberGraphFrame) == 0x000230, "Member 'ABP_MenuPlayerBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, BP_AttachmentManageComponent) == 0x000238, "Member 'ABP_MenuPlayerBase_C::BP_AttachmentManageComponent' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, WeaponMesh) == 0x000240, "Member 'ABP_MenuPlayerBase_C::WeaponMesh' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, SkeletalMesh) == 0x000248, "Member 'ABP_MenuPlayerBase_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainPartyStart) == 0x000250, "Member 'ABP_MenuPlayerBase_C::MontageUIMainPartyStart' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainPartyStartAsset) == 0x000260, "Member 'ABP_MenuPlayerBase_C::MontageUIMainPartyStartAsset' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, VisibleOnlyOutline) == 0x000270, "Member 'ABP_MenuPlayerBase_C::VisibleOnlyOutline' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, VisibleHood) == 0x000271, "Member 'ABP_MenuPlayerBase_C::VisibleHood' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainPartyLoopAsset) == 0x000278, "Member 'ABP_MenuPlayerBase_C::MontageUIMainPartyLoopAsset' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainEquipStartAsset) == 0x000288, "Member 'ABP_MenuPlayerBase_C::MontageUIMainEquipStartAsset' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainEquipLoopAsset) == 0x000298, "Member 'ABP_MenuPlayerBase_C::MontageUIMainEquipLoopAsset' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainCostumeStartAsset) == 0x0002A8, "Member 'ABP_MenuPlayerBase_C::MontageUIMainCostumeStartAsset' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainPartyLoop) == 0x0002B8, "Member 'ABP_MenuPlayerBase_C::MontageUIMainPartyLoop' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainEquipStart) == 0x0002C8, "Member 'ABP_MenuPlayerBase_C::MontageUIMainEquipStart' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainEquipLoop) == 0x0002D8, "Member 'ABP_MenuPlayerBase_C::MontageUIMainEquipLoop' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainCostumeStart) == 0x0002E8, "Member 'ABP_MenuPlayerBase_C::MontageUIMainCostumeStart' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, LoadAnimation) == 0x0002F8, "Member 'ABP_MenuPlayerBase_C::LoadAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, ControlVisibleWire) == 0x0002F9, "Member 'ABP_MenuPlayerBase_C::ControlVisibleWire' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, UseWeapon) == 0x0002FA, "Member 'ABP_MenuPlayerBase_C::UseWeapon' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, HiddenWeaponNeutral) == 0x0002FB, "Member 'ABP_MenuPlayerBase_C::HiddenWeaponNeutral' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, UseMenuDepthComponent) == 0x0002FC, "Member 'ABP_MenuPlayerBase_C::UseMenuDepthComponent' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, DefaultCostume) == 0x0002FD, "Member 'ABP_MenuPlayerBase_C::DefaultCostume' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, NoAttachments) == 0x0002FE, "Member 'ABP_MenuPlayerBase_C::NoAttachments' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, WeaponNeutralAttachSocketName) == 0x000300, "Member 'ABP_MenuPlayerBase_C::WeaponNeutralAttachSocketName' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, WeaponBattleAttachSocketName) == 0x000308, "Member 'ABP_MenuPlayerBase_C::WeaponBattleAttachSocketName' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, TelepoTimer) == 0x000310, "Member 'ABP_MenuPlayerBase_C::TelepoTimer' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, BeginMaterialTelepo) == 0x00031C, "Member 'ABP_MenuPlayerBase_C::BeginMaterialTelepo' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, AnimSeqWeaponToBattle) == 0x000320, "Member 'ABP_MenuPlayerBase_C::AnimSeqWeaponToBattle' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, AnimSeqWeaponBattleLoop) == 0x000328, "Member 'ABP_MenuPlayerBase_C::AnimSeqWeaponBattleLoop' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, PlayerId) == 0x000330, "Member 'ABP_MenuPlayerBase_C::PlayerId' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainCostumeLoop) == 0x000338, "Member 'ABP_MenuPlayerBase_C::MontageUIMainCostumeLoop' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUINextLoops) == 0x000348, "Member 'ABP_MenuPlayerBase_C::MontageUINextLoops' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIMainCostumeLoopAsset) == 0x000358, "Member 'ABP_MenuPlayerBase_C::MontageUIMainCostumeLoopAsset' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MontageUIBlendOutTarget) == 0x000368, "Member 'ABP_MenuPlayerBase_C::MontageUIBlendOutTarget' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, EquipWeaponID) == 0x000378, "Member 'ABP_MenuPlayerBase_C::EquipWeaponID' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, EquipCostumeID) == 0x00037C, "Member 'ABP_MenuPlayerBase_C::EquipCostumeID' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, DepthMeshComponents) == 0x000380, "Member 'ABP_MenuPlayerBase_C::DepthMeshComponents' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, ExcludeDepthMeshComponentNames) == 0x000390, "Member 'ABP_MenuPlayerBase_C::ExcludeDepthMeshComponentNames' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MipPrestreamPlayer) == 0x0003A0, "Member 'ABP_MenuPlayerBase_C::MipPrestreamPlayer' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MipPrestreamWeapon) == 0x0003A1, "Member 'ABP_MenuPlayerBase_C::MipPrestreamWeapon' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MipPrestreamAttachments) == 0x0003A2, "Member 'ABP_MenuPlayerBase_C::MipPrestreamAttachments' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, MipPrestreamHighPriority) == 0x0003A3, "Member 'ABP_MenuPlayerBase_C::MipPrestreamHighPriority' has a wrong offset!");
static_assert(offsetof(ABP_MenuPlayerBase_C, IsCrashVision) == 0x0003A4, "Member 'ABP_MenuPlayerBase_C::IsCrashVision' has a wrong offset!");

}

