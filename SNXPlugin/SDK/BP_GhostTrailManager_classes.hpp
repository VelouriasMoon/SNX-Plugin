#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GhostTrailManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_GhostMaterialParam_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_GhostInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GhostTrailManager.BP_GhostTrailManager_C
// 0x01A0 (0x03D0 - 0x0230)
class ABP_GhostTrailManager_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GhostTrailComponent_C*              GhostTrailOwnerComponent;                          // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInterface*                     GhostMaterial;                                     // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FE_GhostMaterialParam>          MatParams;                                         // 0x0250(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           StaticMeshCompsToTrail;                            // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         SkeletalMeshCompsToTrail;                          // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9F[0x3];                                     // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GhostsLifetime;                                    // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          VelocityDepending;                                 // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2DA0[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityThreshold;                                 // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LastInvisible;                                     // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2DA1[0x3];                                     // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GhostSpawnDelay;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         GhostSpawnTimer;                                   // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA2[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FE_GhostInfo>                   Ghosts;                                            // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          ScaleGhost;                                        // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2DA3[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ScaleCurve;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FVector>                        SkeletalVelocities;                                // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        StaticVelocities;                                  // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        LastSkelLocations;                                 // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FVector>                        LastStaticLocations;                               // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             GhostSpawned;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                SpawnRandomDistance;                               // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          RandomOffset;                                      // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2DA4[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomVelocityMax;                                 // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RandomVelocityRate;                                // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreLastInvisible;                               // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA5[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TrailColor;                                        // 0x0334(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetColor;                                         // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA6[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           StaticComponentCache;                              // 0x0348(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UPoseableMeshComponent*>         SkeletalComponentCache;                            // 0x0358(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          UseCache;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2DA7[0x3];                                     // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSelectCacheStatic;                             // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastSelectCacheSkeletal;                           // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPauseSpawn;                                       // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA8[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HiddenMaterialSlots;                               // 0x0378(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<bool>                                  SpawnStaticComponentCache;                         // 0x0388(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  SpawnSkeletalComponentCache;                       // 0x0398(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 PhotoModeMeshList;                                 // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class ABP_PhotoModeCamera_C*                  PhotoModeCamera;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhotoModeMeshOffset;                               // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhotoModeCapsuleHeight;                            // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhotoModeCapsuleRadius;                            // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GhostSpawned__DelegateSignature(const struct FE_GhostInfo& GhostInfo);
	void ExecuteUbergraph_BP_GhostTrailManager(int32 EntryPoint);
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void SpawnStaticGhost(class UStaticMeshComponent* MasterStaticMeshComponent, struct FE_GhostInfo* GhostInfo);
	void SpawnTimer();
	void SpawnSkeletalGhost(class USkeletalMeshComponent* MasterStaticMeshComponent, struct FE_GhostInfo* GhostInfo);
	void UpdateGhostInfos();
	void SpawnGhosts();
	void UpdateGhostVisual(const struct FE_GhostInfo& GhostInfo);
	void RevealLastGhosts();
	void CalcVelocities();
	void SetGhostMaterialParams(const struct FE_GhostInfo& Ghost);
	void AddMeshToTrail(class UMeshComponent* Mesh);
	void DestroyGhostAll();
	struct FTransform ChangeMasterRelative(struct FTransform& InTransform, const struct FVector& A);
	void SetIgnoreLastInvisible(bool Flag);
	void SetColor(const struct FLinearColor& Color);
	void PrivateCalcVelocity(class UMeshComponent* Mesh, int32 Param_Index, TArray<struct FVector>& LastLocations, TArray<struct FVector>& Velocities, float DeltaSeconds);
	void AddStaticMeshCache(class UStaticMeshComponent** AddedMesh);
	void AddSkeletalMeshCache(class UPoseableMeshComponent** AddedMesh);
	void SearchOrAddStaticMeshCache(class UStaticMeshComponent** CachedMesh);
	void SearchOrAddSkeletalMeshCache(class UPoseableMeshComponent** CachedMesh);
	void PrivateRemoveComponent(class UMeshComponent* Component);
	void PrivateSearchMaterialParamIndex(class UMaterialInstanceDynamic* Mid, TArray<int32>* Param_Index);
	void GetGhostDeltaSeconds(float* DeltaSeconds);
	void RemoveMeshToTrail(class UMeshComponent* Mesh);
	void ResetMaterialParams(const TArray<struct FE_GhostMaterialParam>& Params_0);
	void GetColor(struct FLinearColor* Color);
	void DestroyedComponents();
	void AddExternalCache(TArray<class UPoseableMeshComponent*>& PoseableMeshComps);
	void ClearExternalCache();
	bool PhotoModeTick();
	bool EndPhotoMode();
	bool BeginPhotoMode(float MeshOffset, float CapsuleHeight, float CapsuleRadius);

	void CalcRandomOffsetLocation(const struct FTransform& BaseTransform, struct FVector* OffsetLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GhostTrailManager_C">();
	}
	static class ABP_GhostTrailManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GhostTrailManager_C>();
	}
};
static_assert(alignof(ABP_GhostTrailManager_C) == 0x000008, "Wrong alignment on ABP_GhostTrailManager_C");
static_assert(sizeof(ABP_GhostTrailManager_C) == 0x0003D0, "Wrong size on ABP_GhostTrailManager_C");
static_assert(offsetof(ABP_GhostTrailManager_C, UberGraphFrame) == 0x000230, "Member 'ABP_GhostTrailManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_GhostTrailManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, GhostTrailOwnerComponent) == 0x000240, "Member 'ABP_GhostTrailManager_C::GhostTrailOwnerComponent' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, GhostMaterial) == 0x000248, "Member 'ABP_GhostTrailManager_C::GhostMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, MatParams) == 0x000250, "Member 'ABP_GhostTrailManager_C::MatParams' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, StaticMeshCompsToTrail) == 0x000260, "Member 'ABP_GhostTrailManager_C::StaticMeshCompsToTrail' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, SkeletalMeshCompsToTrail) == 0x000270, "Member 'ABP_GhostTrailManager_C::SkeletalMeshCompsToTrail' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, Active) == 0x000280, "Member 'ABP_GhostTrailManager_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, GhostsLifetime) == 0x000284, "Member 'ABP_GhostTrailManager_C::GhostsLifetime' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, VelocityDepending) == 0x000288, "Member 'ABP_GhostTrailManager_C::VelocityDepending' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, VelocityThreshold) == 0x00028C, "Member 'ABP_GhostTrailManager_C::VelocityThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, LastInvisible) == 0x000290, "Member 'ABP_GhostTrailManager_C::LastInvisible' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, GhostSpawnDelay) == 0x000294, "Member 'ABP_GhostTrailManager_C::GhostSpawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, GhostSpawnTimer) == 0x000298, "Member 'ABP_GhostTrailManager_C::GhostSpawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, Ghosts) == 0x0002A0, "Member 'ABP_GhostTrailManager_C::Ghosts' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, ScaleGhost) == 0x0002B0, "Member 'ABP_GhostTrailManager_C::ScaleGhost' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, ScaleCurve) == 0x0002B8, "Member 'ABP_GhostTrailManager_C::ScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, SkeletalVelocities) == 0x0002C0, "Member 'ABP_GhostTrailManager_C::SkeletalVelocities' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, StaticVelocities) == 0x0002D0, "Member 'ABP_GhostTrailManager_C::StaticVelocities' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, LastSkelLocations) == 0x0002E0, "Member 'ABP_GhostTrailManager_C::LastSkelLocations' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, LastStaticLocations) == 0x0002F0, "Member 'ABP_GhostTrailManager_C::LastStaticLocations' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, GhostSpawned) == 0x000300, "Member 'ABP_GhostTrailManager_C::GhostSpawned' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, SpawnRandomDistance) == 0x000310, "Member 'ABP_GhostTrailManager_C::SpawnRandomDistance' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, RandomOffset) == 0x00031C, "Member 'ABP_GhostTrailManager_C::RandomOffset' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, RandomVelocityMax) == 0x000320, "Member 'ABP_GhostTrailManager_C::RandomVelocityMax' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, RandomVelocityRate) == 0x000324, "Member 'ABP_GhostTrailManager_C::RandomVelocityRate' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, IgnoreLastInvisible) == 0x000330, "Member 'ABP_GhostTrailManager_C::IgnoreLastInvisible' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, TrailColor) == 0x000334, "Member 'ABP_GhostTrailManager_C::TrailColor' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, bSetColor) == 0x000344, "Member 'ABP_GhostTrailManager_C::bSetColor' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, StaticComponentCache) == 0x000348, "Member 'ABP_GhostTrailManager_C::StaticComponentCache' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, SkeletalComponentCache) == 0x000358, "Member 'ABP_GhostTrailManager_C::SkeletalComponentCache' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, UseCache) == 0x000368, "Member 'ABP_GhostTrailManager_C::UseCache' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, LastSelectCacheStatic) == 0x00036C, "Member 'ABP_GhostTrailManager_C::LastSelectCacheStatic' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, LastSelectCacheSkeletal) == 0x000370, "Member 'ABP_GhostTrailManager_C::LastSelectCacheSkeletal' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, bPauseSpawn) == 0x000374, "Member 'ABP_GhostTrailManager_C::bPauseSpawn' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, HiddenMaterialSlots) == 0x000378, "Member 'ABP_GhostTrailManager_C::HiddenMaterialSlots' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, SpawnStaticComponentCache) == 0x000388, "Member 'ABP_GhostTrailManager_C::SpawnStaticComponentCache' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, SpawnSkeletalComponentCache) == 0x000398, "Member 'ABP_GhostTrailManager_C::SpawnSkeletalComponentCache' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, PhotoModeMeshList) == 0x0003A8, "Member 'ABP_GhostTrailManager_C::PhotoModeMeshList' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, PhotoModeCamera) == 0x0003B8, "Member 'ABP_GhostTrailManager_C::PhotoModeCamera' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, PhotoModeMeshOffset) == 0x0003C0, "Member 'ABP_GhostTrailManager_C::PhotoModeMeshOffset' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, PhotoModeCapsuleHeight) == 0x0003C4, "Member 'ABP_GhostTrailManager_C::PhotoModeCapsuleHeight' has a wrong offset!");
static_assert(offsetof(ABP_GhostTrailManager_C, PhotoModeCapsuleRadius) == 0x0003C8, "Member 'ABP_GhostTrailManager_C::PhotoModeCapsuleRadius' has a wrong offset!");

}

