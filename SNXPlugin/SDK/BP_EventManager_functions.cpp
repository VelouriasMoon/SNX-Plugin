#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventManager

#include "Basic.hpp"

#include "BP_EventManager_classes.hpp"
#include "BP_EventManager_parameters.hpp"


namespace SDK
{

// Function BP_EventManager.BP_EventManager_C.ED_Finish__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ED_Finish__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ED_Finish__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ED_PlayStart__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ED_PlayStart__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ED_PlayStart__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnChangeDestinationActor__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DestinationDispFlag                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::OnChangeDestinationActor__DelegateSignature(bool DestinationDispFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnChangeDestinationActor__DelegateSignature");

	Params::BP_EventManager_C_OnChangeDestinationActor__DelegateSignature Parms{};

	Parms.DestinationDispFlag = DestinationDispFlag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EventBoardParamCurveTimeline__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             XParamName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             YParamName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      XCurve                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      YCurve                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XParamRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   YParamRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EventBoardParamCurveTimeline__DelegateSignature(class ABPCaptureActor_C* CaptureActor, class FName XParamName, class FName YParamName, class UCurveFloat* XCurve, class UCurveFloat* YCurve, float Speed, float XParamRate, float YParamRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventBoardParamCurveTimeline__DelegateSignature");

	Params::BP_EventManager_C_EventBoardParamCurveTimeline__DelegateSignature Parms{};

	Parms.CaptureActor = CaptureActor;
	Parms.XParamName = XParamName;
	Parms.YParamName = YParamName;
	Parms.XCurve = XCurve;
	Parms.YCurve = YCurve;
	Parms.Speed = Speed;
	Parms.XParamRate = XParamRate;
	Parms.YParamRate = YParamRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnBeforeChangeProgressID__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnBeforeChangeProgressID__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnBeforeChangeProgressID__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnAfterChangeProgressID__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnAfterChangeProgressID__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnAfterChangeProgressID__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnStartCutScene__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnStartCutScene__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnStartCutScene__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnEndCutScene__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnEndCutScene__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnEndCutScene__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.DispatchHiddenSetoMask__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bHidden                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DispatchHiddenSetoMask__DelegateSignature(bool Param_bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DispatchHiddenSetoMask__DelegateSignature");

	Params::BP_EventManager_C_DispatchHiddenSetoMask__DelegateSignature Parms{};

	Parms.Param_bHidden = Param_bHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ExecuteUbergraph_BP_EventManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ExecuteUbergraph_BP_EventManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ExecuteUbergraph_BP_EventManager");

	Params::BP_EventManager_C_ExecuteUbergraph_BP_EventManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddBattleSimulatorEndEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           EventObject                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddBattleSimulatorEndEvent(class UClass* EventObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddBattleSimulatorEndEvent");

	Params::BP_EventManager_C_AddBattleSimulatorEndEvent Parms{};

	Parms.EventObject = EventObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnDelaySequencerFinished
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnDelaySequencerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnDelaySequencerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetReadyForCrossFadeCharaCapture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelayTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaFaceAnimationName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LightPresetName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMeshTableID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMaterialTableID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaPartsDTRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharaCapChangeSpeedType                ChangeSpeedType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSimpleCrossFade                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::GetReadyForCrossFadeCharaCapture(float DelayTime, int32 CaptureActorIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, class FName LightPresetName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName CharaPartsDTRowName, ECharaCapChangeSpeedType ChangeSpeedType, bool IsSimpleCrossFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetReadyForCrossFadeCharaCapture");

	Params::BP_EventManager_C_GetReadyForCrossFadeCharaCapture Parms{};

	Parms.DelayTime = DelayTime;
	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.CapturePresetName = CapturePresetName;
	Parms.CharaAnimationName = CharaAnimationName;
	Parms.CharaFaceAnimationName = CharaFaceAnimationName;
	Parms.LightPresetName = LightPresetName;
	Parms.NpcMeshTableID = NpcMeshTableID;
	Parms.NpcMaterialTableID = NpcMaterialTableID;
	Parms.CharaPartsDTRowName = CharaPartsDTRowName;
	Parms.ChangeSpeedType = ChangeSpeedType;
	Parms.IsSimpleCrossFade = IsSimpleCrossFade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.CheckAndSetTalkEventPlayerRipSync
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MessageLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class URSAtomComponentBase*             PAtomComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::CheckAndSetTalkEventPlayerRipSync(const class FString& MessageLabel, class URSAtomComponentBase* PAtomComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckAndSetTalkEventPlayerRipSync");

	Params::BP_EventManager_C_CheckAndSetTalkEventPlayerRipSync Parms{};

	Parms.MessageLabel = std::move(MessageLabel);
	Parms.PAtomComponent = PAtomComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticSceneForTexture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TextureRowName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetupStaticSceneForTexture(class FName TextureRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticSceneForTexture");

	Params::BP_EventManager_C_SetupStaticSceneForTexture Parms{};

	Parms.TextureRowName = TextureRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnLoadedMakeEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::OnLoadedMakeEvent(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnLoadedMakeEvent");

	Params::BP_EventManager_C_OnLoadedMakeEvent Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.LoadMakeEvent_Internal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MakeEventPathString                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::LoadMakeEvent_Internal(const class FString& MakeEventPathString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LoadMakeEvent_Internal");

	Params::BP_EventManager_C_LoadMakeEvent_Internal Parms{};

	Parms.MakeEventPathString = std::move(MakeEventPathString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticSceneForBrainCrash
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SetupStaticSceneForBrainCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticSceneForBrainCrash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndWork
// (Event, Public, BlueprintEvent)

void ABP_EventManager_C::EndWork()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndWork");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetProgressIDNative
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ProgressId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetProgressIDNative(int32 Param_ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetProgressIDNative");

	Params::BP_EventManager_C_SetProgressIDNative Parms{};

	Parms.Param_ProgressId = Param_ProgressId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SubMessageVoiceRipSyncInfoList
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSAtomComponentBase*             AtomComp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SubMessageVoiceRipSyncInfoList(class URSAtomComponentBase* AtomComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SubMessageVoiceRipSyncInfoList");

	Params::BP_EventManager_C_SubMessageVoiceRipSyncInfoList Parms{};

	Parms.AtomComp = AtomComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddMessageVoiceRipSyncInfoList
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSAtomComponentBase*             AtomComp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RipSyncBoardJointID                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddMessageVoiceRipSyncInfoList(class URSAtomComponentBase* AtomComp, class FName RipSyncBoardJointID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddMessageVoiceRipSyncInfoList");

	Params::BP_EventManager_C_AddMessageVoiceRipSyncInfoList Parms{};

	Parms.AtomComp = AtomComp;
	Parms.RipSyncBoardJointID = RipSyncBoardJointID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.HideBGEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::HideBGEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "HideBGEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndTalkEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndTalkEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndTalkEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartTalkEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartTalkEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartTalkEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ChangeBrainFieldPlayer
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ChangeBrainFieldPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeBrainFieldPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PlayVoice
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           VoiceFileName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlayVoice(const class FString& VoiceFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayVoice");

	Params::BP_EventManager_C_PlayVoice Parms{};

	Parms.VoiceFileName = std::move(VoiceFileName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.RemoveBGScreenWidget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseFade                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::RemoveBGScreenWidget(bool UseFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RemoveBGScreenWidget");

	Params::BP_EventManager_C_RemoveBGScreenWidget Parms{};

	Parms.UseFade = UseFade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndGrabFrameStaticToDynamic
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndGrabFrameStaticToDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndGrabFrameStaticToDynamic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartGrabFrameStaticToDynamic
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartGrabFrameStaticToDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartGrabFrameStaticToDynamic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StopStreamPP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      NewFloatCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StopStreamPP(class UCurveFloat* NewFloatCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopStreamPP");

	Params::BP_EventManager_C_StopStreamPP Parms{};

	Parms.NewFloatCurve = NewFloatCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AppearNoBindPartyPlayer
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::AppearNoBindPartyPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AppearNoBindPartyPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetSequenceEnd
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SetSequenceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetSequenceEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartEventFadeOut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUnderCaption                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Second                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartEventFadeOut(const struct FLinearColor& Color, bool IsUnderCaption, float Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartEventFadeOut");

	Params::BP_EventManager_C_StartEventFadeOut Parms{};

	Parms.Color = std::move(Color);
	Parms.IsUnderCaption = IsUnderCaption;
	Parms.Second = Second;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetHiddenInGameForTagName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHiddenInGame                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetHiddenInGameForTagName(class FName TagName, bool IsHiddenInGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetHiddenInGameForTagName");

	Params::BP_EventManager_C_SetHiddenInGameForTagName Parms{};

	Parms.TagName = TagName;
	Parms.IsHiddenInGame = IsHiddenInGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetLevelVisible
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<TSoftObjectPtr<class UObject>>   LevelList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::SetLevelVisible(bool Visible, const TArray<TSoftObjectPtr<class UObject>>& LevelList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetLevelVisible");

	Params::BP_EventManager_C_SetLevelVisible Parms{};

	Parms.Visible = Visible;
	Parms.LevelList = std::move(LevelList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartBlendPlayerCamera
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Blend_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                Blend_Function                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Blend_Exp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartBlendPlayerCamera(float Blend_Time, EViewTargetBlendFunction Blend_Function, float Blend_Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartBlendPlayerCamera");

	Params::BP_EventManager_C_StartBlendPlayerCamera Parms{};

	Parms.Blend_Time = Blend_Time;
	Parms.Blend_Function = Blend_Function;
	Parms.Blend_Exp = Blend_Exp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ChangeSpeakerToVoice
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSAtomComponentBase*             Voice                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ChangeSpeakerToVoice(class URSAtomComponentBase* Voice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeSpeakerToVoice");

	Params::BP_EventManager_C_ChangeSpeakerToVoice Parms{};

	Parms.Voice = Voice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SaveSequencerCharaTransform
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SaveSequencerCharaTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SaveSequencerCharaTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SequencerStopBrainTalk
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SequencerStopBrainTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SequencerStopBrainTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SequencerStartBrainTalk
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BrainTalkID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBrainTalkCategory                      Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEventCallEnable                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipVisionSimulator                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SequencerStartBrainTalk(class FName BrainTalkID, EBrainTalkCategory Category, bool IsEventCallEnable, bool SkipVisionSimulator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SequencerStartBrainTalk");

	Params::BP_EventManager_C_SequencerStartBrainTalk Parms{};

	Parms.BrainTalkID = BrainTalkID;
	Parms.Category = Category;
	Parms.IsEventCallEnable = IsEventCallEnable;
	Parms.SkipVisionSimulator = SkipVisionSimulator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.FinishSequencer
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::FinishSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "FinishSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EventStoreCameraTransform
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EventStoreCameraTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventStoreCameraTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EventBoardParamTimeline_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             XParamName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             YParamName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      XCurve                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      YCurve                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XParamRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   YParamRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EventBoardParamTimeline_Event(class ABPCaptureActor_C* CaptureActor, class FName XParamName, class FName YParamName, class UCurveFloat* XCurve, class UCurveFloat* YCurve, float Speed, float XParamRate, float YParamRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventBoardParamTimeline_Event");

	Params::BP_EventManager_C_EventBoardParamTimeline_Event Parms{};

	Parms.CaptureActor = CaptureActor;
	Parms.XParamName = XParamName;
	Parms.YParamName = YParamName;
	Parms.XCurve = XCurve;
	Parms.YCurve = YCurve;
	Parms.Speed = Speed;
	Parms.XParamRate = XParamRate;
	Parms.YParamRate = YParamRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SequencerDrawCharaName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CharaID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::SequencerDrawCharaName(const class FString& CharaID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SequencerDrawCharaName");

	Params::BP_EventManager_C_SequencerDrawCharaName Parms{};

	Parms.CharaID = std::move(CharaID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SequencerDrawTownName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SequencerDrawTownName(int32 LocationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SequencerDrawTownName");

	Params::BP_EventManager_C_SequencerDrawTownName Parms{};

	Parms.LocationId = LocationId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SequencerDrawBossName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           bossId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::SequencerDrawBossName(const class FString& bossId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SequencerDrawBossName");

	Params::BP_EventManager_C_SequencerDrawBossName Parms{};

	Parms.bossId = std::move(bossId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ReceiveEndPlay");

	Params::BP_EventManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartDynamicCutsceneFromAsset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequence                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSeamlessInGame                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::StartDynamicCutsceneFromAsset(class ULevelSequence* Sequence, bool IsSeamlessInGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartDynamicCutsceneFromAsset");

	Params::BP_EventManager_C_StartDynamicCutsceneFromAsset Parms{};

	Parms.Sequence = Sequence;
	Parms.IsSeamlessInGame = IsSeamlessInGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetNearClip
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetNearClip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetNearClip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.NearClip
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::NearClip(float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "NearClip");

	Params::BP_EventManager_C_NearClip Parms{};

	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53");

	Params::BP_EventManager_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38");

	Params::BP_EventManager_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ReceiveTick");

	Params::BP_EventManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticScene
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SetupStaticScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartDynamicCutscene
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CutsceneName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartDynamicCutscene(const class FString& CutsceneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartDynamicCutscene");

	Params::BP_EventManager_C_StartDynamicCutscene Parms{};

	Parms.CutsceneName = std::move(CutsceneName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.UnloadMessage
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MessageTableName                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::UnloadMessage(const class FString& MessageTableName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UnloadMessage");

	Params::BP_EventManager_C_UnloadMessage Parms{};

	Parms.MessageTableName = std::move(MessageTableName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.LoadMessage
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UDataTable>        DataTable                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::LoadMessage(const TSoftObjectPtr<class UDataTable>& DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LoadMessage");

	Params::BP_EventManager_C_LoadMessage Parms{};

	Parms.DataTable = DataTable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.DrawMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WindowType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MessageLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Skipable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DrawSecond                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsVoiceOnlyMessage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipVoiceEnd                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DrawMessage(int32 WindowType, const class FString& MessageLabel, bool Skipable, float DrawSecond, bool IsVoiceOnlyMessage, bool IsSkipVoiceEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DrawMessage");

	Params::BP_EventManager_C_DrawMessage Parms{};

	Parms.WindowType = WindowType;
	Parms.MessageLabel = std::move(MessageLabel);
	Parms.Skipable = Skipable;
	Parms.DrawSecond = DrawSecond;
	Parms.IsVoiceOnlyMessage = IsVoiceOnlyMessage;
	Parms.IsSkipVoiceEnd = IsSkipVoiceEnd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BindingActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSEventBindingParameter          Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_EventManager_C::BindingActor(const struct FSEventBindingParameter& Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BindingActor");

	Params::BP_EventManager_C_BindingActor Parms{};

	Parms.Parameter = std::move(Parameter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SpawnActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSEventSpawnParameter            Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_EventManager_C::SpawnActor(const struct FSEventSpawnParameter& Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SpawnActor");

	Params::BP_EventManager_C_SpawnActor Parms{};

	Parms.Parameter = std::move(Parameter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndDynamic
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndDynamic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartDynamic
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartDynamic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndStatic
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndStatic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndStatic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartStatic
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartStatic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartStatic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ScreenCapture
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ScreenCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ScreenCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_EventManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PrivateClearTemporalRenderTargets
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::PrivateClearTemporalRenderTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateClearTemporalRenderTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Inner_DynamicToInGameInterp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Inner_DynamicToInGameInterp(float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Inner_DynamicToInGameInterp");

	Params::BP_EventManager_C_Inner_DynamicToInGameInterp Parms{};

	Parms.BlendTime = BlendTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SimulateBeginPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SimulateBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SimulateBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SimulateTick
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SimulateTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SimulateTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PrivatePPMMoveBlurTimeline
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::PrivatePPMMoveBlurTimeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivatePPMMoveBlurTimeline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Inner_TransitionPlayerCamera
// (BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::Inner_TransitionPlayerCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Inner_TransitionPlayerCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Inner_PopCameraRotationLag
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpringArmComponent*              SpringArm                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Inner_PopCameraRotationLag(class USpringArmComponent* SpringArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Inner_PopCameraRotationLag");

	Params::BP_EventManager_C_Inner_PopCameraRotationLag Parms{};

	Parms.SpringArm = SpringArm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Inner_PopCameraLag
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpringArmComponent*              SpringArm                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Inner_PopCameraLag(class USpringArmComponent* SpringArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Inner_PopCameraLag");

	Params::BP_EventManager_C_Inner_PopCameraLag Parms{};

	Parms.SpringArm = SpringArm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Inner_LoadSequencerFinish
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Inner_LoadSequencerFinish(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Inner_LoadSequencerFinish");

	Params::BP_EventManager_C_Inner_LoadSequencerFinish Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Inner_LoadSequencer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           AssetPath                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::Inner_LoadSequencer(const class FString& AssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Inner_LoadSequencer");

	Params::BP_EventManager_C_Inner_LoadSequencer Parms{};

	Parms.AssetPath = std::move(AssetPath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetEventPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetEventPause(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventPause");

	Params::BP_EventManager_C_SetEventPause Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddEventTriggerCommandByPath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventTriggerCheckType                  TriggerType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           TriggerCommandPath                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   TriggerWaitTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EventPriority                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddEventTriggerCommandByPath(EEventTriggerCheckType TriggerType, const class FString& TriggerCommandPath, float TriggerWaitTime, int32 EventPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddEventTriggerCommandByPath");

	Params::BP_EventManager_C_AddEventTriggerCommandByPath Parms{};

	Parms.TriggerType = TriggerType;
	Parms.TriggerCommandPath = std::move(TriggerCommandPath);
	Parms.TriggerWaitTime = TriggerWaitTime;
	Parms.EventPriority = EventPriority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.LoadMakeEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MakeEventPathString                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::LoadMakeEvent(const class FString& MakeEventPathString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LoadMakeEvent");

	Params::BP_EventManager_C_LoadMakeEvent Parms{};

	Parms.MakeEventPathString = std::move(MakeEventPathString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddEventTriggerCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommand            TriggerCommand                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddEventTriggerCommand(const struct FFEventTriggerCommand& TriggerCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddEventTriggerCommand");

	Params::BP_EventManager_C_AddEventTriggerCommand Parms{};

	Parms.TriggerCommand = std::move(TriggerCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ISetProgressID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ProgressId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ISetProgressID(int32 Param_ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ISetProgressID");

	Params::BP_EventManager_C_ISetProgressID Parms{};

	Parms.Param_ProgressId = Param_ProgressId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BGScreenFadeTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_EventManager_C::BGScreenFadeTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BGScreenFadeTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.BGScreenFadeTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_EventManager_C::BGScreenFadeTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BGScreenFadeTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StopStreamPPTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_EventManager_C::StopStreamPPTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopStreamPPTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StopStreamPPTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_EventManager_C::StopStreamPPTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopStreamPPTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.DynamicToInGameInterp__UpdateFunc
// (BlueprintEvent)

void ABP_EventManager_C::DynamicToInGameInterp__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DynamicToInGameInterp__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.DynamicToInGameInterp__FinishedFunc
// (BlueprintEvent)

void ABP_EventManager_C::DynamicToInGameInterp__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DynamicToInGameInterp__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PPMMoveBlurTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_EventManager_C::PPMMoveBlurTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PPMMoveBlurTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PPMMoveBlurTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_EventManager_C::PPMMoveBlurTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PPMMoveBlurTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.TransitionStaticToInGameTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_EventManager_C::TransitionStaticToInGameTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "TransitionStaticToInGameTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.TransitionStaticToInGameTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_EventManager_C::TransitionStaticToInGameTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "TransitionStaticToInGameTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartCutScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CutsceneName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsBPEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::StartCutScene(const class FString& CutsceneName, bool IsBPEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartCutScene");

	Params::BP_EventManager_C_StartCutScene Parms{};

	Parms.CutsceneName = std::move(CutsceneName);
	Parms.IsBPEvent = IsBPEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.DebugEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::DebugEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DebugEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnSequencerFinished
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnSequencerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnSequencerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnLoadSequencerFinish
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Level_Sequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::OnLoadSequencerFinish(class ULevelSequence* Level_Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnLoadSequencerFinish");

	Params::BP_EventManager_C_OnLoadSequencerFinish Parms{};

	Parms.Level_Sequence = Level_Sequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnPlayStartStaticCutScene
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnPlayStartStaticCutScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnPlayStartStaticCutScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnFinishStaticCutScene
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnFinishStaticCutScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnFinishStaticCutScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnPlayStartDynamicCutScene
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnPlayStartDynamicCutScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnPlayStartDynamicCutScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnFinishDynamicCutScene
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnFinishDynamicCutScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnFinishDynamicCutScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GameScreenCapture
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::GameScreenCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GameScreenCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetScreenCaptureTexture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetScreenCaptureTexture(class UTextureRenderTarget2D** RenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetScreenCaptureTexture");

	Params::BP_EventManager_C_GetScreenCaptureTexture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RenderTarget != nullptr)
		*RenderTarget = Parms.RenderTarget;
}


// Function BP_EventManager.BP_EventManager_C.CalcMainScenePostProcess
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPostProcessSettings             PostProcessSetting                                     (Parm, OutParm)

void ABP_EventManager_C::CalcMainScenePostProcess(const struct FVector& Location, struct FPostProcessSettings* PostProcessSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CalcMainScenePostProcess");

	Params::BP_EventManager_C_CalcMainScenePostProcess Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (PostProcessSetting != nullptr)
		*PostProcessSetting = std::move(Parms.PostProcessSetting);
}


// Function BP_EventManager.BP_EventManager_C.SetupBinding
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SetupBinding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupBinding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SettingCapture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BoadMeshIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaFaceAnimationName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMeshTableID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMaterialTableID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LightPresetName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequence*                   CaptureSequence                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureSequencePosition                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TextureRowName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MovieTextureRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseSaveTexture                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSeamlessInGameCapture                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHiddenPlFrameEffect                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             CharaEyePresetName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeXAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeYAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaPartsDTRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventCaptureRenderType                 RenderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ToneMapCounterValue                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SettingCapture(int32 CaptureActorIndex, int32 BoadMeshIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, bool IsUseSaveTexture, bool IsSeamlessInGameCapture, bool IsHiddenPlFrameEffect, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, EEventCaptureRenderType RenderType, float ToneMapCounterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingCapture");

	Params::BP_EventManager_C_SettingCapture Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.BoadMeshIndex = BoadMeshIndex;
	Parms.CapturePresetName = CapturePresetName;
	Parms.CharaAnimationName = CharaAnimationName;
	Parms.CharaFaceAnimationName = CharaFaceAnimationName;
	Parms.NpcMeshTableID = NpcMeshTableID;
	Parms.NpcMaterialTableID = NpcMaterialTableID;
	Parms.LightPresetName = LightPresetName;
	Parms.CaptureSequence = CaptureSequence;
	Parms.CaptureSequencePosition = CaptureSequencePosition;
	Parms.TextureRowName = TextureRowName;
	Parms.StaticPlType = StaticPlType;
	Parms.MovieTextureRowName = MovieTextureRowName;
	Parms.IsUseSaveTexture = IsUseSaveTexture;
	Parms.IsSeamlessInGameCapture = IsSeamlessInGameCapture;
	Parms.IsHiddenPlFrameEffect = IsHiddenPlFrameEffect;
	Parms.CharaEyePresetName = CharaEyePresetName;
	Parms.EyeXAxisThreshold = EyeXAxisThreshold;
	Parms.EyeYAxisThreshold = EyeYAxisThreshold;
	Parms.CharaPartsDTRowName = CharaPartsDTRowName;
	Parms.RenderType = RenderType;
	Parms.ToneMapCounterValue = ToneMapCounterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayBoardAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           BoardAnimationIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UCurveFloat>       PlayRateCurveData                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_EventManager_C::PlayBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, bool IsLoop, class FName SocketName, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayBoardAnimation");

	Params::BP_EventManager_C_PlayBoardAnimation Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.BoardAnimationIndex = std::move(BoardAnimationIndex);
	Parms.IsLoop = IsLoop;
	Parms.SocketName = SocketName;
	Parms.PlayRateCurveData = PlayRateCurveData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndCutScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEndEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayerCameraBlendTime                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                PlayerCameraBlendFunc                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayerCameraBlendExp                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkipENPCCamRowName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EndCutScene(bool IsEndEvent, float PlayerCameraBlendTime, EViewTargetBlendFunction PlayerCameraBlendFunc, float PlayerCameraBlendExp, class FName SkipENPCCamRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndCutScene");

	Params::BP_EventManager_C_EndCutScene Parms{};

	Parms.IsEndEvent = IsEndEvent;
	Parms.PlayerCameraBlendTime = PlayerCameraBlendTime;
	Parms.PlayerCameraBlendFunc = PlayerCameraBlendFunc;
	Parms.PlayerCameraBlendExp = PlayerCameraBlendExp;
	Parms.SkipENPCCamRowName = SkipENPCCamRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddBoardAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           BoardAnimationIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::AddBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddBoardAnimation");

	Params::BP_EventManager_C_AddBoardAnimation Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.BoardAnimationIndex = std::move(BoardAnimationIndex);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CameraAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CamAnimIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::CameraAnimation(int32 CamAnimIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CameraAnimation");

	Params::BP_EventManager_C_CameraAnimation Parms{};

	Parms.CamAnimIndex = CamAnimIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CaptureScene
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::CaptureScene(int32 CaptureActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CaptureScene");

	Params::BP_EventManager_C_CaptureScene Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetCaptureActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABPCaptureActor_C*                ReturnCaptureActor                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetCaptureActor(int32 CaptureActorIndex, class ABPCaptureActor_C** ReturnCaptureActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetCaptureActor");

	Params::BP_EventManager_C_GetCaptureActor Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnCaptureActor != nullptr)
		*ReturnCaptureActor = Parms.ReturnCaptureActor;
}


// Function BP_EventManager.BP_EventManager_C.isEndDynamicCutscene
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsEndDynamicCutscene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "isEndDynamicCutscene");

	Params::BP_EventManager_C_IsEndDynamicCutscene Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SettingSpecialCapture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BoadMeshIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SettingSpecialCapture(int32 CaptureActorIndex, int32 BoadMeshIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingSpecialCapture");

	Params::BP_EventManager_C_SettingSpecialCapture Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.BoadMeshIndex = BoadMeshIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SettingSpecialCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       CameraTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   CameraFov                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SettingSpecialCamera(int32 CaptureActorIndex, const struct FTransform& CameraTransform, float CameraFov)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingSpecialCamera");

	Params::BP_EventManager_C_SettingSpecialCamera Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.CameraTransform = std::move(CameraTransform);
	Parms.CameraFov = CameraFov;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CaptureSceneSpecial
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SpecialCaptureActorIndex                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::CaptureSceneSpecial(int32 SpecialCaptureActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CaptureSceneSpecial");

	Params::BP_EventManager_C_CaptureSceneSpecial Parms{};

	Parms.SpecialCaptureActorIndex = SpecialCaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AttachToSpecialCaptureActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SpecialCaptureActorIndex                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AttachToSpecialCaptureActor(int32 SpecialCaptureActorIndex, class FName AttachPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AttachToSpecialCaptureActor");

	Params::BP_EventManager_C_AttachToSpecialCaptureActor Parms{};

	Parms.SpecialCaptureActorIndex = SpecialCaptureActorIndex;
	Parms.AttachPointName = AttachPointName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlaySpecialNodeAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SpecialNodeAnimNamePath                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PlaySpecialNodeAnimation(const class FString& SpecialNodeAnimNamePath, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlaySpecialNodeAnimation");

	Params::BP_EventManager_C_PlaySpecialNodeAnimation Parms{};

	Parms.SpecialNodeAnimNamePath = std::move(SpecialNodeAnimNamePath);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddSpecialNodeAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SpecialNodeAnimNamePath                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::AddSpecialNodeAnimation(const class FString& SpecialNodeAnimNamePath, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddSpecialNodeAnimation");

	Params::BP_EventManager_C_AddSpecialNodeAnimation Parms{};

	Parms.SpecialNodeAnimNamePath = std::move(SpecialNodeAnimNamePath);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetSpecialStaticNodeActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnSpecialStaticNodeActor                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetSpecialStaticNodeActor(class AActor** ReturnSpecialStaticNodeActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetSpecialStaticNodeActor");

	Params::BP_EventManager_C_GetSpecialStaticNodeActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnSpecialStaticNodeActor != nullptr)
		*ReturnSpecialStaticNodeActor = Parms.ReturnSpecialStaticNodeActor;
}


// Function BP_EventManager.BP_EventManager_C.InitializePostProcess
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::InitializePostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InitializePostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetupDynamicPostProcess
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetupDynamicPostProcess(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupDynamicPostProcess");

	Params::BP_EventManager_C_SetupDynamicPostProcess Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EffectNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::EffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EffectNoise");

	Params::BP_EventManager_C_EffectNoise Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SpecialEffectNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SpecialEffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SpecialEffectNoise");

	Params::BP_EventManager_C_SpecialEffectNoise Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.LuaStartStatic
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::LuaStartStatic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LuaStartStatic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.LuaEndStatic
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRestoreTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::LuaEndStatic(bool IsRestoreTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LuaEndStatic");

	Params::BP_EventManager_C_LuaEndStatic Parms{};

	Parms.IsRestoreTransform = IsRestoreTransform;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CaptureSceneBG
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::CaptureSceneBG(bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CaptureSceneBG");

	Params::BP_EventManager_C_CaptureSceneBG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BP_EventManager.BP_EventManager_C.SetTransformCaptureBG
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       PlaneTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetTransformCaptureBG(const struct FTransform& PlaneTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetTransformCaptureBG");

	Params::BP_EventManager_C_SetTransformCaptureBG Parms{};

	Parms.PlaneTransform = std::move(PlaneTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetTransformCaptureBGCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetTransformCaptureBGCamera(const struct FTransform& CameraTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetTransformCaptureBGCamera");

	Params::BP_EventManager_C_SetTransformCaptureBGCamera Parms{};

	Parms.CameraTransform = std::move(CameraTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetLocationInGameCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetLocationInGameCamera(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetLocationInGameCamera");

	Params::BP_EventManager_C_SetLocationInGameCamera Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetTransformInGamePlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetTransformInGamePlayer(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetTransformInGamePlayer");

	Params::BP_EventManager_C_SetTransformInGamePlayer Parms{};

	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BGEffectNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::BGEffectNoise(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BGEffectNoise");

	Params::BP_EventManager_C_BGEffectNoise Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.TransitionStaticToInGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::TransitionStaticToInGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "TransitionStaticToInGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetFinalSpecialIDInGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SpecialCaptureActorIndex                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetFinalSpecialIDInGame(int32 SpecialCaptureActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetFinalSpecialIDInGame");

	Params::BP_EventManager_C_SetFinalSpecialIDInGame Parms{};

	Parms.SpecialCaptureActorIndex = SpecialCaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetUseTransitionInGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseTransition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetUseTransitionInGame(bool UseTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetUseTransitionInGame");

	Params::BP_EventManager_C_SetUseTransitionInGame Parms{};

	Parms.UseTransition = UseTransition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayBoardBGAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimNamePath                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PlayBoardBGAnimation(const class FString& BoardAnimNamePath, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayBoardBGAnimation");

	Params::BP_EventManager_C_PlayBoardBGAnimation Parms{};

	Parms.BoardAnimNamePath = std::move(BoardAnimNamePath);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddBoardBGAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BoardAnimNamePath                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::AddBoardBGAnimation(const class FString& BoardAnimNamePath, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddBoardBGAnimation");

	Params::BP_EventManager_C_AddBoardBGAnimation Parms{};

	Parms.BoardAnimNamePath = std::move(BoardAnimNamePath);
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetCaptureBGActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_CaptureBG_C*                  ReturnLocalCaptureBG                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetCaptureBGActor(class ABP_CaptureBG_C** ReturnLocalCaptureBG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetCaptureBGActor");

	Params::BP_EventManager_C_GetCaptureBGActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnLocalCaptureBG != nullptr)
		*ReturnLocalCaptureBG = Parms.ReturnLocalCaptureBG;
}


// Function BP_EventManager.BP_EventManager_C.SetDirectionalLight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LightPresetName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetDirectionalLight(class FName LightPresetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetDirectionalLight");

	Params::BP_EventManager_C_SetDirectionalLight Parms{};

	Parms.LightPresetName = LightPresetName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BGEffectGlitch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::BGEffectGlitch(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BGEffectGlitch");

	Params::BP_EventManager_C_BGEffectGlitch Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BGEffectFringe
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::BGEffectFringe(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BGEffectFringe");

	Params::BP_EventManager_C_BGEffectFringe Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BGEffectScanline
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::BGEffectScanline(class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BGEffectScanline");

	Params::BP_EventManager_C_BGEffectScanline Parms{};

	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetCaptureActorBase
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AEventCaptureActorBase*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AEventCaptureActorBase* ABP_EventManager_C::GetCaptureActorBase(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetCaptureActorBase");

	Params::BP_EventManager_C_GetCaptureActorBase Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.StartFade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartFade(const struct FVector& Color, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartFade");

	Params::BP_EventManager_C_StartFade Parms{};

	Parms.Color = std::move(Color);
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndFade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EndFade(const struct FVector& Color, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndFade");

	Params::BP_EventManager_C_EndFade Parms{};

	Parms.Color = std::move(Color);
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsFadeAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsFadeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsFadeAnimation");

	Params::BP_EventManager_C_IsFadeAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.StartupCutscene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPartyPlayerBattleReady                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsENPCBattleReady                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::StartupCutscene(bool IsPartyPlayerBattleReady, bool IsENPCBattleReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartupCutscene");

	Params::BP_EventManager_C_StartupCutscene Parms{};

	Parms.IsPartyPlayerBattleReady = IsPartyPlayerBattleReady;
	Parms.IsENPCBattleReady = IsENPCBattleReady;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetAssetPool
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEventAssetPoolComponent*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UEventAssetPoolComponent* ABP_EventManager_C::GetAssetPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetAssetPool");

	Params::BP_EventManager_C_GetAssetPool Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsCutSceneEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsCutSceneEvent                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsCutSceneEvent(bool* Param_IsCutSceneEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCutSceneEvent");

	Params::BP_EventManager_C_IsCutSceneEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsCutSceneEvent != nullptr)
		*Param_IsCutSceneEvent = Parms.Param_IsCutSceneEvent;
}


// Function BP_EventManager.BP_EventManager_C.UpdatePostProcessMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceUpdate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::UpdatePostProcessMaterial(bool ForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdatePostProcessMaterial");

	Params::BP_EventManager_C_UpdatePostProcessMaterial Parms{};

	Parms.ForceUpdate = ForceUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetVignetteMaskTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetVignetteMaskTexture(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetVignetteMaskTexture");

	Params::BP_EventManager_C_SetVignetteMaskTexture Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetVignetteMaskTexture
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetVignetteMaskTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetVignetteMaskTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.NotifyFinishWaitMode
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::NotifyFinishWaitMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "NotifyFinishWaitMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartAutoBoardAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           boardAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UAnimMontage*                     AddBordAnimMontage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UCurveFloat>       PlayRateCurveData                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_EventManager_C::StartAutoBoardAnimation(int32 CaptureActorIndex, const class FString& boardAnimationName, class UAnimMontage* AddBordAnimMontage, EStaticPlType StaticPlType, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartAutoBoardAnimation");

	Params::BP_EventManager_C_StartAutoBoardAnimation Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.boardAnimationName = std::move(boardAnimationName);
	Parms.AddBordAnimMontage = AddBordAnimMontage;
	Parms.StaticPlType = StaticPlType;
	Parms.PlayRateCurveData = PlayRateCurveData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.LoadAsset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.AddEventTriggerCommand_Internal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommand            TriggerCommand                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddEventTriggerCommand_Internal(const struct FFEventTriggerCommand& TriggerCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddEventTriggerCommand_Internal");

	Params::BP_EventManager_C_AddEventTriggerCommand_Internal Parms{};

	Parms.TriggerCommand = std::move(TriggerCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ProccessTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerComandData                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessTime(struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessTime");

	Params::BP_EventManager_C_ProccessTime Parms{};

	Parms.EventTriggerComandData = std::move(EventTriggerComandData);

	UObject::ProcessEvent(Func, &Parms);

	EventTriggerComandData = std::move(Parms.EventTriggerComandData);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.ProccessEnemyAllDie
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessEnemyAllDie(bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessEnemyAllDie");

	Params::BP_EventManager_C_ProccessEnemyAllDie Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.StartBPEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStartSubBPEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartBPEvent(bool IsStartSubBPEvent, const struct FFEventTriggerCommandData& EventTriggerCommandData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartBPEvent");

	Params::BP_EventManager_C_StartBPEvent Parms{};

	Parms.IsStartSubBPEvent = IsStartSubBPEvent;
	Parms.EventTriggerCommandData = std::move(EventTriggerCommandData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetProgressID_Internal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ProgressId                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetProgressID_Internal(int32* Param_ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetProgressID_Internal");

	Params::BP_EventManager_C_GetProgressID_Internal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ProgressId != nullptr)
		*Param_ProgressId = Parms.Param_ProgressId;
}


// Function BP_EventManager.BP_EventManager_C.SetProgressID
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ProgressId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetProgressID(int32 Param_ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetProgressID");

	Params::BP_EventManager_C_SetProgressID Parms{};

	Parms.Param_ProgressId = Param_ProgressId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AttachRedStringMeshs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ParentActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AttachRedStringMeshs(class AActor* ParentActor, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AttachRedStringMeshs");

	Params::BP_EventManager_C_AttachRedStringMeshs Parms{};

	Parms.ParentActor = ParentActor;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayGeneralBoardAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           BoardAnimationIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AttachBoardIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     AddAnimMontage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UCurveFloat>       PlayRateCurveData                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_EventManager_C::PlayGeneralBoardAnimation(int32 CaptureActorIndex, const class FString& BoardAnimationIndex, bool IsLoop, class FName SocketName, int32 AttachBoardIndex, class UAnimMontage* AddAnimMontage, TSoftObjectPtr<class UCurveFloat> PlayRateCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayGeneralBoardAnimation");

	Params::BP_EventManager_C_PlayGeneralBoardAnimation Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.BoardAnimationIndex = std::move(BoardAnimationIndex);
	Parms.IsLoop = IsLoop;
	Parms.SocketName = SocketName;
	Parms.AttachBoardIndex = AttachBoardIndex;
	Parms.AddAnimMontage = AddAnimMontage;
	Parms.PlayRateCurveData = PlayRateCurveData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetAnimMontageTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           BoardAnimName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetAnimMontageTransform(int32 CaptureActorIndex, const class FString& BoardAnimName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetAnimMontageTransform");

	Params::BP_EventManager_C_SetAnimMontageTransform Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.BoardAnimName = std::move(BoardAnimName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AttachToBoadActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AttachBoardNum                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ParentActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AttachToBoadActor(int32 AttachBoardNum, class AActor* ParentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AttachToBoadActor");

	Params::BP_EventManager_C_AttachToBoadActor Parms{};

	Parms.AttachBoardNum = AttachBoardNum;
	Parms.ParentActor = ParentActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ProccessEnemyNumCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerComandData                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessEnemyNumCheck(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessEnemyNumCheck");

	Params::BP_EventManager_C_ProccessEnemyNumCheck Parms{};

	Parms.EventTriggerComandData = std::move(EventTriggerComandData);

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.SettingEasyStaticForGeneralStatic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SettingEasyStaticForGeneralStatic(int32 CaptureActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingEasyStaticForGeneralStatic");

	Params::BP_EventManager_C_SettingEasyStaticForGeneralStatic Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetVisibleShowDestinationActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetVisibleShowDestinationActor(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetVisibleShowDestinationActor");

	Params::BP_EventManager_C_SetVisibleShowDestinationActor Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetEventPause_Internal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetEventPause_Internal(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventPause_Internal");

	Params::BP_EventManager_C_SetEventPause_Internal Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetEventEnableUIMenu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableFlag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetEventEnableUIMenu(bool EnableFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventEnableUIMenu");

	Params::BP_EventManager_C_SetEventEnableUIMenu Parms{};

	Parms.EnableFlag = EnableFlag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ProccessEndBrainTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessEndBrainTalk(bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessEndBrainTalk");

	Params::BP_EventManager_C_ProccessEndBrainTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.StartPPMMoveBlur
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UCurveFloat>       TimelineCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_EventManager_C::StartPPMMoveBlur(const struct FVector2D& Vector, TSoftObjectPtr<class UCurveFloat> TimelineCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartPPMMoveBlur");

	Params::BP_EventManager_C_StartPPMMoveBlur Parms{};

	Parms.Vector = std::move(Vector);
	Parms.TimelineCurve = TimelineCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.LoadEventAsset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::LoadEventAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "LoadEventAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsLoadedEventAsset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsLoadedEventAsset(bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsLoadedEventAsset");

	Params::BP_EventManager_C_IsLoadedEventAsset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_EventManager.BP_EventManager_C.IsPlayBeforeBoardAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsPlayBeforeBoardAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsPlayBeforeBoardAnimation");

	Params::BP_EventManager_C_IsPlayBeforeBoardAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.StartEventBossName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSpecialCaptureIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           bossId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBossNameMode                           Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FreeFixedDrawSecond                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartEventBossName(int32 CaptureActorIndex, bool IsSpecialCaptureIndex, class FName SocketName, const class FString& bossId, const struct FVector& Scale, EBossNameMode Mode, float FreeFixedDrawSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartEventBossName");

	Params::BP_EventManager_C_StartEventBossName Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.IsSpecialCaptureIndex = IsSpecialCaptureIndex;
	Parms.SocketName = SocketName;
	Parms.bossId = std::move(bossId);
	Parms.Scale = std::move(Scale);
	Parms.Mode = Mode;
	Parms.FreeFixedDrawSecond = FreeFixedDrawSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartEventCharaName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSpecialCaptureIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CharaID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartEventCharaName(int32 CaptureActorIndex, bool IsSpecialCaptureIndex, class FName SocketName, const class FString& CharaID, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartEventCharaName");

	Params::BP_EventManager_C_StartEventCharaName Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.IsSpecialCaptureIndex = IsSpecialCaptureIndex;
	Parms.SocketName = SocketName;
	Parms.CharaID = std::move(CharaID);
	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CalcSceneCapturePostProcessSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPostProcessSettings             Settings                                               (Parm, OutParm)

void ABP_EventManager_C::CalcSceneCapturePostProcessSettings(class USceneCaptureComponent2D* SceneCapture, const struct FVector& Location, struct FPostProcessSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CalcSceneCapturePostProcessSettings");

	Params::BP_EventManager_C_CalcSceneCapturePostProcessSettings Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = std::move(Parms.Settings);
}


// Function BP_EventManager.BP_EventManager_C.GetDefaultSceneCapturePostProcessSetting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FPostProcessSettings             PPS                                                    (Parm, OutParm)

void ABP_EventManager_C::GetDefaultSceneCapturePostProcessSetting(struct FPostProcessSettings* PPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetDefaultSceneCapturePostProcessSetting");

	Params::BP_EventManager_C_GetDefaultSceneCapturePostProcessSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PPS != nullptr)
		*PPS = std::move(Parms.PPS);
}


// Function BP_EventManager.BP_EventManager_C.SetInGameBeforeCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UCurveFloat*                      InGameCurve                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraFov                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetInGameBeforeCamera(const struct FTransform& Transform, class UCurveFloat* InGameCurve, float CameraFov)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetInGameBeforeCamera");

	Params::BP_EventManager_C_SetInGameBeforeCamera Parms{};

	Parms.Transform = std::move(Transform);
	Parms.InGameCurve = InGameCurve;
	Parms.CameraFov = CameraFov;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartCameraCutDynamic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Level_Sequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEndCameraBlendPlayerCamera                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::StartCameraCutDynamic(class ULevelSequence* Level_Sequence, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool IsEndCameraBlendPlayerCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartCameraCutDynamic");

	Params::BP_EventManager_C_StartCameraCutDynamic Parms{};

	Parms.Level_Sequence = Level_Sequence;
	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.IsEndCameraBlendPlayerCamera = IsEndCameraBlendPlayerCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnCameraCutFinishd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnCameraCutFinishd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnCameraCutFinishd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetEventType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EEventType                              Param_EventType                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetEventType(EEventType* Param_EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetEventType");

	Params::BP_EventManager_C_GetEventType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_EventType != nullptr)
		*Param_EventType = Parms.Param_EventType;
}


// Function BP_EventManager.BP_EventManager_C.AppendSceneCapturePostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AppendSceneCapturePostProcess(class USceneCaptureComponent2D* SceneCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AppendSceneCapturePostProcess");

	Params::BP_EventManager_C_AppendSceneCapturePostProcess Parms{};

	Parms.SceneCapture = SceneCapture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetStaticCapturePPMAccelerator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticCapturePPMAccelerator(float Rate, const struct FVector& BlurCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticCapturePPMAccelerator");

	Params::BP_EventManager_C_SetStaticCapturePPMAccelerator Parms{};

	Parms.Rate = Rate;
	Parms.BlurCenter = std::move(BlurCenter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetStaticCapturePPMSeeThrough
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticCapturePPMSeeThrough(float Rate, float BlurPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticCapturePPMSeeThrough");

	Params::BP_EventManager_C_SetStaticCapturePPMSeeThrough Parms{};

	Parms.Rate = Rate;
	Parms.BlurPower = BlurPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetStaticCapturePPMVisionFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogNear                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogFar                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticCapturePPMVisionFog(float Rate, float FogNear, float FogFar, const struct FVector& CenterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticCapturePPMVisionFog");

	Params::BP_EventManager_C_SetStaticCapturePPMVisionFog Parms{};

	Parms.Rate = Rate;
	Parms.FogNear = FogNear;
	Parms.FogFar = FogFar;
	Parms.CenterLocation = std::move(CenterLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetStaticCapturePPMRadialBlur
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticCapturePPMRadialBlur(float Rate, float BlurSize, const struct FVector& BlurCenter, const struct FVector& BlurColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticCapturePPMRadialBlur");

	Params::BP_EventManager_C_SetStaticCapturePPMRadialBlur Parms{};

	Parms.Rate = Rate;
	Parms.BlurSize = BlurSize;
	Parms.BlurCenter = std::move(BlurCenter);
	Parms.BlurColor = std::move(BlurColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SettingCaptureCrossFade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BoadMeshIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CapturePresetName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaAnimationName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaFaceAnimationName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMeshTableID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NpcMaterialTableID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LightPresetName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequence*                   CaptureSequence                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureSequencePosition                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TextureRowName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStaticPlType                           StaticPlType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MovieTextureRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSeamlessInGameCapture                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             CharaEyePresetName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeXAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EyeYAxisThreshold                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CharaPartsDTRowName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSimpleCrossFade                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SettingCaptureCrossFade(int32 BoadMeshIndex, class FName CapturePresetName, class FName CharaAnimationName, class FName CharaFaceAnimationName, int32 NpcMeshTableID, int32 NpcMaterialTableID, class FName LightPresetName, class ULevelSequence* CaptureSequence, float CaptureSequencePosition, class FName TextureRowName, EStaticPlType StaticPlType, class FName MovieTextureRowName, class ABPCaptureActor_C* CaptureActor, bool IsSeamlessInGameCapture, class FName CharaEyePresetName, float EyeXAxisThreshold, float EyeYAxisThreshold, class FName CharaPartsDTRowName, bool IsSimpleCrossFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingCaptureCrossFade");

	Params::BP_EventManager_C_SettingCaptureCrossFade Parms{};

	Parms.BoadMeshIndex = BoadMeshIndex;
	Parms.CapturePresetName = CapturePresetName;
	Parms.CharaAnimationName = CharaAnimationName;
	Parms.CharaFaceAnimationName = CharaFaceAnimationName;
	Parms.NpcMeshTableID = NpcMeshTableID;
	Parms.NpcMaterialTableID = NpcMaterialTableID;
	Parms.LightPresetName = LightPresetName;
	Parms.CaptureSequence = CaptureSequence;
	Parms.CaptureSequencePosition = CaptureSequencePosition;
	Parms.TextureRowName = TextureRowName;
	Parms.StaticPlType = StaticPlType;
	Parms.MovieTextureRowName = MovieTextureRowName;
	Parms.CaptureActor = CaptureActor;
	Parms.IsSeamlessInGameCapture = IsSeamlessInGameCapture;
	Parms.CharaEyePresetName = CharaEyePresetName;
	Parms.EyeXAxisThreshold = EyeXAxisThreshold;
	Parms.EyeYAxisThreshold = EyeYAxisThreshold;
	Parms.CharaPartsDTRowName = CharaPartsDTRowName;
	Parms.IsSimpleCrossFade = IsSimpleCrossFade;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SaveCaptureActorTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SaveCaptureActorTexture(int32 CaptureActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SaveCaptureActorTexture");

	Params::BP_EventManager_C_SaveCaptureActorTexture Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsValidChangeLevelAfterEventComand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsValidChangeLevelAfterEventComand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidChangeLevelAfterEventComand");

	Params::BP_EventManager_C_IsValidChangeLevelAfterEventComand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.GetFaceRenderTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRenderTargetData               RenderTargetData                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetFaceRenderTarget(struct FFRenderTargetData* RenderTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetFaceRenderTarget");

	Params::BP_EventManager_C_GetFaceRenderTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RenderTargetData != nullptr)
		*RenderTargetData = std::move(Parms.RenderTargetData);
}


// Function BP_EventManager.BP_EventManager_C.GetSequencerRenderTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRenderTargetData               RenderTargetData                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetSequencerRenderTarget(struct FFRenderTargetData* RenderTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetSequencerRenderTarget");

	Params::BP_EventManager_C_GetSequencerRenderTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RenderTargetData != nullptr)
		*RenderTargetData = std::move(Parms.RenderTargetData);
}


// Function BP_EventManager.BP_EventManager_C.GetRenderTargetForArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFRenderTargetData>       RenderTargetArray                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// struct FFRenderTargetData               RenderTargetData                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetRenderTargetForArray(TArray<struct FFRenderTargetData>& RenderTargetArray, struct FFRenderTargetData* RenderTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetRenderTargetForArray");

	Params::BP_EventManager_C_GetRenderTargetForArray Parms{};

	Parms.RenderTargetArray = std::move(RenderTargetArray);

	UObject::ProcessEvent(Func, &Parms);

	RenderTargetArray = std::move(Parms.RenderTargetArray);

	if (RenderTargetData != nullptr)
		*RenderTargetData = std::move(Parms.RenderTargetData);
}


// Function BP_EventManager.BP_EventManager_C.InitEventRenderTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::InitEventRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InitEventRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ClearEventRenderTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ClearEventRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearEventRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Private Get Static Cature PPM Once
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Load                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UMaterialInstanceDynamic*         PPM                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Private_Get_Static_Cature_PPM_Once(EEventPostProcessID EventPostProcessID, bool Load, class UMaterialInstanceDynamic** PPM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Private Get Static Cature PPM Once");

	Params::BP_EventManager_C_Private_Get_Static_Cature_PPM_Once Parms{};

	Parms.EventPostProcessID = EventPostProcessID;
	Parms.Load = Load;

	UObject::ProcessEvent(Func, &Parms);

	if (PPM != nullptr)
		*PPM = Parms.PPM;
}


// Function BP_EventManager.BP_EventManager_C.SetActiveStaticCapturePPM
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetActiveStaticCapturePPM(EEventPostProcessID EventPostProcessID, bool Activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetActiveStaticCapturePPM");

	Params::BP_EventManager_C_SetActiveStaticCapturePPM Parms{};

	Parms.EventPostProcessID = EventPostProcessID;
	Parms.Activate = Activate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PrivateActivateStaticCaturePPM
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PrivateActivateStaticCaturePPM(EEventPostProcessID EventPostProcessID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateActivateStaticCaturePPM");

	Params::BP_EventManager_C_PrivateActivateStaticCaturePPM Parms{};

	Parms.EventPostProcessID = EventPostProcessID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PrivateDeactivateStaticCaturePPM
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PrivateDeactivateStaticCaturePPM(EEventPostProcessID EventPostProcessID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateDeactivateStaticCaturePPM");

	Params::BP_EventManager_C_PrivateDeactivateStaticCaturePPM Parms{};

	Parms.EventPostProcessID = EventPostProcessID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PrivateIsStaticCaturePPMActive
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateIsStaticCaturePPMActive(EEventPostProcessID EventPostProcessID, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateIsStaticCaturePPMActive");

	Params::BP_EventManager_C_PrivateIsStaticCaturePPMActive Parms{};

	Parms.EventPostProcessID = EventPostProcessID;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_EventManager.BP_EventManager_C.AppendSceneCapturePostProcessPPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            PostProcessComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AppendSceneCapturePostProcessPPC(class UPostProcessComponent* PostProcessComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AppendSceneCapturePostProcessPPC");

	Params::BP_EventManager_C_AppendSceneCapturePostProcessPPC Parms{};

	Parms.PostProcessComponent = PostProcessComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticCapturePPMVignetteMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetupStaticCapturePPMVignetteMask(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticCapturePPMVignetteMask");

	Params::BP_EventManager_C_SetupStaticCapturePPMVignetteMask Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PrivateSetVignetteMaskTexture
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PrivateSetVignetteMaskTexture(class UTexture2D* Texture, class UMaterialInstanceDynamic* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateSetVignetteMaskTexture");

	Params::BP_EventManager_C_PrivateSetVignetteMaskTexture Parms{};

	Parms.Texture = Texture;
	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetStaticCapturePPMVignetteMask
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetStaticCapturePPMVignetteMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetStaticCapturePPMVignetteMask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PrivateSetGlitchPatternTexture
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PrivateSetGlitchPatternTexture(class UTexture2D* Texture, class UMaterialInstanceDynamic* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateSetGlitchPatternTexture");

	Params::BP_EventManager_C_PrivateSetGlitchPatternTexture Parms{};

	Parms.Texture = Texture;
	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticCapturePPMGlitch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetupStaticCapturePPMGlitch(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticCapturePPMGlitch");

	Params::BP_EventManager_C_SetupStaticCapturePPMGlitch Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetStaticCapturePPMGlitch
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetStaticCapturePPMGlitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetStaticCapturePPMGlitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetGlitchTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetGlitchTexture(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetGlitchTexture");

	Params::BP_EventManager_C_SetGlitchTexture Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetGlitchTexture
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetGlitchTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetGlitchTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.AddEventRenderTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRenderTargetData               AddRenderTargetData                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddEventRenderTarget(const struct FFRenderTargetData& AddRenderTargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddEventRenderTarget");

	Params::BP_EventManager_C_AddEventRenderTarget Parms{};

	Parms.AddRenderTargetData = std::move(AddRenderTargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SettingChangeSpecialStatic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BeforeStaticAttachJointName                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SettingChangeSpecialStatic(class FName BeforeStaticAttachJointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingChangeSpecialStatic");

	Params::BP_EventManager_C_SettingChangeSpecialStatic Parms{};

	Parms.BeforeStaticAttachJointName = BeforeStaticAttachJointName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsWorldMapShowDestinationForAreaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsWorldMapShowDestinationForAreaName(int32 LocationId, int32 AreaId, bool* IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWorldMapShowDestinationForAreaName");

	Params::BP_EventManager_C_IsWorldMapShowDestinationForAreaName Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);

	if (IsShow != nullptr)
		*IsShow = Parms.IsShow;
}


// Function BP_EventManager.BP_EventManager_C.IsWorldMapShowDestinationForLocationName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsWorldMapShowDestinationForLocationName(int32 LocationId, bool* IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWorldMapShowDestinationForLocationName");

	Params::BP_EventManager_C_IsWorldMapShowDestinationForLocationName Parms{};

	Parms.LocationId = LocationId;

	UObject::ProcessEvent(Func, &Parms);

	if (IsShow != nullptr)
		*IsShow = Parms.IsShow;
}


// Function BP_EventManager.BP_EventManager_C.SetStaticCapturePPMScreenLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     _1__Color                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _1__CenterU                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _1__CenterV                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _1__Size                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _1__Intensity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _1_method                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _1_ReverceEffect                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     _2__Color                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _2__CenterU                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _2__CenterV                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _2__Size                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _2__Intensity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _2_method                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _2_ReverceEffect                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   GradationPower                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   GlobalRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticCapturePPMScreenLight(const struct FLinearColor& _1__Color, float _1__CenterU, float _1__CenterV, float _1__Size, float _1__Intensity, float _1_method, float _1_ReverceEffect, const struct FLinearColor& _2__Color, float _2__CenterU, float _2__CenterV, float _2__Size, float _2__Intensity, float _2_method, float _2_ReverceEffect, float GradationPower, float GlobalRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticCapturePPMScreenLight");

	Params::BP_EventManager_C_SetStaticCapturePPMScreenLight Parms{};

	Parms._1__Color = std::move(_1__Color);
	Parms._1__CenterU = _1__CenterU;
	Parms._1__CenterV = _1__CenterV;
	Parms._1__Size = _1__Size;
	Parms._1__Intensity = _1__Intensity;
	Parms._1_method = _1_method;
	Parms._1_ReverceEffect = _1_ReverceEffect;
	Parms._2__Color = std::move(_2__Color);
	Parms._2__CenterU = _2__CenterU;
	Parms._2__CenterV = _2__CenterV;
	Parms._2__Size = _2__Size;
	Parms._2__Intensity = _2__Intensity;
	Parms._2_method = _2_method;
	Parms._2_ReverceEffect = _2_ReverceEffect;
	Parms.GradationPower = GradationPower;
	Parms.GlobalRate = GlobalRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AttachCapActorForSpecialNodeActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AttachCapActorForSpecialNodeActor(int32 CaptureActorIndex, class FName AttachPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AttachCapActorForSpecialNodeActor");

	Params::BP_EventManager_C_AttachCapActorForSpecialNodeActor Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.AttachPointName = AttachPointName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetAttachSPCapActorToNodeActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ParentSPCapActorIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ResetAttachSPCapActorToNodeActor(int32 ParentSPCapActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetAttachSPCapActorToNodeActor");

	Params::BP_EventManager_C_ResetAttachSPCapActorToNodeActor Parms{};

	Parms.ParentSPCapActorIndex = ParentSPCapActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlaySpecialNodeAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SpecialNodeAnimNamePath                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlaySpecialNodeAnimMontage(const class FString& SpecialNodeAnimNamePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlaySpecialNodeAnimMontage");

	Params::BP_EventManager_C_PlaySpecialNodeAnimMontage Parms{};

	Parms.SpecialNodeAnimNamePath = std::move(SpecialNodeAnimNamePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ClearSpecialStatic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SpecialCaptureActorIndex                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ClearSpecialStatic(int32 SpecialCaptureActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearSpecialStatic");

	Params::BP_EventManager_C_ClearSpecialStatic Parms{};

	Parms.SpecialCaptureActorIndex = SpecialCaptureActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ChangeSpeakerStaticPl
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     FrontCharaPlBoneNameList                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::ChangeSpeakerStaticPl(TArray<class FName>& FrontCharaPlBoneNameList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeSpeakerStaticPl");

	Params::BP_EventManager_C_ChangeSpeakerStaticPl Parms{};

	Parms.FrontCharaPlBoneNameList = std::move(FrontCharaPlBoneNameList);

	UObject::ProcessEvent(Func, &Parms);

	FrontCharaPlBoneNameList = std::move(Parms.FrontCharaPlBoneNameList);
}


// Function BP_EventManager.BP_EventManager_C.ResetAttachAllCapActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                ParentActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ResetAttachAllCapActor(class ABPCaptureActor_C* ParentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetAttachAllCapActor");

	Params::BP_EventManager_C_ResetAttachAllCapActor Parms{};

	Parms.ParentActor = ParentActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetAttachCapActorToNodeActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ParentSPCapActorIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ResetAttachCapActorToNodeActor(int32 ParentSPCapActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetAttachCapActorToNodeActor");

	Params::BP_EventManager_C_ResetAttachCapActorToNodeActor Parms{};

	Parms.ParentSPCapActorIndex = ParentSPCapActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AttachCapActorForCapActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ParentCapActorIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ChildCapActorIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AttachCapActorForCapActor(int32 ParentCapActorIndex, int32 ChildCapActorIndex, class FName AttachPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AttachCapActorForCapActor");

	Params::BP_EventManager_C_AttachCapActorForCapActor Parms{};

	Parms.ParentCapActorIndex = ParentCapActorIndex;
	Parms.ChildCapActorIndex = ChildCapActorIndex;
	Parms.AttachPointName = AttachPointName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartNewStaticInGeneral
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InAnimMontagePath                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EShadaAnimeType                         ShaderAnimType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SelectShaderAnimeDTRowName                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::StartNewStaticInGeneral(const class FString& InAnimMontagePath, EShadaAnimeType ShaderAnimType, class FName SelectShaderAnimeDTRowName, bool NoPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartNewStaticInGeneral");

	Params::BP_EventManager_C_StartNewStaticInGeneral Parms{};

	Parms.InAnimMontagePath = std::move(InAnimMontagePath);
	Parms.ShaderAnimType = ShaderAnimType;
	Parms.SelectShaderAnimeDTRowName = SelectShaderAnimeDTRowName;
	Parms.NoPlaySE = NoPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AttachCapActorForPhaseNodeMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewVisibility                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::AttachCapActorForPhaseNodeMesh(int32 CaptureActorIndex, class FName SocketName, bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AttachCapActorForPhaseNodeMesh");

	Params::BP_EventManager_C_AttachCapActorForPhaseNodeMesh Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.SocketName = SocketName;
	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayPhaseNodeAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           AnimMontagePath                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlayPhaseNodeAnimation(const class FString& AnimMontagePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayPhaseNodeAnimation");

	Params::BP_EventManager_C_PlayPhaseNodeAnimation Parms{};

	Parms.AnimMontagePath = std::move(AnimMontagePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetNextNewStaticNode
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SetNextNewStaticNode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetNextNewStaticNode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ClearChildCapActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhaseAlphaCurveType                    AlphaFadeType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ClearChildCapActor(EPhaseAlphaCurveType AlphaFadeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearChildCapActor");

	Params::BP_EventManager_C_ClearChildCapActor Parms{};

	Parms.AlphaFadeType = AlphaFadeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayPostProcessSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequence                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLockOpenMenu                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PlayPostProcessSequencer(class ULevelSequence* Sequence, bool IsLoop, bool IsLockOpenMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayPostProcessSequencer");

	Params::BP_EventManager_C_PlayPostProcessSequencer Parms{};

	Parms.Sequence = Sequence;
	Parms.IsLoop = IsLoop;
	Parms.IsLockOpenMenu = IsLockOpenMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EffectBokeh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CurveReverse                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::EffectBokeh(int32 CaptureActorIndex, class UCurveFloat* Curve, bool CurveReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EffectBokeh");

	Params::BP_EventManager_C_EffectBokeh Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.Curve = Curve;
	Parms.CurveReverse = CurveReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddEveryFrameCapActorList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddEveryFrameCapActorList(const class ABPCaptureActor_C*& CaptureActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddEveryFrameCapActorList");

	Params::BP_EventManager_C_AddEveryFrameCapActorList Parms{};

	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SubEveryFrameCapActorList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRemove                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SubEveryFrameCapActorList(const class ABPCaptureActor_C*& CaptureActor, bool* IsRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SubEveryFrameCapActorList");

	Params::BP_EventManager_C_SubEveryFrameCapActorList Parms{};

	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRemove != nullptr)
		*IsRemove = Parms.IsRemove;
}


// Function BP_EventManager.BP_EventManager_C.UpdateEveryCapture
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::UpdateEveryCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateEveryCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetCharaBGDataToCharaPresetName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CharaPresetName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFCapCharaBGData                 CharaBGData                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetCharaBGDataToCharaPresetName(class FName CharaPresetName, struct FFCapCharaBGData* CharaBGData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetCharaBGDataToCharaPresetName");

	Params::BP_EventManager_C_GetCharaBGDataToCharaPresetName Parms{};

	Parms.CharaPresetName = CharaPresetName;

	UObject::ProcessEvent(Func, &Parms);

	if (CharaBGData != nullptr)
		*CharaBGData = std::move(Parms.CharaBGData);
}


// Function BP_EventManager.BP_EventManager_C.GetShowDestCheckListForActorName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActorName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FShowDestinationDBDataCell>ReturnShowCheckList                                    (Parm, OutParm, HasGetValueTypeHash)

void ABP_EventManager_C::GetShowDestCheckListForActorName(class FName ActorName, TArray<struct FShowDestinationDBDataCell>* ReturnShowCheckList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetShowDestCheckListForActorName");

	Params::BP_EventManager_C_GetShowDestCheckListForActorName Parms{};

	Parms.ActorName = ActorName;

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnShowCheckList != nullptr)
		*ReturnShowCheckList = std::move(Parms.ReturnShowCheckList);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticCapturePPMScreenMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaskPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AfterDOF                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetupStaticCapturePPMScreenMask(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticCapturePPMScreenMask");

	Params::BP_EventManager_C_SetupStaticCapturePPMScreenMask Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);
	Parms.MaskPlayer = MaskPlayer;
	Parms.MaskEnemy = MaskEnemy;
	Parms.MaskParticle = MaskParticle;
	Parms.MaskBG = MaskBG;
	Parms.AfterDOF = AfterDOF;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetScreenMaskParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaskPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AfterDOF                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetScreenMaskParameter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetScreenMaskParameter");

	Params::BP_EventManager_C_SetScreenMaskParameter Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);
	Parms.MaskPlayer = MaskPlayer;
	Parms.MaskEnemy = MaskEnemy;
	Parms.MaskParticle = MaskParticle;
	Parms.MaskBG = MaskBG;
	Parms.AfterDOF = AfterDOF;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetUseSequencerStaticInGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseInGame                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetUseSequencerStaticInGame(bool UseInGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetUseSequencerStaticInGame");

	Params::BP_EventManager_C_SetUseSequencerStaticInGame Parms{};

	Parms.UseInGame = UseInGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SequencerStaticToInGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SequencerStaticToInGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SequencerStaticToInGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetVoiceCharaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CharaID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VoiceCharaName                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetVoiceCharaName(const class FString& CharaID, class FString* VoiceCharaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetVoiceCharaName");

	Params::BP_EventManager_C_GetVoiceCharaName Parms{};

	Parms.CharaID = std::move(CharaID);

	UObject::ProcessEvent(Func, &Parms);

	if (VoiceCharaName != nullptr)
		*VoiceCharaName = std::move(Parms.VoiceCharaName);
}


// Function BP_EventManager.BP_EventManager_C.SettingNoRipSync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDefaultCapture                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SettingNoRipSync(class ABPCaptureActor_C* CaptureActor, bool IsDefaultCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingNoRipSync");

	Params::BP_EventManager_C_SettingNoRipSync Parms{};

	Parms.CaptureActor = CaptureActor;
	Parms.IsDefaultCapture = IsDefaultCapture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SettingRipSync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SettingRipSync(class ABPCaptureActor_C* CaptureActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SettingRipSync");

	Params::BP_EventManager_C_SettingRipSync Parms{};

	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.UpdateRipSync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::UpdateRipSync(class ABPCaptureActor_C* CaptureActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateRipSync");

	Params::BP_EventManager_C_UpdateRipSync Parms{};

	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsPlayingNewStaticPhaseAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsPlayingNewStaticPhaseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsPlayingNewStaticPhaseAnimation");

	Params::BP_EventManager_C_IsPlayingNewStaticPhaseAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsPlayingNewStaticBaseAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsPlayingNewStaticBaseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsPlayingNewStaticBaseAnimation");

	Params::BP_EventManager_C_IsPlayingNewStaticBaseAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SetPhaseAnimCurveInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FEventPlAnimationCurveParam>CurrentPlAnimationCurveDataList                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::SetPhaseAnimCurveInfo(TArray<struct FEventPlAnimationCurveParam>& CurrentPlAnimationCurveDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetPhaseAnimCurveInfo");

	Params::BP_EventManager_C_SetPhaseAnimCurveInfo Parms{};

	Parms.CurrentPlAnimationCurveDataList = std::move(CurrentPlAnimationCurveDataList);

	UObject::ProcessEvent(Func, &Parms);

	CurrentPlAnimationCurveDataList = std::move(Parms.CurrentPlAnimationCurveDataList);
}


// Function BP_EventManager.BP_EventManager_C.GetCurrentStaticNodeCurveValueToCurveName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CurveName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurveValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetCurrentStaticNodeCurveValueToCurveName(class FName CurveName, float* CurveValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetCurrentStaticNodeCurveValueToCurveName");

	Params::BP_EventManager_C_GetCurrentStaticNodeCurveValueToCurveName Parms{};

	Parms.CurveName = CurveName;

	UObject::ProcessEvent(Func, &Parms);

	if (CurveValue != nullptr)
		*CurveValue = Parms.CurveValue;
}


// Function BP_EventManager.BP_EventManager_C.UpdateCheckSequenceCapFunc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::UpdateCheckSequenceCapFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateCheckSequenceCapFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.CaptureEventBeforeInGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::CaptureEventBeforeInGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CaptureEventBeforeInGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsEmptySeqCaptureFuncList
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsEmptySeqCaptureFuncList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsEmptySeqCaptureFuncList");

	Params::BP_EventManager_C_IsEmptySeqCaptureFuncList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsWorldMapShowDestinationForAreaName2
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EShowDestinationApplicationType         ApplicationType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   VisibleWeight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::IsWorldMapShowDestinationForAreaName2(int32 LocationId, int32 AreaId, int32 PortalID, EShowDestinationApplicationType ApplicationType, bool* IsShow, int32* VisibleWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWorldMapShowDestinationForAreaName2");

	Params::BP_EventManager_C_IsWorldMapShowDestinationForAreaName2 Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.PortalID = PortalID;
	Parms.ApplicationType = ApplicationType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsShow != nullptr)
		*IsShow = Parms.IsShow;

	if (VisibleWeight != nullptr)
		*VisibleWeight = Parms.VisibleWeight;
}


// Function BP_EventManager.BP_EventManager_C.PlayPresentSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequence                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AAjitoMember*                     BindForCharaActor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlayPresentSequencer(class ULevelSequence* Sequence, class AAjitoMember* BindForCharaActor, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayPresentSequencer");

	Params::BP_EventManager_C_PlayPresentSequencer Parms{};

	Parms.Sequence = Sequence;
	Parms.BindForCharaActor = BindForCharaActor;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnPresentSequencerFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnPresentSequencerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnPresentSequencerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndPresentSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAjitoMember*                     BindForCharaActor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EndPresentSequencer(class AAjitoMember* BindForCharaActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndPresentSequencer");

	Params::BP_EventManager_C_EndPresentSequencer Parms{};

	Parms.BindForCharaActor = BindForCharaActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddStaticCapturePPS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPostProcessSettings             PPS                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Handle                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddStaticCapturePPS(struct FPostProcessSettings& PPS, int32* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddStaticCapturePPS");

	Params::BP_EventManager_C_AddStaticCapturePPS Parms{};

	Parms.PPS = std::move(PPS);

	UObject::ProcessEvent(Func, &Parms);

	PPS = std::move(Parms.PPS);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function BP_EventManager.BP_EventManager_C.RemoveStaticCapturePPS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::RemoveStaticCapturePPS(int32 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RemoveStaticCapturePPS");

	Params::BP_EventManager_C_RemoveStaticCapturePPS Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.UpdateStaticCapturePPS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPostProcessSettings             PPS                                                    (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_EventManager_C::UpdateStaticCapturePPS(int32 Handle, const struct FPostProcessSettings& PPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateStaticCapturePPS");

	Params::BP_EventManager_C_UpdateStaticCapturePPS Parms{};

	Parms.Handle = Handle;
	Parms.PPS = std::move(PPS);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.BoardEffectNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::BoardEffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BoardEffectNoise");

	Params::BP_EventManager_C_BoardEffectNoise Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SpecialBoardEffectNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SpecialBoardEffectNoise(int32 CaptureActorIndex, class UCurveFloat* Curve, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SpecialBoardEffectNoise");

	Params::BP_EventManager_C_SpecialBoardEffectNoise Parms{};

	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.Curve = Curve;
	Parms.IsLoop = IsLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.UpdateCapturePPM
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EventActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::UpdateCapturePPM(class AActor* EventActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateCapturePPM");

	Params::BP_EventManager_C_UpdateCapturePPM Parms{};

	Parms.EventActor = EventActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StorePsychicObject
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StorePsychicObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StorePsychicObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.RestorePsychicObject
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::RestorePsychicObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RestorePsychicObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetScreenCapture
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         Scene_Capture_Comp                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetScreenCapture(class USceneCaptureComponent2D* Scene_Capture_Comp, bool Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetScreenCapture");

	Params::BP_EventManager_C_SetScreenCapture Parms{};

	Parms.Scene_Capture_Comp = Scene_Capture_Comp;
	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.DebugSetupDynamicPostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DebugSetupDynamicPostProcess(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DebugSetupDynamicPostProcess");

	Params::BP_EventManager_C_DebugSetupDynamicPostProcess Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CaptureSceneBGForLevelSequencer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   InSequence                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewPlaybackPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::CaptureSceneBGForLevelSequencer(class ULevelSequence* InSequence, float NewPlaybackPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CaptureSceneBGForLevelSequencer");

	Params::BP_EventManager_C_CaptureSceneBGForLevelSequencer Parms{};

	Parms.InSequence = InSequence;
	Parms.NewPlaybackPosition = NewPlaybackPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsWaitSequencerCaptureBG
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsWaitSequencerCaptureBG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWaitSequencerCaptureBG");

	Params::BP_EventManager_C_IsWaitSequencerCaptureBG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsNowSettingSeqCaptureBrainMes
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsNowSettingSeqCaptureBrainMes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsNowSettingSeqCaptureBrainMes");

	Params::BP_EventManager_C_IsNowSettingSeqCaptureBrainMes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.Update3DWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Update3DWidget(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Update3DWidget");

	Params::BP_EventManager_C_Update3DWidget Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticCapturePPMGradScreenMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaskPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AfterDOF                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     BeginColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EndColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     BeginPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EndPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Center                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRadiusGrad                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BlendMode                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetupStaticCapturePPMGradScreenMask(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF, const struct FLinearColor& BeginColor, const struct FLinearColor& EndColor, const struct FLinearColor& BeginPos, const struct FLinearColor& EndPos, const struct FLinearColor& Center, float Radius, bool IsRadiusGrad, int32 BlendMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticCapturePPMGradScreenMask");

	Params::BP_EventManager_C_SetupStaticCapturePPMGradScreenMask Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);
	Parms.MaskPlayer = MaskPlayer;
	Parms.MaskEnemy = MaskEnemy;
	Parms.MaskParticle = MaskParticle;
	Parms.MaskBG = MaskBG;
	Parms.AfterDOF = AfterDOF;
	Parms.BeginColor = std::move(BeginColor);
	Parms.EndColor = std::move(EndColor);
	Parms.BeginPos = std::move(BeginPos);
	Parms.EndPos = std::move(EndPos);
	Parms.Center = std::move(Center);
	Parms.Radius = Radius;
	Parms.IsRadiusGrad = IsRadiusGrad;
	Parms.BlendMode = BlendMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetGradScreenMaskParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaskPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AfterDOF                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     BeginColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EndColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     BeginPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EndPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Center                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRadiusGrad                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BlendMode                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetGradScreenMaskParameter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF, const struct FLinearColor& BeginColor, const struct FLinearColor& EndColor, const struct FLinearColor& BeginPos, const struct FLinearColor& EndPos, const struct FLinearColor& Center, float Radius, bool IsRadiusGrad, int32 BlendMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetGradScreenMaskParameter");

	Params::BP_EventManager_C_SetGradScreenMaskParameter Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);
	Parms.MaskPlayer = MaskPlayer;
	Parms.MaskEnemy = MaskEnemy;
	Parms.MaskParticle = MaskParticle;
	Parms.MaskBG = MaskBG;
	Parms.AfterDOF = AfterDOF;
	Parms.BeginColor = std::move(BeginColor);
	Parms.EndColor = std::move(EndColor);
	Parms.BeginPos = std::move(BeginPos);
	Parms.EndPos = std::move(EndPos);
	Parms.Center = std::move(Center);
	Parms.Radius = Radius;
	Parms.IsRadiusGrad = IsRadiusGrad;
	Parms.BlendMode = BlendMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetKaiiFilterParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaskPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AfterDOF                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetKaiiFilterParameter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetKaiiFilterParameter");

	Params::BP_EventManager_C_SetKaiiFilterParameter Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);
	Parms.MaskPlayer = MaskPlayer;
	Parms.MaskEnemy = MaskEnemy;
	Parms.MaskParticle = MaskParticle;
	Parms.MaskBG = MaskBG;
	Parms.AfterDOF = AfterDOF;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticCapturePPMKaiiFilter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaskPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskParticle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MaskBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AfterDOF                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetupStaticCapturePPMKaiiFilter(float Rate, const struct FLinearColor& Color, bool MaskPlayer, bool MaskEnemy, bool MaskParticle, bool MaskBG, bool AfterDOF)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticCapturePPMKaiiFilter");

	Params::BP_EventManager_C_SetupStaticCapturePPMKaiiFilter Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);
	Parms.MaskPlayer = MaskPlayer;
	Parms.MaskEnemy = MaskEnemy;
	Parms.MaskParticle = MaskParticle;
	Parms.MaskBG = MaskBG;
	Parms.AfterDOF = AfterDOF;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetLevelActorVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetLevelActorVisible(bool IsVisible, const struct FVector& Position, float Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetLevelActorVisible");

	Params::BP_EventManager_C_SetLevelActorVisible Parms{};

	Parms.IsVisible = IsVisible;
	Parms.Position = std::move(Position);
	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ProccessTriggerPlayerAnimMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerComandData                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessTriggerPlayerAnimMontage(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessTriggerPlayerAnimMontage");

	Params::BP_EventManager_C_ProccessTriggerPlayerAnimMontage Parms{};

	Parms.EventTriggerComandData = std::move(EventTriggerComandData);

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.SetTimerByPlayObstructAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetTimerByPlayObstructAction(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetTimerByPlayObstructAction");

	Params::BP_EventManager_C_SetTimerByPlayObstructAction Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.UpdateTimerByPlayObstructAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::UpdateTimerByPlayObstructAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateTimerByPlayObstructAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.CancelTimerByPlayObstructAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::CancelTimerByPlayObstructAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CancelTimerByPlayObstructAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ProccessObstructActionNumOrTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessObstructActionNumOrTime(struct FFEventTriggerCommandData& EventTriggerCommandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessObstructActionNumOrTime");

	Params::BP_EventManager_C_ProccessObstructActionNumOrTime Parms{};

	Parms.EventTriggerCommandData = std::move(EventTriggerCommandData);

	UObject::ProcessEvent(Func, &Parms);

	EventTriggerCommandData = std::move(Parms.EventTriggerCommandData);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.AddObstructActionCount
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::AddObstructActionCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddObstructActionCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ResetRipSync
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetRipSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetRipSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.UpdateDynamic
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::UpdateDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateDynamic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.UpdateFacialNormal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseCache                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::UpdateFacialNormal(bool UseCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateFacialNormal");

	Params::BP_EventManager_C_UpdateFacialNormal Parms{};

	Parms.UseCache = UseCache;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsReadyStartEvents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCanStartEvents                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsReadyStartEvents(bool* IsCanStartEvents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsReadyStartEvents");

	Params::BP_EventManager_C_IsReadyStartEvents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCanStartEvents != nullptr)
		*IsCanStartEvents = Parms.IsCanStartEvents;
}


// Function BP_EventManager.BP_EventManager_C.CheckStartWinOrLoseEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::CheckStartWinOrLoseEvent(bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckStartWinOrLoseEvent");

	Params::BP_EventManager_C_CheckStartWinOrLoseEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.AddEventTriggerCommandToPriority
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommand            TriggerCommand                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddEventTriggerCommandToPriority(const struct FFEventTriggerCommand& TriggerCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddEventTriggerCommandToPriority");

	Params::BP_EventManager_C_AddEventTriggerCommandToPriority Parms{};

	Parms.TriggerCommand = std::move(TriggerCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ClearEventComanndListToUnderPriority
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        TriggerCommandData                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ClearEventComanndListToUnderPriority(const struct FFEventTriggerCommandData& TriggerCommandData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearEventComanndListToUnderPriority");

	Params::BP_EventManager_C_ClearEventComanndListToUnderPriority Parms{};

	Parms.TriggerCommandData = std::move(TriggerCommandData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EventStartBPCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::EventStartBPCheck(struct FFEventTriggerCommandData& EventTriggerCommandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventStartBPCheck");

	Params::BP_EventManager_C_EventStartBPCheck Parms{};

	Parms.EventTriggerCommandData = std::move(EventTriggerCommandData);

	UObject::ProcessEvent(Func, &Parms);

	EventTriggerCommandData = std::move(Parms.EventTriggerCommandData);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.CheckEventCommandArray
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::CheckEventCommandArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckEventCommandArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsValidEventCommandType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventTriggerCheckType                  EventCommandType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckBrainTalkEvent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           ExclusionMakeEvent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::IsValidEventCommandType(EEventTriggerCheckType EventCommandType, bool CheckBrainTalkEvent, class UClass* ExclusionMakeEvent, bool* IsValid, struct FFEventTriggerCommandData* EventTriggerCommandData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidEventCommandType");

	Params::BP_EventManager_C_IsValidEventCommandType Parms{};

	Parms.EventCommandType = EventCommandType;
	Parms.CheckBrainTalkEvent = CheckBrainTalkEvent;
	Parms.ExclusionMakeEvent = ExclusionMakeEvent;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (EventTriggerCommandData != nullptr)
		*EventTriggerCommandData = std::move(Parms.EventTriggerCommandData);
}


// Function BP_EventManager.BP_EventManager_C.CheckStartTagEnemyHpRateCheckEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BattleActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckOnly                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::CheckStartTagEnemyHpRateCheckEvent(class AActor* BattleActor, bool CheckOnly, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckStartTagEnemyHpRateCheckEvent");

	Params::BP_EventManager_C_CheckStartTagEnemyHpRateCheckEvent Parms{};

	Parms.BattleActor = BattleActor;
	Parms.CheckOnly = CheckOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.IsCutSceneEventNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsCutSceneEventNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCutSceneEventNative");

	Params::BP_EventManager_C_IsCutSceneEventNative Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.UpdatePostProcessMaterialInternal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::UpdatePostProcessMaterialInternal(class UPostProcessComponent* TargetPPC, bool IsDynamic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdatePostProcessMaterialInternal");

	Params::BP_EventManager_C_UpdatePostProcessMaterialInternal Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.IsDynamic = IsDynamic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.FinishedPostProcessSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::FinishedPostProcessSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "FinishedPostProcessSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.OnWaitInputFinishEvent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::OnWaitInputFinishEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnWaitInputFinishEvent");

	Params::BP_EventManager_C_OnWaitInputFinishEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.UnLoadPPM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::UnLoadPPM(EEventPostProcessID EventPostProcessID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UnLoadPPM");

	Params::BP_EventManager_C_UnLoadPPM Parms{};

	Parms.EventPostProcessID = EventPostProcessID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Private Get Dynamic Cut PPM Once
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Load                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UMaterialInstanceDynamic*         PPM                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Private_Get_Dynamic_Cut_PPM_Once(EEventPostProcessID EventPostProcessID, bool Load, class UMaterialInstanceDynamic** PPM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Private Get Dynamic Cut PPM Once");

	Params::BP_EventManager_C_Private_Get_Dynamic_Cut_PPM_Once Parms{};

	Parms.EventPostProcessID = EventPostProcessID;
	Parms.Load = Load;

	UObject::ProcessEvent(Func, &Parms);

	if (PPM != nullptr)
		*PPM = Parms.PPM;
}


// Function BP_EventManager.BP_EventManager_C.PrivateAddOrUpdateDynamicCutPPMValueIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventPostProcessID                     PostProcessID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableMinusValue                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateAddOrUpdateDynamicCutPPMValueIndex(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, float Value, int32 SubIndex, bool IsDynamic, bool EnableMinusValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateAddOrUpdateDynamicCutPPMValueIndex");

	Params::BP_EventManager_C_PrivateAddOrUpdateDynamicCutPPMValueIndex Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.PostProcessID = PostProcessID;
	Parms.Value = Value;
	Parms.SubIndex = SubIndex;
	Parms.IsDynamic = IsDynamic;
	Parms.EnableMinusValue = EnableMinusValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PrivateAddOrUpdateDynamicCutPPMValueIndexList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventPostProcessID                     PostProcessID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           SubIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableMunusValue                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateAddOrUpdateDynamicCutPPMValueIndexList(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, float Value, TArray<int32>& SubIndex, bool IsDynamic, bool EnableMunusValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateAddOrUpdateDynamicCutPPMValueIndexList");

	Params::BP_EventManager_C_PrivateAddOrUpdateDynamicCutPPMValueIndexList Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.PostProcessID = PostProcessID;
	Parms.Value = Value;
	Parms.SubIndex = std::move(SubIndex);
	Parms.IsDynamic = IsDynamic;
	Parms.EnableMunusValue = EnableMunusValue;

	UObject::ProcessEvent(Func, &Parms);

	SubIndex = std::move(Parms.SubIndex);
}


// Function BP_EventManager.BP_EventManager_C.PrivateAddOrUpdateDynamicCutPPMValueALL
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventPostProcessID                     PostProcessID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableMinusValue                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateAddOrUpdateDynamicCutPPMValueALL(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, float Value, bool IsDynamic, bool EnableMinusValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateAddOrUpdateDynamicCutPPMValueALL");

	Params::BP_EventManager_C_PrivateAddOrUpdateDynamicCutPPMValueALL Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.PostProcessID = PostProcessID;
	Parms.Value = Value;
	Parms.IsDynamic = IsDynamic;
	Parms.EnableMinusValue = EnableMinusValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PrivateAddOrUpdateDynamicCutPPMScalarValueIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventPostProcessID                     PostProcessID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableMinusValue                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateAddOrUpdateDynamicCutPPMScalarValueIndex(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, class FName ParamName, int32 SubIndex, bool IsDynamic, bool EnableMinusValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateAddOrUpdateDynamicCutPPMScalarValueIndex");

	Params::BP_EventManager_C_PrivateAddOrUpdateDynamicCutPPMScalarValueIndex Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.PostProcessID = PostProcessID;
	Parms.ParamName = ParamName;
	Parms.SubIndex = SubIndex;
	Parms.IsDynamic = IsDynamic;
	Parms.EnableMinusValue = EnableMinusValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CreateEventPlAttachAsset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CaptureActorIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::CreateEventPlAttachAsset(class FName RowName, int32 CaptureActorIndex, const struct FTransform& OffsetTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CreateEventPlAttachAsset");

	Params::BP_EventManager_C_CreateEventPlAttachAsset Parms{};

	Parms.RowName = RowName;
	Parms.CaptureActorIndex = CaptureActorIndex;
	Parms.OffsetTransform = std::move(OffsetTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetCaptureActorVoiceCharaName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           VoiceCharaName                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetCaptureActorVoiceCharaName(class ABPCaptureActor_C* CaptureActor, class FString* VoiceCharaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetCaptureActorVoiceCharaName");

	Params::BP_EventManager_C_GetCaptureActorVoiceCharaName Parms{};

	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);

	if (VoiceCharaName != nullptr)
		*VoiceCharaName = std::move(Parms.VoiceCharaName);
}


// Function BP_EventManager.BP_EventManager_C.StopPostProcessSequencer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StopPostProcessSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopPostProcessSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StopAddSpecialNodeAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StopAddSpecialNodeAnimMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopAddSpecialNodeAnimMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PlayAddSpecialNodeAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SpecialNodeAnimNamePath                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlayAddSpecialNodeAnimMontage(const class FString& SpecialNodeAnimNamePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayAddSpecialNodeAnimMontage");

	Params::BP_EventManager_C_PlayAddSpecialNodeAnimMontage Parms{};

	Parms.SpecialNodeAnimNamePath = std::move(SpecialNodeAnimNamePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnCameraCutChangeDynamic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 Camea                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::OnCameraCutChangeDynamic(class UCameraComponent* Camea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnCameraCutChangeDynamic");

	Params::BP_EventManager_C_OnCameraCutChangeDynamic Parms{};

	Parms.Camea = Camea;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetupDynamicSpawnableActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::SetupDynamicSpawnableActors(TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupDynamicSpawnableActors");

	Params::BP_EventManager_C_SetupDynamicSpawnableActors Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function BP_EventManager.BP_EventManager_C.SetupStaticCapturePPMRedStringsSign
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventPPMRedStringsSingParam     Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void ABP_EventManager_C::SetupStaticCapturePPMRedStringsSign(struct FEventPPMRedStringsSingParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupStaticCapturePPMRedStringsSign");

	Params::BP_EventManager_C_SetupStaticCapturePPMRedStringsSign Parms{};

	Parms.Param = std::move(Param);

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
}


// Function BP_EventManager.BP_EventManager_C.SetPPMRedStringsSignParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventPPMRedStringsSingParam     Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bVertical                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetPPMRedStringsSignParameter(struct FEventPPMRedStringsSingParam& Param, bool bVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetPPMRedStringsSignParameter");

	Params::BP_EventManager_C_SetPPMRedStringsSignParameter Parms{};

	Parms.Param = std::move(Param);
	Parms.bVertical = bVertical;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
}


// Function BP_EventManager.BP_EventManager_C.Private Set PPMRed Strings Sign Parameter Internal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventPPMRedStringsSingParam     Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class UMaterialInstanceDynamic*         PPMAcBeat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMBearding                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMDotCraw                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMDropout                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMGhosting                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMStrobing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMTapeDistortion                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMYIQManipulation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Private_Set_PPMRed_Strings_Sign_Parameter_Internal(struct FEventPPMRedStringsSingParam& Param, class UMaterialInstanceDynamic* PPMAcBeat, class UMaterialInstanceDynamic* PPMBearding, class UMaterialInstanceDynamic* PPMDotCraw, class UMaterialInstanceDynamic* PPMDropout, class UMaterialInstanceDynamic* PPMGhosting, class UMaterialInstanceDynamic* PPMStrobing, class UMaterialInstanceDynamic* PPMTapeDistortion, class UMaterialInstanceDynamic* PPMYIQManipulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Private Set PPMRed Strings Sign Parameter Internal");

	Params::BP_EventManager_C_Private_Set_PPMRed_Strings_Sign_Parameter_Internal Parms{};

	Parms.Param = std::move(Param);
	Parms.PPMAcBeat = PPMAcBeat;
	Parms.PPMBearding = PPMBearding;
	Parms.PPMDotCraw = PPMDotCraw;
	Parms.PPMDropout = PPMDropout;
	Parms.PPMGhosting = PPMGhosting;
	Parms.PPMStrobing = PPMStrobing;
	Parms.PPMTapeDistortion = PPMTapeDistortion;
	Parms.PPMYIQManipulation = PPMYIQManipulation;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
}


// Function BP_EventManager.BP_EventManager_C.DebugCheckCaptureRetry
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Retry                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DebugCheckCaptureRetry(bool* Retry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DebugCheckCaptureRetry");

	Params::BP_EventManager_C_DebugCheckCaptureRetry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Retry != nullptr)
		*Retry = Parms.Retry;
}


// Function BP_EventManager.BP_EventManager_C.DebugSetCaptureRetry
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Retry                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DebugSetCaptureRetry(bool Retry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DebugSetCaptureRetry");

	Params::BP_EventManager_C_DebugSetCaptureRetry Parms{};

	Parms.Retry = Retry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.DebugSetCaptureRetryOneSkip
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OneSkip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DebugSetCaptureRetryOneSkip(bool OneSkip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DebugSetCaptureRetryOneSkip");

	Params::BP_EventManager_C_DebugSetCaptureRetryOneSkip Parms{};

	Parms.OneSkip = OneSkip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ProccessDimensionTangleCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerComandData                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessDimensionTangleCheck(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessDimensionTangleCheck");

	Params::BP_EventManager_C_ProccessDimensionTangleCheck Parms{};

	Parms.EventTriggerComandData = std::move(EventTriggerComandData);

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.SetEventStreamPP
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PerspectiveScaleLeft                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PerspectiveScaleRight                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rotate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VisibleLineArea                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EmissivePower                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetEventStreamPP(float PerspectiveScaleLeft, float PerspectiveScaleRight, float Rotate, float VisibleLineArea, float EmissivePower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventStreamPP");

	Params::BP_EventManager_C_SetEventStreamPP Parms{};

	Parms.PerspectiveScaleLeft = PerspectiveScaleLeft;
	Parms.PerspectiveScaleRight = PerspectiveScaleRight;
	Parms.Rotate = Rotate;
	Parms.VisibleLineArea = VisibleLineArea;
	Parms.EmissivePower = EmissivePower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.InitializeGeneralParticles
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::InitializeGeneralParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InitializeGeneralParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.RestartGeneralParticles
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            LevelSequenceActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>BindingIDList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::RestartGeneralParticles(int32 Handle, class ARSLevelSequenceActor* LevelSequenceActor, TArray<struct FMovieSceneObjectBindingID>& BindingIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RestartGeneralParticles");

	Params::BP_EventManager_C_RestartGeneralParticles Parms{};

	Parms.Handle = Handle;
	Parms.LevelSequenceActor = LevelSequenceActor;
	Parms.BindingIDList = std::move(BindingIDList);

	UObject::ProcessEvent(Func, &Parms);

	BindingIDList = std::move(Parms.BindingIDList);
}


// Function BP_EventManager.BP_EventManager_C.GetGeneralParticlesHandle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetGeneralParticlesHandle(int32* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetGeneralParticlesHandle");

	Params::BP_EventManager_C_GetGeneralParticlesHandle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function BP_EventManager.BP_EventManager_C.BindingGeneralParticles
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Param_Sequencer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMovieSceneObjectBindingID>BindingIDList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::BindingGeneralParticles(int32 Handle, class ARSLevelSequenceActor* Param_Sequencer, TArray<struct FMovieSceneObjectBindingID>& BindingIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "BindingGeneralParticles");

	Params::BP_EventManager_C_BindingGeneralParticles Parms{};

	Parms.Handle = Handle;
	Parms.Param_Sequencer = Param_Sequencer;
	Parms.BindingIDList = std::move(BindingIDList);

	UObject::ProcessEvent(Func, &Parms);

	BindingIDList = std::move(Parms.BindingIDList);
}


// Function BP_EventManager.BP_EventManager_C.GetGeneralParticlesInternal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ASequencerParticle*>       GeneralParticles                                       (Parm, OutParm, HasGetValueTypeHash)

void ABP_EventManager_C::GetGeneralParticlesInternal(int32 Handle, TArray<class ASequencerParticle*>* GeneralParticles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetGeneralParticlesInternal");

	Params::BP_EventManager_C_GetGeneralParticlesInternal Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);

	if (GeneralParticles != nullptr)
		*GeneralParticles = std::move(Parms.GeneralParticles);
}


// Function BP_EventManager.BP_EventManager_C.StopHideGeneralParticles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StopHideGeneralParticles(int32 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopHideGeneralParticles");

	Params::BP_EventManager_C_StopHideGeneralParticles Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ClearGeneralParticles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ClearGeneralParticles(int32 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearGeneralParticles");

	Params::BP_EventManager_C_ClearGeneralParticles Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsGeneralParticlesActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsGeneralParticlesActive(int32 Handle, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsGeneralParticlesActive");

	Params::BP_EventManager_C_IsGeneralParticlesActive Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_EventManager.BP_EventManager_C.FinishPostProcessSeqLoop
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::FinishPostProcessSeqLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "FinishPostProcessSeqLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Setup Event Prestream Textures
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EventActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePrestream                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::Setup_Event_Prestream_Textures(class AActor* EventActor, bool* UsePrestream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Setup Event Prestream Textures");

	Params::BP_EventManager_C_Setup_Event_Prestream_Textures Parms{};

	Parms.EventActor = EventActor;

	UObject::ProcessEvent(Func, &Parms);

	if (UsePrestream != nullptr)
		*UsePrestream = Parms.UsePrestream;
}


// Function BP_EventManager.BP_EventManager_C.DebugSetPrestreamTextures
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UsePrestream                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::DebugSetPrestreamTextures(bool UsePrestream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DebugSetPrestreamTextures");

	Params::BP_EventManager_C_DebugSetPrestreamTextures Parms{};

	Parms.UsePrestream = UsePrestream;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Reset Event Prestream Textures
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::Reset_Event_Prestream_Textures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Reset Event Prestream Textures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsCurrentZeroEP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsCurrentZeroEP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCurrentZeroEP");

	Params::BP_EventManager_C_IsCurrentZeroEP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsWireVisibleOffEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOffWireEvent                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsWireVisibleOffEvent(bool* IsOffWireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWireVisibleOffEvent");

	Params::BP_EventManager_C_IsWireVisibleOffEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOffWireEvent != nullptr)
		*IsOffWireEvent = Parms.IsOffWireEvent;
}


// Function BP_EventManager.BP_EventManager_C.Proccess Brain Field Close Check
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerComandData                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::Proccess_Brain_Field_Close_Check(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Proccess Brain Field Close Check");

	Params::BP_EventManager_C_Proccess_Brain_Field_Close_Check Parms{};

	Parms.EventTriggerComandData = std::move(EventTriggerComandData);

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.Public Set PPMRed Strings Sign Parameter Internal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventPPMRedStringsSingParam     Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UMaterialInstanceDynamic*         PPMTapeDistortion                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         PPMYIQManipulation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Public_Set_PPMRed_Strings_Sign_Parameter_Internal(const struct FEventPPMRedStringsSingParam& Param, class UMaterialInstanceDynamic* PPMTapeDistortion, class UMaterialInstanceDynamic* PPMYIQManipulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Public Set PPMRed Strings Sign Parameter Internal");

	Params::BP_EventManager_C_Public_Set_PPMRed_Strings_Sign_Parameter_Internal Parms{};

	Parms.Param = std::move(Param);
	Parms.PPMTapeDistortion = PPMTapeDistortion;
	Parms.PPMYIQManipulation = PPMYIQManipulation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartPadVibration
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForceFeedbackEffect*             VibrationParameterAsset                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LoopTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::StartPadVibration(class UForceFeedbackEffect* VibrationParameterAsset, bool IsLoop, float LoopTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartPadVibration");

	Params::BP_EventManager_C_StartPadVibration Parms{};

	Parms.VibrationParameterAsset = VibrationParameterAsset;
	Parms.IsLoop = IsLoop;
	Parms.LoopTime = LoopTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StopPadVibration
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StopPadVibration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StopPadVibration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.StartCutsceneOptimize
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartCutsceneOptimize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartCutsceneOptimize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndCutsceneOptimize
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndCutsceneOptimize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndCutsceneOptimize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.isEndPostProcessSequencer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsEndPostProcessSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "isEndPostProcessSequencer");

	Params::BP_EventManager_C_IsEndPostProcessSequencer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SetupOptimizeMaterialStaticFace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkelMeshComp                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetupOptimizeMaterialStaticFace(class USkeletalMeshComponent* SkelMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupOptimizeMaterialStaticFace");

	Params::BP_EventManager_C_SetupOptimizeMaterialStaticFace Parms{};

	Parms.SkelMeshComp = SkelMeshComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.InitCapturePPM
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::InitCapturePPM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InitCapturePPM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsLoadPPM
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventPostProcessID                     EventPostProcessID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loaded                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsLoadPPM(EEventPostProcessID EventPostProcessID, bool* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsLoadPPM");

	Params::BP_EventManager_C_IsLoadPPM Parms{};

	Parms.EventPostProcessID = EventPostProcessID;

	UObject::ProcessEvent(Func, &Parms);

	if (Loaded != nullptr)
		*Loaded = Parms.Loaded;
}


// Function BP_EventManager.BP_EventManager_C.PrivateAddOrUpdateDynamicCutPPMScalarValueIndexList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventPostProcessID                     PostProcessID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           SubIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsDynamic                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableMinusValue                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateAddOrUpdateDynamicCutPPMScalarValueIndexList(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, class FName ParamName, TArray<int32>& SubIndex, bool IsDynamic, bool EnableMinusValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateAddOrUpdateDynamicCutPPMScalarValueIndexList");

	Params::BP_EventManager_C_PrivateAddOrUpdateDynamicCutPPMScalarValueIndexList Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.PostProcessID = PostProcessID;
	Parms.ParamName = ParamName;
	Parms.SubIndex = std::move(SubIndex);
	Parms.IsDynamic = IsDynamic;
	Parms.EnableMinusValue = EnableMinusValue;

	UObject::ProcessEvent(Func, &Parms);

	SubIndex = std::move(Parms.SubIndex);
}


// Function BP_EventManager.BP_EventManager_C.PrivateAddOrUpdateDynamicCutPPMScalarValueALL
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            TargetPPC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEventPostProcessID                     PostProcessID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PrivateAddOrUpdateDynamicCutPPMScalarValueALL(class UPostProcessComponent* TargetPPC, EEventPostProcessID PostProcessID, class FName ParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateAddOrUpdateDynamicCutPPMScalarValueALL");

	Params::BP_EventManager_C_PrivateAddOrUpdateDynamicCutPPMScalarValueALL Parms{};

	Parms.TargetPPC = TargetPPC;
	Parms.PostProcessID = PostProcessID;
	Parms.ParamName = ParamName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetSequencerPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Param_Sequencer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetSequencerPause(class ALevelSequenceActor* Param_Sequencer, bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetSequencerPause");

	Params::BP_EventManager_C_SetSequencerPause Parms{};

	Parms.Param_Sequencer = Param_Sequencer;
	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsRipSyncJointID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class URSAtomComponentBase*             VoiceAtom                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             JointID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRipSync                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsRipSyncJointID(class URSAtomComponentBase* VoiceAtom, class FName JointID, bool* IsRipSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsRipSyncJointID");

	Params::BP_EventManager_C_IsRipSyncJointID Parms{};

	Parms.VoiceAtom = VoiceAtom;
	Parms.JointID = JointID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRipSync != nullptr)
		*IsRipSync = Parms.IsRipSync;
}


// Function BP_EventManager.BP_EventManager_C.EndCutsceneRestoreMaterial
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndCutsceneRestoreMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndCutsceneRestoreMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Is Play Enable Rip Sync Montage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     PlayRipSyncMontage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    AnimInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::Is_Play_Enable_Rip_Sync_Montage(class UAnimMontage* PlayRipSyncMontage, class UAnimInstance* AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Is Play Enable Rip Sync Montage");

	Params::BP_EventManager_C_Is_Play_Enable_Rip_Sync_Montage Parms{};

	Parms.PlayRipSyncMontage = PlayRipSyncMontage;
	Parms.AnimInstance = AnimInstance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SetupCutsceneMaterial
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetupCutsceneMaterial(bool Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetupCutsceneMaterial");

	Params::BP_EventManager_C_SetupCutsceneMaterial Parms{};

	Parms.Start = Start;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.StartWaitingHPCheckEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartWaitingHPCheckEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartWaitingHPCheckEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ClearEventComanndList
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ClearEventComanndList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearEventComanndList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsValidEventCommandTypeFromNative
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventTriggerCheckType                  EventCommandType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckBrainTalkEvent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsValidEventCommandTypeFromNative(EEventTriggerCheckType EventCommandType, bool CheckBrainTalkEvent, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidEventCommandTypeFromNative");

	Params::BP_EventManager_C_IsValidEventCommandTypeFromNative Parms{};

	Parms.EventCommandType = EventCommandType;
	Parms.CheckBrainTalkEvent = CheckBrainTalkEvent;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_EventManager.BP_EventManager_C.StartCreditEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::StartCreditEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "StartCreditEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndCreditEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::EndCreditEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndCreditEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsCurrentCreditEvent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsCurrentCreditEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCurrentCreditEvent");

	Params::BP_EventManager_C_IsCurrentCreditEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.AddExcludeStaticCapturePPS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               ExcludeMaterial                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Handle                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::AddExcludeStaticCapturePPS(class UMaterialInterface* ExcludeMaterial, int32* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddExcludeStaticCapturePPS");

	Params::BP_EventManager_C_AddExcludeStaticCapturePPS Parms{};

	Parms.ExcludeMaterial = ExcludeMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function BP_EventManager.BP_EventManager_C.RemoveExcludeStaticCapturePPS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::RemoveExcludeStaticCapturePPS(int32 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RemoveExcludeStaticCapturePPS");

	Params::BP_EventManager_C_RemoveExcludeStaticCapturePPS Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.AddOptimizeCacheCustomStencil
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::AddOptimizeCacheCustomStencil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AddOptimizeCacheCustomStencil");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ClearOptimizeCacheCustomStencil
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ClearOptimizeCacheCustomStencil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearOptimizeCacheCustomStencil");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetOptimizeCacheCustomStencilPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseCustomDepth                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::GetOptimizeCacheCustomStencilPlayer(class ARSCharacterBase* Player, bool* IsFind, bool* UseCustomDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetOptimizeCacheCustomStencilPlayer");

	Params::BP_EventManager_C_GetOptimizeCacheCustomStencilPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;

	if (UseCustomDepth != nullptr)
		*UseCustomDepth = Parms.UseCustomDepth;
}


// Function BP_EventManager.BP_EventManager_C.GetOptimizeCacheCustomStencilWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WeaponBase_C*                 Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseCustomDepth                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::GetOptimizeCacheCustomStencilWeapon(class ABP_WeaponBase_C* Weapon, bool* IsFind, bool* UseCustomDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetOptimizeCacheCustomStencilWeapon");

	Params::BP_EventManager_C_GetOptimizeCacheCustomStencilWeapon Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;

	if (UseCustomDepth != nullptr)
		*UseCustomDepth = Parms.UseCustomDepth;
}


// Function BP_EventManager.BP_EventManager_C.SetOptimizeCustomStencilPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetOptimizeCustomStencilPlayer(class ARSCharacterBase* Player, bool WithWeapon, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetOptimizeCustomStencilPlayer");

	Params::BP_EventManager_C_SetOptimizeCustomStencilPlayer Parms{};

	Parms.Player = Player;
	Parms.WithWeapon = WithWeapon;
	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsFindLoadMakeEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BPFilePath                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsFindLoadMakeEvent(const class FString& BPFilePath, bool* IsFind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsFindLoadMakeEvent");

	Params::BP_EventManager_C_IsFindLoadMakeEvent Parms{};

	Parms.BPFilePath = std::move(BPFilePath);

	UObject::ProcessEvent(Func, &Parms);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;
}


// Function BP_EventManager.BP_EventManager_C.ClearLoadedMakeEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Remove                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ClearLoadedMakeEvent(const class FString& ObjectName, bool* Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearLoadedMakeEvent");

	Params::BP_EventManager_C_ClearLoadedMakeEvent Parms{};

	Parms.ObjectName = std::move(ObjectName);

	UObject::ProcessEvent(Func, &Parms);

	if (Remove != nullptr)
		*Remove = Parms.Remove;
}


// Function BP_EventManager.BP_EventManager_C.Is Find Loading Make Event
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsFind                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           ReturnObjectName                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::Is_Find_Loading_Make_Event(const class FString& ObjectName, bool* IsFind, class FString* ReturnObjectName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Is Find Loading Make Event");

	Params::BP_EventManager_C_Is_Find_Loading_Make_Event Parms{};

	Parms.ObjectName = std::move(ObjectName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsFind != nullptr)
		*IsFind = Parms.IsFind;

	if (ReturnObjectName != nullptr)
		*ReturnObjectName = std::move(Parms.ReturnObjectName);
}


// Function BP_EventManager.BP_EventManager_C.RemoveLoadingMakeEventList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_EventManager_C::RemoveLoadingMakeEventList(const class FString& ObjectName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RemoveLoadingMakeEventList");

	Params::BP_EventManager_C_RemoveLoadingMakeEventList Parms{};

	Parms.ObjectName = std::move(ObjectName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsLoadingMakeEventAsset
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsLoadingMakeEventAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsLoadingMakeEventAsset");

	Params::BP_EventManager_C_IsLoadingMakeEventAsset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.PlayAjitoTVSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequence                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BindAjitoTVBP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlayAjitoTVSequencer(class ULevelSequence* Sequence, class AActor* BindAjitoTVBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayAjitoTVSequencer");

	Params::BP_EventManager_C_PlayAjitoTVSequencer Parms{};

	Parms.Sequence = Sequence;
	Parms.BindAjitoTVBP = BindAjitoTVBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnAjitoTVSequencerFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnAjitoTVSequencerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnAjitoTVSequencerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EndAjitoTVSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAjitoMember*                     BindForAjitoTVBP                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EndAjitoTVSequencer(class AAjitoMember* BindForAjitoTVBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndAjitoTVSequencer");

	Params::BP_EventManager_C_EndAjitoTVSequencer Parms{};

	Parms.BindForAjitoTVBP = BindForAjitoTVBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetLoadedAndLoadingMakeEventPathList
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash)

TArray<class FString> ABP_EventManager_C::GetLoadedAndLoadingMakeEventPathList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetLoadedAndLoadingMakeEventPathList");

	Params::BP_EventManager_C_GetLoadedAndLoadingMakeEventPathList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.OnSkipInput
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::OnSkipInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnSkipInput");

	Params::BP_EventManager_C_OnSkipInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.UpdateSimulate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::UpdateSimulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateSimulate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetWeaponVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoApply                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetWeaponVisibility(bool Visibility, bool NoApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetWeaponVisibility");

	Params::BP_EventManager_C_SetWeaponVisibility Parms{};

	Parms.Visibility = Visibility;
	Parms.NoApply = NoApply;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsWeaponVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibillity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsWeaponVisibility(bool* Visibillity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWeaponVisibility");

	Params::BP_EventManager_C_IsWeaponVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visibillity != nullptr)
		*Visibillity = Parms.Visibillity;
}


// Function BP_EventManager.BP_EventManager_C.ProccessEnpcBrainFieldTimeLimitEndCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerComandData                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProccessEnpcBrainFieldTimeLimitEndCheck(const struct FFEventTriggerCommandData& EventTriggerComandData, bool* IsStartEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProccessEnpcBrainFieldTimeLimitEndCheck");

	Params::BP_EventManager_C_ProccessEnpcBrainFieldTimeLimitEndCheck Parms{};

	Parms.EventTriggerComandData = std::move(EventTriggerComandData);

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;
}


// Function BP_EventManager.BP_EventManager_C.Get Message Label Facial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MessageLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FFMessageIDFacialData            Facial                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_EventManager_C::Get_Message_Label_Facial(const class FString& MessageLabel, struct FFMessageIDFacialData* Facial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Get Message Label Facial");

	Params::BP_EventManager_C_Get_Message_Label_Facial Parms{};

	Parms.MessageLabel = std::move(MessageLabel);

	UObject::ProcessEvent(Func, &Parms);

	if (Facial != nullptr)
		*Facial = std::move(Parms.Facial);
}


// Function BP_EventManager.BP_EventManager_C.ResetEventRenderTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERenderTargetType                       RenderTargetType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::ResetEventRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetEventRenderTarget");

	Params::BP_EventManager_C_ResetEventRenderTarget Parms{};

	Parms.RenderTargetType = RenderTargetType;
	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Set Camera After Change Player
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::Set_Camera_After_Change_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Set Camera After Change Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetUIUnlockFlag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UiUnlock                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetUIUnlockFlag(bool UiUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetUIUnlockFlag");

	Params::BP_EventManager_C_SetUIUnlockFlag Parms{};

	Parms.UiUnlock = UiUnlock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsCameraYawNormal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsNormal                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsCameraYawNormal(bool* IsNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCameraYawNormal");

	Params::BP_EventManager_C_IsCameraYawNormal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNormal != nullptr)
		*IsNormal = Parms.IsNormal;
}


// Function BP_EventManager.BP_EventManager_C.IsCameraPitchNormal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsNormal                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsCameraPitchNormal(bool* IsNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCameraPitchNormal");

	Params::BP_EventManager_C_IsCameraPitchNormal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNormal != nullptr)
		*IsNormal = Parms.IsNormal;
}


// Function BP_EventManager.BP_EventManager_C.IsWorldMapShowDesSubQuestForAreaName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PortalID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EShowDestinationApplicationType         ApplicationType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotOrderCheck                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsShow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   VisibleWeight                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::IsWorldMapShowDesSubQuestForAreaName(int32 LocationId, int32 AreaId, int32 PortalID, EShowDestinationApplicationType ApplicationType, bool NotOrderCheck, bool* IsShow, int32* VisibleWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsWorldMapShowDesSubQuestForAreaName");

	Params::BP_EventManager_C_IsWorldMapShowDesSubQuestForAreaName Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;
	Parms.PortalID = PortalID;
	Parms.ApplicationType = ApplicationType;
	Parms.NotOrderCheck = NotOrderCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsShow != nullptr)
		*IsShow = Parms.IsShow;

	if (VisibleWeight != nullptr)
		*VisibleWeight = Parms.VisibleWeight;
}


// Function BP_EventManager.BP_EventManager_C.SetEventHiddenNeonWire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetEventHiddenNeonWire(bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventHiddenNeonWire");

	Params::BP_EventManager_C_SetEventHiddenNeonWire Parms{};

	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsEventHiddenNeonWire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsEventHiddenNeonWire(bool* Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsEventHiddenNeonWire");

	Params::BP_EventManager_C_IsEventHiddenNeonWire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hidden != nullptr)
		*Hidden = Parms.Hidden;
}


// Function BP_EventManager.BP_EventManager_C.SetStaticHighResDelay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DelayFrame                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticHighResDelay(int32 DelayFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticHighResDelay");

	Params::BP_EventManager_C_SetStaticHighResDelay Parms{};

	Parms.DelayFrame = DelayFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetStaticHighResDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DelayFrame                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetStaticHighResDelay(int32* DelayFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetStaticHighResDelay");

	Params::BP_EventManager_C_GetStaticHighResDelay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DelayFrame != nullptr)
		*DelayFrame = Parms.DelayFrame;
}


// Function BP_EventManager.BP_EventManager_C.EnableTickNewStaticActor
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::EnableTickNewStaticActor(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EnableTickNewStaticActor");

	Params::BP_EventManager_C_EnableTickNewStaticActor Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.IsCurrentEventOffSkipEndFade
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsCurrentEventOffSkipEndFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsCurrentEventOffSkipEndFade");

	Params::BP_EventManager_C_IsCurrentEventOffSkipEndFade Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SetStaticGhostTrailCache
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ControlId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Num                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::SetStaticGhostTrailCache(EPlayerID Player, int32 ControlId, int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticGhostTrailCache");

	Params::BP_EventManager_C_SetStaticGhostTrailCache Parms{};

	Parms.Player = Player;
	Parms.ControlId = ControlId;
	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ResetStaticGhostTrailCache
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetStaticGhostTrailCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetStaticGhostTrailCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GetMatchStaticGhostTrailCache
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ControlId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ASkeletalMeshActor*>       Param_StaticGhostTrailCacheActor                       (Parm, OutParm, HasGetValueTypeHash)
// TArray<class USkeletalMeshComponent*>   Param_StaticGhostTrailCacheMeshComps                   (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   MeshNum                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UPoseableMeshComponent*>   Param_StaticGhostTrailCachePosableMeshComps            (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Layer                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetMatchStaticGhostTrailCache(int32 ControlId, TArray<class ASkeletalMeshActor*>* Param_StaticGhostTrailCacheActor, TArray<class USkeletalMeshComponent*>* Param_StaticGhostTrailCacheMeshComps, int32* MeshNum, TArray<class UPoseableMeshComponent*>* Param_StaticGhostTrailCachePosableMeshComps, int32* Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetMatchStaticGhostTrailCache");

	Params::BP_EventManager_C_GetMatchStaticGhostTrailCache Parms{};

	Parms.ControlId = ControlId;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_StaticGhostTrailCacheActor != nullptr)
		*Param_StaticGhostTrailCacheActor = std::move(Parms.Param_StaticGhostTrailCacheActor);

	if (Param_StaticGhostTrailCacheMeshComps != nullptr)
		*Param_StaticGhostTrailCacheMeshComps = std::move(Parms.Param_StaticGhostTrailCacheMeshComps);

	if (MeshNum != nullptr)
		*MeshNum = Parms.MeshNum;

	if (Param_StaticGhostTrailCachePosableMeshComps != nullptr)
		*Param_StaticGhostTrailCachePosableMeshComps = std::move(Parms.Param_StaticGhostTrailCachePosableMeshComps);

	if (Layer != nullptr)
		*Layer = Parms.Layer;
}


// Function BP_EventManager.BP_EventManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsNeedFrameWait");

	Params::BP_EventManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.Set Capture Actor Hidden in Game
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewHidden                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::Set_Capture_Actor_Hidden_in_Game(class ABPCaptureActor_C* CaptureActor, bool NewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Set Capture Actor Hidden in Game");

	Params::BP_EventManager_C_Set_Capture_Actor_Hidden_in_Game Parms{};

	Parms.CaptureActor = CaptureActor;
	Parms.NewHidden = NewHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.Set All Capture Actor Hidden in Game
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewHidden                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::Set_All_Capture_Actor_Hidden_in_Game(bool NewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Set All Capture Actor Hidden in Game");

	Params::BP_EventManager_C_Set_All_Capture_Actor_Hidden_in_Game Parms{};

	Parms.NewHidden = NewHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.InitRipSync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                CaptureActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::InitRipSync(class ABPCaptureActor_C* CaptureActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InitRipSync");

	Params::BP_EventManager_C_InitRipSync Parms{};

	Parms.CaptureActor = CaptureActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetSoundPressureThreshold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetSoundPressureThreshold(float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetSoundPressureThreshold");

	Params::BP_EventManager_C_GetSoundPressureThreshold Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_EventManager.BP_EventManager_C.SetHiddenActorForTagName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FlagIn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHiddenInGame                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsKeepHidden                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetHiddenActorForTagName(bool FlagIn, bool IsHiddenInGame, class FName TagName, bool IsKeepHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetHiddenActorForTagName");

	Params::BP_EventManager_C_SetHiddenActorForTagName Parms{};

	Parms.FlagIn = FlagIn;
	Parms.IsHiddenInGame = IsHiddenInGame;
	Parms.TagName = TagName;
	Parms.IsKeepHidden = IsKeepHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetTeleportTransformAndSweepLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       TransformIn                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UCapsuleComponent*                CapsuleComponentIn                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor)
// struct FVector                          OutSweepLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetTeleportTransformAndSweepLocation(const struct FTransform& TransformIn, class UCapsuleComponent* CapsuleComponentIn, struct FTransform* OutTransform, struct FVector* OutSweepLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetTeleportTransformAndSweepLocation");

	Params::BP_EventManager_C_GetTeleportTransformAndSweepLocation Parms{};

	Parms.TransformIn = std::move(TransformIn);
	Parms.CapsuleComponentIn = CapsuleComponentIn;

	UObject::ProcessEvent(Func, &Parms);

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	if (OutSweepLocation != nullptr)
		*OutSweepLocation = std::move(Parms.OutSweepLocation);
}


// Function BP_EventManager.BP_EventManager_C.ProcessBrainFieldRemainingTimeCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ProcessBrainFieldRemainingTimeCheck(const struct FFEventTriggerCommandData& EventTriggerCommandData, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ProcessBrainFieldRemainingTimeCheck");

	Params::BP_EventManager_C_ProcessBrainFieldRemainingTimeCheck Parms{};

	Parms.EventTriggerCommandData = std::move(EventTriggerCommandData);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_EventManager.BP_EventManager_C.HiddenSetoMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bHidden                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::HiddenSetoMask(bool Param_bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "HiddenSetoMask");

	Params::BP_EventManager_C_HiddenSetoMask Parms{};

	Parms.Param_bHidden = Param_bHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ChangeCurrentMontageToEndPos
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ChangeCurrentMontageToEndPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeCurrentMontageToEndPos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ClearHiddenActorforTagName
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ClearHiddenActorforTagName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearHiddenActorforTagName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PrivateSaveSequencerCharaTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetupActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::PrivateSaveSequencerCharaTransform(bool SetupActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PrivateSaveSequencerCharaTransform");

	Params::BP_EventManager_C_PrivateSaveSequencerCharaTransform Parms{};

	Parms.SetupActor = SetupActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetCacheActorHiddenInGameFromTagName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHiddenInGame                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_EventManager_C::SetCacheActorHiddenInGameFromTagName(class FName TagName, bool IsHiddenInGame, TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetCacheActorHiddenInGameFromTagName");

	Params::BP_EventManager_C_SetCacheActorHiddenInGameFromTagName Parms{};

	Parms.TagName = TagName;
	Parms.IsHiddenInGame = IsHiddenInGame;
	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function BP_EventManager.BP_EventManager_C.Clear Cache Actor Hidden in Game from Tag Name
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::Clear_Cache_Actor_Hidden_in_Game_from_Tag_Name(class FName TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Clear Cache Actor Hidden in Game from Tag Name");

	Params::BP_EventManager_C_Clear_Cache_Actor_Hidden_in_Game_from_Tag_Name Parms{};

	Parms.TagName = TagName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetPlayerCostumeSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DefaultCostume                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoAttachments                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetPlayerCostumeSettings(EPlayerID PlayerId, bool DefaultCostume, bool NoAttachments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetPlayerCostumeSettings");

	Params::BP_EventManager_C_SetPlayerCostumeSettings Parms{};

	Parms.PlayerId = PlayerId;
	Parms.DefaultCostume = DefaultCostume;
	Parms.NoAttachments = NoAttachments;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ClearAllPlayerCostumeSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ResetBindingActors                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::ClearAllPlayerCostumeSettings(bool ResetBindingActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearAllPlayerCostumeSettings");

	Params::BP_EventManager_C_ClearAllPlayerCostumeSettings Parms{};

	Parms.ResetBindingActors = ResetBindingActors;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetPlayerCostumeSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DefaultCostume                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoAttachments                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::GetPlayerCostumeSettings(EPlayerID PlayerId, bool* DefaultCostume, bool* NoAttachments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetPlayerCostumeSettings");

	Params::BP_EventManager_C_GetPlayerCostumeSettings Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultCostume != nullptr)
		*DefaultCostume = Parms.DefaultCostume;

	if (NoAttachments != nullptr)
		*NoAttachments = Parms.NoAttachments;
}


// Function BP_EventManager.BP_EventManager_C.CheckScenarioFlagListC
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FShowDestinationFlgCheck> FlgCheckList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::CheckScenarioFlagListC(const TArray<struct FShowDestinationFlgCheck>& FlgCheckList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckScenarioFlagListC");

	Params::BP_EventManager_C_CheckScenarioFlagListC Parms{};

	Parms.FlgCheckList = std::move(FlgCheckList);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.CheckProgressID
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MinProgressID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxProgressID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::CheckProgressID(int32 MinProgressID, int32 MaxProgressID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckProgressID");

	Params::BP_EventManager_C_CheckProgressID Parms{};

	Parms.MinProgressID = MinProgressID;
	Parms.MaxProgressID = MaxProgressID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.ResetPreviousEventType
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::ResetPreviousEventType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResetPreviousEventType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsVisibleCharaNameForProgressID
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsVisibleCharaNameForProgressID(EPlayerID PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsVisibleCharaNameForProgressID");

	Params::BP_EventManager_C_IsVisibleCharaNameForProgressID Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsValidEventCommand
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsValidEventCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidEventCommand");

	Params::BP_EventManager_C_IsValidEventCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.isEndPresentSequencer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsEndPresentSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "isEndPresentSequencer");

	Params::BP_EventManager_C_IsEndPresentSequencer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.PlayAjitoStaySequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   Sequence                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AAjitoMember*                     BindForCharaActor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AAjitoMember*                     BindFromCharaActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::PlayAjitoStaySequencer(class ULevelSequence* Sequence, class AAjitoMember* BindForCharaActor, class AAjitoMember* BindFromCharaActor, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayAjitoStaySequencer");

	Params::BP_EventManager_C_PlayAjitoStaySequencer Parms{};

	Parms.Sequence = Sequence;
	Parms.BindForCharaActor = BindForCharaActor;
	Parms.BindFromCharaActor = BindFromCharaActor;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndAjitoStaySequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAjitoMember*                     BindForCharaActor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AAjitoMember*                     BindFromCharaActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::EndAjitoStaySequencer(class AAjitoMember* BindForCharaActor, class AAjitoMember* BindFromCharaActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndAjitoStaySequencer");

	Params::BP_EventManager_C_EndAjitoStaySequencer Parms{};

	Parms.BindForCharaActor = BindForCharaActor;
	Parms.BindFromCharaActor = BindFromCharaActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.OnAjitoStaySequencerFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::OnAjitoStaySequencerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnAjitoStaySequencerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.InitAjitoStayRandomData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::InitAjitoStayRandomData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "InitAjitoStayRandomData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsValidEventCommandEnemyExterminationEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::IsValidEventCommandEnemyExterminationEvent(bool* IsValid, struct FFEventTriggerCommandData* EventTriggerCommandData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidEventCommandEnemyExterminationEvent");

	Params::BP_EventManager_C_IsValidEventCommandEnemyExterminationEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (EventTriggerCommandData != nullptr)
		*EventTriggerCommandData = std::move(Parms.EventTriggerCommandData);
}


// Function BP_EventManager.BP_EventManager_C.OnBattleFieldEnd
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::OnBattleFieldEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "OnBattleFieldEnd");

	Params::BP_EventManager_C_OnBattleFieldEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SetStaticMainPlayerCastShadow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableFlag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetStaticMainPlayerCastShadow(EPlayerID PlayerId, bool EnableFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticMainPlayerCastShadow");

	Params::BP_EventManager_C_SetStaticMainPlayerCastShadow Parms{};

	Parms.PlayerId = PlayerId;
	Parms.EnableFlag = EnableFlag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.GetPresentSequencer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARSLevelSequenceActor*            PresentSequencer                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetPresentSequencer(class ARSLevelSequenceActor** PresentSequencer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetPresentSequencer");

	Params::BP_EventManager_C_GetPresentSequencer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PresentSequencer != nullptr)
		*PresentSequencer = Parms.PresentSequencer;
}


// Function BP_EventManager.BP_EventManager_C.SpawnPresentSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::SpawnPresentSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SpawnPresentSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.DestroyPresentSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_EventManager_C::DestroyPresentSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "DestroyPresentSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsValidBattleSimulatorSystemEventCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFEventTriggerCommandData        EventTriggerCommandData                                (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::IsValidBattleSimulatorSystemEventCommand(bool* IsValid, struct FFEventTriggerCommandData* EventTriggerCommandData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidBattleSimulatorSystemEventCommand");

	Params::BP_EventManager_C_IsValidBattleSimulatorSystemEventCommand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (EventTriggerCommandData != nullptr)
		*EventTriggerCommandData = std::move(Parms.EventTriggerCommandData);
}


// Function BP_EventManager.BP_EventManager_C.SetStaticEventSkyPause
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::SetStaticEventSkyPause(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetStaticEventSkyPause");

	Params::BP_EventManager_C_SetStaticEventSkyPause Parms{};

	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.HiddenEventName3DWidget
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::HiddenEventName3DWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "HiddenEventName3DWidget");

	Params::BP_EventManager_C_HiddenEventName3DWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.RestoreVisibilityEventName3DWidget
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::RestoreVisibilityEventName3DWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "RestoreVisibilityEventName3DWidget");

	Params::BP_EventManager_C_RestoreVisibilityEventName3DWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.IsValidTimerEventCommand
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CheckBrainTalkEvent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   WithinTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_EventManager_C::IsValidTimerEventCommand(bool CheckBrainTalkEvent, float WithinTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsValidTimerEventCommand");

	Params::BP_EventManager_C_IsValidTimerEventCommand Parms{};

	Parms.CheckBrainTalkEvent = CheckBrainTalkEvent;
	Parms.WithinTime = WithinTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.GetProgressID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ProgressId                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetProgressID(int32* Param_ProgressId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetProgressID");

	Params::BP_EventManager_C_GetProgressID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ProgressId != nullptr)
		*Param_ProgressId = Parms.Param_ProgressId;
}


// Function BP_EventManager.BP_EventManager_C.IsEventPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::IsEventPause(bool* IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsEventPause");

	Params::BP_EventManager_C_IsEventPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPause != nullptr)
		*IsPause = Parms.IsPause;
}


// Function BP_EventManager.BP_EventManager_C.GetEventTriggerCommendNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventTriggerCheckType                  CheckType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventManager_C::GetEventTriggerCommendNum(EEventTriggerCheckType CheckType, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetEventTriggerCommendNum");

	Params::BP_EventManager_C_GetEventTriggerCommendNum Parms{};

	Parms.CheckType = CheckType;

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_EventManager.BP_EventManager_C.SetENPCPresetPlayerCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPlayerCameraPreset                     Preset_Basic                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventManager_C::SetENPCPresetPlayerCamera(bool Enable, EPlayerCameraPreset Preset_Basic, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetENPCPresetPlayerCamera");

	Params::BP_EventManager_C_SetENPCPresetPlayerCamera Parms{};

	Parms.Enable = Enable;
	Parms.Preset_Basic = Preset_Basic;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}

}

