#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResourceManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ResourceManager.BP_ResourceManager_C
// 0x0070 (0x0470 - 0x0400)
class ABP_ResourceManager_C final : public AResourceManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0400(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftObjectPtr<class UObject>, class UObject*> AssetMap;                                          // 0x0410(0x0050)(Edit, BlueprintVisible)
	TArray<class FName>                           LoadedAssetList;                                   // 0x0460(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ResourceManager(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void RegisterLoadAsset(class FName AssetList, TSoftObjectPtr<class UObject> AssetSoftRef, class UObject* AssetRef);
	void UnregisterLoadAsset(TSoftObjectPtr<class UObject> AssetSoftRef);
	void RegisterAssetList(class FName AssetList);
	void UnregisterAssetList(class FName AssetList, bool* Error);
	void MakeLoadedAssetListAssets(class FName ExcludeAssetList, TArray<TSoftObjectPtr<class UObject>>* Assets);
	void IsContainAssetInAssetList(TSoftObjectPtr<class UObject> Asset, class FName ExcludeAssetList, bool* Found);
	void RequestLoadAssetList(class FName AssetList);
	void UnloadAllAsset();
	void RequestUnloadAssetList(class FName AssetList, bool* Error);
	void ProtectedGetMipPrestreamPlayerMeshes(TArray<class USkeletalMesh*>* SkeletalMeshes, TArray<class UStaticMesh*>* StaticMeshes, EPlayerID PlayerId, bool bLoad);
	void LoadWeaponMesh(int32 InWeaponID, class USkeletalMeshComponent* InMeshComp, TArray<class USkeletalMeshComponent*>& InExtraMeshComp, bool* bDisableYuitoString);
	void LoadCostumeMesh(EPlayerID InPlayerID, int32 InCostumeItemID, class USkeletalMeshComponent* InMeshComp);
	void MeshSetting(class USkeletalMeshComponent* InMeshComp, class USkeletalMesh* InNewMesh);
	void ProtectedGetMipPrestreamPlayerSoftMeshes(TArray<TSoftObjectPtr<class USkeletalMesh>>* SkeletalMeshes, TArray<TSoftObjectPtr<class UObject>>* Attachment1Meshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Attachment1Materials, TArray<TSoftObjectPtr<class UObject>>* Attachment2Meshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Attachment2Materials, TArray<TSoftObjectPtr<class UObject>>* Attachment3Meshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Attachment3Materials, EPlayerID PlayerId);
	void ProtectedGetMipPrestreamPlayerSoftMeshes_0(EPlayerID PlayerId, TArray<TSoftObjectPtr<class USkeletalMesh>>* SkeletalMeshes, TArray<TSoftObjectPtr<class UStaticMesh>>* StaticMeshes, TArray<TSoftObjectPtr<class UMaterialInstance>>* Materials);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ResourceManager_C">();
	}
	static class ABP_ResourceManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ResourceManager_C>();
	}
};
static_assert(alignof(ABP_ResourceManager_C) == 0x000008, "Wrong alignment on ABP_ResourceManager_C");
static_assert(sizeof(ABP_ResourceManager_C) == 0x000470, "Wrong size on ABP_ResourceManager_C");
static_assert(offsetof(ABP_ResourceManager_C, UberGraphFrame) == 0x000400, "Member 'ABP_ResourceManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ResourceManager_C, DefaultSceneRoot) == 0x000408, "Member 'ABP_ResourceManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ResourceManager_C, AssetMap) == 0x000410, "Member 'ABP_ResourceManager_C::AssetMap' has a wrong offset!");
static_assert(offsetof(ABP_ResourceManager_C, LoadedAssetList) == 0x000460, "Member 'ABP_ResourceManager_C::LoadedAssetList' has a wrong offset!");

}

