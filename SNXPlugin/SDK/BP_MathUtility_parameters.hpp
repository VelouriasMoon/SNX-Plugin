#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MathUtility

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_MathUtility.BP_MathUtility_C.CheckDistanceFromVector
// 0x0040 (0x0040 - 0x0000)
struct BP_MathUtility_C_CheckDistanceFromVector final
{
public:
	struct FVector                                Dist;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreHeight;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6340[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6341[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LDist;                                             // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeXYSquared_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_CheckDistanceFromVector) == 0x000008, "Wrong alignment on BP_MathUtility_C_CheckDistanceFromVector");
static_assert(sizeof(BP_MathUtility_C_CheckDistanceFromVector) == 0x000040, "Wrong size on BP_MathUtility_C_CheckDistanceFromVector");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, Dist) == 0x000000, "Member 'BP_MathUtility_C_CheckDistanceFromVector::Dist' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, Distance) == 0x00000C, "Member 'BP_MathUtility_C_CheckDistanceFromVector::Distance' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, bIgnoreHeight) == 0x000010, "Member 'BP_MathUtility_C_CheckDistanceFromVector::bIgnoreHeight' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, __WorldContext) == 0x000018, "Member 'BP_MathUtility_C_CheckDistanceFromVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, bResult) == 0x000020, "Member 'BP_MathUtility_C_CheckDistanceFromVector::bResult' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, LDist) == 0x000024, "Member 'BP_MathUtility_C_CheckDistanceFromVector::LDist' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, CallFunc_VSizeSquared_ReturnValue) == 0x000030, "Member 'BP_MathUtility_C_CheckDistanceFromVector::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_MathUtility_C_CheckDistanceFromVector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, CallFunc_VSizeXYSquared_ReturnValue) == 0x000038, "Member 'BP_MathUtility_C_CheckDistanceFromVector::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_MathUtility_C_CheckDistanceFromVector::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistanceFromVector, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00003D, "Member 'BP_MathUtility_C_CheckDistanceFromVector::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.CalcRate
// 0x0038 (0x0038 - 0x0000)
struct BP_MathUtility_C_CalcRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClamp;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6342[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRate;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6343[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_CalcRate) == 0x000008, "Wrong alignment on BP_MathUtility_C_CalcRate");
static_assert(sizeof(BP_MathUtility_C_CalcRate) == 0x000038, "Wrong size on BP_MathUtility_C_CalcRate");
static_assert(offsetof(BP_MathUtility_C_CalcRate, Value) == 0x000000, "Member 'BP_MathUtility_C_CalcRate::Value' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, Min) == 0x000004, "Member 'BP_MathUtility_C_CalcRate::Min' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, Max) == 0x000008, "Member 'BP_MathUtility_C_CalcRate::Max' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, bClamp) == 0x00000C, "Member 'BP_MathUtility_C_CalcRate::bClamp' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, __WorldContext) == 0x000010, "Member 'BP_MathUtility_C_CalcRate::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, Rate) == 0x000018, "Member 'BP_MathUtility_C_CalcRate::Rate' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, LRate) == 0x00001C, "Member 'BP_MathUtility_C_CalcRate::LRate' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_MathUtility_C_CalcRate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, CallFunc_FClamp_ReturnValue) == 0x000024, "Member 'BP_MathUtility_C_CalcRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_MathUtility_C_CalcRate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_MathUtility_C_CalcRate::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_MathUtility_C_CalcRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.RandomLotSequence
// 0x0038 (0x0038 - 0x0000)
struct BP_MathUtility_C_RandomLotSequence final
{
public:
	TArray<float>                                 HitArray;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitIndex;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomLot_IsHit;                          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6344[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_RandomLotSequence) == 0x000008, "Wrong alignment on BP_MathUtility_C_RandomLotSequence");
static_assert(sizeof(BP_MathUtility_C_RandomLotSequence) == 0x000038, "Wrong size on BP_MathUtility_C_RandomLotSequence");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, HitArray) == 0x000000, "Member 'BP_MathUtility_C_RandomLotSequence::HitArray' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, __WorldContext) == 0x000010, "Member 'BP_MathUtility_C_RandomLotSequence::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, HitIndex) == 0x000018, "Member 'BP_MathUtility_C_RandomLotSequence::HitIndex' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_MathUtility_C_RandomLotSequence::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_MathUtility_C_RandomLotSequence::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_MathUtility_C_RandomLotSequence::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_MathUtility_C_RandomLotSequence::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, CallFunc_RandomLot_IsHit) == 0x00002C, "Member 'BP_MathUtility_C_RandomLotSequence::CallFunc_RandomLot_IsHit' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_MathUtility_C_RandomLotSequence::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSequence, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_MathUtility_C_RandomLotSequence::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.UpDownVector
// 0x0078 (0x0078 - 0x0000)
struct BP_MathUtility_C_UpDownVector final
{
public:
	struct FVector                                Src;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Out;                                               // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_axis;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_OutVector;                                       // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6345[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_UpDownVector) == 0x000008, "Wrong alignment on BP_MathUtility_C_UpDownVector");
static_assert(sizeof(BP_MathUtility_C_UpDownVector) == 0x000078, "Wrong size on BP_MathUtility_C_UpDownVector");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, Src) == 0x000000, "Member 'BP_MathUtility_C_UpDownVector::Src' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, Angle) == 0x00000C, "Member 'BP_MathUtility_C_UpDownVector::Angle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, __WorldContext) == 0x000010, "Member 'BP_MathUtility_C_UpDownVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, Out) == 0x000018, "Member 'BP_MathUtility_C_UpDownVector::Out' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, L_axis) == 0x000024, "Member 'BP_MathUtility_C_UpDownVector::L_axis' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, L_OutVector) == 0x000030, "Member 'BP_MathUtility_C_UpDownVector::L_OutVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_RotateAngleAxis_ReturnValue) == 0x000040, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_Cross_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_Normal_ReturnValue) == 0x000058, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_BreakVector_X) == 0x000064, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_BreakVector_Y) == 0x000068, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_BreakVector_Z) == 0x00006C, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000071, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x000072, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_UpDownVector, CallFunc_BooleanAND_ReturnValue) == 0x000073, "Member 'BP_MathUtility_C_UpDownVector::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.TurnToTargetRotation
// 0x00A0 (0x00A0 - 0x0000)
struct BP_MathUtility_C_TurnToTargetRotation final
{
public:
	struct FRotator                               Src;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Dst;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Angle;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6346[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotate;                                         // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                L_NewDir;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_axis;                                            // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_DstDir;                                          // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_SrcDir;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               L_Rotate;                                          // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TurnToTargetVector_NewVector;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_TurnToTargetRotation) == 0x000008, "Wrong alignment on BP_MathUtility_C_TurnToTargetRotation");
static_assert(sizeof(BP_MathUtility_C_TurnToTargetRotation) == 0x0000A0, "Wrong size on BP_MathUtility_C_TurnToTargetRotation");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, Src) == 0x000000, "Member 'BP_MathUtility_C_TurnToTargetRotation::Src' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, Dst) == 0x00000C, "Member 'BP_MathUtility_C_TurnToTargetRotation::Dst' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, Angle) == 0x000018, "Member 'BP_MathUtility_C_TurnToTargetRotation::Angle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, __WorldContext) == 0x000020, "Member 'BP_MathUtility_C_TurnToTargetRotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, NewRotate) == 0x000028, "Member 'BP_MathUtility_C_TurnToTargetRotation::NewRotate' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, L_NewDir) == 0x000034, "Member 'BP_MathUtility_C_TurnToTargetRotation::L_NewDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, L_axis) == 0x000040, "Member 'BP_MathUtility_C_TurnToTargetRotation::L_axis' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, L_DstDir) == 0x00004C, "Member 'BP_MathUtility_C_TurnToTargetRotation::L_DstDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, L_SrcDir) == 0x000058, "Member 'BP_MathUtility_C_TurnToTargetRotation::L_SrcDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, L_Rotate) == 0x000064, "Member 'BP_MathUtility_C_TurnToTargetRotation::L_Rotate' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, CallFunc_TurnToTargetVector_NewVector) == 0x000070, "Member 'BP_MathUtility_C_TurnToTargetRotation::CallFunc_TurnToTargetVector_NewVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, CallFunc_GetForwardVector_ReturnValue) == 0x00007C, "Member 'BP_MathUtility_C_TurnToTargetRotation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, CallFunc_MakeRotFromX_ReturnValue) == 0x000088, "Member 'BP_MathUtility_C_TurnToTargetRotation::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetRotation, CallFunc_GetForwardVector_ReturnValue_1) == 0x000094, "Member 'BP_MathUtility_C_TurnToTargetRotation::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.TurnToTargetVector
// 0x00B0 (0x00B0 - 0x0000)
struct BP_MathUtility_C_TurnToTargetVector final
{
public:
	struct FVector                                Src;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dst;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6347[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewVector;                                         // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_NewDir;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_axis;                                            // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_DstDir;                                          // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_SrcDir;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6348[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle;           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_TurnToTargetVector) == 0x000008, "Wrong alignment on BP_MathUtility_C_TurnToTargetVector");
static_assert(sizeof(BP_MathUtility_C_TurnToTargetVector) == 0x0000B0, "Wrong size on BP_MathUtility_C_TurnToTargetVector");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, Src) == 0x000000, "Member 'BP_MathUtility_C_TurnToTargetVector::Src' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, Dst) == 0x00000C, "Member 'BP_MathUtility_C_TurnToTargetVector::Dst' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, Angle) == 0x000018, "Member 'BP_MathUtility_C_TurnToTargetVector::Angle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, __WorldContext) == 0x000020, "Member 'BP_MathUtility_C_TurnToTargetVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, NewVector) == 0x000028, "Member 'BP_MathUtility_C_TurnToTargetVector::NewVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, L_NewDir) == 0x000034, "Member 'BP_MathUtility_C_TurnToTargetVector::L_NewDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, L_axis) == 0x000040, "Member 'BP_MathUtility_C_TurnToTargetVector::L_axis' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, L_DstDir) == 0x00004C, "Member 'BP_MathUtility_C_TurnToTargetVector::L_DstDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, L_SrcDir) == 0x000058, "Member 'BP_MathUtility_C_TurnToTargetVector::L_SrcDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_VSize_ReturnValue) == 0x000064, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_Normal_ReturnValue) == 0x00006C, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_Normal_ReturnValue_1) == 0x000078, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_RotateAngleAxis_ReturnValue) == 0x000084, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_Cross_VectorVector_ReturnValue) == 0x000090, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_Normal_ReturnValue_2) == 0x00009C, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_GetTargetRangeAngle_RangeAngle) == 0x0000A8, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_GetTargetRangeAngle_RangeAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_TurnToTargetVector, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'BP_MathUtility_C_TurnToTargetVector::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.CalcAnySearchBase
// 0x0098 (0x0098 - 0x0000)
struct BP_MathUtility_C_CalcAnySearchBase final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                baseLocation;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseDir;                                           // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Dir;                                             // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Location;                                        // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6349[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_634A[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_CalcAnySearchBase) == 0x000008, "Wrong alignment on BP_MathUtility_C_CalcAnySearchBase");
static_assert(sizeof(BP_MathUtility_C_CalcAnySearchBase) == 0x000098, "Wrong size on BP_MathUtility_C_CalcAnySearchBase");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, __WorldContext) == 0x000000, "Member 'BP_MathUtility_C_CalcAnySearchBase::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, baseLocation) == 0x000008, "Member 'BP_MathUtility_C_CalcAnySearchBase::baseLocation' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, BaseDir) == 0x000014, "Member 'BP_MathUtility_C_CalcAnySearchBase::BaseDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, L_Dir) == 0x000020, "Member 'BP_MathUtility_C_CalcAnySearchBase::L_Dir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, L_Location) == 0x00002C, "Member 'BP_MathUtility_C_CalcAnySearchBase::L_Location' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_GetPlayerManager_PlayerManager) == 0x000038, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000040, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_GetActorForwardVector_ReturnValue) == 0x00004C, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_GetPlayer_ReturnValue) == 0x000058, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_BreakVector_X) == 0x000060, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_BreakVector_Y) == 0x000064, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_BreakVector_Z) == 0x000068, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_IsValid_ReturnValue_2) == 0x00006C, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_Normal_ReturnValue) == 0x00007C, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcAnySearchBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000088, "Member 'BP_MathUtility_C_CalcAnySearchBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.CalcScreenRectFromBounds
// 0x0198 (0x0198 - 0x0000)
struct BP_MathUtility_C_CalcScreenRectFromBounds final
{
public:
	class USceneComponent*                        BoundsComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 BoxSize;                                           // 0x0010(0x0014)(Parm, OutParm, ZeroConstructor, NoDestructor)
	struct FBox2D                                 BoxUV;                                             // 0x0024(0x0014)(Parm, OutParm, ZeroConstructor, NoDestructor)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSuccess;                                         // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_634B[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoundSphere;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoundOrigin;                                       // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraUpperVector;                                 // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraRightVector;                                 // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 RetBoxSize;                                        // 0x0064(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor)
	struct FVector2D                              ViewSize;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerController;                                  // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue_1;    // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 CallFunc_MakeBox2D_ReturnValue;                    // 0x00A4(0x0014)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreen_ScreenPosition;      // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreen_ReturnValue;         // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_634C[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 CallFunc_MakeBox2D_ReturnValue_1;                  // 0x00F4(0x0014)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreen_ScreenPosition_1;    // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreen_ReturnValue_1;       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_634D[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 CallFunc_MakeBox2D_ReturnValue_2;                  // 0x0154(0x0014)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_634E[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_CalcScreenRectFromBounds) == 0x000008, "Wrong alignment on BP_MathUtility_C_CalcScreenRectFromBounds");
static_assert(sizeof(BP_MathUtility_C_CalcScreenRectFromBounds) == 0x000198, "Wrong size on BP_MathUtility_C_CalcScreenRectFromBounds");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, BoundsComponent) == 0x000000, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::BoundsComponent' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, __WorldContext) == 0x000008, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, BoxSize) == 0x000010, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::BoxSize' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, BoxUV) == 0x000024, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::BoxUV' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, Success) == 0x000038, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::Success' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, IsSuccess) == 0x000039, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::IsSuccess' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, BoundSphere) == 0x00003C, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::BoundSphere' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, BoundOrigin) == 0x000040, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::BoundOrigin' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CameraUpperVector) == 0x00004C, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CameraUpperVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CameraRightVector) == 0x000058, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CameraRightVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, RetBoxSize) == 0x000064, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::RetBoxSize' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, ViewSize) == 0x000078, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::ViewSize' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, PlayerController) == 0x000080, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::PlayerController' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000088, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000090, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Divide_Vector2DVector2D_ReturnValue_1) == 0x00009C, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Divide_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_MakeBox2D_ReturnValue) == 0x0000A4, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_MakeBox2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000B8, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C4, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_ProjectWorldToScreen_ScreenPosition) == 0x0000DC, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_ProjectWorldToScreen_ScreenPosition' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_ProjectWorldToScreen_ReturnValue) == 0x0000E4, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_ProjectWorldToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0000E8, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_MakeBox2D_ReturnValue_1) == 0x0000F4, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_MakeBox2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000108, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000114, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetComponentBounds_Origin) == 0x000120, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetComponentBounds_BoxExtent) == 0x00012C, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetComponentBounds_SphereRadius) == 0x000138, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00013C, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_ProjectWorldToScreen_ScreenPosition_1) == 0x000148, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_ProjectWorldToScreen_ScreenPosition_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_ProjectWorldToScreen_ReturnValue_1) == 0x000150, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_ProjectWorldToScreen_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_MakeBox2D_ReturnValue_2) == 0x000154, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_MakeBox2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetActorRightVector_ReturnValue) == 0x000168, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetActorUpVector_ReturnValue) == 0x000174, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetViewportSize_ReturnValue) == 0x000180, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CalcScreenRectFromBounds, CallFunc_GetPlayerController_ReturnValue) == 0x000190, "Member 'BP_MathUtility_C_CalcScreenRectFromBounds::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.ClampVectorLimitAngle
// 0x0058 (0x0058 - 0x0000)
struct BP_MathUtility_C_ClampVectorLimitAngle final
{
public:
	struct FVector                                BaseVector;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CheckVector;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDegree;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClampVector;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_result;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_diffAngle;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetRangeAngle_RangeAngle;           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TurnToTargetVector_NewVector;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_ClampVectorLimitAngle) == 0x000008, "Wrong alignment on BP_MathUtility_C_ClampVectorLimitAngle");
static_assert(sizeof(BP_MathUtility_C_ClampVectorLimitAngle) == 0x000058, "Wrong size on BP_MathUtility_C_ClampVectorLimitAngle");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, BaseVector) == 0x000000, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::BaseVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, CheckVector) == 0x00000C, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::CheckVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, LimitDegree) == 0x000018, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::LimitDegree' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, __WorldContext) == 0x000020, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, ClampVector) == 0x000028, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::ClampVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, L_result) == 0x000034, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::L_result' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, L_diffAngle) == 0x000040, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::L_diffAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, CallFunc_GetTargetRangeAngle_RangeAngle) == 0x000044, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::CallFunc_GetTargetRangeAngle_RangeAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, CallFunc_TurnToTargetVector_NewVector) == 0x000048, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::CallFunc_TurnToTargetVector_NewVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampVectorLimitAngle, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_MathUtility_C_ClampVectorLimitAngle::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.ClampRotationLimitAngle
// 0x0078 (0x0078 - 0x0000)
struct BP_MathUtility_C_ClampRotationLimitAngle final
{
public:
	struct FRotator                               baseRot;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CheckRot;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LimitDegree;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6350[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ClampRot;                                          // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                L_result;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_diffAngle;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorLimitAngle_ClampVector;        // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_ClampRotationLimitAngle) == 0x000008, "Wrong alignment on BP_MathUtility_C_ClampRotationLimitAngle");
static_assert(sizeof(BP_MathUtility_C_ClampRotationLimitAngle) == 0x000078, "Wrong size on BP_MathUtility_C_ClampRotationLimitAngle");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, baseRot) == 0x000000, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::baseRot' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, CheckRot) == 0x00000C, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::CheckRot' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, LimitDegree) == 0x000018, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::LimitDegree' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, __WorldContext) == 0x000020, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, ClampRot) == 0x000028, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::ClampRot' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, L_result) == 0x000034, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::L_result' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, L_diffAngle) == 0x000040, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::L_diffAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, CallFunc_GetForwardVector_ReturnValue) == 0x000044, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, CallFunc_GetForwardVector_ReturnValue_1) == 0x000050, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, CallFunc_ClampVectorLimitAngle_ClampVector) == 0x00005C, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::CallFunc_ClampVectorLimitAngle_ClampVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampRotationLimitAngle, CallFunc_MakeRotFromX_ReturnValue) == 0x000068, "Member 'BP_MathUtility_C_ClampRotationLimitAngle::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.GetTargetAngle
// 0x0068 (0x0068 - 0x0000)
struct BP_MathUtility_C_GetTargetAngle final
{
public:
	struct FVector                                BaseDirection;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetDirection;                                   // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargeDegreetAngle;                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLength;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLength;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6351[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6352[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6353[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_GetTargetAngle) == 0x000008, "Wrong alignment on BP_MathUtility_C_GetTargetAngle");
static_assert(sizeof(BP_MathUtility_C_GetTargetAngle) == 0x000068, "Wrong size on BP_MathUtility_C_GetTargetAngle");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, BaseDirection) == 0x000000, "Member 'BP_MathUtility_C_GetTargetAngle::BaseDirection' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, TargetDirection) == 0x00000C, "Member 'BP_MathUtility_C_GetTargetAngle::TargetDirection' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, __WorldContext) == 0x000018, "Member 'BP_MathUtility_C_GetTargetAngle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, TargeDegreetAngle) == 0x000020, "Member 'BP_MathUtility_C_GetTargetAngle::TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, TargetLength) == 0x000024, "Member 'BP_MathUtility_C_GetTargetAngle::TargetLength' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, BaseLength) == 0x000028, "Member 'BP_MathUtility_C_GetTargetAngle::BaseLength' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_VSize_ReturnValue) == 0x00002C, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_VSize_ReturnValue_1) == 0x000034, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000038, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_BooleanOR_ReturnValue) == 0x000039, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000040, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000048, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_CrossProduct2D_ReturnValue) == 0x000050, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_CrossProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Less_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Dot_VectorVector_ReturnValue) == 0x000058, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_DegAcos_ReturnValue) == 0x000060, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetAngle, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000064, "Member 'BP_MathUtility_C_GetTargetAngle::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.checkDistance
// 0x0040 (0x0040 - 0x0000)
struct BP_MathUtility_C_CheckDistance final
{
public:
	struct FVector                                RefPos1;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RefPos2;                                           // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreHeight;                                     // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6354[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6355[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistanceFromVector_bResult;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_CheckDistance) == 0x000008, "Wrong alignment on BP_MathUtility_C_CheckDistance");
static_assert(sizeof(BP_MathUtility_C_CheckDistance) == 0x000040, "Wrong size on BP_MathUtility_C_CheckDistance");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, RefPos1) == 0x000000, "Member 'BP_MathUtility_C_CheckDistance::RefPos1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, RefPos2) == 0x00000C, "Member 'BP_MathUtility_C_CheckDistance::RefPos2' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, Distance) == 0x000018, "Member 'BP_MathUtility_C_CheckDistance::Distance' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, bIgnoreHeight) == 0x00001C, "Member 'BP_MathUtility_C_CheckDistance::bIgnoreHeight' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, __WorldContext) == 0x000020, "Member 'BP_MathUtility_C_CheckDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, bResult) == 0x000028, "Member 'BP_MathUtility_C_CheckDistance::bResult' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'BP_MathUtility_C_CheckDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_CheckDistance, CallFunc_CheckDistanceFromVector_bResult) == 0x000038, "Member 'BP_MathUtility_C_CheckDistance::CallFunc_CheckDistanceFromVector_bResult' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.GetTargetRangeAngle
// 0x0030 (0x0030 - 0x0000)
struct BP_MathUtility_C_GetTargetRangeAngle final
{
public:
	struct FVector                                BaseDirection;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetDirection;                                   // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeAngle;                                        // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_GetTargetRangeAngle) == 0x000008, "Wrong alignment on BP_MathUtility_C_GetTargetRangeAngle");
static_assert(sizeof(BP_MathUtility_C_GetTargetRangeAngle) == 0x000030, "Wrong size on BP_MathUtility_C_GetTargetRangeAngle");
static_assert(offsetof(BP_MathUtility_C_GetTargetRangeAngle, BaseDirection) == 0x000000, "Member 'BP_MathUtility_C_GetTargetRangeAngle::BaseDirection' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetRangeAngle, TargetDirection) == 0x00000C, "Member 'BP_MathUtility_C_GetTargetRangeAngle::TargetDirection' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetRangeAngle, __WorldContext) == 0x000018, "Member 'BP_MathUtility_C_GetTargetRangeAngle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetRangeAngle, RangeAngle) == 0x000020, "Member 'BP_MathUtility_C_GetTargetRangeAngle::RangeAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetRangeAngle, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x000024, "Member 'BP_MathUtility_C_GetTargetRangeAngle::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_GetTargetRangeAngle, CallFunc_Abs_ReturnValue) == 0x000028, "Member 'BP_MathUtility_C_GetTargetRangeAngle::CallFunc_Abs_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.RandomLot
// 0x0020 (0x0020 - 0x0000)
struct BP_MathUtility_C_RandomLot final
{
public:
	float                                         HitPer;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6356[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHit;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6357[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_RandomLot) == 0x000008, "Wrong alignment on BP_MathUtility_C_RandomLot");
static_assert(sizeof(BP_MathUtility_C_RandomLot) == 0x000020, "Wrong size on BP_MathUtility_C_RandomLot");
static_assert(offsetof(BP_MathUtility_C_RandomLot, HitPer) == 0x000000, "Member 'BP_MathUtility_C_RandomLot::HitPer' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLot, __WorldContext) == 0x000008, "Member 'BP_MathUtility_C_RandomLot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLot, IsHit) == 0x000010, "Member 'BP_MathUtility_C_RandomLot::IsHit' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLot, CallFunc_RandomFloatInRange_ReturnValue) == 0x000014, "Member 'BP_MathUtility_C_RandomLot::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLot, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_MathUtility_C_RandomLot::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.RandomLotSum
// 0x0078 (0x0078 - 0x0000)
struct BP_MathUtility_C_RandomLotSum final
{
public:
	TArray<int32>                                 HitArray;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitIndex;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Value;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_HitIndex;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Sum;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6358[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6359[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_635A[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_635B[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_635C[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_RandomLotSum) == 0x000008, "Wrong alignment on BP_MathUtility_C_RandomLotSum");
static_assert(sizeof(BP_MathUtility_C_RandomLotSum) == 0x000078, "Wrong size on BP_MathUtility_C_RandomLotSum");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, HitArray) == 0x000000, "Member 'BP_MathUtility_C_RandomLotSum::HitArray' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, __WorldContext) == 0x000010, "Member 'BP_MathUtility_C_RandomLotSum::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, HitIndex) == 0x000018, "Member 'BP_MathUtility_C_RandomLotSum::HitIndex' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, L_Value) == 0x00001C, "Member 'BP_MathUtility_C_RandomLotSum::L_Value' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, L_HitIndex) == 0x000020, "Member 'BP_MathUtility_C_RandomLotSum::L_HitIndex' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, L_Sum) == 0x000024, "Member 'BP_MathUtility_C_RandomLotSum::L_Sum' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_int_Loop_Num_Variable) == 0x000028, "Member 'BP_MathUtility_C_RandomLotSum::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_MathUtility_C_RandomLotSum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_bool_True_if_break_was_hit_Variable) == 0x000038, "Member 'BP_MathUtility_C_RandomLotSum::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_MathUtility_C_RandomLotSum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'BP_MathUtility_C_RandomLotSum::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_int_Loop_Num_Variable_1) == 0x000048, "Member 'BP_MathUtility_C_RandomLotSum::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00005C, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000060, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'BP_MathUtility_C_RandomLotSum::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Less_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_BooleanAND_ReturnValue) == 0x00006D, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_RandomLotSum, CallFunc_Add_IntInt_ReturnValue_2) == 0x000070, "Member 'BP_MathUtility_C_RandomLotSum::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.ClampCircleAngle
// 0x0020 (0x0020 - 0x0000)
struct BP_MathUtility_C_ClampCircleAngle final
{
public:
	float                                         BaseAngle;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_635D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampAngle;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MathUtility_C_ClampCircleAngle) == 0x000008, "Wrong alignment on BP_MathUtility_C_ClampCircleAngle");
static_assert(sizeof(BP_MathUtility_C_ClampCircleAngle) == 0x000020, "Wrong size on BP_MathUtility_C_ClampCircleAngle");
static_assert(offsetof(BP_MathUtility_C_ClampCircleAngle, BaseAngle) == 0x000000, "Member 'BP_MathUtility_C_ClampCircleAngle::BaseAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampCircleAngle, __WorldContext) == 0x000008, "Member 'BP_MathUtility_C_ClampCircleAngle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampCircleAngle, ClampAngle) == 0x000010, "Member 'BP_MathUtility_C_ClampCircleAngle::ClampAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampCircleAngle, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_MathUtility_C_ClampCircleAngle::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampCircleAngle, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_MathUtility_C_ClampCircleAngle::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_ClampCircleAngle, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_MathUtility_C_ClampCircleAngle::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MathUtility.BP_MathUtility_C.IsInCameraSimple
// 0x0078 (0x0078 - 0x0000)
struct BP_MathUtility_C_IsInCameraSimple final
{
public:
	struct FVector                                CheckLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_635E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bin;                                               // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_635F[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_toTargetDir;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_toTargetVector;                                  // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_result;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6360[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFOVAngle_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetAngle_TargeDegreetAngle;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6361[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MathUtility_C_IsInCameraSimple) == 0x000008, "Wrong alignment on BP_MathUtility_C_IsInCameraSimple");
static_assert(sizeof(BP_MathUtility_C_IsInCameraSimple) == 0x000078, "Wrong size on BP_MathUtility_C_IsInCameraSimple");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CheckLocation) == 0x000000, "Member 'BP_MathUtility_C_IsInCameraSimple::CheckLocation' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, __WorldContext) == 0x000010, "Member 'BP_MathUtility_C_IsInCameraSimple::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, bin) == 0x000018, "Member 'BP_MathUtility_C_IsInCameraSimple::bin' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, L_toTargetDir) == 0x00001C, "Member 'BP_MathUtility_C_IsInCameraSimple::L_toTargetDir' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, L_toTargetVector) == 0x000020, "Member 'BP_MathUtility_C_IsInCameraSimple::L_toTargetVector' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, L_result) == 0x00002C, "Member 'BP_MathUtility_C_IsInCameraSimple::L_result' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000030, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_GetActorForwardVector_ReturnValue) == 0x000038, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_GetFOVAngle_ReturnValue) == 0x000044, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_GetFOVAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_GetTargetAngle_TargeDegreetAngle) == 0x000048, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_GetTargetAngle_TargeDegreetAngle' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_Abs_ReturnValue) == 0x000050, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_GetCameraLocation_ReturnValue) == 0x000054, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MathUtility_C_IsInCameraSimple, CallFunc_Normal_ReturnValue) == 0x00006C, "Member 'BP_MathUtility_C_IsInCameraSimple::CallFunc_Normal_ReturnValue' has a wrong offset!");

}

