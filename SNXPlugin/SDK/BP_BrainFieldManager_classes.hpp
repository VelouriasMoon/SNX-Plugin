#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainFieldManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "Engine_structs.hpp"
#include "ERenderTargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BrainFieldManager.BP_BrainFieldManager_C
// 0x07A0 (0x1340 - 0x0BA0)
class ABP_BrainFieldManager_C final : public ABrainFieldManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_BG;                                             // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URSSceneCaptureComponent2D*             RSSceneCaptureComponent2D;                         // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     RestorePlayerTransform;                            // 0x0BC0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           BrainFieldLevelName;                               // 0x0BD0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UserIsPlayer;                                      // 0x0BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B64[0x7];                                     // 0x0BE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULevelStreaming*>                BrainFieldLevelLists;                              // 0x0BE8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         PlayerLists;                                       // 0x0BF8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyLists;                                        // 0x0C08(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     RestoreEnemyTransform;                             // 0x0C18(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           BrainFieldPlayerLevelName;                         // 0x0C28(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                LevelLocation;                                     // 0x0C38(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B65[0x4];                                     // 0x0C44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BrainFieldUser;                                    // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvokeBrainField;                                  // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B66[0x7];                                     // 0x0C51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         NormalLevelActorLists;                             // 0x0C58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UBP_RSParticleBackgroundComponent_C*> NormalLevelParticleLists;                          // 0x0C68(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FBrainFieldRestoreFlag>         NormalLevelActorFlagLists;                         // 0x0C78(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SwitchVisibleActorSplitIndex;                      // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseVisibilityActorSplitFrame;                      // 0x0C8C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B67[0x3];                                     // 0x0C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VisibilityActorSplitFrame;                         // 0x0C90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B68[0x4];                                     // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldSequenceActor_C*          SequenceActor;                                     // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InBrainField;                                      // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B69[0x7];                                     // 0x0CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         EnemyFarLists;                                     // 0x0CA8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class APsychicGrabAttachment_C*>       GrabAttachmentList;                                // 0x0CB8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     RestorePsychicAttachmentTransform;                 // 0x0CC8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ED_BrainFieldBattleStart;                          // 0x0CD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ED_BrainFieldBattleEnd;                            // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ED_BrainFieldSwitchBG;                             // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ReleaseBFMaterial;                                 // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugForceEnd;                                     // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B6A[0x3];                                     // 0x0D19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoadLevelCounter;                                  // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelStreaming*>                BrainFieldLevelPlayerList;                         // 0x0D20(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ULevelStreaming*>                BrainFieldLevelEnemyList;                          // 0x0D30(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         BrainFieldActorLists;                              // 0x0D40(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 SystemRoot;                                        // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SequencerIndex;                                    // 0x0D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B6B[0x4];                                     // 0x0D5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         BrainFieldActorPlayerList;                         // 0x0D60(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         BrainFieldActorEnemyList;                          // 0x0D70(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FBrainFieldRestoreFlag>         BrainFieldActorFlagLists;                          // 0x0D80(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FBrainFieldRestoreFlag>         BrainFieldActorUserFlagLists;                      // 0x0D90(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       BrainFieldParticleComponentLists;                  // 0x0DA0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class ADirectionalLight*>              BrainFieldLightLists;                              // 0x0DB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     BrainFieldPlayerTransform;                         // 0x0DC0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CallCloseEventEnd;                                 // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B6C[0xF];                                     // 0x0DD1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BFUserLastTransform;                               // 0x0DE0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnPsychicObject;                                // 0x0E10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B6D[0x7];                                     // 0x0E11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MonitorActor;                                      // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ED_ChangeMonitorState;                             // 0x0E20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          LevelLoadEnd;                                      // 0x0E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B6E[0x7];                                     // 0x0E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BrainFieldUserSub;                                 // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldEndType                            EndType;                                           // 0x0E40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B6F[0x7];                                     // 0x0E41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       ReleaseBFMaterialAsset;                            // 0x0E48(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   MonitorActorClassAsset;                            // 0x0E70(0x0028)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             BGStaticMeshAsset;                                 // 0x0E98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          OverrideBF;                                        // 0x0EC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPerformance;                                     // 0x0EC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B70[0x6];                                     // 0x0EC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BrainFieldEnemyLevelName;                          // 0x0EC8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsEventStart;                                      // 0x0ED8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B71[0x7];                                     // 0x0ED9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFlagListStruct>                EnemyComponentRestoreFlags;                        // 0x0EE0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FFlagListStruct                        EnemyRestoreFlags;                                 // 0x0EF0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class ACameraActor*                           WatchCamera;                                       // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WatchBaseLocation;                                 // 0x0F08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WatchLocation;                                     // 0x0F14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FreeCameraWatchMode;                               // 0x0F20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B72[0x7];                                     // 0x0F21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FieldTimeColorCurve;                               // 0x0F28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BrainCrashAttacker;                                // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerCameraWatchMode;                             // 0x0F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B73[0x3];                                     // 0x0F39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerCameraWatchTargetOffset;                     // 0x0F3C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerCameraWatchPitch;                            // 0x0F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PlayerCameraWatchBaseRotation;                     // 0x0F4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlayerCameraWatchEaseTime;                         // 0x0F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerCameraWatchEaseTimeMax;                      // 0x0F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerHidden;                                    // 0x0F60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugForceBrainCrashENPCOverwrite;                 // 0x0F61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugForceFieldColor;                              // 0x0F62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B74[0x1];                                     // 0x0F63(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugForceFieldColorSide;                          // 0x0F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugForceFieldColorGrayScale;                     // 0x0F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B75[0x4];                                     // 0x0F6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BrainCrashAttackerSub;                             // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B76[0x8];                                     // 0x0F78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ENPCStartTransform;                                // 0x0F80(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         BrainFieldUserList;                                // 0x0FB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         OverrideLastBrainFieldUserList;                    // 0x0FC0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UBP_RSParticleBackgroundComponent_C*> BrainFieldBGEffect;                                // 0x0FD0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	struct FBrainFieldRestoreFlag                 NormalLevelParticleFlag;                           // 0x0FE0(0x0028)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	bool                                          IsEnemyHidden;                                     // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B77[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       TimeBFMaterialAsset;                               // 0x1010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TimeBFMaterial;                                    // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            HiddenBGPrimitives;                                // 0x1040(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class FName                                   BrainFieldNaviLevelName;                           // 0x1050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BrainFieldCollisionCommonLevelName;                // 0x1058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CollisionLevelPath;                                // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NavimeshLevelPath;                                 // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomCollision;                                // 0x1070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B78[0xF];                                     // 0x1071(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrainFieldSettingsLocation            CustomCollisionSettings;                           // 0x1080(0x0220)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	TArray<struct FTransform>                     EventEnemyTransforms;                              // 0x12A0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     ENPCSequencerTransform;                            // 0x12B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DebugDispEnemyWave;                                // 0x12C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B79[0x7];                                     // 0x12C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldCollisions_C*             PackageRefCollision;                               // 0x12C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BrainFieldNavimeshCommonLevelName;                 // 0x12D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestCollisionLevelVisible;                      // 0x12D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FiniashCollisionLevelVisible;                      // 0x12D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RequestNavimeshVisible;                            // 0x12DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B7A[0x5];                                     // 0x12DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ENPCCustomStencils;                                // 0x12E0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DelayedBattleFieldOut;                             // 0x12F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B7B[0x3];                                     // 0x12F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DelayedBattleFieldOutGroupId;                      // 0x12F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  RestorePlayerTransformValid;                       // 0x12F8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  PlayerHIdden;                                      // 0x1308(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   InvalidDamageNameENPCClose;                        // 0x1318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetInvalidDamageENPCClose;                         // 0x1320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPlayerID                                     ENPCLoadPlayerID;                                  // 0x1321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InSetupMenu;                                       // 0x1322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DelayedBattleFieldOutIsBoss;                       // 0x1323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreENPCPlayerLockOn;                           // 0x1324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B7C[0x3];                                     // 0x1325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     RestorePlayerTransform2;                           // 0x1328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          InSpField;                                         // 0x1338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInvokeSpField;                                    // 0x1339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ED_BrainFieldBattleStart__DelegateSignature();
	void ED_BrainFieldBattleEnd__DelegateSignature(EBrainFieldEndType Param_EndType);
	void ED_BrainFieldSwitchBG__DelegateSignature(bool IsBrainField);
	void ED_ChangeMonitorState__DelegateSignature(EBrainFieldMonitorState MonitorState);
	void ExecuteUbergraph_BP_BrainFieldManager(int32 EntryPoint);
	void DelayBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ResetRenderTarget(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget);
	void SetBGRenderTarget(class UTextureRenderTarget2D* Target);
	void OnReadyDebManager();
	void OnChangeMonitorState(EBrainFieldMonitorState MonitorState);
	void OnChangedDebugForceEnd(const class ADebuggingItemBool* InItem);
	void Private_LevelLoaded();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Private_DelayPlayerPositionCheck();
	void PrivateSetDynamicShadowDelay(bool Enable);
	void PrivateSetDynamicShadow(bool Enable);
	void Private_DelayedHood(const TArray<class AActor*>& Actors, const bool Visible);
	void PrivateEvent_PlaySequencerENPCBrainField(bool UseRefresh);
	void Private_UnloadCollisionLevel();
	void Private_LoadCollisionLevel();
	void PrivateEvent_HiddenRuntimeLevels();
	void PrivateEvent_VisibleRuntimeLevels();
	void Private_UnloadNavimeshLevels();
	void Private_LoadNavimeshLevels();
	void Private_PerformEndWait(bool MoveBrainField);
	void Private_SwitchVisibleActorSplitFrame(bool VisibleBrainField, int32 ObjectNum);
	void Private_PerformEndWaitFinish();
	void StartBrainField(class AActor* User, class AActor* SubUser, bool IsEvent);
	void GetPlayerList(TArray<class AActor*>* Param_PlayerLists);
	void EndBrainField(EBrainFieldEndType Param_EndType, class AActor* Param_BrainCrashAttacker, class AActor* Param_BrainCrashAttackerSub);
	void PerformOpenEnd(bool InGameStart);
	void PerformCloseEnd();
	void GetBrainFieldEnemyList(bool InGameStart, bool* AllTrain, TArray<class AActor*>* TargetEnemyListBattleField, TArray<class AActor*>* TargetEnemyListBattleFieldWave, TArray<class AActor*>* TargetEnemyListNormal, TArray<class AActor*>* FarEnemyLists);
	void PerformOpenStartInnerOne(bool IsUser, TArray<class AActor*>& Lists, TArray<struct FTransform>& Transforms, bool InGameStart, TArray<bool>& OutValid);
	void PerformOpenEndInnerOne(bool IsUser, TArray<class AActor*>& Lists, bool InGameStart);
	void PerformCloseStartInnerOne(bool IsUser, TArray<class AActor*>& Lists);
	void PerformCloseEndInnerOne(bool IsUser, TArray<class AActor*>& Lists);
	void PerformOpenStart(bool InGameStart);
	void PerformCloseStart(bool PlaySequencer);
	void GetBrainFieldPlayerTransform(TArray<struct FTransform>* Transforms);
	void SwitchVisibleBrainFieldLevel(bool VisibleBrainField);
	void IsFinishBrainFieldVisible(bool* Finish);
	void StartFieldBattle();
	void EndFieldBattle();
	void IsFinishNormalFieldVisible(bool* Finish);
	void GetNormalLevelActorList(TArray<class AActor*>* LevelLists, TArray<class UBP_RSParticleBackgroundComponent_C*>* LevelParticleList);
	void VisibleNormalActors(bool IsVisible, int32 ObjectNum, int32& VisibleSplitIndex, TArray<class AActor*>& ActorList, TArray<struct FBrainFieldRestoreFlag>& SettingFlags);
	void JumpBrainFieldTransform();
	void JumpNormalTransform();
	void PlayPerformSequencer(bool MoveBrainField, int32 Param_Index, bool* StartPlay);
	void CalcBrainFieldPsychicAttachmentTransform(class AActor* PsychicActor, const struct FTransform& LastPlayerTransform, const struct FTransform& NewPlayerTransform, struct FTransform* NewTransform);
	void CheckFinishCondition(bool* IsFinish);
	void DebugForceEndField(bool IsForce);
	void PostLoadedLevel();
	void SetupPlayerMaterial(class ARSBattlePlayer_C* Player, bool VisibleBrainField);
	void SetupEnemyEnabled(bool Enabled);
	void StartUserInput();
	void SetupEnemyEnabledInternal(bool Enabled, class AActor* InEnemy, int32 InEnemyIndex, TArray<bool>& EnemyFlagList, TArray<bool>* ComponentsFlagList);
	void SetupGrabObjectEnabled(bool Enabled);
	void SwitchParticleSystem(bool Enabled);
	void IsInvokeBrainField(bool* Param_InvokeBrainField);
	void SetBrainFieldLightVisible(bool Visible);
	void PerformMoveBrainFieldInnerOne(bool IsUser, TArray<class AActor*>& Lists);
	void PerformMoveNormalFieldInnerOne(bool IsUser, TArray<class AActor*>& Lists);
	void GetEndType(EBrainFieldEndType* Param_EndType);
	void IsReceiveBrainCrashGameOver(bool* IsGameOver);
	void SwitchGameOver();
	void LoadAsset();
	void PrivateSwitchBGSide(bool Param_UserIsPlayer);
	void PrivateMoveBFPlayerTransform(bool UseDynamicEventRelative);
	void OverrideBrainField(class AActor* User, class AActor* SubUser);
	void PerformOverrideStart(bool PlaySequencer);
	void PrivateSetupBFVisible();
	void PrivateSetupPartyMaterial(bool VisibleBrainField);
	void PrivateSetupMaterial(class AActor* Actor, bool VisibleBrainField, bool SetupBrainCode);
	void PerformOverrideStartInnerOne(bool IsUser, TArray<class AActor*>& Lists);
	void Is_Performance_Sequencer(bool* IsPerform);
	void EventOpenUser(class AActor* User, class AActor* SubUser);
	void EventClose();
	void PrivateSetupENPCStencil(class AActor* Target, bool Set, int32 Param_Index);
	void LoadLevels();
	void PrivateSwitchVisibleTeamActors(bool IsPlayer, bool IsVisible);
	void IsEventStartup(bool* IsEvent);
	void LoadENPC(class AActor* ENPCActor, EBrainFieldENPCType ENPCType);
	void UnloadENPC();
	void EventOpenUserEnd();
	void StartFreeCameraWatchUser(float BlendTimeSeconds, const struct FVector& WatchOffset);
	void PlayerStopEvent();
	void PrivateUpdateFreeCameraWatchUser(float DeltaSeconds);
	void BrainFieldUserHoodON(bool HoodON);
	void SetPlayerCameraWatchUser(const struct FVector& TargetOffset, float Pitch);
	void PrivateUpdateFieldTimeColor(float DeltaSeconds);
	void EventReceiveBrainCrashCheckENPC();
	void UnloadENPCCheck(class ARSBattlePlayer_C* Player);
	void GetBrainFieldUser(class AActor** User);
	void BeginPlayerCameraWatchUser(const struct FVector& TargetOffset, float Pitch, float EaseTime);
	void EndPlayerCameraWatchUser();
	void PrivateUpdatePlayerCameraWatchUser(float DeltaSeconds);
	void SetVisiblePlayer(bool Visible);
	void SetDebugForceBrainCrashENPCOverwrite(bool Enable);
	void SetDebugForceFieldColor(bool Enable, float SideColor, float Grayscale);
	void SetENPCStartTransform(const struct FTransform& Transform);
	void GetENPCStartTransform(struct FTransform* Transform);
	void GetBrainFieldUserList(TArray<class AActor*>* User);
	void PrivateSetupBrainFieldUser(class AActor* User, class AActor* SubUser);
	void DebugDispEnemy();
	void PrivateOnSpawnBrainFieldBGEffect(class UBP_RSParticleBackgroundComponent_C* Emitter);
	void ReloadPlayerSequencer(EPlayerID PlayerId);
	void VisibleNormalParticles(bool IsVisible, TArray<class UBP_RSParticleBackgroundComponent_C*>& ParticleList, struct FBrainFieldRestoreFlag& RestoreFlag, struct FBrainFieldRestoreFlag* SetRestoreFlag);
	void SetVisibleEnemy(bool Visible);
	void SetTimePostRate(float Rate);
	void HiddenNearBG();
	void RestoreVisibleNearBG();
	void CheckCustomCollision();
	void GetBrainFieldPlayerTransformCustomCollision(TArray<struct FTransform>* Transforms);
	void PrivatePostLoadCollisionLevel();
	void Update_ENPCSequence_Time();
	void HasSeamlessEvent(bool* HasEvent);
	void SetDamageStep(int32 Step);
	void UndoENpcDriveSetting(class AActor* Actor);
	void SetupEnemyWaveTransform(TArray<class ARSBattleCharacter_C*>& WaveEnemyList);
	void SetupBrainFieldMaterial(ERSPartyPlayerKind Kind);
	bool IsInvokeBrainField_FromNative();
	void PrivateCheckUseSpawnPsychicObject(bool* UseSpawn);
	bool GetUserIsPlayer();
	void PrivateLoadLevelVisible();
	void EventCheckUsePsychicSpawn();
	void SetENPCCustomStencil(bool Set);
	bool InBranField_FromNative();
	bool IsPerformanceSequencer_FromNative();
	void PlayPerformSequencerInternal(bool UseRefresh);
	void DebugSetMonitorIndex(EPlayerID Param_Index);
	void SetDelayedBattleFieldEnemyEnabled(int32 GroupID, bool IsBossInBattleField);
	void SetupJumpBFEnemyAvatar();
	void PrivateOverwriteRestoreTransform();
	void PrivateSetInvalidDamagePlayers(bool Invalid, class FName ClaimantName);
	bool IsNeedFrameWait();
	void ChangeBrainFieldEnemy(class AActor* NewEnemy, class AActor* OldEnemy);
	void HasCustomRestoreTransform(bool* UseRestoreTransform);
	void GetCustomCollisionSettings(struct FBrainFieldSettingsLocation* Settings, bool* Param_UseCustomCollision);
	void SetupMenu(bool InMenu);
	void EventENPCWhiteoutEnd();
	void PrivateAdjustPlayerOpenSequenceLocation();
	void Private_Player_Position_Check();
	void RemoveEnpcFromEnemyList(TArray<class AActor*>& RefEnemyList, TArray<class AActor*>* EnemyReturn, TArray<class AActor*>* FarEnemyReturn);
	void SetInSpField(bool Param_InSpField);
	void SetInvokeSpField(bool InInvoke);

	void InBranField(bool* InBrainDield) const;
	void IsSpawnPsychicObject(bool* IsSpawn) const;
	void IsUserIsPlayer(bool* IsPlayer) const;
	void GetENPCSequencerType(EBrainFieldSequencerType* Type) const;
	void IsEnemyLastOne(bool* IsLastOne) const;
	void IsInFieldActorInEnemyList(class AActor* SearchActor, bool* Result) const;
	void IsInSpField(bool* Param_InSpField) const;
	void IsInvokeSpField(bool* InvokeSpField) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BrainFieldManager_C">();
	}
	static class ABP_BrainFieldManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BrainFieldManager_C>();
	}
};
static_assert(alignof(ABP_BrainFieldManager_C) == 0x000010, "Wrong alignment on ABP_BrainFieldManager_C");
static_assert(sizeof(ABP_BrainFieldManager_C) == 0x001340, "Wrong size on ABP_BrainFieldManager_C");
static_assert(offsetof(ABP_BrainFieldManager_C, UberGraphFrame) == 0x000BA0, "Member 'ABP_BrainFieldManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SM_BG) == 0x000BA8, "Member 'ABP_BrainFieldManager_C::SM_BG' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RSSceneCaptureComponent2D) == 0x000BB0, "Member 'ABP_BrainFieldManager_C::RSSceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DefaultSceneRoot) == 0x000BB8, "Member 'ABP_BrainFieldManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RestorePlayerTransform) == 0x000BC0, "Member 'ABP_BrainFieldManager_C::RestorePlayerTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldLevelName) == 0x000BD0, "Member 'ABP_BrainFieldManager_C::BrainFieldLevelName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, UserIsPlayer) == 0x000BE0, "Member 'ABP_BrainFieldManager_C::UserIsPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldLevelLists) == 0x000BE8, "Member 'ABP_BrainFieldManager_C::BrainFieldLevelLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerLists) == 0x000BF8, "Member 'ABP_BrainFieldManager_C::PlayerLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, EnemyLists) == 0x000C08, "Member 'ABP_BrainFieldManager_C::EnemyLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RestoreEnemyTransform) == 0x000C18, "Member 'ABP_BrainFieldManager_C::RestoreEnemyTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldPlayerLevelName) == 0x000C28, "Member 'ABP_BrainFieldManager_C::BrainFieldPlayerLevelName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, LevelLocation) == 0x000C38, "Member 'ABP_BrainFieldManager_C::LevelLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldUser) == 0x000C48, "Member 'ABP_BrainFieldManager_C::BrainFieldUser' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, InvokeBrainField) == 0x000C50, "Member 'ABP_BrainFieldManager_C::InvokeBrainField' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, NormalLevelActorLists) == 0x000C58, "Member 'ABP_BrainFieldManager_C::NormalLevelActorLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, NormalLevelParticleLists) == 0x000C68, "Member 'ABP_BrainFieldManager_C::NormalLevelParticleLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, NormalLevelActorFlagLists) == 0x000C78, "Member 'ABP_BrainFieldManager_C::NormalLevelActorFlagLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SwitchVisibleActorSplitIndex) == 0x000C88, "Member 'ABP_BrainFieldManager_C::SwitchVisibleActorSplitIndex' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, UseVisibilityActorSplitFrame) == 0x000C8C, "Member 'ABP_BrainFieldManager_C::UseVisibilityActorSplitFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, VisibilityActorSplitFrame) == 0x000C90, "Member 'ABP_BrainFieldManager_C::VisibilityActorSplitFrame' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SequenceActor) == 0x000C98, "Member 'ABP_BrainFieldManager_C::SequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, InBrainField) == 0x000CA0, "Member 'ABP_BrainFieldManager_C::InBrainField' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, EnemyFarLists) == 0x000CA8, "Member 'ABP_BrainFieldManager_C::EnemyFarLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, GrabAttachmentList) == 0x000CB8, "Member 'ABP_BrainFieldManager_C::GrabAttachmentList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RestorePsychicAttachmentTransform) == 0x000CC8, "Member 'ABP_BrainFieldManager_C::RestorePsychicAttachmentTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ED_BrainFieldBattleStart) == 0x000CD8, "Member 'ABP_BrainFieldManager_C::ED_BrainFieldBattleStart' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ED_BrainFieldBattleEnd) == 0x000CE8, "Member 'ABP_BrainFieldManager_C::ED_BrainFieldBattleEnd' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ED_BrainFieldSwitchBG) == 0x000CF8, "Member 'ABP_BrainFieldManager_C::ED_BrainFieldSwitchBG' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PostProcess) == 0x000D08, "Member 'ABP_BrainFieldManager_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ReleaseBFMaterial) == 0x000D10, "Member 'ABP_BrainFieldManager_C::ReleaseBFMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DebugForceEnd) == 0x000D18, "Member 'ABP_BrainFieldManager_C::DebugForceEnd' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, LoadLevelCounter) == 0x000D1C, "Member 'ABP_BrainFieldManager_C::LoadLevelCounter' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldLevelPlayerList) == 0x000D20, "Member 'ABP_BrainFieldManager_C::BrainFieldLevelPlayerList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldLevelEnemyList) == 0x000D30, "Member 'ABP_BrainFieldManager_C::BrainFieldLevelEnemyList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldActorLists) == 0x000D40, "Member 'ABP_BrainFieldManager_C::BrainFieldActorLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SystemRoot) == 0x000D50, "Member 'ABP_BrainFieldManager_C::SystemRoot' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SequencerIndex) == 0x000D58, "Member 'ABP_BrainFieldManager_C::SequencerIndex' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldActorPlayerList) == 0x000D60, "Member 'ABP_BrainFieldManager_C::BrainFieldActorPlayerList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldActorEnemyList) == 0x000D70, "Member 'ABP_BrainFieldManager_C::BrainFieldActorEnemyList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldActorFlagLists) == 0x000D80, "Member 'ABP_BrainFieldManager_C::BrainFieldActorFlagLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldActorUserFlagLists) == 0x000D90, "Member 'ABP_BrainFieldManager_C::BrainFieldActorUserFlagLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldParticleComponentLists) == 0x000DA0, "Member 'ABP_BrainFieldManager_C::BrainFieldParticleComponentLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldLightLists) == 0x000DB0, "Member 'ABP_BrainFieldManager_C::BrainFieldLightLists' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldPlayerTransform) == 0x000DC0, "Member 'ABP_BrainFieldManager_C::BrainFieldPlayerTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, CallCloseEventEnd) == 0x000DD0, "Member 'ABP_BrainFieldManager_C::CallCloseEventEnd' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BFUserLastTransform) == 0x000DE0, "Member 'ABP_BrainFieldManager_C::BFUserLastTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SpawnPsychicObject) == 0x000E10, "Member 'ABP_BrainFieldManager_C::SpawnPsychicObject' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, MonitorActor) == 0x000E18, "Member 'ABP_BrainFieldManager_C::MonitorActor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ED_ChangeMonitorState) == 0x000E20, "Member 'ABP_BrainFieldManager_C::ED_ChangeMonitorState' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, LevelLoadEnd) == 0x000E30, "Member 'ABP_BrainFieldManager_C::LevelLoadEnd' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldUserSub) == 0x000E38, "Member 'ABP_BrainFieldManager_C::BrainFieldUserSub' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, EndType) == 0x000E40, "Member 'ABP_BrainFieldManager_C::EndType' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ReleaseBFMaterialAsset) == 0x000E48, "Member 'ABP_BrainFieldManager_C::ReleaseBFMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, MonitorActorClassAsset) == 0x000E70, "Member 'ABP_BrainFieldManager_C::MonitorActorClassAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BGStaticMeshAsset) == 0x000E98, "Member 'ABP_BrainFieldManager_C::BGStaticMeshAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, OverrideBF) == 0x000EC0, "Member 'ABP_BrainFieldManager_C::OverrideBF' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, IsPerformance) == 0x000EC1, "Member 'ABP_BrainFieldManager_C::IsPerformance' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldEnemyLevelName) == 0x000EC8, "Member 'ABP_BrainFieldManager_C::BrainFieldEnemyLevelName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, IsEventStart) == 0x000ED8, "Member 'ABP_BrainFieldManager_C::IsEventStart' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, EnemyComponentRestoreFlags) == 0x000EE0, "Member 'ABP_BrainFieldManager_C::EnemyComponentRestoreFlags' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, EnemyRestoreFlags) == 0x000EF0, "Member 'ABP_BrainFieldManager_C::EnemyRestoreFlags' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, WatchCamera) == 0x000F00, "Member 'ABP_BrainFieldManager_C::WatchCamera' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, WatchBaseLocation) == 0x000F08, "Member 'ABP_BrainFieldManager_C::WatchBaseLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, WatchLocation) == 0x000F14, "Member 'ABP_BrainFieldManager_C::WatchLocation' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, FreeCameraWatchMode) == 0x000F20, "Member 'ABP_BrainFieldManager_C::FreeCameraWatchMode' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, FieldTimeColorCurve) == 0x000F28, "Member 'ABP_BrainFieldManager_C::FieldTimeColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainCrashAttacker) == 0x000F30, "Member 'ABP_BrainFieldManager_C::BrainCrashAttacker' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerCameraWatchMode) == 0x000F38, "Member 'ABP_BrainFieldManager_C::PlayerCameraWatchMode' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerCameraWatchTargetOffset) == 0x000F3C, "Member 'ABP_BrainFieldManager_C::PlayerCameraWatchTargetOffset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerCameraWatchPitch) == 0x000F48, "Member 'ABP_BrainFieldManager_C::PlayerCameraWatchPitch' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerCameraWatchBaseRotation) == 0x000F4C, "Member 'ABP_BrainFieldManager_C::PlayerCameraWatchBaseRotation' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerCameraWatchEaseTime) == 0x000F58, "Member 'ABP_BrainFieldManager_C::PlayerCameraWatchEaseTime' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerCameraWatchEaseTimeMax) == 0x000F5C, "Member 'ABP_BrainFieldManager_C::PlayerCameraWatchEaseTimeMax' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, IsPlayerHidden) == 0x000F60, "Member 'ABP_BrainFieldManager_C::IsPlayerHidden' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DebugForceBrainCrashENPCOverwrite) == 0x000F61, "Member 'ABP_BrainFieldManager_C::DebugForceBrainCrashENPCOverwrite' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DebugForceFieldColor) == 0x000F62, "Member 'ABP_BrainFieldManager_C::DebugForceFieldColor' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DebugForceFieldColorSide) == 0x000F64, "Member 'ABP_BrainFieldManager_C::DebugForceFieldColorSide' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DebugForceFieldColorGrayScale) == 0x000F68, "Member 'ABP_BrainFieldManager_C::DebugForceFieldColorGrayScale' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainCrashAttackerSub) == 0x000F70, "Member 'ABP_BrainFieldManager_C::BrainCrashAttackerSub' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ENPCStartTransform) == 0x000F80, "Member 'ABP_BrainFieldManager_C::ENPCStartTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldUserList) == 0x000FB0, "Member 'ABP_BrainFieldManager_C::BrainFieldUserList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, OverrideLastBrainFieldUserList) == 0x000FC0, "Member 'ABP_BrainFieldManager_C::OverrideLastBrainFieldUserList' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldBGEffect) == 0x000FD0, "Member 'ABP_BrainFieldManager_C::BrainFieldBGEffect' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, NormalLevelParticleFlag) == 0x000FE0, "Member 'ABP_BrainFieldManager_C::NormalLevelParticleFlag' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, IsEnemyHidden) == 0x001008, "Member 'ABP_BrainFieldManager_C::IsEnemyHidden' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, TimeBFMaterialAsset) == 0x001010, "Member 'ABP_BrainFieldManager_C::TimeBFMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, TimeBFMaterial) == 0x001038, "Member 'ABP_BrainFieldManager_C::TimeBFMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, HiddenBGPrimitives) == 0x001040, "Member 'ABP_BrainFieldManager_C::HiddenBGPrimitives' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldNaviLevelName) == 0x001050, "Member 'ABP_BrainFieldManager_C::BrainFieldNaviLevelName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldCollisionCommonLevelName) == 0x001058, "Member 'ABP_BrainFieldManager_C::BrainFieldCollisionCommonLevelName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, CollisionLevelPath) == 0x001060, "Member 'ABP_BrainFieldManager_C::CollisionLevelPath' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, NavimeshLevelPath) == 0x001068, "Member 'ABP_BrainFieldManager_C::NavimeshLevelPath' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, UseCustomCollision) == 0x001070, "Member 'ABP_BrainFieldManager_C::UseCustomCollision' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, CustomCollisionSettings) == 0x001080, "Member 'ABP_BrainFieldManager_C::CustomCollisionSettings' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, EventEnemyTransforms) == 0x0012A0, "Member 'ABP_BrainFieldManager_C::EventEnemyTransforms' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ENPCSequencerTransform) == 0x0012B0, "Member 'ABP_BrainFieldManager_C::ENPCSequencerTransform' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DebugDispEnemyWave) == 0x0012C0, "Member 'ABP_BrainFieldManager_C::DebugDispEnemyWave' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PackageRefCollision) == 0x0012C8, "Member 'ABP_BrainFieldManager_C::PackageRefCollision' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, BrainFieldNavimeshCommonLevelName) == 0x0012D0, "Member 'ABP_BrainFieldManager_C::BrainFieldNavimeshCommonLevelName' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RequestCollisionLevelVisible) == 0x0012D8, "Member 'ABP_BrainFieldManager_C::RequestCollisionLevelVisible' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, FiniashCollisionLevelVisible) == 0x0012D9, "Member 'ABP_BrainFieldManager_C::FiniashCollisionLevelVisible' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RequestNavimeshVisible) == 0x0012DA, "Member 'ABP_BrainFieldManager_C::RequestNavimeshVisible' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ENPCCustomStencils) == 0x0012E0, "Member 'ABP_BrainFieldManager_C::ENPCCustomStencils' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DelayedBattleFieldOut) == 0x0012F0, "Member 'ABP_BrainFieldManager_C::DelayedBattleFieldOut' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DelayedBattleFieldOutGroupId) == 0x0012F4, "Member 'ABP_BrainFieldManager_C::DelayedBattleFieldOutGroupId' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RestorePlayerTransformValid) == 0x0012F8, "Member 'ABP_BrainFieldManager_C::RestorePlayerTransformValid' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, PlayerHIdden) == 0x001308, "Member 'ABP_BrainFieldManager_C::PlayerHIdden' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, InvalidDamageNameENPCClose) == 0x001318, "Member 'ABP_BrainFieldManager_C::InvalidDamageNameENPCClose' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, SetInvalidDamageENPCClose) == 0x001320, "Member 'ABP_BrainFieldManager_C::SetInvalidDamageENPCClose' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, ENPCLoadPlayerID) == 0x001321, "Member 'ABP_BrainFieldManager_C::ENPCLoadPlayerID' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, InSetupMenu) == 0x001322, "Member 'ABP_BrainFieldManager_C::InSetupMenu' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, DelayedBattleFieldOutIsBoss) == 0x001323, "Member 'ABP_BrainFieldManager_C::DelayedBattleFieldOutIsBoss' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RestoreENPCPlayerLockOn) == 0x001324, "Member 'ABP_BrainFieldManager_C::RestoreENPCPlayerLockOn' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, RestorePlayerTransform2) == 0x001328, "Member 'ABP_BrainFieldManager_C::RestorePlayerTransform2' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, InSpField) == 0x001338, "Member 'ABP_BrainFieldManager_C::InSpField' has a wrong offset!");
static_assert(offsetof(ABP_BrainFieldManager_C, bInvokeSpField) == 0x001339, "Member 'ABP_BrainFieldManager_C::bInvokeSpField' has a wrong offset!");

}

