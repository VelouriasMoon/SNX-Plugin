#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyFixParam

#include "Basic.hpp"

#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyFixParam.BP_EnemyFixParam_C
// 0x0068 (0x0190 - 0x0128)
class UBP_EnemyFixParam_C final : public UEnemyFixParamComponentBase
{
public:
	float                                         ChangeCrashHighRate;                               // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashDamageTime;                                   // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SensingHeight;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnableMoveHeight;                                  // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AIActionHeight;                                    // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchLMotionScale;                                // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionSWeakCorrectionValue;                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactionLWeakCorrectionValue;                      // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownWeakCorrectionValue;                           // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BCChancePlayRate;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetectIcon_FindSeconds;                            // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashWeakCorrectionValue;                          // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteReactionSBonus;                               // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteReactionLBonus;                               // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteDownBonus;                                    // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownCrashBonus;                                    // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_RangeTop;                             // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_RangeMiddle;                          // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_HeightTop;                            // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_IntervalTop;                          // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_LimitTop;                             // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_IntervalMiddle;                       // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_LimitMiddle;                          // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_IntervalBottom;                       // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickPriority_LimitBottom;                          // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyFixParam_C">();
	}
	static class UBP_EnemyFixParam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EnemyFixParam_C>();
	}
};
static_assert(alignof(UBP_EnemyFixParam_C) == 0x000008, "Wrong alignment on UBP_EnemyFixParam_C");
static_assert(sizeof(UBP_EnemyFixParam_C) == 0x000190, "Wrong size on UBP_EnemyFixParam_C");
static_assert(offsetof(UBP_EnemyFixParam_C, ChangeCrashHighRate) == 0x000128, "Member 'UBP_EnemyFixParam_C::ChangeCrashHighRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, CrashDamageTime) == 0x00012C, "Member 'UBP_EnemyFixParam_C::CrashDamageTime' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, SensingHeight) == 0x000130, "Member 'UBP_EnemyFixParam_C::SensingHeight' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, EnableMoveHeight) == 0x000134, "Member 'UBP_EnemyFixParam_C::EnableMoveHeight' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, AIActionHeight) == 0x000138, "Member 'UBP_EnemyFixParam_C::AIActionHeight' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, LaunchLMotionScale) == 0x00013C, "Member 'UBP_EnemyFixParam_C::LaunchLMotionScale' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, ReactionSWeakCorrectionValue) == 0x000140, "Member 'UBP_EnemyFixParam_C::ReactionSWeakCorrectionValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, ReactionLWeakCorrectionValue) == 0x000144, "Member 'UBP_EnemyFixParam_C::ReactionLWeakCorrectionValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, DownWeakCorrectionValue) == 0x000148, "Member 'UBP_EnemyFixParam_C::DownWeakCorrectionValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, BCChancePlayRate) == 0x00014C, "Member 'UBP_EnemyFixParam_C::BCChancePlayRate' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, DetectIcon_FindSeconds) == 0x000150, "Member 'UBP_EnemyFixParam_C::DetectIcon_FindSeconds' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, CrashWeakCorrectionValue) == 0x000154, "Member 'UBP_EnemyFixParam_C::CrashWeakCorrectionValue' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, RouteReactionSBonus) == 0x000158, "Member 'UBP_EnemyFixParam_C::RouteReactionSBonus' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, RouteReactionLBonus) == 0x00015C, "Member 'UBP_EnemyFixParam_C::RouteReactionLBonus' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, RouteDownBonus) == 0x000160, "Member 'UBP_EnemyFixParam_C::RouteDownBonus' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, DownCrashBonus) == 0x000164, "Member 'UBP_EnemyFixParam_C::DownCrashBonus' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_RangeTop) == 0x000168, "Member 'UBP_EnemyFixParam_C::TickPriority_RangeTop' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_RangeMiddle) == 0x00016C, "Member 'UBP_EnemyFixParam_C::TickPriority_RangeMiddle' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_HeightTop) == 0x000170, "Member 'UBP_EnemyFixParam_C::TickPriority_HeightTop' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_IntervalTop) == 0x000174, "Member 'UBP_EnemyFixParam_C::TickPriority_IntervalTop' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_LimitTop) == 0x000178, "Member 'UBP_EnemyFixParam_C::TickPriority_LimitTop' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_IntervalMiddle) == 0x00017C, "Member 'UBP_EnemyFixParam_C::TickPriority_IntervalMiddle' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_LimitMiddle) == 0x000180, "Member 'UBP_EnemyFixParam_C::TickPriority_LimitMiddle' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_IntervalBottom) == 0x000184, "Member 'UBP_EnemyFixParam_C::TickPriority_IntervalBottom' has a wrong offset!");
static_assert(offsetof(UBP_EnemyFixParam_C, TickPriority_LimitBottom) == 0x000188, "Member 'UBP_EnemyFixParam_C::TickPriority_LimitBottom' has a wrong offset!");

}

