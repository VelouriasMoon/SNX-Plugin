#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_OptimizeSwitchMaterial

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_OptimizeSwitchMaterial.BPC_OptimizeSwitchMaterial_C
// 0x0050 (0x02E0 - 0x0290)
class UBPC_OptimizeSwitchMaterial_C : public UOptimizeSwitchMaterialComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         NowSettingNo;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InEvent;                                           // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_380B[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMaterialControllerComponent*    OwnerDynamicMaterialController;                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BodyMeshLayer;                                     // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_380C[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 WeaponMeshLayers;                                  // 0x02B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 AttachmentMeshLayers;                              // 0x02C0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class UBP_WeaponManageComponent_C*            OwnerWeaponManageComponent;                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InPush;                                            // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PushRestoreActive;                                 // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPC_OptimizeSwitchMaterial(int32 EntryPoint);
	void Initialize(class USkeletalMeshComponent* SkelMeshComp);
	void InitializePlayer(class ARSBattlePlayer_C* Player);
	void Initialize_Menu_Player(class ABP_MenuPlayerBase_C* MenuPlayer);
	void Clear();
	void SetScalarParameter(class FName ParameterName, float ParameterValue);
	void SetScalarArrayParameter(TArray<class FName>& ParameterName, TArray<float>& ParameterValue);
	void SetActivateSwitch(bool Active);
	void CheckSwitch();
	void RevertSwitch();
	void IsActiveSwitch(bool* Param_IsActive);
	void EventStart();
	void EventEnd();
	void DestroyComponentMe();
	void GetNowSettingNo(int32* SettingNo);
	void PostInitialized();
	void ChangePlayerAttachment(class ARSBattlePlayer_C* Player);
	void ChangePlayerWeapon(class ARSBattlePlayer_C* Player);
	void ChangeMeshLayers(TArray<class UMeshComponent*>& MeshComps, TArray<int32>& MeshLayers);
	void SwitchSetting();
	void ChangePlayerBody(class ARSBattlePlayer_C* Player);
	void PushDisable();
	void PopDisable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_OptimizeSwitchMaterial_C">();
	}
	static class UBPC_OptimizeSwitchMaterial_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_OptimizeSwitchMaterial_C>();
	}
};
static_assert(alignof(UBPC_OptimizeSwitchMaterial_C) == 0x000008, "Wrong alignment on UBPC_OptimizeSwitchMaterial_C");
static_assert(sizeof(UBPC_OptimizeSwitchMaterial_C) == 0x0002E0, "Wrong size on UBPC_OptimizeSwitchMaterial_C");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, UberGraphFrame) == 0x000290, "Member 'UBPC_OptimizeSwitchMaterial_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, NowSettingNo) == 0x000298, "Member 'UBPC_OptimizeSwitchMaterial_C::NowSettingNo' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, InEvent) == 0x00029C, "Member 'UBPC_OptimizeSwitchMaterial_C::InEvent' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, OwnerDynamicMaterialController) == 0x0002A0, "Member 'UBPC_OptimizeSwitchMaterial_C::OwnerDynamicMaterialController' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, BodyMeshLayer) == 0x0002A8, "Member 'UBPC_OptimizeSwitchMaterial_C::BodyMeshLayer' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, WeaponMeshLayers) == 0x0002B0, "Member 'UBPC_OptimizeSwitchMaterial_C::WeaponMeshLayers' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, AttachmentMeshLayers) == 0x0002C0, "Member 'UBPC_OptimizeSwitchMaterial_C::AttachmentMeshLayers' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, OwnerWeaponManageComponent) == 0x0002D0, "Member 'UBPC_OptimizeSwitchMaterial_C::OwnerWeaponManageComponent' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, InPush) == 0x0002D8, "Member 'UBPC_OptimizeSwitchMaterial_C::InPush' has a wrong offset!");
static_assert(offsetof(UBPC_OptimizeSwitchMaterial_C, PushRestoreActive) == 0x0002D9, "Member 'UBPC_OptimizeSwitchMaterial_C::PushRestoreActive' has a wrong offset!");

}

