#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonAIInterface

#include "Basic.hpp"

#include "CommonAIInterface_classes.hpp"
#include "CommonAIInterface_parameters.hpp"


namespace SDK
{

// Function CommonAIInterface.CommonAIInterface_C.IsAbleMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAble                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::IsAbleMove(bool* IsAble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "IsAbleMove");

	Params::CommonAIInterface_C_IsAbleMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAble != nullptr)
		*IsAble = Parms.IsAble;
}


// Function CommonAIInterface.CommonAIInterface_C.ScaleMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::ScaleMaxSpeed(float Scale, class FName ClaimantName, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "ScaleMaxSpeed");

	Params::CommonAIInterface_C_ScaleMaxSpeed Parms{};

	Parms.Scale = Scale;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function CommonAIInterface.CommonAIInterface_C.RestoreMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::RestoreMaxSpeed(class FName ClaimantName, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "RestoreMaxSpeed");

	Params::CommonAIInterface_C_RestoreMaxSpeed Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function CommonAIInterface.CommonAIInterface_C.BeginMoveBackward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::BeginMoveBackward(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "BeginMoveBackward");

	Params::CommonAIInterface_C_BeginMoveBackward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function CommonAIInterface.CommonAIInterface_C.EndMoveBackward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::EndMoveBackward(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "EndMoveBackward");

	Params::CommonAIInterface_C_EndMoveBackward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function CommonAIInterface.CommonAIInterface_C.IsFlying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsFlying                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::IsFlying(bool* Param_IsFlying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "IsFlying");

	Params::CommonAIInterface_C_IsFlying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsFlying != nullptr)
		*Param_IsFlying = Parms.Param_IsFlying;
}


// Function CommonAIInterface.CommonAIInterface_C.GetHeadLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ICommonAIInterface_C::GetHeadLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "GetHeadLocation");

	Params::CommonAIInterface_C_GetHeadLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function CommonAIInterface.CommonAIInterface_C.GetFlightAltitude
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FlightAltitude                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ICommonAIInterface_C::GetFlightAltitude(float* FlightAltitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "GetFlightAltitude");

	Params::CommonAIInterface_C_GetFlightAltitude Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlightAltitude != nullptr)
		*FlightAltitude = Parms.FlightAltitude;
}


// Function CommonAIInterface.CommonAIInterface_C.GetCapsuleRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ICommonAIInterface_C::GetCapsuleRadius(float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "GetCapsuleRadius");

	Params::CommonAIInterface_C_GetCapsuleRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function CommonAIInterface.CommonAIInterface_C.AddSpringArm
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpringArmComponent*              SpringArm                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ICommonAIInterface_C::AddSpringArm(class USpringArmComponent** SpringArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "AddSpringArm");

	Params::CommonAIInterface_C_AddSpringArm Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpringArm != nullptr)
		*SpringArm = Parms.SpringArm;
}


// Function CommonAIInterface.CommonAIInterface_C.DestroySpringArm
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USpringArmComponent*              SpringArm                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::DestroySpringArm(class USpringArmComponent* SpringArm, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "DestroySpringArm");

	Params::CommonAIInterface_C_DestroySpringArm Parms{};

	Parms.SpringArm = SpringArm;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function CommonAIInterface.CommonAIInterface_C.GetCapsuleHalfHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HalfHeight                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ICommonAIInterface_C::GetCapsuleHalfHeight(float* HalfHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "GetCapsuleHalfHeight");

	Params::CommonAIInterface_C_GetCapsuleHalfHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HalfHeight != nullptr)
		*HalfHeight = Parms.HalfHeight;
}


// Function CommonAIInterface.CommonAIInterface_C.GetIsBattleMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsBattleMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::GetIsBattleMode(bool* IsBattleMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "GetIsBattleMode");

	Params::CommonAIInterface_C_GetIsBattleMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBattleMode != nullptr)
		*IsBattleMode = Parms.IsBattleMode;
}


// Function CommonAIInterface.CommonAIInterface_C.IsCurrentAttackAttributeAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EAttackAttribute                        Attribute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ICommonAIInterface_C::IsCurrentAttackAttributeAI(EAttackAttribute Attribute, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommonAIInterface_C", "IsCurrentAttackAttributeAI");

	Params::CommonAIInterface_C_IsCurrentAttackAttributeAI Parms{};

	Parms.Attribute = Attribute;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}

}

