#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SequencerComponent

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "CharactersSequencerData_structs.hpp"


namespace SDK::Params
{

// Function BP_SequencerComponent.BP_SequencerComponent_C.ExecuteUbergraph_BP_SequencerComponent
// 0x000C (0x000C - 0x0000)
struct BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_Dummy;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EDB[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent) == 0x000004, "Wrong alignment on BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent");
static_assert(sizeof(BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent) == 0x00000C, "Wrong size on BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent");
static_assert(offsetof(BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent, EntryPoint) == 0x000000, "Member 'BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent, CallFunc_Update_Dummy) == 0x000004, "Member 'BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent::CallFunc_Update_Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_SequencerComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_SequencerComponent_C_ReceiveTick");
static_assert(sizeof(BP_SequencerComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_SequencerComponent_C_ReceiveTick");
static_assert(offsetof(BP_SequencerComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_SequencerComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.Initialize
// 0x0080 (0x0080 - 0x0000)
struct BP_SequencerComponent_C_Initialize final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EDC[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetEventManager_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EDD[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_Initialize) == 0x000010, "Wrong alignment on BP_SequencerComponent_C_Initialize");
static_assert(sizeof(BP_SequencerComponent_C_Initialize) == 0x000080, "Wrong size on BP_SequencerComponent_C_Initialize");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, Dummy) == 0x000000, "Member 'BP_SequencerComponent_C_Initialize::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_SequencerComponent_C_Initialize::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, CallFunc_GetEventManager_ReturnValue) == 0x000040, "Member 'BP_SequencerComponent_C_Initialize::CallFunc_GetEventManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000048, "Member 'BP_SequencerComponent_C_Initialize::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'BP_SequencerComponent_C_Initialize::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, CallFunc_MakeLiteralByte_ReturnValue) == 0x000058, "Member 'BP_SequencerComponent_C_Initialize::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_SequencerComponent_C_Initialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Initialize, K2Node_MakeArray_Array) == 0x000068, "Member 'BP_SequencerComponent_C_Initialize::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.Update
// 0x00B0 (0x00B0 - 0x0000)
struct BP_SequencerComponent_C_Update final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndSequencer_dummy;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndSequencer_dummy_1;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlaySequencer_return;                     // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EDE[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlaySequencer_return_1;                   // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EDF[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFadeAnimation_ReturnValue;              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_Update) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_Update");
static_assert(sizeof(BP_SequencerComponent_C_Update) == 0x0000B0, "Wrong size on BP_SequencerComponent_C_Update");
static_assert(offsetof(BP_SequencerComponent_C_Update, Dummy) == 0x000000, "Member 'BP_SequencerComponent_C_Update::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_EndSequencer_dummy) == 0x000001, "Member 'BP_SequencerComponent_C_Update::CallFunc_EndSequencer_dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_EndSequencer_dummy_1) == 0x000002, "Member 'BP_SequencerComponent_C_Update::CallFunc_EndSequencer_dummy_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_SequencerComponent_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000004, "Member 'BP_SequencerComponent_C_Update::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_K2_SetActorTransform_ReturnValue) == 0x00008C, "Member 'BP_SequencerComponent_C_Update::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_PlaySequencer_return) == 0x00008D, "Member 'BP_SequencerComponent_C_Update::CallFunc_PlaySequencer_return' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_GetSequencePlayer_ReturnValue) == 0x000090, "Member 'BP_SequencerComponent_C_Update::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_IsPlaying_ReturnValue) == 0x000098, "Member 'BP_SequencerComponent_C_Update::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_PlaySequencer_return_1) == 0x000099, "Member 'BP_SequencerComponent_C_Update::CallFunc_PlaySequencer_return_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_GetHUDMainGame_HUDMainGame) == 0x0000A0, "Member 'BP_SequencerComponent_C_Update::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Update, CallFunc_IsFadeAnimation_ReturnValue) == 0x0000A8, "Member 'BP_SequencerComponent_C_Update::CallFunc_IsFadeAnimation_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.Finalize
// 0x0002 (0x0002 - 0x0000)
struct BP_SequencerComponent_C_Finalize final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_Finalize) == 0x000001, "Wrong alignment on BP_SequencerComponent_C_Finalize");
static_assert(sizeof(BP_SequencerComponent_C_Finalize) == 0x000002, "Wrong size on BP_SequencerComponent_C_Finalize");
static_assert(offsetof(BP_SequencerComponent_C_Finalize, Dummy) == 0x000000, "Member 'BP_SequencerComponent_C_Finalize::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_Finalize, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_SequencerComponent_C_Finalize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.StartSequnecer
// 0x01D0 (0x01D0 - 0x0000)
struct BP_SequencerComponent_C_StartSequnecer final
{
public:
	int32                                         Index_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               L_playerList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	struct FCharactersSequencerData               L_seqData;                                         // 0x0018(0x0098)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE1[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE2[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE3[0x1];                                     // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x00D8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EE4[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE5[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EE6[0x8];                                     // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0120(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EE7[0xC];                                     // 0x0174(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE8[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlaySequencer_return;                     // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EE9[0x2];                                     // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_StartSequnecer) == 0x000010, "Wrong alignment on BP_SequencerComponent_C_StartSequnecer");
static_assert(sizeof(BP_SequencerComponent_C_StartSequnecer) == 0x0001D0, "Wrong size on BP_SequencerComponent_C_StartSequnecer");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Index_in) == 0x000000, "Member 'BP_SequencerComponent_C_StartSequnecer::Index_in' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Dummy) == 0x000004, "Member 'BP_SequencerComponent_C_StartSequnecer::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, L_playerList) == 0x000008, "Member 'BP_SequencerComponent_C_StartSequnecer::L_playerList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, L_seqData) == 0x000018, "Member 'BP_SequencerComponent_C_StartSequnecer::L_seqData' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Temp_int_Array_Index_Variable) == 0x0000B0, "Member 'BP_SequencerComponent_C_StartSequnecer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'BP_SequencerComponent_C_StartSequnecer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Temp_bool_True_if_break_was_hit_Variable) == 0x0000BC, "Member 'BP_SequencerComponent_C_StartSequnecer::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Temp_int_Array_Index_Variable_1) == 0x0000C0, "Member 'BP_SequencerComponent_C_StartSequnecer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Not_PreBool_ReturnValue) == 0x0000C4, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Temp_int_Loop_Num_Variable) == 0x0000C8, "Member 'BP_SequencerComponent_C_StartSequnecer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_BooleanAND_ReturnValue) == 0x0000CD, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_IsValid_ReturnValue) == 0x0000CE, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_GetPlayerManager_PlayerManager) == 0x0000D0, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_GetPlayerList_ReturnValue) == 0x0000D8, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, K2Node_DynamicCast_AsEvent_Interface) == 0x0000F8, "Member 'BP_SequencerComponent_C_StartSequnecer::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BP_SequencerComponent_C_StartSequnecer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_EventStart_ReturnValue) == 0x000109, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_EventStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_GetOwner_ReturnValue) == 0x000110, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_GetTransform_ReturnValue) == 0x000120, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_BreakTransform_Location) == 0x000150, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_BreakTransform_Rotation) == 0x00015C, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_BreakTransform_Scale) == 0x000168, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, Temp_int_Loop_Counter_Variable_1) == 0x0001B0, "Member 'BP_SequencerComponent_C_StartSequnecer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001B4, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001B8, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_PlaySequencer_return) == 0x0001BC, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_PlaySequencer_return' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001BD, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_StartSequnecer, CallFunc_Array_Length_ReturnValue_1) == 0x0001C0, "Member 'BP_SequencerComponent_C_StartSequnecer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.EndSequencer
// 0x0060 (0x0060 - 0x0000)
struct BP_SequencerComponent_C_EndSequencer final
{
public:
	int32                                         Param_SequencerIndex;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EEA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               L_playerList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0030(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EEB[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EEC[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_EndSequencer) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_EndSequencer");
static_assert(sizeof(BP_SequencerComponent_C_EndSequencer) == 0x000060, "Wrong size on BP_SequencerComponent_C_EndSequencer");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, Param_SequencerIndex) == 0x000000, "Member 'BP_SequencerComponent_C_EndSequencer::Param_SequencerIndex' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, Dummy) == 0x000004, "Member 'BP_SequencerComponent_C_EndSequencer::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, L_playerList) == 0x000008, "Member 'BP_SequencerComponent_C_EndSequencer::L_playerList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_SequencerComponent_C_EndSequencer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_GetPlayerList_ReturnValue) == 0x000030, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, K2Node_DynamicCast_AsEvent_Interface) == 0x000040, "Member 'BP_SequencerComponent_C_EndSequencer::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_SequencerComponent_C_EndSequencer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_EventEnd_ReturnValue) == 0x000051, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_EventEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BP_SequencerComponent_C_EndSequencer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_EndSequencer, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_SequencerComponent_C_EndSequencer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.CreateSequencer
// 0x0178 (0x0178 - 0x0000)
struct BP_SequencerComponent_C_CreateSequencer final
{
public:
	struct FCharactersSequencerData               Seq_data_in;                                       // 0x0000(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 L_seqList;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FCharactersSequencerData               L_seqData;                                         // 0x00A8(0x0098)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EED[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_DynamicCast_AsLevel_Sequence;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EEE[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EEF[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_CreateSequencer) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_CreateSequencer");
static_assert(sizeof(BP_SequencerComponent_C_CreateSequencer) == 0x000178, "Wrong size on BP_SequencerComponent_C_CreateSequencer");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, Seq_data_in) == 0x000000, "Member 'BP_SequencerComponent_C_CreateSequencer::Seq_data_in' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, L_seqList) == 0x000098, "Member 'BP_SequencerComponent_C_CreateSequencer::L_seqList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, L_seqData) == 0x0000A8, "Member 'BP_SequencerComponent_C_CreateSequencer::L_seqData' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, Temp_int_Array_Index_Variable) == 0x000140, "Member 'BP_SequencerComponent_C_CreateSequencer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, CallFunc_Array_Length_ReturnValue) == 0x000144, "Member 'BP_SequencerComponent_C_CreateSequencer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, CallFunc_LoadSoftObject_ReturnValue) == 0x000148, "Member 'BP_SequencerComponent_C_CreateSequencer::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, Temp_int_Loop_Num_Variable) == 0x000150, "Member 'BP_SequencerComponent_C_CreateSequencer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, K2Node_DynamicCast_AsLevel_Sequence) == 0x000158, "Member 'BP_SequencerComponent_C_CreateSequencer::K2Node_DynamicCast_AsLevel_Sequence' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'BP_SequencerComponent_C_CreateSequencer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, Temp_int_Loop_Counter_Variable) == 0x000164, "Member 'BP_SequencerComponent_C_CreateSequencer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, CallFunc_Array_Add_ReturnValue) == 0x000168, "Member 'BP_SequencerComponent_C_CreateSequencer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, CallFunc_Less_IntInt_ReturnValue) == 0x00016C, "Member 'BP_SequencerComponent_C_CreateSequencer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, CallFunc_Add_IntInt_ReturnValue) == 0x000170, "Member 'BP_SequencerComponent_C_CreateSequencer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CreateSequencer, CallFunc_Array_Add_ReturnValue_1) == 0x000174, "Member 'BP_SequencerComponent_C_CreateSequencer::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.SetFade
// 0x0018 (0x0018 - 0x0000)
struct BP_SequencerComponent_C_SetFade final
{
public:
	bool                                          Fade_start_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Fade_out_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF0[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EF1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_SetFade) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_SetFade");
static_assert(sizeof(BP_SequencerComponent_C_SetFade) == 0x000018, "Wrong size on BP_SequencerComponent_C_SetFade");
static_assert(offsetof(BP_SequencerComponent_C_SetFade, Fade_start_in) == 0x000000, "Member 'BP_SequencerComponent_C_SetFade::Fade_start_in' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetFade, Fade_out_in) == 0x000001, "Member 'BP_SequencerComponent_C_SetFade::Fade_out_in' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetFade, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'BP_SequencerComponent_C_SetFade::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetFade, CallFunc_SelectFloat_ReturnValue_1) == 0x000008, "Member 'BP_SequencerComponent_C_SetFade::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetFade, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000010, "Member 'BP_SequencerComponent_C_SetFade::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.SetOption
// 0x01F0 (0x01F0 - 0x0000)
struct BP_SequencerComponent_C_SetOption final
{
public:
	bool                                          Start_in;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_setHidden;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF2[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_idx;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               L_EnemyList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              L_playerList;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ARSCharacterBase*                       L_enemy;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      L_player;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF3[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF4[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF5[0xB];                                     // 0x0075(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0080(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF6[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EF7[0xC];                                     // 0x0114(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneObjectBindingID             CallFunc_GetRootActorBindingID_binding_id;         // 0x0158(0x0018)(NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        CallFunc_GetBoundObjects_ReturnValue;              // 0x0170(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EF8[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerHidden_bDummy;                   // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerHidden_bDummy_1;                 // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EF9[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_EnemyList;                   // 0x0198(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EFA[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayerList_player_list;                // 0x01B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerStart_ReturnValue;         // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterDynamicEventEnd_Dummy;           // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EFB[0x1];                                     // 0x01D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerDynamicEventStart_Dummy;            // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterDynamicEventEnd_Dummy_1;         // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EFC[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_SetOption) == 0x000010, "Wrong alignment on BP_SequencerComponent_C_SetOption");
static_assert(sizeof(BP_SequencerComponent_C_SetOption) == 0x0001F0, "Wrong size on BP_SequencerComponent_C_SetOption");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Start_in) == 0x000000, "Member 'BP_SequencerComponent_C_SetOption::Start_in' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, L_setHidden) == 0x000001, "Member 'BP_SequencerComponent_C_SetOption::L_setHidden' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, L_idx) == 0x000004, "Member 'BP_SequencerComponent_C_SetOption::L_idx' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, L_EnemyList) == 0x000008, "Member 'BP_SequencerComponent_C_SetOption::L_EnemyList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, L_playerList) == 0x000018, "Member 'BP_SequencerComponent_C_SetOption::L_playerList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, L_enemy) == 0x000028, "Member 'BP_SequencerComponent_C_SetOption::L_enemy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, L_player) == 0x000030, "Member 'BP_SequencerComponent_C_SetOption::L_player' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Loop_Num_Variable) == 0x000044, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Loop_Counter_Variable_1) == 0x000048, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Loop_Num_Variable_1) == 0x000054, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Loop_Counter_Variable_2) == 0x000058, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Array_Index_Variable_1) == 0x000064, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Array_Index_Variable_2) == 0x000068, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_int_Loop_Num_Variable_2) == 0x00006C, "Member 'BP_SequencerComponent_C_SetOption::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, Temp_bool_True_if_break_was_hit_Variable) == 0x000070, "Member 'BP_SequencerComponent_C_SetOption::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Less_IntInt_ReturnValue_2) == 0x000071, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Not_PreBool_ReturnValue) == 0x000072, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BooleanAND_ReturnValue) == 0x000073, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Not_PreBool_ReturnValue_1) == 0x000074, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetTransform_ReturnValue) == 0x000080, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BreakTransform_Location) == 0x0000B0, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BreakTransform_Rotation) == 0x0000BC, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BreakTransform_Scale) == 0x0000C8, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BreakTransform_Location_1) == 0x0000D4, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BreakTransform_Rotation_1) == 0x0000E0, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BreakTransform_Scale_1) == 0x0000EC, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_ComposeRotators_ReturnValue) == 0x0000F8, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_IsValid_ReturnValue) == 0x000104, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetSequencePlayer_ReturnValue) == 0x000150, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetRootActorBindingID_binding_id) == 0x000158, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetRootActorBindingID_binding_id' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetBoundObjects_ReturnValue) == 0x000170, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetBoundObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Array_Length_ReturnValue) == 0x000180, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, K2Node_DynamicCast_AsActor) == 0x000188, "Member 'BP_SequencerComponent_C_SetOption::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, K2Node_DynamicCast_bSuccess) == 0x000190, "Member 'BP_SequencerComponent_C_SetOption::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_SetPlayerHidden_bDummy) == 0x000191, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_SetPlayerHidden_bDummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_SetPlayerHidden_bDummy_1) == 0x000192, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_SetPlayerHidden_bDummy_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Not_PreBool_ReturnValue_2) == 0x000193, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetEnemyList_EnemyList) == 0x000198, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetEnemyList_EnemyList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Array_Length_ReturnValue_1) == 0x0001A8, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetPlayerList_player_list) == 0x0001B0, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetPlayerList_player_list' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, K2Node_DynamicCast_AsEvent_Interface) == 0x0001C0, "Member 'BP_SequencerComponent_C_SetOption::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, K2Node_DynamicCast_bSuccess_1) == 0x0001D0, "Member 'BP_SequencerComponent_C_SetOption::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_BattleSequencerStart_ReturnValue) == 0x0001D1, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_BattleSequencerStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_CharacterDynamicEventEnd_Dummy) == 0x0001D2, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_CharacterDynamicEventEnd_Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Array_Length_ReturnValue_2) == 0x0001D4, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_PlayerDynamicEventStart_Dummy) == 0x0001D8, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_PlayerDynamicEventStart_Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_CharacterDynamicEventEnd_Dummy_1) == 0x0001D9, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_CharacterDynamicEventEnd_Dummy_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_Not_PreBool_ReturnValue_3) == 0x0001DA, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_SetOption, CallFunc_GetHUDMainGame_HUDMainGame) == 0x0001E0, "Member 'BP_SequencerComponent_C_SetOption::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.PlaySequencer
// 0x0058 (0x0058 - 0x0000)
struct BP_SequencerComponent_C_PlaySequencer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EFD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EFE[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BindCineCamera_Dummy;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EFF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F00[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindActor_Dummy;                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F01[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F02[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F03[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F04[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_PlaySequencer) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_PlaySequencer");
static_assert(sizeof(BP_SequencerComponent_C_PlaySequencer) == 0x000058, "Wrong size on BP_SequencerComponent_C_PlaySequencer");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, Return) == 0x000000, "Member 'BP_SequencerComponent_C_PlaySequencer::Return' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_SequencerComponent_C_PlaySequencer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_SequencerComponent_C_PlaySequencer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_BindCineCamera_Dummy) == 0x000014, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_BindCineCamera_Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_SequencerComponent_C_PlaySequencer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000028, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_BindActor_Dummy) == 0x000029, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_BindActor_Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, Temp_int_Variable) == 0x000030, "Member 'BP_SequencerComponent_C_PlaySequencer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_GetSequencePlayer_ReturnValue) == 0x000038, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000048, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlaySequencer, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_SequencerComponent_C_PlaySequencer::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.GetPlayerList
// 0x0038 (0x0038 - 0x0000)
struct BP_SequencerComponent_C_GetPlayerList final
{
public:
	TArray<class ARSBattlePlayer_C*>              Player_list;                                       // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F05[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              CallFunc_GetPlayersAll_Player;                     // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_GetPlayerList) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_GetPlayerList");
static_assert(sizeof(BP_SequencerComponent_C_GetPlayerList) == 0x000038, "Wrong size on BP_SequencerComponent_C_GetPlayerList");
static_assert(offsetof(BP_SequencerComponent_C_GetPlayerList, Player_list) == 0x000000, "Member 'BP_SequencerComponent_C_GetPlayerList::Player_list' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetPlayerList, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_SequencerComponent_C_GetPlayerList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetPlayerList, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'BP_SequencerComponent_C_GetPlayerList::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetPlayerList, CallFunc_GetPlayersAll_Player) == 0x000020, "Member 'BP_SequencerComponent_C_GetPlayerList::CallFunc_GetPlayersAll_Player' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetPlayerList, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_SequencerComponent_C_GetPlayerList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetPlayerList, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_SequencerComponent_C_GetPlayerList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.GetEnemyList
// 0x0038 (0x0038 - 0x0000)
struct BP_SequencerComponent_C_GetEnemyList final
{
public:
	TArray<class ARSCharacterBase*>               Param_EnemyList;                                   // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F06[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_GetEnemyList) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_GetEnemyList");
static_assert(sizeof(BP_SequencerComponent_C_GetEnemyList) == 0x000038, "Wrong size on BP_SequencerComponent_C_GetEnemyList");
static_assert(offsetof(BP_SequencerComponent_C_GetEnemyList, Param_EnemyList) == 0x000000, "Member 'BP_SequencerComponent_C_GetEnemyList::Param_EnemyList' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetEnemyList, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_SequencerComponent_C_GetEnemyList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetEnemyList, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'BP_SequencerComponent_C_GetEnemyList::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetEnemyList, CallFunc_GetEnemyList_ReturnValue) == 0x000020, "Member 'BP_SequencerComponent_C_GetEnemyList::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetEnemyList, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_SequencerComponent_C_GetEnemyList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_GetEnemyList, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_SequencerComponent_C_GetEnemyList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.GetRootActorBindingID
// 0x0018 (0x0018 - 0x0000)
struct BP_SequencerComponent_C_GetRootActorBindingID final
{
public:
	struct FMovieSceneObjectBindingID             binding_id;                                        // 0x0000(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_GetRootActorBindingID) == 0x000004, "Wrong alignment on BP_SequencerComponent_C_GetRootActorBindingID");
static_assert(sizeof(BP_SequencerComponent_C_GetRootActorBindingID) == 0x000018, "Wrong size on BP_SequencerComponent_C_GetRootActorBindingID");
static_assert(offsetof(BP_SequencerComponent_C_GetRootActorBindingID, binding_id) == 0x000000, "Member 'BP_SequencerComponent_C_GetRootActorBindingID::binding_id' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.BindActor
// 0x0058 (0x0058 - 0x0000)
struct BP_SequencerComponent_C_BindActor final
{
public:
	class FText                                   ObjName;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Param_BindActor;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F07[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingID_IsFind;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F08[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             CallFunc_GetSequenceObjectBindingID_ReturnValue;   // 0x003C(0x0018)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SequencerComponent_C_BindActor) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_BindActor");
static_assert(sizeof(BP_SequencerComponent_C_BindActor) == 0x000058, "Wrong size on BP_SequencerComponent_C_BindActor");
static_assert(offsetof(BP_SequencerComponent_C_BindActor, ObjName) == 0x000000, "Member 'BP_SequencerComponent_C_BindActor::ObjName' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_BindActor, Param_BindActor) == 0x000018, "Member 'BP_SequencerComponent_C_BindActor::Param_BindActor' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_BindActor, Dummy) == 0x000020, "Member 'BP_SequencerComponent_C_BindActor::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_BindActor, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_SequencerComponent_C_BindActor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_BindActor, CallFunc_GetSequenceObjectBindingID_IsFind) == 0x000038, "Member 'BP_SequencerComponent_C_BindActor::CallFunc_GetSequenceObjectBindingID_IsFind' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_BindActor, CallFunc_GetSequenceObjectBindingID_ReturnValue) == 0x00003C, "Member 'BP_SequencerComponent_C_BindActor::CallFunc_GetSequenceObjectBindingID_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.BindCineCamera
// 0x0001 (0x0001 - 0x0000)
struct BP_SequencerComponent_C_BindCineCamera final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_BindCineCamera) == 0x000001, "Wrong alignment on BP_SequencerComponent_C_BindCineCamera");
static_assert(sizeof(BP_SequencerComponent_C_BindCineCamera) == 0x000001, "Wrong size on BP_SequencerComponent_C_BindCineCamera");
static_assert(offsetof(BP_SequencerComponent_C_BindCineCamera, Dummy) == 0x000000, "Member 'BP_SequencerComponent_C_BindCineCamera::Dummy' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.CharacterDynamicEventEnd
// 0x0028 (0x0028 - 0x0000)
struct BP_SequencerComponent_C_CharacterDynamicEventEnd final
{
public:
	class ARSCharacterBase*                       RSCharacter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F09[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerEnd_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_CharacterDynamicEventEnd) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_CharacterDynamicEventEnd");
static_assert(sizeof(BP_SequencerComponent_C_CharacterDynamicEventEnd) == 0x000028, "Wrong size on BP_SequencerComponent_C_CharacterDynamicEventEnd");
static_assert(offsetof(BP_SequencerComponent_C_CharacterDynamicEventEnd, RSCharacter) == 0x000000, "Member 'BP_SequencerComponent_C_CharacterDynamicEventEnd::RSCharacter' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CharacterDynamicEventEnd, Dummy) == 0x000008, "Member 'BP_SequencerComponent_C_CharacterDynamicEventEnd::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CharacterDynamicEventEnd, K2Node_DynamicCast_AsEvent_Interface) == 0x000010, "Member 'BP_SequencerComponent_C_CharacterDynamicEventEnd::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CharacterDynamicEventEnd, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_SequencerComponent_C_CharacterDynamicEventEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_CharacterDynamicEventEnd, CallFunc_BattleSequencerEnd_ReturnValue) == 0x000021, "Member 'BP_SequencerComponent_C_CharacterDynamicEventEnd::CallFunc_BattleSequencerEnd_ReturnValue' has a wrong offset!");

// Function BP_SequencerComponent.BP_SequencerComponent_C.PlayerDynamicEventStart
// 0x0040 (0x0040 - 0x0000)
struct BP_SequencerComponent_C_PlayerDynamicEventStart final
{
public:
	class ARSBattlePlayer_C*                      RSPlayer;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F0A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F0B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       CallFunc_DynamicEventBeforeBindCharacter_self_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DynamicEventBeforeBindCharacter_ReturnValue; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerStart_ReturnValue;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SequencerComponent_C_PlayerDynamicEventStart) == 0x000008, "Wrong alignment on BP_SequencerComponent_C_PlayerDynamicEventStart");
static_assert(sizeof(BP_SequencerComponent_C_PlayerDynamicEventStart) == 0x000040, "Wrong size on BP_SequencerComponent_C_PlayerDynamicEventStart");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, RSPlayer) == 0x000000, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::RSPlayer' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, Dummy) == 0x000008, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::Dummy' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, K2Node_DynamicCast_AsEvent_Interface) == 0x000010, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, CallFunc_DynamicEventBeforeBindCharacter_self_CastInput) == 0x000028, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::CallFunc_DynamicEventBeforeBindCharacter_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, CallFunc_DynamicEventBeforeBindCharacter_ReturnValue) == 0x000038, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::CallFunc_DynamicEventBeforeBindCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SequencerComponent_C_PlayerDynamicEventStart, CallFunc_BattleSequencerStart_ReturnValue) == 0x000039, "Member 'BP_SequencerComponent_C_PlayerDynamicEventStart::CallFunc_BattleSequencerStart_ReturnValue' has a wrong offset!");

}

