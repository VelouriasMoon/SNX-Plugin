#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BrainField

#include "Basic.hpp"

#include "BPI_BrainField_classes.hpp"
#include "BPI_BrainField_parameters.hpp"


namespace SDK
{

// Function BPI_BrainField.BPI_BrainField_C.BrainFieldOpenStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BrainField_C::BrainFieldOpenStart(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldOpenStart");

	Params::BPI_BrainField_C_BrainFieldOpenStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BrainField.BPI_BrainField_C.BrainFieldOpenEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BrainField_C::BrainFieldOpenEnd(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldOpenEnd");

	Params::BPI_BrainField_C_BrainFieldOpenEnd Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BrainField.BPI_BrainField_C.BrainFieldCloseStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BrainField_C::BrainFieldCloseStart(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldCloseStart");

	Params::BPI_BrainField_C_BrainFieldCloseStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BrainField.BPI_BrainField_C.BrainFieldCloseEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BrainField_C::BrainFieldCloseEnd(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldCloseEnd");

	Params::BPI_BrainField_C_BrainFieldCloseEnd Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BrainField.BPI_BrainField_C.BrainFieldMoveBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BrainField_C::BrainFieldMoveBrainField(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldMoveBrainField");

	Params::BPI_BrainField_C_BrainFieldMoveBrainField Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BrainField.BPI_BrainField_C.BrainFieldMoveNormalField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BrainField_C::BrainFieldMoveNormalField(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldMoveNormalField");

	Params::BPI_BrainField_C_BrainFieldMoveNormalField Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BrainField.BPI_BrainField_C.BrainFieldOverrideStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BrainField_C::BrainFieldOverrideStart(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BrainField_C", "BrainFieldOverrideStart");

	Params::BPI_BrainField_C_BrainFieldOverrideStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}

}

