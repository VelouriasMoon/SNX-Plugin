#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ui_BrainMes

#include "Basic.hpp"

#include "Struct_ui_brainmes_work_structs.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ui_BrainMes.WB_ui_BrainMes_C
// 0x0270 (0x0618 - 0x03A8)
class UWB_ui_BrainMes_C final : public UUIBrainMessage
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Info_window_out;                                   // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Info_window_in;                                    // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Info_window;                                       // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_none;                                      // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default;                                           // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                All_Color;                                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               All_Set;                                           // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_Line_1;                                       // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_List_Frame;                                   // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_ViewRange_Message;                     // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_ViewRange_Thread;                      // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Cover_Black;                                       // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                List_Message_Color;                                // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               List_Message_Set;                                  // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                List_Thread_Color;                                 // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               List_Thread_Set;                                   // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Base_3;                                    // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Base_4;                                    // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Base_3bg;                                  // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Member_frame;                              // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Member_frame_add;                          // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Title_frame;                               // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Title_frame_1_add;                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Massage_Title_frame_2_add;                         // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDScrollBox*                          REDScrollBox_Message;                              // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDScrollBox*                          REDScrollBox_Thread;                               // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_0;                                        // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_BrainMes_Member_1;                            // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_BrainMes_Member_2;                            // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_BrainMes_Name_1;                              // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_BrainMes_Reply;                               // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_BrainMes_Title_1;                             // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Thread_Base_1;                                     // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Thread_Heder_base;                                 // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Thread_Heder_face;                                 // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Thread_Heder_face_frame;                           // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Thread_Heder_pattern;                              // 0x04D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_BrainMes_Parts_1_C*              WB_ui_BrainMes_Parts_1;                            // 0x04D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_BrainMes_Parts_3_C*              WB_ui_BrainMes_Parts_3;                            // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_MainChoice_Parts_1_C*            WB_ui_MainChoice_Parts_1;                          // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         CursorThread;                                      // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CursorMessage;                                     // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FBrainMessageDBDataCell>        ThreadList;                                        // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FlagMessageTest;                                   // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15E9[0x3];                                     // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MessageNum;                                        // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThreadNum;                                         // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReply;                                           // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagLock;                                          // 0x0515(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15EA[0x2];                                     // 0x0516(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ThreadMemberList;                                  // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          MessageInputFlag;                                  // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagSetCurrentThreadID;                            // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15EB[0x2];                                     // 0x052A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentThreadID;                                   // 0x052C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReady;                                           // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MessageLoopFlag;                                   // 0x0535(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15EC[0x2];                                     // 0x0536(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MessageLoopCounter;                                // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnTimer;                                       // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReplyMessageNum;                                   // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlayerId;                                          // 0x0544(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15ED[0x4];                                     // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_ui_brainmes_work>       MessageWorkList;                                   // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CallBondEpisode;                                   // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsInput;                                           // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoReplyFlag;                                     // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15EE[0x2];                                     // 0x0572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutoReplyState;                                    // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoReplyTimer;                                    // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagBattle;                                        // 0x057C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15EF[0x3];                                     // 0x057D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReadMessageNumList;                                // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AlreadyReadNum;                                    // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15F0[0x4];                                     // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             TextWidgetHelp;                                    // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_ui_Guide_C*                         GuideWidget;                                       // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewFlagInit;                                       // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15F1[0x7];                                     // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SortIndexList;                                     // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 SortIndexWorkList;                                 // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SortType;                                          // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReply2;                                          // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15F2[0x3];                                     // 0x05D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WidgetThreadID;                                    // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AlreadyReadNumWork;                                // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagReplyWork;                                     // 0x05E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15F3[0x3];                                     // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIBase*                                ParentWidget;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSAtomComponentBase*                   ScrollSE;                                          // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainMesListScrollOffset;                          // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15F4[0x4];                                     // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SetPopupMode;                                      // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Delta;                                             // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReplyBonds;                                      // 0x0614(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnableBonds;                                     // 0x0615(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MessageCreateFlag;                                 // 0x0616(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void CallBondEpisode__DelegateSignature(const class FString& Path);
	void SetPopupMode__DelegateSignature(bool IsPopup);
	void ExecuteUbergraph_WB_ui_BrainMes(int32 EntryPoint);
	void Event_Reply2(EUINoticeMessageCallType SenderType, class FName DatatableId);
	void ListUnFocusMouse(int32 IsMouseScroll, int32 Param_Index, class UUserWidget* Widget);
	void ListFocusMouse(int32 IsMouseScroll, int32 Param_Index, class UUserWidget* Widget);
	void ___g_U__(int32 Param_Cursor, class UUserWidget* PWidget);
	void ResetDefaultThread();
	void SetDefaultThread(class FName ThreadID);
	void OnInitialized();
	void PreConstruct(bool IsDesignTime);
	void Event_UnFocusListMessage(class UUserWidget* PWidget);
	void Event_FocusListMessage(class UUserWidget* PWidget);
	void Event_UpdateElementListMessage(int32 Param_Index, class UUserWidget* PWidget);
	void Event_UnFocusListThread(class UUserWidget* PWidget);
	void Event_FocusListThread(class UUserWidget* PWidget);
	void Event_UpdateElementListThread(int32 Param_Index, class UUserWidget* PWidget);
	void UpdateState(int32 State, int32 SubState, float DeltaSeconds);
	void Construct();
	void StateNone(int32 SubState);
	void StateOpen(int32 SubState);
	void StateClose(int32 SubState);
	void InitListThread();
	void UpdateListThreadWidget(int32 Param_Index, class UWB_ui_BrainMes_Parts_1_C* Widget);
	void MoveCursorListThread(bool* IsChangeMessage);
	void InitListMessage();
	void UpdateListMessageWidget(int32 Param_Index, class UWB_ui_BrainMes_Parts_2_C* Widget);
	void MoveCursorListMessage();
	void ClearListMessage();
	void ClearListThread();
	void InitWork();
	void AddMessage();
	void GetCharaIDNumber(class FName IdName, int32* IDNumber);
	void SetupPlayer();
	void UpdateThreadTitle();
	void IsEnableReply(bool CheckBattle, bool* Param_IsEnableReply);
	void SetLock(bool IsLock);
	void StateLoop(int32 SubState);
	void SetThreadCursor(class FName ThreadID);
	void SetCurrentThreadID(class FName ThreadID);
	void ResetCurrentThreadID();
	void IsReadyView(bool* Param_IsReady);
	void CheckReply(bool AutoFlagReply, int32* Result);
	void StateReply(int32 SubState);
	void GetCurrentMessageNum(int32* Num);
	void GetCharaName(int32 Param_Index, bool IsShort, class FString* CharaName);
	void SetupMessageWork();
	void ReserveBondEpisode();
	void Reply();
	void AutoReplyProcess(bool* FlagReply, bool* FlagClose);
	void SetAutoMode(bool IsAutoMode);
	void SetupKizunaCheck();
	void InitializeCommonParts(class UTextBlock* TextHelp, class UWB_ui_Guide_C* Guide);
	void SetupHelpText();
	void SetupGuide(bool IsEnableReply);
	void Setup_Default_Message();
	void SetupErrorText(bool IsBonds, bool IsErrorBattle);
	bool ClearCurrentNewFlagNative(int32 Param_Index, class UUserWidget* Widget);
	void InitListMessage_MouseScroll(int32 Param_Index);
	bool InitListMessageNative(int32 Param_Index);
	bool UpdateThreadTitleNative(int32 Param_Index);
	void InitSortParam();
	void UpdateSortIndex(bool Isinit);
	void UpdateCurrentThreadAlreadyReadNum(bool NoticeEnable);
	void IsThreadNew(int32 Param_Index, bool* IsNew);
	void CheckInputAfterReplyBondsEpisode(bool* Param_IsInput);
	void SetupMemberList(int32 Param_Index);
	void SetupThreadMember(class UWB_ui_BrainMes_Parts_1_C* Widget, int32 Param_Index);
	void SetParent(class UUIBase* Parent);
	void DebugSetFlagMessageTest(bool IsTest);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ui_BrainMes_C">();
	}
	static class UWB_ui_BrainMes_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ui_BrainMes_C>();
	}
};
static_assert(alignof(UWB_ui_BrainMes_C) == 0x000008, "Wrong alignment on UWB_ui_BrainMes_C");
static_assert(sizeof(UWB_ui_BrainMes_C) == 0x000618, "Wrong size on UWB_ui_BrainMes_C");
static_assert(offsetof(UWB_ui_BrainMes_C, UberGraphFrame) == 0x0003A8, "Member 'UWB_ui_BrainMes_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Info_window_out) == 0x0003B0, "Member 'UWB_ui_BrainMes_C::Info_window_out' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Info_window_in) == 0x0003B8, "Member 'UWB_ui_BrainMes_C::Info_window_in' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Info_window) == 0x0003C0, "Member 'UWB_ui_BrainMes_C::Info_window' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Default_none) == 0x0003C8, "Member 'UWB_ui_BrainMes_C::Default_none' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Default) == 0x0003D0, "Member 'UWB_ui_BrainMes_C::Default' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, All_Color) == 0x0003D8, "Member 'UWB_ui_BrainMes_C::All_Color' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, All_Set) == 0x0003E0, "Member 'UWB_ui_BrainMes_C::All_Set' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Base_Line_1) == 0x0003E8, "Member 'UWB_ui_BrainMes_C::Base_Line_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Base_List_Frame) == 0x0003F0, "Member 'UWB_ui_BrainMes_C::Base_List_Frame' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, CanvasPanel_ViewRange_Message) == 0x0003F8, "Member 'UWB_ui_BrainMes_C::CanvasPanel_ViewRange_Message' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, CanvasPanel_ViewRange_Thread) == 0x000400, "Member 'UWB_ui_BrainMes_C::CanvasPanel_ViewRange_Thread' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Cover_Black) == 0x000408, "Member 'UWB_ui_BrainMes_C::Cover_Black' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, List_Message_Color) == 0x000410, "Member 'UWB_ui_BrainMes_C::List_Message_Color' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, List_Message_Set) == 0x000418, "Member 'UWB_ui_BrainMes_C::List_Message_Set' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, List_Thread_Color) == 0x000420, "Member 'UWB_ui_BrainMes_C::List_Thread_Color' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, List_Thread_Set) == 0x000428, "Member 'UWB_ui_BrainMes_C::List_Thread_Set' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Base_3) == 0x000430, "Member 'UWB_ui_BrainMes_C::Massage_Base_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Base_4) == 0x000438, "Member 'UWB_ui_BrainMes_C::Massage_Base_4' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Base_3bg) == 0x000440, "Member 'UWB_ui_BrainMes_C::Massage_Base_3bg' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Member_frame) == 0x000448, "Member 'UWB_ui_BrainMes_C::Massage_Member_frame' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Member_frame_add) == 0x000450, "Member 'UWB_ui_BrainMes_C::Massage_Member_frame_add' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Title_frame) == 0x000458, "Member 'UWB_ui_BrainMes_C::Massage_Title_frame' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Title_frame_1_add) == 0x000460, "Member 'UWB_ui_BrainMes_C::Massage_Title_frame_1_add' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Massage_Title_frame_2_add) == 0x000468, "Member 'UWB_ui_BrainMes_C::Massage_Title_frame_2_add' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, REDScrollBox_Message) == 0x000470, "Member 'UWB_ui_BrainMes_C::REDScrollBox_Message' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, REDScrollBox_Thread) == 0x000478, "Member 'UWB_ui_BrainMes_C::REDScrollBox_Thread' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ScaleBox_0) == 0x000480, "Member 'UWB_ui_BrainMes_C::ScaleBox_0' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Text_BrainMes_Member_1) == 0x000488, "Member 'UWB_ui_BrainMes_C::Text_BrainMes_Member_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Text_BrainMes_Member_2) == 0x000490, "Member 'UWB_ui_BrainMes_C::Text_BrainMes_Member_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Text_BrainMes_Name_1) == 0x000498, "Member 'UWB_ui_BrainMes_C::Text_BrainMes_Name_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Text_BrainMes_Reply) == 0x0004A0, "Member 'UWB_ui_BrainMes_C::Text_BrainMes_Reply' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Text_BrainMes_Title_1) == 0x0004A8, "Member 'UWB_ui_BrainMes_C::Text_BrainMes_Title_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Thread_Base_1) == 0x0004B0, "Member 'UWB_ui_BrainMes_C::Thread_Base_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Thread_Heder_base) == 0x0004B8, "Member 'UWB_ui_BrainMes_C::Thread_Heder_base' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Thread_Heder_face) == 0x0004C0, "Member 'UWB_ui_BrainMes_C::Thread_Heder_face' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Thread_Heder_face_frame) == 0x0004C8, "Member 'UWB_ui_BrainMes_C::Thread_Heder_face_frame' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Thread_Heder_pattern) == 0x0004D0, "Member 'UWB_ui_BrainMes_C::Thread_Heder_pattern' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, WB_ui_BrainMes_Parts_1) == 0x0004D8, "Member 'UWB_ui_BrainMes_C::WB_ui_BrainMes_Parts_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, WB_ui_BrainMes_Parts_3) == 0x0004E0, "Member 'UWB_ui_BrainMes_C::WB_ui_BrainMes_Parts_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, WB_ui_MainChoice_Parts_1) == 0x0004E8, "Member 'UWB_ui_BrainMes_C::WB_ui_MainChoice_Parts_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, CursorThread) == 0x0004F0, "Member 'UWB_ui_BrainMes_C::CursorThread' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, CursorMessage) == 0x0004F4, "Member 'UWB_ui_BrainMes_C::CursorMessage' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ThreadList) == 0x0004F8, "Member 'UWB_ui_BrainMes_C::ThreadList' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, FlagMessageTest) == 0x000508, "Member 'UWB_ui_BrainMes_C::FlagMessageTest' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, MessageNum) == 0x00050C, "Member 'UWB_ui_BrainMes_C::MessageNum' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ThreadNum) == 0x000510, "Member 'UWB_ui_BrainMes_C::ThreadNum' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, IsReply) == 0x000514, "Member 'UWB_ui_BrainMes_C::IsReply' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, FlagLock) == 0x000515, "Member 'UWB_ui_BrainMes_C::FlagLock' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ThreadMemberList) == 0x000518, "Member 'UWB_ui_BrainMes_C::ThreadMemberList' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, MessageInputFlag) == 0x000528, "Member 'UWB_ui_BrainMes_C::MessageInputFlag' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, FlagSetCurrentThreadID) == 0x000529, "Member 'UWB_ui_BrainMes_C::FlagSetCurrentThreadID' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, CurrentThreadID) == 0x00052C, "Member 'UWB_ui_BrainMes_C::CurrentThreadID' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, IsReady) == 0x000534, "Member 'UWB_ui_BrainMes_C::IsReady' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, MessageLoopFlag) == 0x000535, "Member 'UWB_ui_BrainMes_C::MessageLoopFlag' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, MessageLoopCounter) == 0x000538, "Member 'UWB_ui_BrainMes_C::MessageLoopCounter' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ReturnTimer) == 0x00053C, "Member 'UWB_ui_BrainMes_C::ReturnTimer' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ReplyMessageNum) == 0x000540, "Member 'UWB_ui_BrainMes_C::ReplyMessageNum' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, PlayerId) == 0x000544, "Member 'UWB_ui_BrainMes_C::PlayerId' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, MessageWorkList) == 0x000550, "Member 'UWB_ui_BrainMes_C::MessageWorkList' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, CallBondEpisode) == 0x000560, "Member 'UWB_ui_BrainMes_C::CallBondEpisode' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, IsInput) == 0x000570, "Member 'UWB_ui_BrainMes_C::IsInput' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, AutoReplyFlag) == 0x000571, "Member 'UWB_ui_BrainMes_C::AutoReplyFlag' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, AutoReplyState) == 0x000574, "Member 'UWB_ui_BrainMes_C::AutoReplyState' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, AutoReplyTimer) == 0x000578, "Member 'UWB_ui_BrainMes_C::AutoReplyTimer' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, FlagBattle) == 0x00057C, "Member 'UWB_ui_BrainMes_C::FlagBattle' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ReadMessageNumList) == 0x000580, "Member 'UWB_ui_BrainMes_C::ReadMessageNumList' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, AlreadyReadNum) == 0x000590, "Member 'UWB_ui_BrainMes_C::AlreadyReadNum' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, TextWidgetHelp) == 0x000598, "Member 'UWB_ui_BrainMes_C::TextWidgetHelp' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, GuideWidget) == 0x0005A0, "Member 'UWB_ui_BrainMes_C::GuideWidget' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, NewFlagInit) == 0x0005A8, "Member 'UWB_ui_BrainMes_C::NewFlagInit' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, SortIndexList) == 0x0005B0, "Member 'UWB_ui_BrainMes_C::SortIndexList' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, SortIndexWorkList) == 0x0005C0, "Member 'UWB_ui_BrainMes_C::SortIndexWorkList' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, SortType) == 0x0005D0, "Member 'UWB_ui_BrainMes_C::SortType' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, IsReply2) == 0x0005D4, "Member 'UWB_ui_BrainMes_C::IsReply2' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, WidgetThreadID) == 0x0005D8, "Member 'UWB_ui_BrainMes_C::WidgetThreadID' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, AlreadyReadNumWork) == 0x0005E0, "Member 'UWB_ui_BrainMes_C::AlreadyReadNumWork' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, FlagReplyWork) == 0x0005E4, "Member 'UWB_ui_BrainMes_C::FlagReplyWork' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ParentWidget) == 0x0005E8, "Member 'UWB_ui_BrainMes_C::ParentWidget' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, ScrollSE) == 0x0005F0, "Member 'UWB_ui_BrainMes_C::ScrollSE' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, BrainMesListScrollOffset) == 0x0005F8, "Member 'UWB_ui_BrainMes_C::BrainMesListScrollOffset' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, SetPopupMode) == 0x000600, "Member 'UWB_ui_BrainMes_C::SetPopupMode' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, Delta) == 0x000610, "Member 'UWB_ui_BrainMes_C::Delta' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, IsReplyBonds) == 0x000614, "Member 'UWB_ui_BrainMes_C::IsReplyBonds' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, IsEnableBonds) == 0x000615, "Member 'UWB_ui_BrainMes_C::IsEnableBonds' has a wrong offset!");
static_assert(offsetof(UWB_ui_BrainMes_C, MessageCreateFlag) == 0x000616, "Member 'UWB_ui_BrainMes_C::MessageCreateFlag' has a wrong offset!");

}

