#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ch_Base_MoveTo

#include "Basic.hpp"

#include "BTT_ch_Base_MoveTo_classes.hpp"
#include "BTT_ch_Base_MoveTo_parameters.hpp"


namespace SDK
{

// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.ExecuteUbergraph_BTT_ch_Base_MoveTo
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::ExecuteUbergraph_BTT_ch_Base_MoveTo(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "ExecuteUbergraph_BTT_ch_Base_MoveTo");

	Params::BTT_ch_Base_MoveTo_C_ExecuteUbergraph_BTT_ch_Base_MoveTo Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.Exit_CallFromCPP
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::Exit_CallFromCPP(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "Exit_CallFromCPP");

	Params::BTT_ch_Base_MoveTo_C_Exit_CallFromCPP Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.SetAIMoveTo_CallFromCPP
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::SetAIMoveTo_CallFromCPP(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "SetAIMoveTo_CallFromCPP");

	Params::BTT_ch_Base_MoveTo_C_SetAIMoveTo_CallFromCPP Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.SetAIMoveTo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::SetAIMoveTo(class AAIController* OwnerController, class ARSBattlePlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "SetAIMoveTo");

	Params::BTT_ch_Base_MoveTo_C_SetAIMoveTo Parms{};

	Parms.OwnerController = OwnerController;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "ReceiveExecuteAI");

	Params::BTT_ch_Base_MoveTo_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "ReceiveAbortAI");

	Params::BTT_ch_Base_MoveTo_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "ReceiveTickAI");

	Params::BTT_ch_Base_MoveTo_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.OnSuccess_6FF7E653409D8C7BD2E703A76336C01D
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPathFollowingResult                    MovementResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::OnSuccess_6FF7E653409D8C7BD2E703A76336C01D(EPathFollowingResult MovementResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "OnSuccess_6FF7E653409D8C7BD2E703A76336C01D");

	Params::BTT_ch_Base_MoveTo_C_OnSuccess_6FF7E653409D8C7BD2E703A76336C01D Parms{};

	Parms.MovementResult = MovementResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.OnFail_6FF7E653409D8C7BD2E703A76336C01D
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPathFollowingResult                    MovementResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::OnFail_6FF7E653409D8C7BD2E703A76336C01D(EPathFollowingResult MovementResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "OnFail_6FF7E653409D8C7BD2E703A76336C01D");

	Params::BTT_ch_Base_MoveTo_C_OnFail_6FF7E653409D8C7BD2E703A76336C01D Parms{};

	Parms.MovementResult = MovementResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.Exit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::Exit(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "Exit");

	Params::BTT_ch_Base_MoveTo_C_Exit Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.TickMove
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::TickMove(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "TickMove");

	Params::BTT_ch_Base_MoveTo_C_TickMove Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.CheckWall
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::CheckWall(class ARSBattlePlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "CheckWall");

	Params::BTT_ch_Base_MoveTo_C_CheckWall Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.CheckMovedDistance_Tick
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Param_OwnerCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::CheckMovedDistance_Tick(class ARSCharacterBase* Param_OwnerCharacter, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "CheckMovedDistance_Tick");

	Params::BTT_ch_Base_MoveTo_C_CheckMovedDistance_Tick Parms{};

	Parms.Param_OwnerCharacter = Param_OwnerCharacter;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.CheckMovedDistance_Initialize
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Param_OwnerCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::CheckMovedDistance_Initialize(class ARSCharacterBase* Param_OwnerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "CheckMovedDistance_Initialize");

	Params::BTT_ch_Base_MoveTo_C_CheckMovedDistance_Initialize Parms{};

	Parms.Param_OwnerCharacter = Param_OwnerCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.CheckMoveDistance_IsEnd
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARSCharacterBase*                 Param_OwnerCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBTT_ch_Base_MoveTo_C::CheckMoveDistance_IsEnd(class ARSCharacterBase* Param_OwnerCharacter, bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "CheckMoveDistance_IsEnd");

	Params::BTT_ch_Base_MoveTo_C_CheckMoveDistance_IsEnd Parms{};

	Parms.Param_OwnerCharacter = Param_OwnerCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.ForceWarp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Param_OwnerCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_ch_Base_MoveTo_C::ForceWarp(class ARSBattlePlayer_C* Param_OwnerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "ForceWarp");

	Params::BTT_ch_Base_MoveTo_C_ForceWarp Parms{};

	Parms.Param_OwnerCharacter = Param_OwnerCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.StopAIMoveTo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Param_OwnerCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRechargeResetAIMoveTimer                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBTT_ch_Base_MoveTo_C::StopAIMoveTo(class ARSCharacterBase* Param_OwnerCharacter, bool bRechargeResetAIMoveTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "StopAIMoveTo");

	Params::BTT_ch_Base_MoveTo_C_StopAIMoveTo Parms{};

	Parms.Param_OwnerCharacter = Param_OwnerCharacter;
	Parms.bRechargeResetAIMoveTimer = bRechargeResetAIMoveTimer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.Check Stick Move End
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBTT_ch_Base_MoveTo_C::Check_Stick_Move_End(class APawn* ControlledPawn, bool* bEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "Check Stick Move End");

	Params::BTT_ch_Base_MoveTo_C_Check_Stick_Move_End Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function BTT_ch_Base_MoveTo.BTT_ch_Base_MoveTo_C.CheckDistanceAndHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location1                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location2                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DistanceXY                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DistanceZ                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNearly                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBTT_ch_Base_MoveTo_C::CheckDistanceAndHeight(const struct FVector& Location1, const struct FVector& Location2, float DistanceXY, float DistanceZ, bool* bNearly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_ch_Base_MoveTo_C", "CheckDistanceAndHeight");

	Params::BTT_ch_Base_MoveTo_C_CheckDistanceAndHeight Parms{};

	Parms.Location1 = std::move(Location1);
	Parms.Location2 = std::move(Location2);
	Parms.DistanceXY = DistanceXY;
	Parms.DistanceZ = DistanceZ;

	UObject::ProcessEvent(Func, &Parms);

	if (bNearly != nullptr)
		*bNearly = Parms.bNearly;
}

}

