#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CosmosWebManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CosmosWebManager.BP_CosmosWebManager_C
// 0x0080 (0x0768 - 0x06E8)
class ABP_CosmosWebManager_C final : public ACosmosWebManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 baseUrl;                                           // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UWebApiConnect*                         WebApiConnect;                                     // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetryNum;                                          // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381F[0x4];                                     // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0718(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 LoginUserID;                                       // 0x0720(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Psn_ret;                                           // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3820[0x4];                                     // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PlatformUserIDList;                                // 0x0738(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FCosmosUserConvertInfo>         UserConvertInfoList;                               // 0x0748(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsAborted;                                         // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnvInitializeComplete;                           // 0x0759(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3821[0x2];                                     // 0x075A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SessionNgRetryNum;                                 // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UserConvertUserIDStatus;                           // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CosmosWebManager(int32 EntryPoint);
	void GetTrackingNumInternal();
	void CosmosCoreGetEvnEventInternal();
	void CosmosWebCoreLoginEventInternal();
	void CosmosCoreAgreeKpiEventInternal();
	void CosmosWebCoreEventInternal(ECosmosWebAPIType Type);
	void CosmosWebEventInternal(ECosmosWebAPIType Type);
	void EnvironmentRebuild();
	void CosmsoAddNotificationBrainMessageEventInternal();
	void CosmosGetQuestAnswersEventInternal(class FName QuestName);
	void CosmosGetPlayableQuestEventInternal(int32 Region, int32 Use, int32 Language, bool IsWait);
	void CosmosCheckAnswerEventInternal(const struct FAmieInterlockingCheckAnswer& Param);
	void CosmosUserConvertUserIdEventNoLatent(const TArray<class FString>& Param_PlatformUserIDList);
	void CosmosGetEvnEventInternal();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void CosmosAgreeKpiEventNoLatent(int32 AgreeFlag);
	void CosmosWebEventNoLatent(ECosmosWebAPIType Type);
	void ReceiveTick(float DeltaSeconds);
	void CosmosWebSealEventInternal();
	void CosmosWebTusWriteEventInternal();
	void CosmosWebTusReadEventInternal();
	void CosmosAgreeKpiEventInternal();
	void CosmosWebGetRankingEventInternal();
	void CosmosWebSetRankingEventInternal();
	void CosmosWebLoginEventInternal();
	void ErrorEvent(int32 Code, const class FString& Errmsg);
	void OnReceiveEvent(class UNetMessage* Data);
	void TimerEvent();
	void ReceiveBeginPlay();
	void PreCheck(ECosmosWebAPIType Type, bool* IsOK);
	void RequestAPI(ECosmosWebAPIType Type, class UWebApiConnect** Param_WebApiConnect);
	void CreateHeader(ECosmosWebAPIType NewParam, class UWebApiConnect** Param_WebApiConnect);
	void CreateKPIColumnData(TArray<struct FKpiNoColumnData>* NewParam);
	void ReceiveResponse(ECosmosWebAPIType Type, class UNetMessage* Data, bool* IsOK);
	void ResetTimer();
	void GetRankingID(const class FString& AreaName, class FString* RankingId, bool* IsFind);
	void GetRankingMasterList(TArray<struct FRankingMasterInfo>& NewParam, TArray<struct FCosmosRankingGetMasterList>* RankingMasterList);
	void CreateRankingIDList(TArray<struct FRankingMasterInfo>& RankingMasterInfo);
	void GetRankingList(TArray<struct FRankingInfo>& RankingInfoList, TArray<struct FCosmosRankingList>* List);
	void IsResultOK(bool* IsOK);
	void GetWebDateTime(const class FString& DateString, struct FDateTime* DateTime);
	bool EnvironmentValidate();
	bool IsEnvironmentBuildComplete();
	void CheckSessionNG(ECosmosWebAPIType Type, bool* IsNG);
	void CheckKpiFaile(ECosmosWebAPIType Type, bool* NewParam);
	void GetParamStatus(ECosmosWebAPIType Type, int32* Status);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CosmosWebManager_C">();
	}
	static class ABP_CosmosWebManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CosmosWebManager_C>();
	}
};
static_assert(alignof(ABP_CosmosWebManager_C) == 0x000008, "Wrong alignment on ABP_CosmosWebManager_C");
static_assert(sizeof(ABP_CosmosWebManager_C) == 0x000768, "Wrong size on ABP_CosmosWebManager_C");
static_assert(offsetof(ABP_CosmosWebManager_C, UberGraphFrame) == 0x0006E8, "Member 'ABP_CosmosWebManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, DefaultSceneRoot) == 0x0006F0, "Member 'ABP_CosmosWebManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, baseUrl) == 0x0006F8, "Member 'ABP_CosmosWebManager_C::baseUrl' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, WebApiConnect) == 0x000708, "Member 'ABP_CosmosWebManager_C::WebApiConnect' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, RetryNum) == 0x000710, "Member 'ABP_CosmosWebManager_C::RetryNum' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, TimerHandle) == 0x000718, "Member 'ABP_CosmosWebManager_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, LoginUserID) == 0x000720, "Member 'ABP_CosmosWebManager_C::LoginUserID' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, Psn_ret) == 0x000730, "Member 'ABP_CosmosWebManager_C::Psn_ret' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, PlatformUserIDList) == 0x000738, "Member 'ABP_CosmosWebManager_C::PlatformUserIDList' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, UserConvertInfoList) == 0x000748, "Member 'ABP_CosmosWebManager_C::UserConvertInfoList' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, IsAborted) == 0x000758, "Member 'ABP_CosmosWebManager_C::IsAborted' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, IsEnvInitializeComplete) == 0x000759, "Member 'ABP_CosmosWebManager_C::IsEnvInitializeComplete' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, SessionNgRetryNum) == 0x00075C, "Member 'ABP_CosmosWebManager_C::SessionNgRetryNum' has a wrong offset!");
static_assert(offsetof(ABP_CosmosWebManager_C, UserConvertUserIDStatus) == 0x000760, "Member 'ABP_CosmosWebManager_C::UserConvertUserIDStatus' has a wrong offset!");

}

