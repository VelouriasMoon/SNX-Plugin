#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_co0101

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ECableType_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BP_co0101.BP_co0101_C.ExecuteUbergraph_BP_co0101
// 0x0030 (0x0030 - 0x0000)
struct BP_co0101_C_ExecuteUbergraph_BP_co0101 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_New_Visibility;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45FE[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Rate;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45FF[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_co0101_C*                          K2Node_DynamicCast_AsABP_Co_0101;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4600[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           K2Node_Event_Type_1;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERSCableGravityType                           K2Node_Event_Type;                                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndOverrideGravity_ReturnValue;           // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BeginOverrideGravity_ReturnValue;         // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_ExecuteUbergraph_BP_co0101) == 0x000008, "Wrong alignment on BP_co0101_C_ExecuteUbergraph_BP_co0101");
static_assert(sizeof(BP_co0101_C_ExecuteUbergraph_BP_co0101) == 0x000030, "Wrong size on BP_co0101_C_ExecuteUbergraph_BP_co0101");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, EntryPoint) == 0x000000, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_Event_New_Visibility) == 0x000004, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_Event_New_Visibility' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_Event_Rate) == 0x000008, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_Event_Rate' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_DynamicCast_AsABP_Co_0101) == 0x000018, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_DynamicCast_AsABP_Co_0101' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_Event_DeltaSeconds) == 0x000024, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_Event_Type_1) == 0x000028, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_Event_Type_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, K2Node_Event_Type) == 0x000029, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, CallFunc_EndOverrideGravity_ReturnValue) == 0x00002A, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::CallFunc_EndOverrideGravity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_ExecuteUbergraph_BP_co0101, CallFunc_BeginOverrideGravity_ReturnValue) == 0x00002B, "Member 'BP_co0101_C_ExecuteUbergraph_BP_co0101::CallFunc_BeginOverrideGravity_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.EndOverrideGravity
// 0x0001 (0x0001 - 0x0000)
struct BP_co0101_C_EndOverrideGravity final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_EndOverrideGravity) == 0x000001, "Wrong alignment on BP_co0101_C_EndOverrideGravity");
static_assert(sizeof(BP_co0101_C_EndOverrideGravity) == 0x000001, "Wrong size on BP_co0101_C_EndOverrideGravity");
static_assert(offsetof(BP_co0101_C_EndOverrideGravity, Type) == 0x000000, "Member 'BP_co0101_C_EndOverrideGravity::Type' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.BeginOverrideGravity
// 0x0001 (0x0001 - 0x0000)
struct BP_co0101_C_BeginOverrideGravity final
{
public:
	ERSCableGravityType                           Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_BeginOverrideGravity) == 0x000001, "Wrong alignment on BP_co0101_C_BeginOverrideGravity");
static_assert(sizeof(BP_co0101_C_BeginOverrideGravity) == 0x000001, "Wrong size on BP_co0101_C_BeginOverrideGravity");
static_assert(offsetof(BP_co0101_C_BeginOverrideGravity, Type) == 0x000000, "Member 'BP_co0101_C_BeginOverrideGravity::Type' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_co0101_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_co0101_C_ReceiveTick");
static_assert(sizeof(BP_co0101_C_ReceiveTick) == 0x000004, "Wrong size on BP_co0101_C_ReceiveTick");
static_assert(offsetof(BP_co0101_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_co0101_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.SetCodePower
// 0x0004 (0x0004 - 0x0000)
struct BP_co0101_C_SetCodePower final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_SetCodePower) == 0x000004, "Wrong alignment on BP_co0101_C_SetCodePower");
static_assert(sizeof(BP_co0101_C_SetCodePower) == 0x000004, "Wrong size on BP_co0101_C_SetCodePower");
static_assert(offsetof(BP_co0101_C_SetCodePower, Rate) == 0x000000, "Member 'BP_co0101_C_SetCodePower::Rate' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_co0101_C_SetVisibility final
{
public:
	bool                                          New_Visibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_SetVisibility) == 0x000001, "Wrong alignment on BP_co0101_C_SetVisibility");
static_assert(sizeof(BP_co0101_C_SetVisibility) == 0x000001, "Wrong size on BP_co0101_C_SetVisibility");
static_assert(offsetof(BP_co0101_C_SetVisibility, New_Visibility) == 0x000000, "Member 'BP_co0101_C_SetVisibility::New_Visibility' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.UpdateDither
// 0x0014 (0x0014 - 0x0000)
struct BP_co0101_C_UpdateDither final
{
public:
	bool                                          CallFunc_IsCableMode_bResult;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4601[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4602[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_UpdateDither) == 0x000004, "Wrong alignment on BP_co0101_C_UpdateDither");
static_assert(sizeof(BP_co0101_C_UpdateDither) == 0x000014, "Wrong size on BP_co0101_C_UpdateDither");
static_assert(offsetof(BP_co0101_C_UpdateDither, CallFunc_IsCableMode_bResult) == 0x000000, "Member 'BP_co0101_C_UpdateDither::CallFunc_IsCableMode_bResult' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateDither, CallFunc_GetRate_ReturnValue) == 0x000004, "Member 'BP_co0101_C_UpdateDither::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateDither, CallFunc_IsOver_ReturnValue) == 0x000008, "Member 'BP_co0101_C_UpdateDither::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateDither, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_co0101_C_UpdateDither::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateDither, CallFunc_IsEnable_ReturnValue) == 0x000010, "Member 'BP_co0101_C_UpdateDither::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.DoCodeStart
// 0x0048 (0x0048 - 0x0000)
struct BP_co0101_C_DoCodeStart final
{
public:
	ECableType                                    Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOptionNoCutin;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNexusDrive;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bExColor;                                          // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4603[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4604[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4605[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x001C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0020(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x0024(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4606[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0030(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4607[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x003C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_DoCodeStart) == 0x000004, "Wrong alignment on BP_co0101_C_DoCodeStart");
static_assert(sizeof(BP_co0101_C_DoCodeStart) == 0x000048, "Wrong size on BP_co0101_C_DoCodeStart");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Type) == 0x000000, "Member 'BP_co0101_C_DoCodeStart::Type' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, bOptionNoCutin) == 0x000001, "Member 'BP_co0101_C_DoCodeStart::bOptionNoCutin' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, bNexusDrive) == 0x000002, "Member 'BP_co0101_C_DoCodeStart::bNexusDrive' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, bExColor) == 0x000003, "Member 'BP_co0101_C_DoCodeStart::bExColor' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, bDummy) == 0x000004, "Member 'BP_co0101_C_DoCodeStart::bDummy' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_float_Variable) == 0x000008, "Member 'BP_co0101_C_DoCodeStart::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_bool_Variable) == 0x00000C, "Member 'BP_co0101_C_DoCodeStart::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_float_Variable_1) == 0x000010, "Member 'BP_co0101_C_DoCodeStart::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_float_Variable_2) == 0x000014, "Member 'BP_co0101_C_DoCodeStart::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_bool_Variable_1) == 0x000018, "Member 'BP_co0101_C_DoCodeStart::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_float_Variable_3) == 0x00001C, "Member 'BP_co0101_C_DoCodeStart::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_float_Variable_4) == 0x000020, "Member 'BP_co0101_C_DoCodeStart::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_float_Variable_5) == 0x000024, "Member 'BP_co0101_C_DoCodeStart::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, K2Node_Select_Default) == 0x000028, "Member 'BP_co0101_C_DoCodeStart::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, K2Node_SwitchEnum_CmpSuccess) == 0x00002C, "Member 'BP_co0101_C_DoCodeStart::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, K2Node_Select_Default_1) == 0x000030, "Member 'BP_co0101_C_DoCodeStart::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'BP_co0101_C_DoCodeStart::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, CallFunc_Conv_IntToByte_ReturnValue) == 0x000038, "Member 'BP_co0101_C_DoCodeStart::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, Temp_bool_Variable_2) == 0x000039, "Member 'BP_co0101_C_DoCodeStart::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, CallFunc_GetValidValue_ReturnValue) == 0x00003A, "Member 'BP_co0101_C_DoCodeStart::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, K2Node_Select_Default_2) == 0x00003C, "Member 'BP_co0101_C_DoCodeStart::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000040, "Member 'BP_co0101_C_DoCodeStart::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000044, "Member 'BP_co0101_C_DoCodeStart::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeStart, CallFunc_GetValidValue_ReturnValue_1) == 0x000045, "Member 'BP_co0101_C_DoCodeStart::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.DoCodeEnd
// 0x0018 (0x0018 - 0x0000)
struct BP_co0101_C_DoCodeEnd final
{
public:
	ECableType                                    Ttype;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnd;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LEnd;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4608[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SceneManager_C*                     CallFunc_GetSceneManager_SceneManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStatusInScene_IsInScene;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_DoCodeEnd) == 0x000008, "Wrong alignment on BP_co0101_C_DoCodeEnd");
static_assert(sizeof(BP_co0101_C_DoCodeEnd) == 0x000018, "Wrong size on BP_co0101_C_DoCodeEnd");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, Ttype) == 0x000000, "Member 'BP_co0101_C_DoCodeEnd::Ttype' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, bEnd) == 0x000001, "Member 'BP_co0101_C_DoCodeEnd::bEnd' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, LEnd) == 0x000002, "Member 'BP_co0101_C_DoCodeEnd::LEnd' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, CallFunc_GetSceneManager_SceneManager) == 0x000008, "Member 'BP_co0101_C_DoCodeEnd::CallFunc_GetSceneManager_SceneManager' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_co0101_C_DoCodeEnd::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, CallFunc_IsStatusInScene_IsInScene) == 0x000011, "Member 'BP_co0101_C_DoCodeEnd::CallFunc_IsStatusInScene_IsInScene' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_DoCodeEnd, CallFunc_IsEnable_ReturnValue) == 0x000012, "Member 'BP_co0101_C_DoCodeEnd::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.EventPhysicsIdling
// 0x0008 (0x0008 - 0x0000)
struct BP_co0101_C_EventPhysicsIdling final
{
public:
	float                                         IdlingSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventPhysicsIdling_bDummy;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_EventPhysicsIdling) == 0x000004, "Wrong alignment on BP_co0101_C_EventPhysicsIdling");
static_assert(sizeof(BP_co0101_C_EventPhysicsIdling) == 0x000008, "Wrong size on BP_co0101_C_EventPhysicsIdling");
static_assert(offsetof(BP_co0101_C_EventPhysicsIdling, IdlingSec) == 0x000000, "Member 'BP_co0101_C_EventPhysicsIdling::IdlingSec' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_EventPhysicsIdling, bDummy) == 0x000004, "Member 'BP_co0101_C_EventPhysicsIdling::bDummy' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_EventPhysicsIdling, CallFunc_EventPhysicsIdling_bDummy) == 0x000005, "Member 'BP_co0101_C_EventPhysicsIdling::CallFunc_EventPhysicsIdling_bDummy' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_EventPhysicsIdling, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'BP_co0101_C_EventPhysicsIdling::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.GetSASStartAnimSequence
// 0x0020 (0x0020 - 0x0000)
struct BP_co0101_C_GetSASStartAnimSequence final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4609[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_460A[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetSASStartAnimSequence_AnimSequence;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_GetSASStartAnimSequence) == 0x000008, "Wrong alignment on BP_co0101_C_GetSASStartAnimSequence");
static_assert(sizeof(BP_co0101_C_GetSASStartAnimSequence) == 0x000020, "Wrong size on BP_co0101_C_GetSASStartAnimSequence");
static_assert(offsetof(BP_co0101_C_GetSASStartAnimSequence, AnimSequence) == 0x000000, "Member 'BP_co0101_C_GetSASStartAnimSequence::AnimSequence' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetSASStartAnimSequence, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_co0101_C_GetSASStartAnimSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetSASStartAnimSequence, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_co0101_C_GetSASStartAnimSequence::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetSASStartAnimSequence, CallFunc_Conv_IntToByte_ReturnValue) == 0x000010, "Member 'BP_co0101_C_GetSASStartAnimSequence::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetSASStartAnimSequence, CallFunc_GetValidValue_ReturnValue) == 0x000011, "Member 'BP_co0101_C_GetSASStartAnimSequence::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetSASStartAnimSequence, CallFunc_GetSASStartAnimSequence_AnimSequence) == 0x000018, "Member 'BP_co0101_C_GetSASStartAnimSequence::CallFunc_GetSASStartAnimSequence_AnimSequence' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.UpdateSwitchNexusDrive
// 0x0010 (0x0010 - 0x0000)
struct BP_co0101_C_UpdateSwitchNexusDrive final
{
public:
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_460B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_UpdateSwitchNexusDrive) == 0x000004, "Wrong alignment on BP_co0101_C_UpdateSwitchNexusDrive");
static_assert(sizeof(BP_co0101_C_UpdateSwitchNexusDrive) == 0x000010, "Wrong size on BP_co0101_C_UpdateSwitchNexusDrive");
static_assert(offsetof(BP_co0101_C_UpdateSwitchNexusDrive, CallFunc_IsOver_ReturnValue) == 0x000000, "Member 'BP_co0101_C_UpdateSwitchNexusDrive::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateSwitchNexusDrive, CallFunc_GetRate_ReturnValue) == 0x000004, "Member 'BP_co0101_C_UpdateSwitchNexusDrive::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateSwitchNexusDrive, CallFunc_Ease_ReturnValue) == 0x000008, "Member 'BP_co0101_C_UpdateSwitchNexusDrive::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateSwitchNexusDrive, CallFunc_IsEnable_ReturnValue) == 0x00000C, "Member 'BP_co0101_C_UpdateSwitchNexusDrive::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.SwitchNexusDrive
// 0x0024 (0x0024 - 0x0000)
struct BP_co0101_C_SwitchNexusDrive final
{
public:
	bool                                          bNexusDrive;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_460C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_460D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_SwitchNexusDrive) == 0x000004, "Wrong alignment on BP_co0101_C_SwitchNexusDrive");
static_assert(sizeof(BP_co0101_C_SwitchNexusDrive) == 0x000024, "Wrong size on BP_co0101_C_SwitchNexusDrive");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, bNexusDrive) == 0x000000, "Member 'BP_co0101_C_SwitchNexusDrive::bNexusDrive' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, Temp_bool_Variable) == 0x000001, "Member 'BP_co0101_C_SwitchNexusDrive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, Temp_float_Variable) == 0x000004, "Member 'BP_co0101_C_SwitchNexusDrive::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, Temp_float_Variable_1) == 0x000008, "Member 'BP_co0101_C_SwitchNexusDrive::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_co0101_C_SwitchNexusDrive::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, Temp_float_Variable_2) == 0x000010, "Member 'BP_co0101_C_SwitchNexusDrive::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, Temp_float_Variable_3) == 0x000014, "Member 'BP_co0101_C_SwitchNexusDrive::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, K2Node_Select_Default) == 0x000018, "Member 'BP_co0101_C_SwitchNexusDrive::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_co0101_C_SwitchNexusDrive::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchNexusDrive, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000020, "Member 'BP_co0101_C_SwitchNexusDrive::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.UpdateSwitchExColor
// 0x0010 (0x0010 - 0x0000)
struct BP_co0101_C_UpdateSwitchExColor final
{
public:
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_460E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_UpdateSwitchExColor) == 0x000004, "Wrong alignment on BP_co0101_C_UpdateSwitchExColor");
static_assert(sizeof(BP_co0101_C_UpdateSwitchExColor) == 0x000010, "Wrong size on BP_co0101_C_UpdateSwitchExColor");
static_assert(offsetof(BP_co0101_C_UpdateSwitchExColor, CallFunc_IsOver_ReturnValue) == 0x000000, "Member 'BP_co0101_C_UpdateSwitchExColor::CallFunc_IsOver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateSwitchExColor, CallFunc_GetRate_ReturnValue) == 0x000004, "Member 'BP_co0101_C_UpdateSwitchExColor::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateSwitchExColor, CallFunc_Ease_ReturnValue) == 0x000008, "Member 'BP_co0101_C_UpdateSwitchExColor::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_UpdateSwitchExColor, CallFunc_IsEnable_ReturnValue) == 0x00000C, "Member 'BP_co0101_C_UpdateSwitchExColor::CallFunc_IsEnable_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.SwitchExColor
// 0x0024 (0x0024 - 0x0000)
struct BP_co0101_C_SwitchExColor final
{
public:
	bool                                          bExColor;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_460F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4610[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_SwitchExColor) == 0x000004, "Wrong alignment on BP_co0101_C_SwitchExColor");
static_assert(sizeof(BP_co0101_C_SwitchExColor) == 0x000024, "Wrong size on BP_co0101_C_SwitchExColor");
static_assert(offsetof(BP_co0101_C_SwitchExColor, bExColor) == 0x000000, "Member 'BP_co0101_C_SwitchExColor::bExColor' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, Temp_bool_Variable) == 0x000001, "Member 'BP_co0101_C_SwitchExColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, Temp_float_Variable) == 0x000004, "Member 'BP_co0101_C_SwitchExColor::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, Temp_float_Variable_1) == 0x000008, "Member 'BP_co0101_C_SwitchExColor::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_co0101_C_SwitchExColor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, Temp_float_Variable_2) == 0x000010, "Member 'BP_co0101_C_SwitchExColor::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, Temp_float_Variable_3) == 0x000014, "Member 'BP_co0101_C_SwitchExColor::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, K2Node_Select_Default) == 0x000018, "Member 'BP_co0101_C_SwitchExColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_co0101_C_SwitchExColor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SwitchExColor, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000020, "Member 'BP_co0101_C_SwitchExColor::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.SettingTickInterval
// 0x0002 (0x0002 - 0x0000)
struct BP_co0101_C_SettingTickInterval final
{
public:
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnable_ReturnValue_1;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_SettingTickInterval) == 0x000001, "Wrong alignment on BP_co0101_C_SettingTickInterval");
static_assert(sizeof(BP_co0101_C_SettingTickInterval) == 0x000002, "Wrong size on BP_co0101_C_SettingTickInterval");
static_assert(offsetof(BP_co0101_C_SettingTickInterval, CallFunc_IsEnable_ReturnValue) == 0x000000, "Member 'BP_co0101_C_SettingTickInterval::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SettingTickInterval, CallFunc_IsEnable_ReturnValue_1) == 0x000001, "Member 'BP_co0101_C_SettingTickInterval::CallFunc_IsEnable_ReturnValue_1' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.SetUseNexusDrive
// 0x0078 (0x0078 - 0x0000)
struct BP_co0101_C_SetUseNexusDrive final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStealthMode;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4611[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      LocalBattlePlayer;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNexusCable;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNormalCable;                                     // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4612[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4613[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4614[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnable_ReturnValue;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4615[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4616[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_2;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue;                // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue_1;              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStealthMode_ReturnValue_2;              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_co0101_C_SetUseNexusDrive) == 0x000008, "Wrong alignment on BP_co0101_C_SetUseNexusDrive");
static_assert(sizeof(BP_co0101_C_SetUseNexusDrive) == 0x000078, "Wrong size on BP_co0101_C_SetUseNexusDrive");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, Value) == 0x000000, "Member 'BP_co0101_C_SetUseNexusDrive::Value' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, IsStealthMode) == 0x000004, "Member 'BP_co0101_C_SetUseNexusDrive::IsStealthMode' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, LocalBattlePlayer) == 0x000008, "Member 'BP_co0101_C_SetUseNexusDrive::LocalBattlePlayer' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, LocalValue) == 0x000010, "Member 'BP_co0101_C_SetUseNexusDrive::LocalValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, IsNexusCable) == 0x000014, "Member 'BP_co0101_C_SetUseNexusDrive::IsNexusCable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, IsNormalCable) == 0x000015, "Member 'BP_co0101_C_SetUseNexusDrive::IsNormalCable' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_GetRate_ReturnValue) == 0x000018, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, K2Node_DynamicCast_AsRSBattle_Player) == 0x000028, "Member 'BP_co0101_C_SetUseNexusDrive::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_co0101_C_SetUseNexusDrive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_Ease_ReturnValue) == 0x000034, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_IsEnable_ReturnValue) == 0x000038, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_IsEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_GetOwner_ReturnValue_1) == 0x000040, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x000048, "Member 'BP_co0101_C_SetUseNexusDrive::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_co0101_C_SetUseNexusDrive::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_GetOwner_ReturnValue_2) == 0x000058, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, K2Node_DynamicCast_AsRSBattle_Player_2) == 0x000060, "Member 'BP_co0101_C_SetUseNexusDrive::K2Node_DynamicCast_AsRSBattle_Player_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'BP_co0101_C_SetUseNexusDrive::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000069, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x00006A, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_IsStealthMode_ReturnValue) == 0x00006B, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_IsStealthMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_IsStealthMode_ReturnValue_1) == 0x00006C, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_IsStealthMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_IsStealthMode_ReturnValue_2) == 0x00006D, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_IsStealthMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00006E, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x00006F, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_SetUseNexusDrive, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000070, "Member 'BP_co0101_C_SetUseNexusDrive::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.GetCableIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_co0101_C_GetCableIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_GetCableIndex) == 0x000004, "Wrong alignment on BP_co0101_C_GetCableIndex");
static_assert(sizeof(BP_co0101_C_GetCableIndex) == 0x000004, "Wrong size on BP_co0101_C_GetCableIndex");
static_assert(offsetof(BP_co0101_C_GetCableIndex, Param_Index) == 0x000000, "Member 'BP_co0101_C_GetCableIndex::Param_Index' has a wrong offset!");

// Function BP_co0101.BP_co0101_C.GetMaterialLocationParamName
// 0x00A8 (0x00A8 - 0x0000)
struct BP_co0101_C_GetMaterialLocationParamName final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCableIndex_Index;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4617[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_co0101_C_GetMaterialLocationParamName) == 0x000008, "Wrong alignment on BP_co0101_C_GetMaterialLocationParamName");
static_assert(sizeof(BP_co0101_C_GetMaterialLocationParamName) == 0x0000A8, "Wrong size on BP_co0101_C_GetMaterialLocationParamName");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, ParamName) == 0x000000, "Member 'BP_co0101_C_GetMaterialLocationParamName::ParamName' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, CallFunc_GetCableIndex_Index) == 0x000008, "Member 'BP_co0101_C_GetMaterialLocationParamName::CallFunc_GetCableIndex_Index' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'BP_co0101_C_GetMaterialLocationParamName::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'BP_co0101_C_GetMaterialLocationParamName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, K2Node_MakeArray_Array) == 0x000068, "Member 'BP_co0101_C_GetMaterialLocationParamName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, CallFunc_Format_ReturnValue) == 0x000078, "Member 'BP_co0101_C_GetMaterialLocationParamName::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, CallFunc_Conv_TextToString_ReturnValue) == 0x000090, "Member 'BP_co0101_C_GetMaterialLocationParamName::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_co0101_C_GetMaterialLocationParamName, CallFunc_Conv_StringToName_ReturnValue) == 0x0000A0, "Member 'BP_co0101_C_GetMaterialLocationParamName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

}

