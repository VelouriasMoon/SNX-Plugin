#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerDamageReactionInfo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "EEnpcMetamorphosisiFinishType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerDamageReactionInfo.BP_PlayerDamageReactionInfo_C
// 0x0218 (0x0328 - 0x0110)
class UBP_PlayerDamageReactionInfo_C final : public UPlayerDamageReactionInfoBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0110(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EPlayerDamageKind                             DamageKind_0;                                      // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_851F[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DamageDir_0;                                       // 0x011C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddDamage_0;                                      // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8520[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageAttacker_0;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingPower_0;                                   // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FloatingAngle_0;                                   // 0x0144(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EHCSkillAttackType                            AttackType_0;                                      // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8521[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BadStateFlag_0;                                    // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrashAccessDelay;                                  // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnpcBrainCrashWaitTimer;                           // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCHitResult                           EnpcBrainCrashWaitHitResult;                       // 0x0160(0x01C0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bEnpcBrainCrashWait;                               // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerDamageReactionInfo(int32 EntryPoint);
	void EnpcBrainCrashWaitTick(float DeltaSeconds);
	void UnbindEnpcBrainCrashWaitTick();
	void BindEnpcBrainCrashWaitTick();
	void BrainCrashAccess(const struct FHCHitResult& HitResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UpdateDamageReaction(const struct FHCHitResult& HitResult);
	void Clear();
	void ClearAddDamage();
	void SetBrainFieldWarning(bool bTimeUp);
	void SetDeadDamage(bool bBrainFieldTimeUp);
	void SetDamageReaction(EPlayerDamageKind Param_DamageKind);
	bool CheckFinishMetamorphosis_BPImplement(class UPlayerENpcBaseComponent* ENpcComp, EPlayerDamageKind InDamageKind, bool bFront);
	bool StartEnemyAddDamageShake_BPImplement(bool bTriggerAttack);
	bool BrainCrashAccess_CallFromCPP(const struct FHCHitResult& HitResult);
	bool StartEnpcDamageMove_BPImplement(const struct FVector& Param_DamageDir, float Power, bool DeadMove);

	void GetDamageReaction(EPlayerDamageKind* ReactionType) const;
	void IsExistDamage(bool* bExist) const;
	void IsBlow(bool* bBlow) const;
	void IsAddDamage(bool* Param_bAddDamage) const;
	void CheckReaction(bool InReactionChance, bool InForceBlow, bool InForceReactionL, bool InLaunchAttack, bool InForceLaunch, bool InJustDodgeDown, bool InCheckWInce, float InWinceAccumulation, float InWinceResistance, float InKnockBackAccumulation, float InKnockBackResistance, float InDownAccumulation, float InDownResistance, const struct FVector& InDamageDir, int32 InBadStateFlag, const struct FRotator& InFloatingAngle, bool InPsychicObjectUniqueReaction, EPlayerDamageKind* Damage) const;
	void IsAerialDamage(bool* bAerial) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerDamageReactionInfo_C">();
	}
	static class UBP_PlayerDamageReactionInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerDamageReactionInfo_C>();
	}
};
static_assert(alignof(UBP_PlayerDamageReactionInfo_C) == 0x000008, "Wrong alignment on UBP_PlayerDamageReactionInfo_C");
static_assert(sizeof(UBP_PlayerDamageReactionInfo_C) == 0x000328, "Wrong size on UBP_PlayerDamageReactionInfo_C");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, UberGraphFrame) == 0x000110, "Member 'UBP_PlayerDamageReactionInfo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, DamageKind_0) == 0x000118, "Member 'UBP_PlayerDamageReactionInfo_C::DamageKind_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, DamageDir_0) == 0x00011C, "Member 'UBP_PlayerDamageReactionInfo_C::DamageDir_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, OwnerPlayer) == 0x000128, "Member 'UBP_PlayerDamageReactionInfo_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, bAddDamage_0) == 0x000130, "Member 'UBP_PlayerDamageReactionInfo_C::bAddDamage_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, DamageAttacker_0) == 0x000138, "Member 'UBP_PlayerDamageReactionInfo_C::DamageAttacker_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, FloatingPower_0) == 0x000140, "Member 'UBP_PlayerDamageReactionInfo_C::FloatingPower_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, FloatingAngle_0) == 0x000144, "Member 'UBP_PlayerDamageReactionInfo_C::FloatingAngle_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, AttackType_0) == 0x000150, "Member 'UBP_PlayerDamageReactionInfo_C::AttackType_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, BadStateFlag_0) == 0x000154, "Member 'UBP_PlayerDamageReactionInfo_C::BadStateFlag_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, CrashAccessDelay) == 0x000158, "Member 'UBP_PlayerDamageReactionInfo_C::CrashAccessDelay' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, EnpcBrainCrashWaitTimer) == 0x00015C, "Member 'UBP_PlayerDamageReactionInfo_C::EnpcBrainCrashWaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, EnpcBrainCrashWaitHitResult) == 0x000160, "Member 'UBP_PlayerDamageReactionInfo_C::EnpcBrainCrashWaitHitResult' has a wrong offset!");
static_assert(offsetof(UBP_PlayerDamageReactionInfo_C, bEnpcBrainCrashWait) == 0x000320, "Member 'UBP_PlayerDamageReactionInfo_C::bEnpcBrainCrashWait' has a wrong offset!");

}

