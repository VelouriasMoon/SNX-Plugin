#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ai_Enemy

#include "Basic.hpp"

#include "AiParamEnemy_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Enum_EnemyRange_structs.hpp"


namespace SDK::Params
{

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.ExecuteUbergraph_BP_Ai_Enemy
// 0x0040 (0x0040 - 0x0000)
struct BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EA6[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActorTimeDilation_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EA7[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> CallFunc_IsFlyEnemyCheck_self_CastInput;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EA8[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy");
static_assert(sizeof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy) == 0x000040, "Wrong size on BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, EntryPoint) == 0x000000, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000010, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_GetActorTimeDilation_ReturnValue) == 0x00001C, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_GetActorTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_IsFlyEnemyCheck_self_CastInput) == 0x000028, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_IsFlyEnemyCheck_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000038, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Ai_Enemy_C_ExecuteUbergraph_BP_Ai_Enemy::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Ai_Enemy_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Ai_Enemy_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_ReceiveTick");
static_assert(sizeof(BP_Ai_Enemy_C_ReceiveTick) == 0x000004, "Wrong size on BP_Ai_Enemy_C_ReceiveTick");
static_assert(offsetof(BP_Ai_Enemy_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Ai_Enemy_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsRandomCheck
// 0x0008 (0x0008 - 0x0000)
struct BP_Ai_Enemy_C_IsRandomCheck final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRandomCheckNative_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsRandomCheck) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_IsRandomCheck");
static_assert(sizeof(BP_Ai_Enemy_C_IsRandomCheck) == 0x000008, "Wrong size on BP_Ai_Enemy_C_IsRandomCheck");
static_assert(offsetof(BP_Ai_Enemy_C_IsRandomCheck, Value) == 0x000000, "Member 'BP_Ai_Enemy_C_IsRandomCheck::Value' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsRandomCheck, Ret) == 0x000004, "Member 'BP_Ai_Enemy_C_IsRandomCheck::Ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsRandomCheck, CallFunc_IsRandomCheckNative_ReturnValue) == 0x000005, "Member 'BP_Ai_Enemy_C_IsRandomCheck::CallFunc_IsRandomCheckNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsTimerCheck
// 0x0008 (0x0008 - 0x0000)
struct BP_Ai_Enemy_C_IsTimerCheck final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTimeCheckNative_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsTimerCheck) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_IsTimerCheck");
static_assert(sizeof(BP_Ai_Enemy_C_IsTimerCheck) == 0x000008, "Wrong size on BP_Ai_Enemy_C_IsTimerCheck");
static_assert(offsetof(BP_Ai_Enemy_C_IsTimerCheck, Value) == 0x000000, "Member 'BP_Ai_Enemy_C_IsTimerCheck::Value' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsTimerCheck, Ret) == 0x000004, "Member 'BP_Ai_Enemy_C_IsTimerCheck::Ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsTimerCheck, CallFunc_IsTimeCheckNative_ReturnValue) == 0x000005, "Member 'BP_Ai_Enemy_C_IsTimerCheck::CallFunc_IsTimeCheckNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsIdleMove
// 0x0010 (0x0010 - 0x0000)
struct BP_Ai_Enemy_C_IsIdleMove final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         NewLocalVar_0;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EA9[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyName;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIdleMove_IsIdle;                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIdleMoveNative_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsIdleMove) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_IsIdleMove");
static_assert(sizeof(BP_Ai_Enemy_C_IsIdleMove) == 0x000010, "Wrong size on BP_Ai_Enemy_C_IsIdleMove");
static_assert(offsetof(BP_Ai_Enemy_C_IsIdleMove, Ret) == 0x000000, "Member 'BP_Ai_Enemy_C_IsIdleMove::Ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsIdleMove, NewLocalVar_0) == 0x000001, "Member 'BP_Ai_Enemy_C_IsIdleMove::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsIdleMove, KeyName) == 0x000004, "Member 'BP_Ai_Enemy_C_IsIdleMove::KeyName' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsIdleMove, CallFunc_IsIdleMove_IsIdle) == 0x00000C, "Member 'BP_Ai_Enemy_C_IsIdleMove::CallFunc_IsIdleMove_IsIdle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsIdleMove, CallFunc_IsIdleMoveNative_ReturnValue) == 0x00000D, "Member 'BP_Ai_Enemy_C_IsIdleMove::CallFunc_IsIdleMoveNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsDamage
// 0x0003 (0x0003 - 0x0000)
struct BP_Ai_Enemy_C_IsDamage final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyAliveAnimKind                            LAnimKind;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDamageNative_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsDamage) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_IsDamage");
static_assert(sizeof(BP_Ai_Enemy_C_IsDamage) == 0x000003, "Wrong size on BP_Ai_Enemy_C_IsDamage");
static_assert(offsetof(BP_Ai_Enemy_C_IsDamage, Ret) == 0x000000, "Member 'BP_Ai_Enemy_C_IsDamage::Ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsDamage, LAnimKind) == 0x000001, "Member 'BP_Ai_Enemy_C_IsDamage::LAnimKind' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsDamage, CallFunc_IsDamageNative_ReturnValue) == 0x000002, "Member 'BP_Ai_Enemy_C_IsDamage::CallFunc_IsDamageNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsHpPercentDown
// 0x0008 (0x0008 - 0x0000)
struct BP_Ai_Enemy_C_IsHpPercentDown final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Error;                                             // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHpPercentDownNative_error;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHpPercentDownNative_ReturnValue;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsHpPercentDown) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_IsHpPercentDown");
static_assert(sizeof(BP_Ai_Enemy_C_IsHpPercentDown) == 0x000008, "Wrong size on BP_Ai_Enemy_C_IsHpPercentDown");
static_assert(offsetof(BP_Ai_Enemy_C_IsHpPercentDown, Percent) == 0x000000, "Member 'BP_Ai_Enemy_C_IsHpPercentDown::Percent' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsHpPercentDown, Return) == 0x000004, "Member 'BP_Ai_Enemy_C_IsHpPercentDown::Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsHpPercentDown, Error) == 0x000005, "Member 'BP_Ai_Enemy_C_IsHpPercentDown::Error' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsHpPercentDown, CallFunc_IsHpPercentDownNative_error) == 0x000006, "Member 'BP_Ai_Enemy_C_IsHpPercentDown::CallFunc_IsHpPercentDownNative_error' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsHpPercentDown, CallFunc_IsHpPercentDownNative_ReturnValue) == 0x000007, "Member 'BP_Ai_Enemy_C_IsHpPercentDown::CallFunc_IsHpPercentDownNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.GetAiData
// 0x00D0 (0x00D0 - 0x0000)
struct BP_Ai_Enemy_C_GetAiData final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThroughNotFound;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyThinkActionType                         ThinkActionType;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EAA[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Probability;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoRange;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoAngle;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HP;                                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EAB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 UniqueConditions;                                  // 0x0020(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	struct FAiParamEnemy                          CallFunc_GetAiDataTable_Param;                     // 0x0030(0x00A0)(HasGetValueTypeHash)
};
static_assert(alignof(BP_Ai_Enemy_C_GetAiData) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_GetAiData");
static_assert(sizeof(BP_Ai_Enemy_C_GetAiData) == 0x0000D0, "Wrong size on BP_Ai_Enemy_C_GetAiData");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_GetAiData::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, ThroughNotFound) == 0x000001, "Member 'BP_Ai_Enemy_C_GetAiData::ThroughNotFound' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, ThinkActionType) == 0x000002, "Member 'BP_Ai_Enemy_C_GetAiData::ThinkActionType' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, Probability) == 0x000004, "Member 'BP_Ai_Enemy_C_GetAiData::Probability' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, Range) == 0x000008, "Member 'BP_Ai_Enemy_C_GetAiData::Range' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, NoRange) == 0x00000C, "Member 'BP_Ai_Enemy_C_GetAiData::NoRange' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, Angle) == 0x000010, "Member 'BP_Ai_Enemy_C_GetAiData::Angle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, NoAngle) == 0x000014, "Member 'BP_Ai_Enemy_C_GetAiData::NoAngle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, HP) == 0x000018, "Member 'BP_Ai_Enemy_C_GetAiData::HP' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, UniqueConditions) == 0x000020, "Member 'BP_Ai_Enemy_C_GetAiData::UniqueConditions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiData, CallFunc_GetAiDataTable_Param) == 0x000030, "Member 'BP_Ai_Enemy_C_GetAiData::CallFunc_GetAiDataTable_Param' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SetAction
// 0x0068 (0x0068 - 0x0000)
struct BP_Ai_Enemy_C_SetAction final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EAC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetAiDataTableString_Param;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EAD[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EnemyBattleLog_C*                   K2Node_DynamicCast_AsBP_Enemy_Battle_Log;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OutputLog_Action_dummy;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEnemyThinkActionType                         CallFunc_GetThinkActionType_ReturnValue;           // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckIdleMoveActionNative_ReturnValue;    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EAE[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EAF[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetAiDataTableString_Param_1;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EB0[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_SetAction) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_SetAction");
static_assert(sizeof(BP_Ai_Enemy_C_SetAction) == 0x000068, "Wrong size on BP_Ai_Enemy_C_SetAction");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_SetAction::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_GetAiDataTableString_Param) == 0x000008, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_GetAiDataTableString_Param' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000018, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, K2Node_DynamicCast_AsBP_Enemy_Battle_Log) == 0x000020, "Member 'BP_Ai_Enemy_C_SetAction::K2Node_DynamicCast_AsBP_Enemy_Battle_Log' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Ai_Enemy_C_SetAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_OutputLog_Action_dummy) == 0x000029, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_OutputLog_Action_dummy' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_GetThinkActionType_ReturnValue) == 0x00002A, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_GetThinkActionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00002B, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_CheckIdleMoveActionNative_ReturnValue) == 0x00002C, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_CheckIdleMoveActionNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_GetDebuggingManager_Manager) == 0x000030, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000039, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_GetAiDataTableString_Param_1) == 0x000040, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_GetAiDataTableString_Param_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_GetBlackboard_ReturnValue) == 0x000058, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetAction, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'BP_Ai_Enemy_C_SetAction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.GetAiDataDistance
// 0x000C (0x000C - 0x0000)
struct BP_Ai_Enemy_C_GetAiDataDistance final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotAngle;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotHeight;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDistanceAngleCheck_bool;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_GetAiDataDistance) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_GetAiDataDistance");
static_assert(sizeof(BP_Ai_Enemy_C_GetAiDataDistance) == 0x00000C, "Wrong size on BP_Ai_Enemy_C_GetAiDataDistance");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, NotAngle) == 0x000001, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::NotAngle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, NotHeight) == 0x000002, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::NotHeight' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, Return) == 0x000003, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, Angle) == 0x000004, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::Angle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, CallFunc_IsDistanceAngleCheck_bool) == 0x000008, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::CallFunc_IsDistanceAngleCheck_bool' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'BP_Ai_Enemy_C_GetAiDataDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.GetAiDataDistanceAngleCheck
// 0x0006 (0x0006 - 0x0000)
struct BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotHeight;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAiDataDistance_return;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAiDataDistance_return_1;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck");
static_assert(sizeof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck) == 0x000006, "Wrong size on BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck, NotHeight) == 0x000001, "Member 'BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck::NotHeight' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck, Return) == 0x000002, "Member 'BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck::Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck, CallFunc_GetAiDataDistance_return) == 0x000003, "Member 'BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck::CallFunc_GetAiDataDistance_return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck, CallFunc_GetAiDataDistance_return_1) == 0x000005, "Member 'BP_Ai_Enemy_C_GetAiDataDistanceAngleCheck::CallFunc_GetAiDataDistance_return_1' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_Ai_Enemy_C_IsEvent final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventNative_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsEvent) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_IsEvent");
static_assert(sizeof(BP_Ai_Enemy_C_IsEvent) == 0x000002, "Wrong size on BP_Ai_Enemy_C_IsEvent");
static_assert(offsetof(BP_Ai_Enemy_C_IsEvent, Ret) == 0x000000, "Member 'BP_Ai_Enemy_C_IsEvent::Ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsEvent, CallFunc_IsEventNative_ReturnValue) == 0x000001, "Member 'BP_Ai_Enemy_C_IsEvent::CallFunc_IsEventNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SelectAction
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Ai_Enemy_C_SelectAction final
{
public:
	uint8                                         LDebugKey;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EB1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                LDebuggingManager;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnemyThinkActionType                         CallFunc_GetAiData_ThinkActionType;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EB2[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAiData_Probability;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAiData_Range;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAiData_NoRange;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAiData_Angle;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAiData_NoAngle;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAiData_Hp;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EB3[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_GetAiData_UniqueConditions;               // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetDebugAiTableKey_bSuccess;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetDebugAiTableKey_ReturnKey;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EB4[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAiTimer_AiTimer;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTimerCheck_ret;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BossBattleBeginAction_success;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAiDataDistanceAngleCheck_return;       // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EB5[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EB6[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EB7[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EB8[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MoveAction_Return;                        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotMoveAction_Return;                     // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsIdleMove_ret;                           // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EB9[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonAIInterface_C>  CallFunc_GetIsBattleMode_self_CastInput;           // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattleMode_IsBattleMode;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_SelectAction) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_SelectAction");
static_assert(sizeof(BP_Ai_Enemy_C_SelectAction) == 0x0000A8, "Wrong size on BP_Ai_Enemy_C_SelectAction");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, LDebugKey) == 0x000000, "Member 'BP_Ai_Enemy_C_SelectAction::LDebugKey' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, LDebuggingManager) == 0x000008, "Member 'BP_Ai_Enemy_C_SelectAction::LDebuggingManager' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_ThinkActionType) == 0x000010, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_ThinkActionType' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_Probability) == 0x000014, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_Probability' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_Range) == 0x000018, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_Range' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_NoRange) == 0x00001C, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_NoRange' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_Angle) == 0x000020, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_Angle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_NoAngle) == 0x000024, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_NoAngle' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_Hp) == 0x000028, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_Hp' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiData_UniqueConditions) == 0x000030, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiData_UniqueConditions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetDebugAiTableKey_bSuccess) == 0x000040, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetDebugAiTableKey_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetDebugAiTableKey_ReturnKey) == 0x000041, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetDebugAiTableKey_ReturnKey' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiTimer_AiTimer) == 0x000044, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiTimer_AiTimer' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsTimerCheck_ret) == 0x000048, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsTimerCheck_ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_BossBattleBeginAction_success) == 0x000049, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_BossBattleBeginAction_success' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_Conv_IntToByte_ReturnValue) == 0x00004A, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetAiDataDistanceAngleCheck_return) == 0x00004B, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetAiDataDistanceAngleCheck_return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetPlayerPawn_ReturnValue) == 0x000050, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, K2Node_DynamicCast_AsRSBattle_Player) == 0x000060, "Member 'BP_Ai_Enemy_C_SelectAction::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_Ai_Enemy_C_SelectAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000070, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000079, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetDebuggingManager_Manager) == 0x000080, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_MoveAction_Return) == 0x000088, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_MoveAction_Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsValid_ReturnValue_2) == 0x000089, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_NotMoveAction_Return) == 0x00008A, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_NotMoveAction_Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsIdleMove_ret) == 0x00008B, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsIdleMove_ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsValid_ReturnValue_3) == 0x00008C, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetIsBattleMode_self_CastInput) == 0x000090, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetIsBattleMode_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_GetIsBattleMode_IsBattleMode) == 0x0000A0, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_GetIsBattleMode_IsBattleMode' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectAction, CallFunc_IsValid_ReturnValue_4) == 0x0000A1, "Member 'BP_Ai_Enemy_C_SelectAction::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.MoveAction
// 0x0001 (0x0001 - 0x0000)
struct BP_Ai_Enemy_C_MoveAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_MoveAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_MoveAction");
static_assert(sizeof(BP_Ai_Enemy_C_MoveAction) == 0x000001, "Wrong size on BP_Ai_Enemy_C_MoveAction");
static_assert(offsetof(BP_Ai_Enemy_C_MoveAction, Return) == 0x000000, "Member 'BP_Ai_Enemy_C_MoveAction::Return' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.NotMoveAction
// 0x0001 (0x0001 - 0x0000)
struct BP_Ai_Enemy_C_NotMoveAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_NotMoveAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_NotMoveAction");
static_assert(sizeof(BP_Ai_Enemy_C_NotMoveAction) == 0x000001, "Wrong size on BP_Ai_Enemy_C_NotMoveAction");
static_assert(offsetof(BP_Ai_Enemy_C_NotMoveAction, Return) == 0x000000, "Member 'BP_Ai_Enemy_C_NotMoveAction::Return' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsAiAction
// 0x0108 (0x0108 - 0x0000)
struct BP_Ai_Enemy_C_IsAiAction final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotHeight;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotProbability;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EBA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          L_param;                                           // 0x0008(0x00A0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<uint8>                                 LConditions;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         LProbability;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LHp;                                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Ret;                                             // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EBB[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> CallFunc_IsControlPlayer_self_CastInput;           // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAiDataDistanceAngleCheck_return;       // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueConditionCheck_bResult;           // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EBC[0x1];                                     // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsAiActionNative_Range_Work;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsAiActionNative_NoRange_Work;            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsAiActionNative_Angle_Work;              // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsAiActionNative_NoAngle_Work;            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EBD[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_IsAiActionNative_lConditions;             // 0x00F0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsAiActionNative_IsPreCondition;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAiActionNative_ReturnValue;             // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAiTimer_Return;                        // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugFindIgnoreAction_Find;               // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsAiAction) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsAiAction");
static_assert(sizeof(BP_Ai_Enemy_C_IsAiAction) == 0x000108, "Wrong size on BP_Ai_Enemy_C_IsAiAction");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_IsAiAction::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, NotHeight) == 0x000001, "Member 'BP_Ai_Enemy_C_IsAiAction::NotHeight' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, NotProbability) == 0x000002, "Member 'BP_Ai_Enemy_C_IsAiAction::NotProbability' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, Return) == 0x000003, "Member 'BP_Ai_Enemy_C_IsAiAction::Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, L_param) == 0x000008, "Member 'BP_Ai_Enemy_C_IsAiAction::L_param' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, LConditions) == 0x0000A8, "Member 'BP_Ai_Enemy_C_IsAiAction::LConditions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, LProbability) == 0x0000B8, "Member 'BP_Ai_Enemy_C_IsAiAction::LProbability' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, LHp) == 0x0000BC, "Member 'BP_Ai_Enemy_C_IsAiAction::LHp' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, L_Ret) == 0x0000C0, "Member 'BP_Ai_Enemy_C_IsAiAction::L_Ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsControlPlayer_self_CastInput) == 0x0000C8, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsControlPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsControlPlayer_ReturnValue) == 0x0000D8, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_GetAiDataDistanceAngleCheck_return) == 0x0000D9, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_GetAiDataDistanceAngleCheck_return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsUniqueConditionCheck_bResult) == 0x0000DA, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsUniqueConditionCheck_bResult' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_Range_Work) == 0x0000DC, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_Range_Work' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_NoRange_Work) == 0x0000E0, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_NoRange_Work' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_Angle_Work) == 0x0000E4, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_Angle_Work' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_NoAngle_Work) == 0x0000E8, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_NoAngle_Work' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_lConditions) == 0x0000F0, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_lConditions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_IsPreCondition) == 0x000100, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_IsPreCondition' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_IsAiActionNative_ReturnValue) == 0x000101, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_IsAiActionNative_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_SetAiTimer_Return) == 0x000102, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_SetAiTimer_Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAiAction, CallFunc_DebugFindIgnoreAction_Find) == 0x000103, "Member 'BP_Ai_Enemy_C_IsAiAction::CallFunc_DebugFindIgnoreAction_Find' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SelectParamAction
// 0x0030 (0x0030 - 0x0000)
struct BP_Ai_Enemy_C_SelectParamAction final
{
public:
	TArray<uint8>                                 ActionEnums;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          NotHeight;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Param_Action;                                      // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         L_SelectAction;                                    // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EBE[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EBF[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EC0[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAiAction_Return;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EC1[0x1];                                     // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Ai_Enemy_C_SelectParamAction) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_SelectParamAction");
static_assert(sizeof(BP_Ai_Enemy_C_SelectParamAction) == 0x000030, "Wrong size on BP_Ai_Enemy_C_SelectParamAction");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, ActionEnums) == 0x000000, "Member 'BP_Ai_Enemy_C_SelectParamAction::ActionEnums' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, NotHeight) == 0x000010, "Member 'BP_Ai_Enemy_C_SelectParamAction::NotHeight' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, Param_Action) == 0x000011, "Member 'BP_Ai_Enemy_C_SelectParamAction::Param_Action' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, L_SelectAction) == 0x000012, "Member 'BP_Ai_Enemy_C_SelectParamAction::L_SelectAction' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_Ai_Enemy_C_SelectParamAction::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_Ai_Enemy_C_SelectParamAction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_Ai_Enemy_C_SelectParamAction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_IsAiAction_Return) == 0x000028, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_IsAiAction_Return' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_Less_IntInt_ReturnValue) == 0x000029, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectParamAction, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_Ai_Enemy_C_SelectParamAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsTimerOK
// 0x0003 (0x0003 - 0x0000)
struct BP_Ai_Enemy_C_IsTimerOK final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTimerOKNative_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsTimerOK) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_IsTimerOK");
static_assert(sizeof(BP_Ai_Enemy_C_IsTimerOK) == 0x000003, "Wrong size on BP_Ai_Enemy_C_IsTimerOK");
static_assert(offsetof(BP_Ai_Enemy_C_IsTimerOK, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_IsTimerOK::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsTimerOK, Result) == 0x000001, "Member 'BP_Ai_Enemy_C_IsTimerOK::Result' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsTimerOK, CallFunc_IsTimerOKNative_ReturnValue) == 0x000002, "Member 'BP_Ai_Enemy_C_IsTimerOK::CallFunc_IsTimerOKNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SelectRangeAction
// 0x0048 (0x0048 - 0x0000)
struct BP_Ai_Enemy_C_SelectRangeAction final
{
public:
	bool                                          NotHeight;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         SelectAction;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         L_Selected;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC2[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_GetMoveActions_Actions;                   // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	uint8                                         CallFunc_SelectParamAction_Action;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC3[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_EnemyRange                               CallFunc_GetTargetRangeType_RangeType;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC4[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_GetRangeActions_Actions;                  // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	uint8                                         CallFunc_SelectParamAction_Action_1;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC5[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_SelectRangeAction) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_SelectRangeAction");
static_assert(sizeof(BP_Ai_Enemy_C_SelectRangeAction) == 0x000048, "Wrong size on BP_Ai_Enemy_C_SelectRangeAction");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, NotHeight) == 0x000000, "Member 'BP_Ai_Enemy_C_SelectRangeAction::NotHeight' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, SelectAction) == 0x000001, "Member 'BP_Ai_Enemy_C_SelectRangeAction::SelectAction' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, L_Selected) == 0x000002, "Member 'BP_Ai_Enemy_C_SelectRangeAction::L_Selected' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_GetMoveActions_Actions) == 0x000008, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_GetMoveActions_Actions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_SelectParamAction_Action) == 0x000018, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_SelectParamAction_Action' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_GetTargetRangeType_RangeType) == 0x000021, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_GetTargetRangeType_RangeType' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_GetRangeActions_Actions) == 0x000028, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_GetRangeActions_Actions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_SelectParamAction_Action_1) == 0x000038, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_SelectParamAction_Action_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SelectRangeAction, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000041, "Member 'BP_Ai_Enemy_C_SelectRangeAction::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SetReserveAction
// 0x0010 (0x0010 - 0x0000)
struct BP_Ai_Enemy_C_SetReserveAction final
{
public:
	uint8                                         Param_Action;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param00;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param01;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_SetReserveAction) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_SetReserveAction");
static_assert(sizeof(BP_Ai_Enemy_C_SetReserveAction) == 0x000010, "Wrong size on BP_Ai_Enemy_C_SetReserveAction");
static_assert(offsetof(BP_Ai_Enemy_C_SetReserveAction, Param_Action) == 0x000000, "Member 'BP_Ai_Enemy_C_SetReserveAction::Param_Action' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetReserveAction, Param00) == 0x000004, "Member 'BP_Ai_Enemy_C_SetReserveAction::Param00' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetReserveAction, Param01) == 0x000008, "Member 'BP_Ai_Enemy_C_SetReserveAction::Param01' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetReserveAction, Dummy) == 0x00000C, "Member 'BP_Ai_Enemy_C_SetReserveAction::Dummy' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SetActionFromReserved
// 0x0002 (0x0002 - 0x0000)
struct BP_Ai_Enemy_C_SetActionFromReserved final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReservedAction_Reserved;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_SetActionFromReserved) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_SetActionFromReserved");
static_assert(sizeof(BP_Ai_Enemy_C_SetActionFromReserved) == 0x000002, "Wrong size on BP_Ai_Enemy_C_SetActionFromReserved");
static_assert(offsetof(BP_Ai_Enemy_C_SetActionFromReserved, Dummy) == 0x000000, "Member 'BP_Ai_Enemy_C_SetActionFromReserved::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_SetActionFromReserved, CallFunc_IsReservedAction_Reserved) == 0x000001, "Member 'BP_Ai_Enemy_C_SetActionFromReserved::CallFunc_IsReservedAction_Reserved' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.ResetAction
// 0x0018 (0x0018 - 0x0000)
struct BP_Ai_Enemy_C_ResetAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EC7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_ResetAction) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_ResetAction");
static_assert(sizeof(BP_Ai_Enemy_C_ResetAction) == 0x000018, "Wrong size on BP_Ai_Enemy_C_ResetAction");
static_assert(offsetof(BP_Ai_Enemy_C_ResetAction, Dummy) == 0x000000, "Member 'BP_Ai_Enemy_C_ResetAction::Dummy' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ResetAction, CallFunc_GetBlackboard_ReturnValue) == 0x000008, "Member 'BP_Ai_Enemy_C_ResetAction::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_ResetAction, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Ai_Enemy_C_ResetAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.WinceCounterAction
// 0x0003 (0x0003 - 0x0000)
struct BP_Ai_Enemy_C_WinceCounterAction final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSet;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_WinceCounterAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_WinceCounterAction");
static_assert(sizeof(BP_Ai_Enemy_C_WinceCounterAction) == 0x000003, "Wrong size on BP_Ai_Enemy_C_WinceCounterAction");
static_assert(offsetof(BP_Ai_Enemy_C_WinceCounterAction, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_WinceCounterAction::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_WinceCounterAction, IsSet) == 0x000001, "Member 'BP_Ai_Enemy_C_WinceCounterAction::IsSet' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_WinceCounterAction, Ret) == 0x000002, "Member 'BP_Ai_Enemy_C_WinceCounterAction::Ret' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.KnockBackCounterAction
// 0x0003 (0x0003 - 0x0000)
struct BP_Ai_Enemy_C_KnockBackCounterAction final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSet;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_KnockBackCounterAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_KnockBackCounterAction");
static_assert(sizeof(BP_Ai_Enemy_C_KnockBackCounterAction) == 0x000003, "Wrong size on BP_Ai_Enemy_C_KnockBackCounterAction");
static_assert(offsetof(BP_Ai_Enemy_C_KnockBackCounterAction, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_KnockBackCounterAction::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_KnockBackCounterAction, IsSet) == 0x000001, "Member 'BP_Ai_Enemy_C_KnockBackCounterAction::IsSet' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_KnockBackCounterAction, Ret) == 0x000002, "Member 'BP_Ai_Enemy_C_KnockBackCounterAction::Ret' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsPreConditionOK
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Ai_Enemy_C_IsPreConditionOK final
{
public:
	struct FAiParamEnemy                          AiParam;                                           // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewLocalVar_1;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EC8[0x5];                                     // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> CallFunc_IsControlPlayer_self_CastInput;           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPreConditionOKNative_ReturnValue;       // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsPreConditionOK) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsPreConditionOK");
static_assert(sizeof(BP_Ai_Enemy_C_IsPreConditionOK) == 0x0000C0, "Wrong size on BP_Ai_Enemy_C_IsPreConditionOK");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, AiParam) == 0x000000, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::AiParam' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, bOK) == 0x0000A0, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::bOK' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, NewLocalVar_1) == 0x0000A1, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, L_result) == 0x0000A2, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::L_result' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, CallFunc_IsControlPlayer_self_CastInput) == 0x0000A8, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::CallFunc_IsControlPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, CallFunc_IsControlPlayer_ReturnValue) == 0x0000B8, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPreConditionOK, CallFunc_IsPreConditionOKNative_ReturnValue) == 0x0000B9, "Member 'BP_Ai_Enemy_C_IsPreConditionOK::CallFunc_IsPreConditionOKNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.SetIdleMoveAction
// 0x0001 (0x0001 - 0x0000)
struct BP_Ai_Enemy_C_SetIdleMoveAction final
{
public:
	bool                                          LFind;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_SetIdleMoveAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_SetIdleMoveAction");
static_assert(sizeof(BP_Ai_Enemy_C_SetIdleMoveAction) == 0x000001, "Wrong size on BP_Ai_Enemy_C_SetIdleMoveAction");
static_assert(offsetof(BP_Ai_Enemy_C_SetIdleMoveAction, LFind) == 0x000000, "Member 'BP_Ai_Enemy_C_SetIdleMoveAction::LFind' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.CheckIdleMoveAction
// 0x0004 (0x0004 - 0x0000)
struct BP_Ai_Enemy_C_CheckIdleMoveAction final
{
public:
	uint8                                         Param_Action;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIdleMoveAction;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LFind;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckIdleMoveActionNative_ReturnValue;    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_CheckIdleMoveAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_CheckIdleMoveAction");
static_assert(sizeof(BP_Ai_Enemy_C_CheckIdleMoveAction) == 0x000004, "Wrong size on BP_Ai_Enemy_C_CheckIdleMoveAction");
static_assert(offsetof(BP_Ai_Enemy_C_CheckIdleMoveAction, Param_Action) == 0x000000, "Member 'BP_Ai_Enemy_C_CheckIdleMoveAction::Param_Action' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_CheckIdleMoveAction, IsIdleMoveAction) == 0x000001, "Member 'BP_Ai_Enemy_C_CheckIdleMoveAction::IsIdleMoveAction' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_CheckIdleMoveAction, LFind) == 0x000002, "Member 'BP_Ai_Enemy_C_CheckIdleMoveAction::LFind' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_CheckIdleMoveAction, CallFunc_CheckIdleMoveActionNative_ReturnValue) == 0x000003, "Member 'BP_Ai_Enemy_C_CheckIdleMoveAction::CallFunc_CheckIdleMoveActionNative_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.GetAiTimer_FromNative
// 0x000C (0x000C - 0x0000)
struct BP_Ai_Enemy_C_GetAiTimer_FromNative final
{
public:
	uint8                                         ActionEnym;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAiTimer_AiTimer;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Ai_Enemy_C_GetAiTimer_FromNative) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_GetAiTimer_FromNative");
static_assert(sizeof(BP_Ai_Enemy_C_GetAiTimer_FromNative) == 0x00000C, "Wrong size on BP_Ai_Enemy_C_GetAiTimer_FromNative");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiTimer_FromNative, ActionEnym) == 0x000000, "Member 'BP_Ai_Enemy_C_GetAiTimer_FromNative::ActionEnym' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiTimer_FromNative, ReturnValue) == 0x000004, "Member 'BP_Ai_Enemy_C_GetAiTimer_FromNative::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiTimer_FromNative, CallFunc_GetAiTimer_AiTimer) == 0x000008, "Member 'BP_Ai_Enemy_C_GetAiTimer_FromNative::CallFunc_GetAiTimer_AiTimer' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.BossBattleBeginAction
// 0x0005 (0x0005 - 0x0000)
struct BP_Ai_Enemy_C_BossBattleBeginAction final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LReturn;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEvent_ret;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_BossBattleBeginAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_BossBattleBeginAction");
static_assert(sizeof(BP_Ai_Enemy_C_BossBattleBeginAction) == 0x000005, "Wrong size on BP_Ai_Enemy_C_BossBattleBeginAction");
static_assert(offsetof(BP_Ai_Enemy_C_BossBattleBeginAction, Success) == 0x000000, "Member 'BP_Ai_Enemy_C_BossBattleBeginAction::Success' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_BossBattleBeginAction, LReturn) == 0x000001, "Member 'BP_Ai_Enemy_C_BossBattleBeginAction::LReturn' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_BossBattleBeginAction, CallFunc_IsEvent_ret) == 0x000002, "Member 'BP_Ai_Enemy_C_BossBattleBeginAction::CallFunc_IsEvent_ret' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_BossBattleBeginAction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_Ai_Enemy_C_BossBattleBeginAction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_BossBattleBeginAction, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_Ai_Enemy_C_BossBattleBeginAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsReservedAction
// 0x0002 (0x0002 - 0x0000)
struct BP_Ai_Enemy_C_IsReservedAction final
{
public:
	bool                                          Reserved;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsReservedAction) == 0x000001, "Wrong alignment on BP_Ai_Enemy_C_IsReservedAction");
static_assert(sizeof(BP_Ai_Enemy_C_IsReservedAction) == 0x000002, "Wrong size on BP_Ai_Enemy_C_IsReservedAction");
static_assert(offsetof(BP_Ai_Enemy_C_IsReservedAction, Reserved) == 0x000000, "Member 'BP_Ai_Enemy_C_IsReservedAction::Reserved' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsReservedAction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Ai_Enemy_C_IsReservedAction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsUniqueConditionCheck
// 0x0038 (0x0038 - 0x0000)
struct BP_Ai_Enemy_C_IsUniqueConditionCheck final
{
public:
	TArray<uint8>                                 Conditions;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ECA[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ECB[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ECC[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ECD[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAiUniqueCondition_bResult;             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsUniqueConditionCheck) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsUniqueConditionCheck");
static_assert(sizeof(BP_Ai_Enemy_C_IsUniqueConditionCheck) == 0x000038, "Wrong size on BP_Ai_Enemy_C_IsUniqueConditionCheck");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, Conditions) == 0x000000, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::Conditions' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, bResult) == 0x000010, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::bResult' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, L_result) == 0x000011, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::L_result' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, CallFunc_BooleanAND_ReturnValue) == 0x000034, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsUniqueConditionCheck, CallFunc_GetAiUniqueCondition_bResult) == 0x000035, "Member 'BP_Ai_Enemy_C_IsUniqueConditionCheck::CallFunc_GetAiUniqueCondition_bResult' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.GetActionTime
// 0x0018 (0x0018 - 0x0000)
struct BP_Ai_Enemy_C_GetActionTime final
{
public:
	uint8                                         CurAction;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ECE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Seconds;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Value;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActionTime_Time;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_GetActionTime) == 0x000004, "Wrong alignment on BP_Ai_Enemy_C_GetActionTime");
static_assert(sizeof(BP_Ai_Enemy_C_GetActionTime) == 0x000018, "Wrong size on BP_Ai_Enemy_C_GetActionTime");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, CurAction) == 0x000000, "Member 'BP_Ai_Enemy_C_GetActionTime::CurAction' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, Seconds) == 0x000004, "Member 'BP_Ai_Enemy_C_GetActionTime::Seconds' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, L_Value) == 0x000008, "Member 'BP_Ai_Enemy_C_GetActionTime::L_Value' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, CallFunc_GetActionTime_Time) == 0x00000C, "Member 'BP_Ai_Enemy_C_GetActionTime::CallFunc_GetActionTime_Time' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, CallFunc_RandomFloatInRange_ReturnValue) == 0x000010, "Member 'BP_Ai_Enemy_C_GetActionTime::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Ai_Enemy_C_GetActionTime::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000015, "Member 'BP_Ai_Enemy_C_GetActionTime::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetActionTime, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'BP_Ai_Enemy_C_GetActionTime::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsPossibleAttack
// 0x0050 (0x0050 - 0x0000)
struct BP_Ai_Enemy_C_IsPossibleAttack final
{
public:
	bool                                          IgnoreOutofScreen;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreRestrictAttackOther;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPossible;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IgnoreOther;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IgnoreScreen;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ECF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCanAttack_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED1[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITargetableObjectInterface> CallFunc_IsControlPlayer_self_CastInput;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlPlayer_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAttackingOtherEnemy_bAttacking;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerStatus_ReturnValue;               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED2[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager_1;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsPossibleAttack) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsPossibleAttack");
static_assert(sizeof(BP_Ai_Enemy_C_IsPossibleAttack) == 0x000050, "Wrong size on BP_Ai_Enemy_C_IsPossibleAttack");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, IgnoreOutofScreen) == 0x000000, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::IgnoreOutofScreen' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, IgnoreRestrictAttackOther) == 0x000001, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::IgnoreRestrictAttackOther' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, bPossible) == 0x000002, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::bPossible' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, L_IgnoreOther) == 0x000003, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::L_IgnoreOther' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, L_IgnoreScreen) == 0x000004, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::L_IgnoreScreen' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_GetDebuggingManager_Manager) == 0x000008, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_BooleanOR_ReturnValue_1) == 0x000012, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsCanAttack_ReturnValue) == 0x000013, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsCanAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsValid_ReturnValue_1) == 0x000014, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, K2Node_DynamicCast_AsRSBattle_Player) == 0x000018, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsControlPlayer_self_CastInput) == 0x000028, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsControlPlayer_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsControlPlayer_ReturnValue) == 0x000038, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsControlPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsAttackingOtherEnemy_bAttacking) == 0x000039, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsAttackingOtherEnemy_bAttacking' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsPlayerStatus_ReturnValue) == 0x00003A, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsPlayerStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_GetDebuggingManager_Manager_1) == 0x000040, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_GetDebuggingManager_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleAttack, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'BP_Ai_Enemy_C_IsPossibleAttack::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsCommonAreaOK
// 0x0020 (0x0020 - 0x0000)
struct BP_Ai_Enemy_C_IsCommonAreaOK final
{
public:
	EEnemyThinkActionType                         ActionType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOK;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> CallFunc_IsFlyEnemyCheck_self_CastInput;           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFlyEnemyCheck_NewParam;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsCommonAreaOK) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsCommonAreaOK");
static_assert(sizeof(BP_Ai_Enemy_C_IsCommonAreaOK) == 0x000020, "Wrong size on BP_Ai_Enemy_C_IsCommonAreaOK");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, ActionType) == 0x000000, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::ActionType' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, bOK) == 0x000001, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::bOK' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, L_result) == 0x000002, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::L_result' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, CallFunc_IsFlyEnemyCheck_self_CastInput) == 0x000008, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::CallFunc_IsFlyEnemyCheck_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, CallFunc_IsFlyEnemyCheck_NewParam) == 0x000018, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::CallFunc_IsFlyEnemyCheck_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsCommonAreaOK, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001A, "Member 'BP_Ai_Enemy_C_IsCommonAreaOK::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsAttackingOtherEnemy
// 0x0010 (0x0010 - 0x0000)
struct BP_Ai_Enemy_C_IsAttackingOtherEnemy final
{
public:
	class ARSBattlePlayer_C*                      TargetPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttacking;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_result;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanAddAttackingList_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsAttackingOtherEnemy) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsAttackingOtherEnemy");
static_assert(sizeof(BP_Ai_Enemy_C_IsAttackingOtherEnemy) == 0x000010, "Wrong size on BP_Ai_Enemy_C_IsAttackingOtherEnemy");
static_assert(offsetof(BP_Ai_Enemy_C_IsAttackingOtherEnemy, TargetPlayer) == 0x000000, "Member 'BP_Ai_Enemy_C_IsAttackingOtherEnemy::TargetPlayer' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAttackingOtherEnemy, bAttacking) == 0x000008, "Member 'BP_Ai_Enemy_C_IsAttackingOtherEnemy::bAttacking' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAttackingOtherEnemy, L_result) == 0x000009, "Member 'BP_Ai_Enemy_C_IsAttackingOtherEnemy::L_result' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsAttackingOtherEnemy, CallFunc_CanAddAttackingList_ReturnValue) == 0x00000A, "Member 'BP_Ai_Enemy_C_IsAttackingOtherEnemy::CallFunc_CanAddAttackingList_ReturnValue' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.GetAiDataTable
// 0x0148 (0x0148 - 0x0000)
struct BP_Ai_Enemy_C_GetAiDataTable final
{
public:
	uint8                                         Enum;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThroughNotFound;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED4[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAiParamEnemy                          DataTable;                                         // 0x0008(0x00A0)(Parm, OutParm, HasGetValueTypeHash)
	struct FAiParamEnemy                          CallFunc_GetAiDataTable_Param;                     // 0x00A8(0x00A0)(HasGetValueTypeHash)
};
static_assert(alignof(BP_Ai_Enemy_C_GetAiDataTable) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_GetAiDataTable");
static_assert(sizeof(BP_Ai_Enemy_C_GetAiDataTable) == 0x000148, "Wrong size on BP_Ai_Enemy_C_GetAiDataTable");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataTable, Enum) == 0x000000, "Member 'BP_Ai_Enemy_C_GetAiDataTable::Enum' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataTable, ThroughNotFound) == 0x000001, "Member 'BP_Ai_Enemy_C_GetAiDataTable::ThroughNotFound' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataTable, DataTable) == 0x000008, "Member 'BP_Ai_Enemy_C_GetAiDataTable::DataTable' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_GetAiDataTable, CallFunc_GetAiDataTable_Param) == 0x0000A8, "Member 'BP_Ai_Enemy_C_GetAiDataTable::CallFunc_GetAiDataTable_Param' has a wrong offset!");

// Function BP_Ai_Enemy.BP_Ai_Enemy_C.IsPossibleMove
// 0x0018 (0x0018 - 0x0000)
struct BP_Ai_Enemy_C_IsPossibleMove final
{
public:
	bool                                          IgnoreOutofScreen;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreRestrictAttackOther;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPossible;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IgnoreOther;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_IgnoreScreen;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED5[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanAddMovingList_ReturnValue;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Ai_Enemy_C_IsPossibleMove) == 0x000008, "Wrong alignment on BP_Ai_Enemy_C_IsPossibleMove");
static_assert(sizeof(BP_Ai_Enemy_C_IsPossibleMove) == 0x000018, "Wrong size on BP_Ai_Enemy_C_IsPossibleMove");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, IgnoreOutofScreen) == 0x000000, "Member 'BP_Ai_Enemy_C_IsPossibleMove::IgnoreOutofScreen' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, IgnoreRestrictAttackOther) == 0x000001, "Member 'BP_Ai_Enemy_C_IsPossibleMove::IgnoreRestrictAttackOther' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, bPossible) == 0x000002, "Member 'BP_Ai_Enemy_C_IsPossibleMove::bPossible' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, L_IgnoreOther) == 0x000003, "Member 'BP_Ai_Enemy_C_IsPossibleMove::L_IgnoreOther' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, L_IgnoreScreen) == 0x000004, "Member 'BP_Ai_Enemy_C_IsPossibleMove::L_IgnoreScreen' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_Ai_Enemy_C_IsPossibleMove::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, CallFunc_GetEnemyManager_Manager) == 0x000008, "Member 'BP_Ai_Enemy_C_IsPossibleMove::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Ai_Enemy_C_IsPossibleMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_Ai_Enemy_C_IsPossibleMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Ai_Enemy_C_IsPossibleMove, CallFunc_CanAddMovingList_ReturnValue) == 0x000012, "Member 'BP_Ai_Enemy_C_IsPossibleMove::CallFunc_CanAddMovingList_ReturnValue' has a wrong offset!");

}

