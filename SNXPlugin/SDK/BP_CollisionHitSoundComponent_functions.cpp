#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollisionHitSoundComponent

#include "Basic.hpp"

#include "BP_CollisionHitSoundComponent_classes.hpp"
#include "BP_CollisionHitSoundComponent_parameters.hpp"


namespace SDK
{

// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.ExecuteUbergraph_BP_CollisionHitSoundComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CollisionHitSoundComponent_C::ExecuteUbergraph_BP_CollisionHitSoundComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "ExecuteUbergraph_BP_CollisionHitSoundComponent");

	Params::BP_CollisionHitSoundComponent_C_ExecuteUbergraph_BP_CollisionHitSoundComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CollisionHitSoundComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "ReceiveTick");

	Params::BP_CollisionHitSoundComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_CollisionHitSoundComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionHitSound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    IsHitSound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CollisionHitSoundComponent_C::CollisionHitSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult, bool* IsHitSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "CollisionHitSound");

	Params::BP_CollisionHitSoundComponent_C_CollisionHitSound Parms{};

	Parms.OtherActor = OtherActor;
	Parms.Impulse = std::move(Impulse);
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (IsHitSound != nullptr)
		*IsHitSound = Parms.IsHitSound;
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionRollSound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    IsRolling                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CollisionHitSoundComponent_C::CollisionRollSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult, bool* IsRolling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "CollisionRollSound");

	Params::BP_CollisionHitSoundComponent_C_CollisionRollSound Parms{};

	Parms.OtherActor = OtherActor;
	Parms.Impulse = std::move(Impulse);
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (IsRolling != nullptr)
		*IsRolling = Parms.IsRolling;
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionFallSound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    IsFall                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CollisionHitSoundComponent_C::CollisionFallSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult, bool* IsFall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "CollisionFallSound");

	Params::BP_CollisionHitSoundComponent_C_CollisionFallSound Parms{};

	Parms.OtherActor = OtherActor;
	Parms.Impulse = std::move(Impulse);
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (IsFall != nullptr)
		*IsFall = Parms.IsFall;
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.CollisionSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_CollisionHitSoundComponent_C::CollisionSound(class AActor* OtherActor, const struct FVector& Impulse, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "CollisionSound");

	Params::BP_CollisionHitSoundComponent_C_CollisionSound Parms{};

	Parms.OtherActor = OtherActor;
	Parms.Impulse = std::move(Impulse);
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.UpdateCollisionParam
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CollisionHitSoundComponent_C::UpdateCollisionParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "UpdateCollisionParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.GetCollisionSound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       OtherHitResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UMaterialInterface*               OwnerMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRSCollisionSound                CollisionSound                                         (Parm, OutParm)

void UBP_CollisionHitSoundComponent_C::GetCollisionSound(const struct FHitResult& OtherHitResult, class UMaterialInterface* OwnerMaterial, struct FRSCollisionSound* CollisionSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "GetCollisionSound");

	Params::BP_CollisionHitSoundComponent_C_GetCollisionSound Parms{};

	Parms.OtherHitResult = std::move(OtherHitResult);
	Parms.OwnerMaterial = OwnerMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (CollisionSound != nullptr)
		*CollisionSound = std::move(Parms.CollisionSound);
}


// Function BP_CollisionHitSoundComponent.BP_CollisionHitSoundComponent_C.GetOwnerMaterials
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInterface*>       OwnerMaterials                                         (Parm, OutParm, HasGetValueTypeHash)

void UBP_CollisionHitSoundComponent_C::GetOwnerMaterials(TArray<class UMaterialInterface*>* OwnerMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionHitSoundComponent_C", "GetOwnerMaterials");

	Params::BP_CollisionHitSoundComponent_C_GetOwnerMaterials Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OwnerMaterials != nullptr)
		*OwnerMaterials = std::move(Parms.OwnerMaterials);
}

}

