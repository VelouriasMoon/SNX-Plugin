#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PostProcessOverraySystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PostProcessOverraySystem.BP_PostProcessOverraySystem_C
// 0x0130 (0x0360 - 0x0230)
class ABP_PostProcessOverraySystem_C final : public APostProcessOverraySystem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PostProcessOverrayGradiation_C*> OverrayGradiationList;                             // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PostProcessOverrayScreenLight_C*> OvrrayScreenLightList;                             // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UseControl;                                        // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_69D2[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LastGradiationTopColor;                            // 0x0264(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastGradiationTopWidth;                            // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LastGradiationBottomColor;                         // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastGradiationBottomWidth;                         // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69D3[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PostProcessOverrayGradiation_C*> LastGradiationList;                                // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         GradiationInterpRestTime;                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGradiationInterp;                                // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69D4[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GradiationInterpTime;                              // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69D5[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ScreenLightColor;                                  // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 ScreenLightSize;                                   // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 SceenLightIntensity;                               // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   ScreenLightPosition;                               // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PostProcessOverrayScreenLight_C*> ScreenLightList;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsScreenLightDisabledInterp;                       // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 ScreenLightInterpRestTime;                         // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         ScreenLightInterpTime;                             // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScreenLightMax;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  IsScreenLightEnabledInterp;                        // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PostProcessOverrayVolume_C*> Volumes;                                           // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UseVolumeControl;                                  // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_69D6[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenLightTicksTimer;                             // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenLightUpdateTickTime;                         // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDeltaSeconds;                                  // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScreenLightNum;                                    // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DirtyGradation;                                    // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DirtyScreenLight;                                  // 0x035D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PostProcessOverraySystem(int32 EntryPoint);
	void RemoveOverrayVolume(class ABP_PostProcessOverrayVolume_C* Volume);
	void AddOverrayVolume(class ABP_PostProcessOverrayVolume_C* Volume);
	void RemoveOvarrayScreenLight(class ABP_PostProcessOverrayScreenLight_C* ScreenLight);
	void AddOverayScreenLight(class ABP_PostProcessOverrayScreenLight_C* ScreenLight);
	void ReceiveTick(float DeltaSeconds);
	void RemoveOverrayGradiation(class ABP_PostProcessOverrayGradiation_C* Gradiation);
	void AddOverrayGradiation(class ABP_PostProcessOverrayGradiation_C* Gradiation);
	void UserConstructionScript();
	void TicksOverrayGradiation(float DeltaSeconds);
	void SetupParameterOverrayScreenLight(int32 No, float Intensity, float Size, const struct FLinearColor& ScreenPosition, const struct FLinearColor& Color);
	void TicksOverrayScreenLight(float DeltaSeconds);
	void CalcScreenPosition(class AActor* Actor, struct FLinearColor* Vector);
	void CopyScreenLight(class ABP_PostProcessOverrayScreenLight_C* ScreenLight, int32 Param_Index, const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void CalcRate(const struct FVector& CameraVector, const struct FRotator& CameraRotation, class ABP_PostProcessOverrayBase_C* Overray, bool IsGradiation, bool InAnyVolume, float* Rate);
	void CheckAnyVolume(bool IsGradiation, bool* InVolume);
	void GetSortedList(TArray<float>& OutputKeyList, TArray<class ABP_PostProcessOverrayBase_C*>& OutputObjectList, bool IsGradiation, TArray<class ABP_PostProcessOverrayBase_C*>& OverrayList);
	void RemoveScreenLight(class ABP_PostProcessOverrayScreenLight_C* ScreenLight);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PostProcessOverraySystem_C">();
	}
	static class ABP_PostProcessOverraySystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PostProcessOverraySystem_C>();
	}
};
static_assert(alignof(ABP_PostProcessOverraySystem_C) == 0x000008, "Wrong alignment on ABP_PostProcessOverraySystem_C");
static_assert(sizeof(ABP_PostProcessOverraySystem_C) == 0x000360, "Wrong size on ABP_PostProcessOverraySystem_C");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, UberGraphFrame) == 0x000230, "Member 'ABP_PostProcessOverraySystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_PostProcessOverraySystem_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, OverrayGradiationList) == 0x000240, "Member 'ABP_PostProcessOverraySystem_C::OverrayGradiationList' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, OvrrayScreenLightList) == 0x000250, "Member 'ABP_PostProcessOverraySystem_C::OvrrayScreenLightList' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, UseControl) == 0x000260, "Member 'ABP_PostProcessOverraySystem_C::UseControl' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, LastGradiationTopColor) == 0x000264, "Member 'ABP_PostProcessOverraySystem_C::LastGradiationTopColor' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, LastGradiationTopWidth) == 0x000274, "Member 'ABP_PostProcessOverraySystem_C::LastGradiationTopWidth' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, LastGradiationBottomColor) == 0x000278, "Member 'ABP_PostProcessOverraySystem_C::LastGradiationBottomColor' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, LastGradiationBottomWidth) == 0x000288, "Member 'ABP_PostProcessOverraySystem_C::LastGradiationBottomWidth' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, LastGradiationList) == 0x000290, "Member 'ABP_PostProcessOverraySystem_C::LastGradiationList' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, GradiationInterpRestTime) == 0x0002A0, "Member 'ABP_PostProcessOverraySystem_C::GradiationInterpRestTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, IsGradiationInterp) == 0x0002A4, "Member 'ABP_PostProcessOverraySystem_C::IsGradiationInterp' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, GradiationInterpTime) == 0x0002A8, "Member 'ABP_PostProcessOverraySystem_C::GradiationInterpTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightColor) == 0x0002B0, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightColor' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightSize) == 0x0002C0, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightSize' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, SceenLightIntensity) == 0x0002D0, "Member 'ABP_PostProcessOverraySystem_C::SceenLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightPosition) == 0x0002E0, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightPosition' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightList) == 0x0002F0, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightList' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, IsScreenLightDisabledInterp) == 0x000300, "Member 'ABP_PostProcessOverraySystem_C::IsScreenLightDisabledInterp' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightInterpRestTime) == 0x000310, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightInterpRestTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightInterpTime) == 0x000320, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightInterpTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightMax) == 0x000324, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightMax' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, IsScreenLightEnabledInterp) == 0x000328, "Member 'ABP_PostProcessOverraySystem_C::IsScreenLightEnabledInterp' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, Volumes) == 0x000338, "Member 'ABP_PostProcessOverraySystem_C::Volumes' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, UseVolumeControl) == 0x000348, "Member 'ABP_PostProcessOverraySystem_C::UseVolumeControl' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightTicksTimer) == 0x00034C, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightTicksTimer' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightUpdateTickTime) == 0x000350, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightUpdateTickTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, LastDeltaSeconds) == 0x000354, "Member 'ABP_PostProcessOverraySystem_C::LastDeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, ScreenLightNum) == 0x000358, "Member 'ABP_PostProcessOverraySystem_C::ScreenLightNum' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, DirtyGradation) == 0x00035C, "Member 'ABP_PostProcessOverraySystem_C::DirtyGradation' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessOverraySystem_C, DirtyScreenLight) == 0x00035D, "Member 'ABP_PostProcessOverraySystem_C::DirtyScreenLight' has a wrong offset!");

}

