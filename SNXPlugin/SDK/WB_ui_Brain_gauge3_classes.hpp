#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ui_Brain_gauge3

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ui_Brain_gauge3.WB_ui_Brain_gauge3_C
// 0x01D0 (0x0558 - 0x0388)
class UWB_ui_Brain_gauge3_C final : public UUIBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Decision_stock;                                    // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out_stock;                                         // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In_stock;                                          // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_stock;                                     // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Return_drive_stock;                                // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out_lock;                                          // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In_lock;                                           // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_lock;                                      // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Return_brain_lock;                                 // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Return_down;                                       // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out_down;                                          // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In_down;                                           // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_down;                                      // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Decision_down;                                     // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Return_brain;                                      // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Return_drive;                                      // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out_full;                                          // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In_full;                                           // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out_brain;                                         // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In_brain;                                          // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_brain;                                     // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Decision_barin;                                    // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out_drive;                                         // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In_drive;                                          // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_drive;                                     // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Decision_drive;                                    // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Full_in;                                           // 0x0460(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Full;                                              // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Out;                                               // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_none;                                      // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default;                                           // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Effect_brain_1;                                    // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_brain_2;                                    // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_brain_3;                                    // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_brain_4;                                    // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_drive_1;                                    // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_drive_2;                                    // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_drive_3;                                    // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect_drive_4;                                    // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_brain_1;                                     // 0x04D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_brain_2;                                     // 0x04D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_drive_1;                                     // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_drive_2;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Stock_1;                                           // 0x04F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Stock_2;                                           // 0x04F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Stock_3;                                           // 0x0500(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Stock_4;                                           // 0x0508(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Stock_set;                                         // 0x0510(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         WorkPercent;                                       // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5219[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       MaterialList;                                      // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FlagUnlockBrainField;                              // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagDrive;                                         // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagBrainField;                                    // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521A[0x1];                                     // 0x0533(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextStateOpen;                                     // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagDown;                                          // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagStock;                                         // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagCurrentStock;                                  // 0x053A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521B[0x5];                                     // 0x053B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ui_Brain_frame3_C*                  FrameObject;                                       // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagDisable;                                       // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagUseBrainStock;                                 // 0x0549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagLearnSkillStock;                               // 0x054A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagManualDrive;                                   // 0x054B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagEnableDrive;                                   // 0x054C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagEnableDriveWork;                               // 0x054D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagEnableDriveFirst;                              // 0x054E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521C[0x1];                                     // 0x054F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameState;                                        // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GaugePercent;                                      // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_ui_Brain_gauge3(int32 EntryPoint);
	void OnInitialized();
	void UpdateState(int32 State, int32 SubState, float DeltaSeconds);
	void Construct();
	void StateNone(int32 SubState);
	void StateOpen(int32 SubState);
	void StateLoop(int32 SubState);
	void StateLoopDrive(int32 SubState);
	void StateClose(int32 SubState);
	void SetUnlockBrainField(bool IsUnlock);
	void StateLoopBrainField(int32 SubState);
	void SetupUnlockBrainField();
	void SetNumber(int32 Number);
	void SetGauge(float Percent);
	void StateLoopFull(int32 SubState);
	void SetDriveFlag(bool DriveFlag);
	void SetBrainFieldFlag(bool BrainFieldFlag);
	void SetDriveGauge(float Percent);
	void SetBrainGauge(float Percent);
	void StateLoopLock(int32 SubState);
	void StateLoopDown(int32 SubState);
	void SetFrameObject(class UWB_ui_Brain_frame3_C* Object);
	void PlayBrainAnimation(int32 Param_Index, float Speed, bool IsLoop);
	void StopBrainCurrentAnimation();
	void SetStockFlag(bool StockFlag, bool UseItemFlag);
	void SetDownFlag(bool DownFlag);
	void SetDisableFlag(bool DisableFlag);
	void SetRemainingSecond(int32 Second);
	void SetBrainChargeGauge(float Percent);
	void SetStockSkillDraw(bool IsAlwaysFalse);
	void SetupManualDrive();
	void UpdateEnableDrive();
	void UpdateStateLoopFrame();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ui_Brain_gauge3_C">();
	}
	static class UWB_ui_Brain_gauge3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ui_Brain_gauge3_C>();
	}
};
static_assert(alignof(UWB_ui_Brain_gauge3_C) == 0x000008, "Wrong alignment on UWB_ui_Brain_gauge3_C");
static_assert(sizeof(UWB_ui_Brain_gauge3_C) == 0x000558, "Wrong size on UWB_ui_Brain_gauge3_C");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, UberGraphFrame) == 0x000388, "Member 'UWB_ui_Brain_gauge3_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Decision_stock) == 0x000390, "Member 'UWB_ui_Brain_gauge3_C::Decision_stock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out_stock) == 0x000398, "Member 'UWB_ui_Brain_gauge3_C::Out_stock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In_stock) == 0x0003A0, "Member 'UWB_ui_Brain_gauge3_C::In_stock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default_stock) == 0x0003A8, "Member 'UWB_ui_Brain_gauge3_C::Default_stock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Return_drive_stock) == 0x0003B0, "Member 'UWB_ui_Brain_gauge3_C::Return_drive_stock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out_lock) == 0x0003B8, "Member 'UWB_ui_Brain_gauge3_C::Out_lock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In_lock) == 0x0003C0, "Member 'UWB_ui_Brain_gauge3_C::In_lock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default_lock) == 0x0003C8, "Member 'UWB_ui_Brain_gauge3_C::Default_lock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Return_brain_lock) == 0x0003D0, "Member 'UWB_ui_Brain_gauge3_C::Return_brain_lock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Return_down) == 0x0003D8, "Member 'UWB_ui_Brain_gauge3_C::Return_down' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out_down) == 0x0003E0, "Member 'UWB_ui_Brain_gauge3_C::Out_down' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In_down) == 0x0003E8, "Member 'UWB_ui_Brain_gauge3_C::In_down' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default_down) == 0x0003F0, "Member 'UWB_ui_Brain_gauge3_C::Default_down' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Decision_down) == 0x0003F8, "Member 'UWB_ui_Brain_gauge3_C::Decision_down' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Return_brain) == 0x000400, "Member 'UWB_ui_Brain_gauge3_C::Return_brain' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Return_drive) == 0x000408, "Member 'UWB_ui_Brain_gauge3_C::Return_drive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out_full) == 0x000410, "Member 'UWB_ui_Brain_gauge3_C::Out_full' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In_full) == 0x000418, "Member 'UWB_ui_Brain_gauge3_C::In_full' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out_brain) == 0x000420, "Member 'UWB_ui_Brain_gauge3_C::Out_brain' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In_brain) == 0x000428, "Member 'UWB_ui_Brain_gauge3_C::In_brain' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default_brain) == 0x000430, "Member 'UWB_ui_Brain_gauge3_C::Default_brain' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Decision_barin) == 0x000438, "Member 'UWB_ui_Brain_gauge3_C::Decision_barin' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out_drive) == 0x000440, "Member 'UWB_ui_Brain_gauge3_C::Out_drive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In_drive) == 0x000448, "Member 'UWB_ui_Brain_gauge3_C::In_drive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default_drive) == 0x000450, "Member 'UWB_ui_Brain_gauge3_C::Default_drive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Decision_drive) == 0x000458, "Member 'UWB_ui_Brain_gauge3_C::Decision_drive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Full_in) == 0x000460, "Member 'UWB_ui_Brain_gauge3_C::Full_in' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Full) == 0x000468, "Member 'UWB_ui_Brain_gauge3_C::Full' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Out) == 0x000470, "Member 'UWB_ui_Brain_gauge3_C::Out' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, In) == 0x000478, "Member 'UWB_ui_Brain_gauge3_C::In' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default_none) == 0x000480, "Member 'UWB_ui_Brain_gauge3_C::Default_none' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Default) == 0x000488, "Member 'UWB_ui_Brain_gauge3_C::Default' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_brain_1) == 0x000490, "Member 'UWB_ui_Brain_gauge3_C::Effect_brain_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_brain_2) == 0x000498, "Member 'UWB_ui_Brain_gauge3_C::Effect_brain_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_brain_3) == 0x0004A0, "Member 'UWB_ui_Brain_gauge3_C::Effect_brain_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_brain_4) == 0x0004A8, "Member 'UWB_ui_Brain_gauge3_C::Effect_brain_4' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_drive_1) == 0x0004B0, "Member 'UWB_ui_Brain_gauge3_C::Effect_drive_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_drive_2) == 0x0004B8, "Member 'UWB_ui_Brain_gauge3_C::Effect_drive_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_drive_3) == 0x0004C0, "Member 'UWB_ui_Brain_gauge3_C::Effect_drive_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Effect_drive_4) == 0x0004C8, "Member 'UWB_ui_Brain_gauge3_C::Effect_drive_4' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Gauge_brain_1) == 0x0004D0, "Member 'UWB_ui_Brain_gauge3_C::Gauge_brain_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Gauge_brain_2) == 0x0004D8, "Member 'UWB_ui_Brain_gauge3_C::Gauge_brain_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Gauge_drive_1) == 0x0004E0, "Member 'UWB_ui_Brain_gauge3_C::Gauge_drive_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Gauge_drive_2) == 0x0004E8, "Member 'UWB_ui_Brain_gauge3_C::Gauge_drive_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Stock_1) == 0x0004F0, "Member 'UWB_ui_Brain_gauge3_C::Stock_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Stock_2) == 0x0004F8, "Member 'UWB_ui_Brain_gauge3_C::Stock_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Stock_3) == 0x000500, "Member 'UWB_ui_Brain_gauge3_C::Stock_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Stock_4) == 0x000508, "Member 'UWB_ui_Brain_gauge3_C::Stock_4' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, Stock_set) == 0x000510, "Member 'UWB_ui_Brain_gauge3_C::Stock_set' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, WorkPercent) == 0x000518, "Member 'UWB_ui_Brain_gauge3_C::WorkPercent' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, MaterialList) == 0x000520, "Member 'UWB_ui_Brain_gauge3_C::MaterialList' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagUnlockBrainField) == 0x000530, "Member 'UWB_ui_Brain_gauge3_C::FlagUnlockBrainField' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagDrive) == 0x000531, "Member 'UWB_ui_Brain_gauge3_C::FlagDrive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagBrainField) == 0x000532, "Member 'UWB_ui_Brain_gauge3_C::FlagBrainField' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, NextStateOpen) == 0x000534, "Member 'UWB_ui_Brain_gauge3_C::NextStateOpen' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagDown) == 0x000538, "Member 'UWB_ui_Brain_gauge3_C::FlagDown' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagStock) == 0x000539, "Member 'UWB_ui_Brain_gauge3_C::FlagStock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagCurrentStock) == 0x00053A, "Member 'UWB_ui_Brain_gauge3_C::FlagCurrentStock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FrameObject) == 0x000540, "Member 'UWB_ui_Brain_gauge3_C::FrameObject' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagDisable) == 0x000548, "Member 'UWB_ui_Brain_gauge3_C::FlagDisable' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagUseBrainStock) == 0x000549, "Member 'UWB_ui_Brain_gauge3_C::FlagUseBrainStock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagLearnSkillStock) == 0x00054A, "Member 'UWB_ui_Brain_gauge3_C::FlagLearnSkillStock' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagManualDrive) == 0x00054B, "Member 'UWB_ui_Brain_gauge3_C::FlagManualDrive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagEnableDrive) == 0x00054C, "Member 'UWB_ui_Brain_gauge3_C::FlagEnableDrive' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagEnableDriveWork) == 0x00054D, "Member 'UWB_ui_Brain_gauge3_C::FlagEnableDriveWork' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FlagEnableDriveFirst) == 0x00054E, "Member 'UWB_ui_Brain_gauge3_C::FlagEnableDriveFirst' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, FrameState) == 0x000550, "Member 'UWB_ui_Brain_gauge3_C::FrameState' has a wrong offset!");
static_assert(offsetof(UWB_ui_Brain_gauge3_C, GaugePercent) == 0x000554, "Member 'UWB_ui_Brain_gauge3_C::GaugePercent' has a wrong offset!");

}

