#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SoundEmitterBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SoundEmitterBase.BP_SoundEmitterBase_C
// 0x00D0 (0x0300 - 0x0230)
class ABP_SoundEmitterBase_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundAtomCue*>                  SoundArray;                                        // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	struct FVector                                SoundEmitterLocation;                              // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class URSAtomComponentBase*>           SoundEnvArray;                                     // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         TickIntervalDelayLength;                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleLocation;                                   // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A0D[0x3];                                     // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickDelayInterval;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InEmitterSwitched;                                 // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A0E[0x3];                                     // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundAtomCue*>                  SoundInArray;                                      // 0x0288(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class USoundAtomCue*>                  SoundOutArray;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          IsInOnce;                                          // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A0F[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     SoundManager;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOutOnce;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInPlaying;                                       // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOutPlaying;                                      // 0x02BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A10[0x1];                                     // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentVolume;                                     // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeginPlayStart;                                  // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A11[0x3];                                     // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayID;                                            // 0x02C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SoundInStop;                                       // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEnvPlaying;                                      // 0x02CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A12[0x2];                                     // 0x02CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AEventManager*                          EventManager;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             InArea;                                            // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class URSAtomComponentBase*>           UsedComponent;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Disable;                                           // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void InArea__DelegateSignature();
	void ExecuteUbergraph_BP_SoundEmitterBase(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Update(bool* Dummy);
	void MoveSoundLocation(const struct FVector& TargetLocation, bool* IsIn);
	void TickIntervalUpdate(const struct FVector& Param_PlayerLocation, float* IntervalSeconds);
	void SetVolume(float Volume);
	void ResetVolume();
	void PlaySoundEmitter(float Volume);
	void StopSoundEmitter(float FadeTime);
	struct FVector UpdatePlayerLocation();
	void CheckIsEvent(bool* IsEvent);
	void Enable_Emitter();
	void Disable_Emitter();

	void GetRadius(float* Radius) const;
	void GetCapsuleCalcNormal(const struct FVector& CapsuleLineNormal, const struct FVector& CapsuleLine, const struct FVector& CapsuleLineStartLocation, const struct FVector& TargetLocation, float* Rate, struct FVector* H) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SoundEmitterBase_C">();
	}
	static class ABP_SoundEmitterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SoundEmitterBase_C>();
	}
};
static_assert(alignof(ABP_SoundEmitterBase_C) == 0x000008, "Wrong alignment on ABP_SoundEmitterBase_C");
static_assert(sizeof(ABP_SoundEmitterBase_C) == 0x000300, "Wrong size on ABP_SoundEmitterBase_C");
static_assert(offsetof(ABP_SoundEmitterBase_C, UberGraphFrame) == 0x000230, "Member 'ABP_SoundEmitterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_SoundEmitterBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundArray) == 0x000240, "Member 'ABP_SoundEmitterBase_C::SoundArray' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundEmitterLocation) == 0x000250, "Member 'ABP_SoundEmitterBase_C::SoundEmitterLocation' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, PlayerLocation) == 0x00025C, "Member 'ABP_SoundEmitterBase_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundEnvArray) == 0x000268, "Member 'ABP_SoundEmitterBase_C::SoundEnvArray' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, TickIntervalDelayLength) == 0x000278, "Member 'ABP_SoundEmitterBase_C::TickIntervalDelayLength' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, VisibleLocation) == 0x00027C, "Member 'ABP_SoundEmitterBase_C::VisibleLocation' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, TickDelayInterval) == 0x000280, "Member 'ABP_SoundEmitterBase_C::TickDelayInterval' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, InEmitterSwitched) == 0x000284, "Member 'ABP_SoundEmitterBase_C::InEmitterSwitched' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundInArray) == 0x000288, "Member 'ABP_SoundEmitterBase_C::SoundInArray' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundOutArray) == 0x000298, "Member 'ABP_SoundEmitterBase_C::SoundOutArray' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, IsInOnce) == 0x0002A8, "Member 'ABP_SoundEmitterBase_C::IsInOnce' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundManager) == 0x0002B0, "Member 'ABP_SoundEmitterBase_C::SoundManager' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, IsOutOnce) == 0x0002B8, "Member 'ABP_SoundEmitterBase_C::IsOutOnce' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, IsInPlaying) == 0x0002B9, "Member 'ABP_SoundEmitterBase_C::IsInPlaying' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, IsOutPlaying) == 0x0002BA, "Member 'ABP_SoundEmitterBase_C::IsOutPlaying' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, CurrentVolume) == 0x0002BC, "Member 'ABP_SoundEmitterBase_C::CurrentVolume' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, IsBeginPlayStart) == 0x0002C0, "Member 'ABP_SoundEmitterBase_C::IsBeginPlayStart' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, PlayID) == 0x0002C4, "Member 'ABP_SoundEmitterBase_C::PlayID' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, SoundInStop) == 0x0002CC, "Member 'ABP_SoundEmitterBase_C::SoundInStop' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, IsEnvPlaying) == 0x0002CD, "Member 'ABP_SoundEmitterBase_C::IsEnvPlaying' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, EventManager) == 0x0002D0, "Member 'ABP_SoundEmitterBase_C::EventManager' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, InArea) == 0x0002D8, "Member 'ABP_SoundEmitterBase_C::InArea' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, UsedComponent) == 0x0002E8, "Member 'ABP_SoundEmitterBase_C::UsedComponent' has a wrong offset!");
static_assert(offsetof(ABP_SoundEmitterBase_C, Disable) == 0x0002F8, "Member 'ABP_SoundEmitterBase_C::Disable' has a wrong offset!");

}

