#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackAcceleratorBase

#include "Basic.hpp"

#include "BP_AttackAcceleratorBase_classes.hpp"
#include "BP_AttackAcceleratorBase_parameters.hpp"


namespace SDK
{

// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ExecuteUbergraph_BP_AttackAcceleratorBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::ExecuteUbergraph_BP_AttackAcceleratorBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "ExecuteUbergraph_BP_AttackAcceleratorBase");

	Params::BP_AttackAcceleratorBase_C_ExecuteUbergraph_BP_AttackAcceleratorBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "ReceiveTick");

	Params::BP_AttackAcceleratorBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AttackAcceleratorBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.OnChangeAttacking
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttacking                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_AttackAcceleratorBase_C::OnChangeAttacking(bool bAttacking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "OnChangeAttacking");

	Params::BP_AttackAcceleratorBase_C_OnChangeAttacking Parms{};

	Parms.bAttacking = bAttacking;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.OnCustomAttackTimingNotified
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CustomName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_AttackAcceleratorBase_C::OnCustomAttackTimingNotified(const class FString& CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "OnCustomAttackTimingNotified");

	Params::BP_AttackAcceleratorBase_C_OnCustomAttackTimingNotified Parms{};

	Parms.CustomName = std::move(CustomName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.ChangeAccelerator
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FAcceleratorParam                AccelParameter                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::ChangeAccelerator(bool bActive, const struct FAcceleratorParam& AccelParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "ChangeAccelerator");

	Params::BP_AttackAcceleratorBase_C_ChangeAccelerator Parms{};

	Parms.bActive = bActive;
	Parms.AccelParameter = std::move(AccelParameter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.RegistAccelerator
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::RegistAccelerator(float RemainTime, float MaxTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "RegistAccelerator");

	Params::BP_AttackAcceleratorBase_C_RegistAccelerator Parms{};

	Parms.RemainTime = RemainTime;
	Parms.MaxTime = MaxTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.SwitchAccelerator
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AttackAcceleratorBase_C::SwitchAccelerator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "SwitchAccelerator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.OnDamage
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AttackAcceleratorBase_C::OnDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "OnDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.UpdateInAccelerator
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSecond                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::UpdateInAccelerator(float DeltaSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "UpdateInAccelerator");

	Params::BP_AttackAcceleratorBase_C_UpdateInAccelerator Parms{};

	Parms.DeltaSecond = DeltaSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.SetPostProcessParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::SetPostProcessParam(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "SetPostProcessParam");

	Params::BP_AttackAcceleratorBase_C_SetPostProcessParam Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.CalcPlayerScreenVec
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AttackAcceleratorBase_C::CalcPlayerScreenVec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "CalcPlayerScreenVec");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.CalcBlurCenter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::CalcBlurCenter(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "CalcBlurCenter");

	Params::BP_AttackAcceleratorBase_C_CalcBlurCenter Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.UpdatePPTimer
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_AttackAcceleratorBase_C::UpdatePPTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "UpdatePPTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.EventCancelPostProcess
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AttackAcceleratorBase_C::EventCancelPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "EventCancelPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.IsAccelerator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_bAccelerator                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AttackAcceleratorBase_C::IsAccelerator(bool* Param_bAccelerator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "IsAccelerator");

	Params::BP_AttackAcceleratorBase_C_IsAccelerator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bAccelerator != nullptr)
		*Param_bAccelerator = Parms.Param_bAccelerator;
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetRemainingSeconds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   RemainingSec                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::GetRemainingSeconds(float* RemainingSec) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "GetRemainingSeconds");

	Params::BP_AttackAcceleratorBase_C_GetRemainingSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingSec != nullptr)
		*RemainingSec = Parms.RemainingSec;
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetAcceleratorSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   AcceleratorSpeed                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::GetAcceleratorSpeed(float* AcceleratorSpeed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "GetAcceleratorSpeed");

	Params::BP_AttackAcceleratorBase_C_GetAcceleratorSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AcceleratorSpeed != nullptr)
		*AcceleratorSpeed = Parms.AcceleratorSpeed;
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetDamageCancellation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   DamageCancellation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::GetDamageCancellation(int32* DamageCancellation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "GetDamageCancellation");

	Params::BP_AttackAcceleratorBase_C_GetDamageCancellation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageCancellation != nullptr)
		*DamageCancellation = Parms.DamageCancellation;
}


// Function BP_AttackAcceleratorBase.BP_AttackAcceleratorBase_C.GetActiveSeconds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AttackAcceleratorBase_C::GetActiveSeconds(float* NewParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackAcceleratorBase_C", "GetActiveSeconds");

	Params::BP_AttackAcceleratorBase_C_GetActiveSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}

}

