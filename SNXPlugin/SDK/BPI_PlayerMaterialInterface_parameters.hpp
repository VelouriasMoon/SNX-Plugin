#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerMaterialInterface

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"


namespace SDK::Params
{

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.SetWeaponMaterialColor_PsychicEmission
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission final
{
public:
	float                                         R;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         B;                                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission) == 0x000004, "Wrong alignment on BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission) == 0x000018, "Wrong size on BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission, R) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission::R' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission, G) == 0x000004, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission::G' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission, B) == 0x000008, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission::B' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission, ClaimantName) == 0x00000C, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission, bDummy) == 0x000014, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialColor_PsychicEmission::bDummy' has a wrong offset!");

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.SetWeaponMaterialAlpha_PsychicEmission
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission) == 0x000004, "Wrong alignment on BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission) == 0x000010, "Wrong size on BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission, Alpha) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission::Alpha' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission, ClaimantName) == 0x000004, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission, bDummy) == 0x00000C, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponMaterialAlpha_PsychicEmission::bDummy' has a wrong offset!");

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.ResetWeaponMaterialAlpha_PsychicEmission
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission) == 0x000004, "Wrong alignment on BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission) == 0x00000C, "Wrong size on BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission, ClaimantName) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission, bDummy) == 0x000008, "Member 'BPI_PlayerMaterialInterface_C_ResetWeaponMaterialAlpha_PsychicEmission::bDummy' has a wrong offset!");

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.ResetWeaponMaterialColor_PsychicEmission
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission final
{
public:
	class FName                                   ClaimantName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission) == 0x000004, "Wrong alignment on BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission) == 0x00000C, "Wrong size on BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission, ClaimantName) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission::ClaimantName' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission, bDummy) == 0x000008, "Member 'BPI_PlayerMaterialInterface_C_ResetWeaponMaterialColor_PsychicEmission::bDummy' has a wrong offset!");

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.SetWeaponEmissive
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerMaterialInterface_C_SetWeaponEmissive final
{
public:
	float                                         Emissive;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_SetWeaponEmissive) == 0x000004, "Wrong alignment on BPI_PlayerMaterialInterface_C_SetWeaponEmissive");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_SetWeaponEmissive) == 0x000008, "Wrong size on BPI_PlayerMaterialInterface_C_SetWeaponEmissive");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponEmissive, Emissive) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponEmissive::Emissive' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponEmissive, bDummy) == 0x000004, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponEmissive::bDummy' has a wrong offset!");

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.SetWeaponEmissiveColor
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor) == 0x000001, "Wrong alignment on BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor) == 0x000002, "Wrong size on BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor, SasKind) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor::SasKind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor, bDummy) == 0x000001, "Member 'BPI_PlayerMaterialInterface_C_SetWeaponEmissiveColor::bDummy' has a wrong offset!");

// Function BPI_PlayerMaterialInterface.BPI_PlayerMaterialInterface_C.ResetWeaponEmissiveColor
// 0x0002 (0x0002 - 0x0000)
struct BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor final
{
public:
	E_SASKind                                     SasKind;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDummy;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor) == 0x000001, "Wrong alignment on BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor");
static_assert(sizeof(BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor) == 0x000002, "Wrong size on BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor, SasKind) == 0x000000, "Member 'BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor::SasKind' has a wrong offset!");
static_assert(offsetof(BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor, bDummy) == 0x000001, "Member 'BPI_PlayerMaterialInterface_C_ResetWeaponEmissiveColor::bDummy' has a wrong offset!");

}

