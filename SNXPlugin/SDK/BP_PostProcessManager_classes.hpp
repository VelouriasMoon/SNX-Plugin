#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PostProcessManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PostProcessManager.BP_PostProcessManager_C
// 0x0748 (0x0980 - 0x0238)
class ABP_PostProcessManager_C final : public APostProcessManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  DamagePostProcess;                                 // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PerformPostProcess;                                // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   OverraySystem;                                     // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  SequencerPostProcess;                              // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UPostProcessComponent*>          DirectionPPComponents;                             // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         DirectionMax;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_869E[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LerpSpeed;                                         // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  UsePPComponents;                                   // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PriorityOffset;                                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePriority;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DamagePostProcessMaterial;                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineMaterial;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineNoEmissionMaterial;                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineNoCustomDepthMaterial;                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineAfterFogMaterial;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineAfterFogNoCustomDepthMaterial;              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineFrontMaterial;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AcceleratorMaterial;                               // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineMaterialAsset;                              // 0x02E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineNoEmissionMaterialAsset;                    // 0x0310(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineNoCustomDepthMaterialAsset;                 // 0x0338(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineFrontMaterialAsset;                         // 0x0360(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineFrontNoEmissionMaterialAsset;               // 0x0388(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineFrontNoCustomDepthMaterialAsset;            // 0x03B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineAfterFogMaterialAsset;                      // 0x03D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineAfterFogNoCustomDepthMaterialAsset;         // 0x0400(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      RadialBlurMaterialAsset;                           // 0x0428(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     RadialBlurMaterial;                                // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     HyperSpeedMaterial;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      HyperSpeedMaterialAsset;                           // 0x0460(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      DamageMaterialAsset;                               // 0x0488(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenLightMaterialObject;                         // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     DamageMaterial;                                    // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      SeeThroughMaterialAsset;                           // 0x04C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     SeeThroughMaterialObject;                          // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SeeThroughMaterial;                                // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeeThroughRate;                                    // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AcceleratorRate;                                   // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AcceleratorStart;                                  // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869F[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeightedBlendable>             RestorePerformPPM;                                 // 0x0508(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FWeightedBlendable>             RestoreDamagePPM;                                  // 0x0518(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class APostProcessVolume*>             RestoreScenePPV;                                   // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      ScreenLightMaterialAsset;                          // 0x0538(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UMaterialInterface>> VisionFogMaterialAsset;                            // 0x0560(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       VisionFogMaterial;                                 // 0x0570(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             VisionFogMaterialObject;                           // 0x0580(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 VisionFogRate;                                     // 0x0590(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               VisionFogActiveMaterial;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisionFogID                                  VisionFogActiveID;                                 // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86A0[0x3];                                     // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisionFogActiveRate;                               // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogSeeThroughRate;                           // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogVelocity;                                 // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogDefaultFogNear;                           // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogDefaultFogFar;                            // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeeThroughDefaultBlurPower;                        // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VisionFogVelocityVector;                           // 0x05C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VisionFogLastPlayerLocation;                       // 0x05D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultPicturizeQuality;                           // 0x05DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     SimpleFadeMaterialObject;                          // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineFrontNoEmissionMaterial;                    // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineFrontNoCustomDepthMaterial;                 // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     OutlineVisionFogCounterMaterial;                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutlinePriorityFront;                              // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A1[0x7];                                     // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      SimpleFadeMaterialAsset;                           // 0x0608(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SimpleFadeMaterial;                                // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPostProcessComponent*>          PerformShotPostProcessList;                        // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TSoftObjectPtr<class UDataTable>              PerformShotDataTableAsset;                         // 0x0648(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FPerformShotData>               PerformShotData;                                   // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 PerformShotTime;                                   // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EPerformShotState>                     PerformShotState;                                  // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScreenLightMaterial;                               // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      LevelupMaterialAsset;                              // 0x06A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     LevelupMaterialObject;                             // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LevelupMaterial;                                   // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 LevelupTimer;                                      // 0x06E0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  ActiveLevelup;                                     // 0x06F0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         LevelupMaxTimer;                                   // 0x0700(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousGameTime;                                  // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SeeThroughStart;                                   // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A2[0x7];                                     // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     FishEyeMaterialObject;                             // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FishEyeMaterial;                                   // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      FishEyeMaterialAsset;                              // 0x0720(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FArrayOfFloat>                  VisionFogMaterialDefaultParam;                     // 0x0748(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class FName>                           VisionFogMaterialDefaultParamName;                 // 0x0758(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	ERSPartyPlayerKind                            RecoverNPCKind;                                    // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86A3[0x3];                                     // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoverNPCTimer;                                   // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecoverNPCActive;                                  // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A4[0x7];                                     // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           RecoverNPCCurve;                                   // 0x0778(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      RecoverNPCMaterialAsset;                           // 0x0780(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RecoverNPCMaterialObject;                          // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessParam*                      PostProcessParam;                                  // 0x07B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamagePPMFlash;                                    // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamagePPMPower;                                    // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TickTimeline;                                      // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A5[0x7];                                     // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       KarenMemoryMaterialAsset;                          // 0x07C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     KarenMemoryMaterialObject;                         // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      KarenMemoryMaterial;                               // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisionFogID                                  VisionFogEventComID;                               // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86A6[0x3];                                     // 0x0801(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisionFogEventComStartRate;                        // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogEventComTargetRate;                       // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogEventComInterpTime;                       // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisionFogEventComNowTime;                          // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisionFogEventComInterp;                           // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A7[0x3];                                     // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 VisionFogFar;                                      // 0x0818(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 VisionFogNear;                                     // 0x0828(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         RestoreMenuElevator;                               // 0x0838(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsSetupMenu;                                       // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A8[0x3];                                     // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRenderingSettings                     RenderingSettingsBase;                             // 0x084C(0x0078)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	bool                                          OutlineNoCustomDepth;                              // 0x08C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseDebugQuality;                                   // 0x08C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EGradualQuality                               DebugQualitySoftFocus;                             // 0x08C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityLuminousSmudge_;                       // 0x08C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityGradScreenMask;                        // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityBothSideRim;                           // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityLightUp;                               // 0x08CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityFieldBlur;                             // 0x08CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityLightShaft;                            // 0x08CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityDrivePlane;                            // 0x08CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualitySAS;                                   // 0x08CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGradualQuality                               DebugQualityBrainCrash;                            // 0x08CF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutlineOFF;                                        // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86A9[0x3];                                     // 0x08D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRenderingSettings                     RenderingSettingsLocation;                         // 0x08D4(0x0078)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	float                                         VisionFogEm8300LightShaftParam;                    // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisionFogEm8300LightShaftON;                       // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OutlineVisionFogCounter;                           // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86AA[0x6];                                     // 0x0952(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      OutlineVisionFogCounterMaterialAsset;              // 0x0958(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PostProcessManager(int32 EntryPoint);
	void ClearPool();
	void DelayBeginPlay();
	void ImmediateExposure();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void StartPostProcess(const struct FPostProcessSettings& Settings, float TimeSeconds, int32* Handle);
	void GetUnusedComponent(int32* Param_Index);
	void Update(float DeltaSeconds);
	void EndPostProcess(int32 Handle, float TimeSeconds);
	void ResetSequencerPostProcess();
	void SetSequencerPostProcessSetting(const struct FPostProcessSettings& Settings, float BlendWeight);
	void GetPerformPostProcess(class UPostProcessComponent** PostProcess);
	void SetupDamagePostProcess();
	void SetDamagePostProcessPower(float Power);
	void SetDamagePostProcessPowerFlash(float Power);
	void SetupOutlinePriorityDefault();
	void SetupOutlinePriorityFront();
	void SetupAcceleratorPP();
	void IsActiveDamagePostProcess(bool* Active);
	void EnableDamagePostProcess(bool Enable);
	void LoadAsset();
	void PrivateInitializePerformPostProcess();
	void SetupSeeThroughPP();
	void SetSeeThroughRate(float Rate);
	void SetAcceleratorRate(float Rate);
	void SetAcceleratorParameter(float RedBlurColorMul, float RedBlurPower, float NoRedBlurRadius, float PPTime, const struct FLinearColor& BlurCenter);
	void SetupMenu();
	void PrivateSetupMenuPP(class UPostProcessComponent* PostProcess, TArray<struct FWeightedBlendable>& RestoreWork);
	void RestoreScene();
	void PrivateRestoreScenePP(class UPostProcessComponent* PostProcess, TArray<struct FWeightedBlendable>& RestoreWork);
	void SetupVisionFogPP();
	void SetVisionFogRate(EVisionFogID VisionFogID, float Rate);
	void GetVisionFogRate(EVisionFogID VisionFogID, float* Rate);
	void IsActiveVisionFog(bool* Active);
	void PrivateSetupVisionFogMaterial(EVisionFogID VisionFogID);
	void UpdateVisionFog(float DeltaSeconds, bool* Active);
	void SetupLocalVIsionFog(class UMaterialInstanceDynamic* PPMaterial, float Rate, float FogNear, float FogFar, const struct FVector& CenterLocation);
	void ClearLocalVIsionFog(class UMaterialInstanceDynamic* PPMaterial);
	void SetupLocalSeeThrough(class UMaterialInstanceDynamic* PPMaterial, float Rate, float BlurPower);
	void ClearLocalSeeThrough(class UMaterialInstanceDynamic* PPMaterial);
	void SetupLocalAccelerator(class UMaterialInstanceDynamic* PPMaterial, float Rate, const struct FVector& BlurCenter);
	void ClearLocalAccelerator(class UMaterialInstanceDynamic* PPMaterial);
	void SetupLocalRadialBlur(class UMaterialInstanceDynamic* PPMaterial, float Rate, float BlurSize, const struct FVector& BlurCenter, const struct FVector& BlurColor);
	void ClearLocalRadialBlur(class UMaterialInstanceDynamic* PPMaterial);
	void SetAcceleratorParameterFromRate(float Rate, const struct FLinearColor& BlurCenter);
	void SetRadialBlur(float Rate, float BlurSize, const struct FVector& BlurCenter, const struct FVector& BlurColor);
	void SetupCinematicVisionFog(EVisionFogID VisionFogID, float Rate, float FogNear, float FogFar, const struct FVector& CenterLocation);
	void ClearCinematicVisionFog();
	void SetupCinematicSeeThrough(float Rate, float BlurPower);
	void ClearCinematicSeeThrough();
	void PrivateGetVisionFogMaterial(EVisionFogID VisionFogID, class UMaterialInstanceDynamic** Mid);
	void PrivateGetVisionFogRate(EVisionFogID VisionFogID, float* Rate);
	void PrivateSetVisionFogRate(EVisionFogID VisionFogID, float Rate);
	void PrivateSetupPicturizeQuality();
	void IsOutlinePriorityFront(bool* IsFront);
	void SetSimpleFade(float Rate, const struct FLinearColor& Color);
	void SetupSimpleFade();
	void PrivateInitializePerformShotPostProcess();
	void StartPerformShot(EPerformShotType ShotType, bool OneTime);
	void EndPerformShot(EPerformShotType ShotType, bool OneTime);
	void UpdatePerformShot(float DeltaSeconds, bool* Active);
	void PrivateSetupPerformShotRate(int32 Param_Index);
	void PrivateGetPerformShotFinishTime(int32 Param_Index, float* StartFinishTime, float* LoopTime, float* EndFinishTime);
	void PrivateSetupPerformShotRateValues(int32 Param_Index, float Weight, bool UseBlur, bool UseFov, const struct FPerformShotData& ShotData);
	void PrivateInitializePerformShotPostProcessReload();
	void SetupScreenLight();
	void SetScreenLight();
	void SetupLevelup();
	void UpdateLevelup(float DeltaSeconds, bool* Active);
	void StartLevelup(ERSPartyPlayerKind PartyKind);
	void DebugReloadPerformTable();
	void GetSeeThroughInterpolateTime(float* StartSeconds, float* EndSeconds);
	void GetAcceleratorInterpolateTime(float* StartSeconds, float* EndSeconds);
	void SetupFishEye();
	void PrivateGetVisionFogMaterialParameter(EVisionFogID VisionFogID, TArray<float>* Mid);
	void StartRecoverNPC(ERSPartyPlayerKind PlayerKind);
	void UpdateRecoverNPC(float DeltaSeconds, bool* Active);
	void SetupKarenMemory();
	void SetEventCommandVisionFogRate(EVisionFogID FogID, float Rate, float Time);
	void UpdateAlways();
	void Setup_Outline_PPM();
	void PrivateSetPerformShotFov(EPerformShotType ShotType, bool Enable, bool OneShot);
	void SetRenderingSettingsALLDefault();
	void SetRenderingSettingsALLDynamicEvent();
	void SetRenderingSettingsTranslucency(ERenderingSettingsType RenderingSettingType);
	void SetRenderingSettingsMergeInternal(const struct FRenderingSettings& BaseSettings, class FName OverrideParamName, struct FRenderingSettings* MergeSettings);
	void SetRenderingSettingsTranslucencyInternal(const struct FRenderingSettings& BaseSettings, class FName OverrideParamName);
	void SetRenderingSettingsSSRResolution(ERenderingSettingsType RenderingSettingType);
	void SetRenderingSettingsTest(class FName NewParam);
	void SetupOutlineOptimizeNoCustomDepth(bool Enable);
	void SetOutlineENPC(bool BrainField, float Alpha);
	void SetOutlineOFF(bool Off);
	void SetRenderingSettingsSSRResolutionInternal(const struct FRenderingSettings& BaseSettings, class FName OverrideParamName);
	void SetRenderingSettingsLocation(int32 LocationId, int32 AreaId);
	void ClearRenderingSettingsLocation();
	void PrivateOnChangeArea(EChangeAreaStatus Status, bool IsChangeLocation);
	bool IsNeedFrameWait();
	void IsActivePerformShot(EPerformShotType ShotType, bool* IsActive);
	void SetSASPPMCancelCelLook(bool Enable);
	void SetVisionFogNear(EVisionFogID VisionFogID, float Near);
	void SetVisionFogFar(EVisionFogID VisionFogID, float Far);
	void PrivateSetVisionFogNear(EVisionFogID VisionFogID, float Near);
	void PrivateSetVisionFogFar(EVisionFogID VisionFogID, float Far);
	void GetOutlineEnpcAlpha(float* Alpha);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PostProcessManager_C">();
	}
	static class ABP_PostProcessManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PostProcessManager_C>();
	}
};
static_assert(alignof(ABP_PostProcessManager_C) == 0x000008, "Wrong alignment on ABP_PostProcessManager_C");
static_assert(sizeof(ABP_PostProcessManager_C) == 0x000980, "Wrong size on ABP_PostProcessManager_C");
static_assert(offsetof(ABP_PostProcessManager_C, UberGraphFrame) == 0x000238, "Member 'ABP_PostProcessManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DamagePostProcess) == 0x000240, "Member 'ABP_PostProcessManager_C::DamagePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PerformPostProcess) == 0x000248, "Member 'ABP_PostProcessManager_C::PerformPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OverraySystem) == 0x000250, "Member 'ABP_PostProcessManager_C::OverraySystem' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SequencerPostProcess) == 0x000258, "Member 'ABP_PostProcessManager_C::SequencerPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DefaultSceneRoot) == 0x000260, "Member 'ABP_PostProcessManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DirectionPPComponents) == 0x000268, "Member 'ABP_PostProcessManager_C::DirectionPPComponents' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DirectionMax) == 0x000278, "Member 'ABP_PostProcessManager_C::DirectionMax' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, LerpSpeed) == 0x000280, "Member 'ABP_PostProcessManager_C::LerpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, UsePPComponents) == 0x000290, "Member 'ABP_PostProcessManager_C::UsePPComponents' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PriorityOffset) == 0x0002A0, "Member 'ABP_PostProcessManager_C::PriorityOffset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, BasePriority) == 0x0002A4, "Member 'ABP_PostProcessManager_C::BasePriority' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DamagePostProcessMaterial) == 0x0002A8, "Member 'ABP_PostProcessManager_C::DamagePostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineMaterial) == 0x0002B0, "Member 'ABP_PostProcessManager_C::OutlineMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineNoEmissionMaterial) == 0x0002B8, "Member 'ABP_PostProcessManager_C::OutlineNoEmissionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineNoCustomDepthMaterial) == 0x0002C0, "Member 'ABP_PostProcessManager_C::OutlineNoCustomDepthMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineAfterFogMaterial) == 0x0002C8, "Member 'ABP_PostProcessManager_C::OutlineAfterFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineAfterFogNoCustomDepthMaterial) == 0x0002D0, "Member 'ABP_PostProcessManager_C::OutlineAfterFogNoCustomDepthMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineFrontMaterial) == 0x0002D8, "Member 'ABP_PostProcessManager_C::OutlineFrontMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, AcceleratorMaterial) == 0x0002E0, "Member 'ABP_PostProcessManager_C::AcceleratorMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineMaterialAsset) == 0x0002E8, "Member 'ABP_PostProcessManager_C::OutlineMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineNoEmissionMaterialAsset) == 0x000310, "Member 'ABP_PostProcessManager_C::OutlineNoEmissionMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineNoCustomDepthMaterialAsset) == 0x000338, "Member 'ABP_PostProcessManager_C::OutlineNoCustomDepthMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineFrontMaterialAsset) == 0x000360, "Member 'ABP_PostProcessManager_C::OutlineFrontMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineFrontNoEmissionMaterialAsset) == 0x000388, "Member 'ABP_PostProcessManager_C::OutlineFrontNoEmissionMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineFrontNoCustomDepthMaterialAsset) == 0x0003B0, "Member 'ABP_PostProcessManager_C::OutlineFrontNoCustomDepthMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineAfterFogMaterialAsset) == 0x0003D8, "Member 'ABP_PostProcessManager_C::OutlineAfterFogMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineAfterFogNoCustomDepthMaterialAsset) == 0x000400, "Member 'ABP_PostProcessManager_C::OutlineAfterFogNoCustomDepthMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RadialBlurMaterialAsset) == 0x000428, "Member 'ABP_PostProcessManager_C::RadialBlurMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RadialBlurMaterial) == 0x000450, "Member 'ABP_PostProcessManager_C::RadialBlurMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, HyperSpeedMaterial) == 0x000458, "Member 'ABP_PostProcessManager_C::HyperSpeedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, HyperSpeedMaterialAsset) == 0x000460, "Member 'ABP_PostProcessManager_C::HyperSpeedMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DamageMaterialAsset) == 0x000488, "Member 'ABP_PostProcessManager_C::DamageMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, ScreenLightMaterialObject) == 0x0004B0, "Member 'ABP_PostProcessManager_C::ScreenLightMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DamageMaterial) == 0x0004B8, "Member 'ABP_PostProcessManager_C::DamageMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SeeThroughMaterialAsset) == 0x0004C0, "Member 'ABP_PostProcessManager_C::SeeThroughMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SeeThroughMaterialObject) == 0x0004E8, "Member 'ABP_PostProcessManager_C::SeeThroughMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SeeThroughMaterial) == 0x0004F0, "Member 'ABP_PostProcessManager_C::SeeThroughMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SeeThroughRate) == 0x0004F8, "Member 'ABP_PostProcessManager_C::SeeThroughRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, AcceleratorRate) == 0x0004FC, "Member 'ABP_PostProcessManager_C::AcceleratorRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, AcceleratorStart) == 0x000500, "Member 'ABP_PostProcessManager_C::AcceleratorStart' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RestorePerformPPM) == 0x000508, "Member 'ABP_PostProcessManager_C::RestorePerformPPM' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RestoreDamagePPM) == 0x000518, "Member 'ABP_PostProcessManager_C::RestoreDamagePPM' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RestoreScenePPV) == 0x000528, "Member 'ABP_PostProcessManager_C::RestoreScenePPV' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, ScreenLightMaterialAsset) == 0x000538, "Member 'ABP_PostProcessManager_C::ScreenLightMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogMaterialAsset) == 0x000560, "Member 'ABP_PostProcessManager_C::VisionFogMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogMaterial) == 0x000570, "Member 'ABP_PostProcessManager_C::VisionFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogMaterialObject) == 0x000580, "Member 'ABP_PostProcessManager_C::VisionFogMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogRate) == 0x000590, "Member 'ABP_PostProcessManager_C::VisionFogRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogActiveMaterial) == 0x0005A0, "Member 'ABP_PostProcessManager_C::VisionFogActiveMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogActiveID) == 0x0005A8, "Member 'ABP_PostProcessManager_C::VisionFogActiveID' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogActiveRate) == 0x0005AC, "Member 'ABP_PostProcessManager_C::VisionFogActiveRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogSeeThroughRate) == 0x0005B0, "Member 'ABP_PostProcessManager_C::VisionFogSeeThroughRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogVelocity) == 0x0005B4, "Member 'ABP_PostProcessManager_C::VisionFogVelocity' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogDefaultFogNear) == 0x0005B8, "Member 'ABP_PostProcessManager_C::VisionFogDefaultFogNear' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogDefaultFogFar) == 0x0005BC, "Member 'ABP_PostProcessManager_C::VisionFogDefaultFogFar' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SeeThroughDefaultBlurPower) == 0x0005C0, "Member 'ABP_PostProcessManager_C::SeeThroughDefaultBlurPower' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogVelocityVector) == 0x0005C4, "Member 'ABP_PostProcessManager_C::VisionFogVelocityVector' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogLastPlayerLocation) == 0x0005D0, "Member 'ABP_PostProcessManager_C::VisionFogLastPlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DefaultPicturizeQuality) == 0x0005DC, "Member 'ABP_PostProcessManager_C::DefaultPicturizeQuality' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SimpleFadeMaterialObject) == 0x0005E0, "Member 'ABP_PostProcessManager_C::SimpleFadeMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineFrontNoEmissionMaterial) == 0x0005E8, "Member 'ABP_PostProcessManager_C::OutlineFrontNoEmissionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineFrontNoCustomDepthMaterial) == 0x0005F0, "Member 'ABP_PostProcessManager_C::OutlineFrontNoCustomDepthMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineVisionFogCounterMaterial) == 0x0005F8, "Member 'ABP_PostProcessManager_C::OutlineVisionFogCounterMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlinePriorityFront) == 0x000600, "Member 'ABP_PostProcessManager_C::OutlinePriorityFront' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SimpleFadeMaterialAsset) == 0x000608, "Member 'ABP_PostProcessManager_C::SimpleFadeMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SimpleFadeMaterial) == 0x000630, "Member 'ABP_PostProcessManager_C::SimpleFadeMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PerformShotPostProcessList) == 0x000638, "Member 'ABP_PostProcessManager_C::PerformShotPostProcessList' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PerformShotDataTableAsset) == 0x000648, "Member 'ABP_PostProcessManager_C::PerformShotDataTableAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PerformShotData) == 0x000670, "Member 'ABP_PostProcessManager_C::PerformShotData' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PerformShotTime) == 0x000680, "Member 'ABP_PostProcessManager_C::PerformShotTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PerformShotState) == 0x000690, "Member 'ABP_PostProcessManager_C::PerformShotState' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, ScreenLightMaterial) == 0x0006A0, "Member 'ABP_PostProcessManager_C::ScreenLightMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, LevelupMaterialAsset) == 0x0006A8, "Member 'ABP_PostProcessManager_C::LevelupMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, LevelupMaterialObject) == 0x0006D0, "Member 'ABP_PostProcessManager_C::LevelupMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, LevelupMaterial) == 0x0006D8, "Member 'ABP_PostProcessManager_C::LevelupMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, LevelupTimer) == 0x0006E0, "Member 'ABP_PostProcessManager_C::LevelupTimer' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, ActiveLevelup) == 0x0006F0, "Member 'ABP_PostProcessManager_C::ActiveLevelup' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, LevelupMaxTimer) == 0x000700, "Member 'ABP_PostProcessManager_C::LevelupMaxTimer' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PreviousGameTime) == 0x000704, "Member 'ABP_PostProcessManager_C::PreviousGameTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, SeeThroughStart) == 0x000708, "Member 'ABP_PostProcessManager_C::SeeThroughStart' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, FishEyeMaterialObject) == 0x000710, "Member 'ABP_PostProcessManager_C::FishEyeMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, FishEyeMaterial) == 0x000718, "Member 'ABP_PostProcessManager_C::FishEyeMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, FishEyeMaterialAsset) == 0x000720, "Member 'ABP_PostProcessManager_C::FishEyeMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogMaterialDefaultParam) == 0x000748, "Member 'ABP_PostProcessManager_C::VisionFogMaterialDefaultParam' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogMaterialDefaultParamName) == 0x000758, "Member 'ABP_PostProcessManager_C::VisionFogMaterialDefaultParamName' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RecoverNPCKind) == 0x000768, "Member 'ABP_PostProcessManager_C::RecoverNPCKind' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RecoverNPCTimer) == 0x00076C, "Member 'ABP_PostProcessManager_C::RecoverNPCTimer' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RecoverNPCActive) == 0x000770, "Member 'ABP_PostProcessManager_C::RecoverNPCActive' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RecoverNPCCurve) == 0x000778, "Member 'ABP_PostProcessManager_C::RecoverNPCCurve' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RecoverNPCMaterialAsset) == 0x000780, "Member 'ABP_PostProcessManager_C::RecoverNPCMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RecoverNPCMaterialObject) == 0x0007A8, "Member 'ABP_PostProcessManager_C::RecoverNPCMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, PostProcessParam) == 0x0007B0, "Member 'ABP_PostProcessManager_C::PostProcessParam' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DamagePPMFlash) == 0x0007B8, "Member 'ABP_PostProcessManager_C::DamagePPMFlash' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DamagePPMPower) == 0x0007BC, "Member 'ABP_PostProcessManager_C::DamagePPMPower' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, TickTimeline) == 0x0007C0, "Member 'ABP_PostProcessManager_C::TickTimeline' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, KarenMemoryMaterialAsset) == 0x0007C8, "Member 'ABP_PostProcessManager_C::KarenMemoryMaterialAsset' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, KarenMemoryMaterialObject) == 0x0007F0, "Member 'ABP_PostProcessManager_C::KarenMemoryMaterialObject' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, KarenMemoryMaterial) == 0x0007F8, "Member 'ABP_PostProcessManager_C::KarenMemoryMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEventComID) == 0x000800, "Member 'ABP_PostProcessManager_C::VisionFogEventComID' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEventComStartRate) == 0x000804, "Member 'ABP_PostProcessManager_C::VisionFogEventComStartRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEventComTargetRate) == 0x000808, "Member 'ABP_PostProcessManager_C::VisionFogEventComTargetRate' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEventComInterpTime) == 0x00080C, "Member 'ABP_PostProcessManager_C::VisionFogEventComInterpTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEventComNowTime) == 0x000810, "Member 'ABP_PostProcessManager_C::VisionFogEventComNowTime' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEventComInterp) == 0x000814, "Member 'ABP_PostProcessManager_C::VisionFogEventComInterp' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogFar) == 0x000818, "Member 'ABP_PostProcessManager_C::VisionFogFar' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogNear) == 0x000828, "Member 'ABP_PostProcessManager_C::VisionFogNear' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RestoreMenuElevator) == 0x000838, "Member 'ABP_PostProcessManager_C::RestoreMenuElevator' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, IsSetupMenu) == 0x000848, "Member 'ABP_PostProcessManager_C::IsSetupMenu' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RenderingSettingsBase) == 0x00084C, "Member 'ABP_PostProcessManager_C::RenderingSettingsBase' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineNoCustomDepth) == 0x0008C4, "Member 'ABP_PostProcessManager_C::OutlineNoCustomDepth' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, UseDebugQuality) == 0x0008C5, "Member 'ABP_PostProcessManager_C::UseDebugQuality' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualitySoftFocus) == 0x0008C6, "Member 'ABP_PostProcessManager_C::DebugQualitySoftFocus' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityLuminousSmudge_) == 0x0008C7, "Member 'ABP_PostProcessManager_C::DebugQualityLuminousSmudge_' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityGradScreenMask) == 0x0008C8, "Member 'ABP_PostProcessManager_C::DebugQualityGradScreenMask' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityBothSideRim) == 0x0008C9, "Member 'ABP_PostProcessManager_C::DebugQualityBothSideRim' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityLightUp) == 0x0008CA, "Member 'ABP_PostProcessManager_C::DebugQualityLightUp' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityFieldBlur) == 0x0008CB, "Member 'ABP_PostProcessManager_C::DebugQualityFieldBlur' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityLightShaft) == 0x0008CC, "Member 'ABP_PostProcessManager_C::DebugQualityLightShaft' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityDrivePlane) == 0x0008CD, "Member 'ABP_PostProcessManager_C::DebugQualityDrivePlane' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualitySAS) == 0x0008CE, "Member 'ABP_PostProcessManager_C::DebugQualitySAS' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, DebugQualityBrainCrash) == 0x0008CF, "Member 'ABP_PostProcessManager_C::DebugQualityBrainCrash' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineOFF) == 0x0008D0, "Member 'ABP_PostProcessManager_C::OutlineOFF' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, RenderingSettingsLocation) == 0x0008D4, "Member 'ABP_PostProcessManager_C::RenderingSettingsLocation' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEm8300LightShaftParam) == 0x00094C, "Member 'ABP_PostProcessManager_C::VisionFogEm8300LightShaftParam' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, VisionFogEm8300LightShaftON) == 0x000950, "Member 'ABP_PostProcessManager_C::VisionFogEm8300LightShaftON' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineVisionFogCounter) == 0x000951, "Member 'ABP_PostProcessManager_C::OutlineVisionFogCounter' has a wrong offset!");
static_assert(offsetof(ABP_PostProcessManager_C, OutlineVisionFogCounterMaterialAsset) == 0x000958, "Member 'ABP_PostProcessManager_C::OutlineVisionFogCounterMaterialAsset' has a wrong offset!");

}

