#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JumpComponent

#include "Basic.hpp"

#include "BP_JumpComponent_classes.hpp"
#include "BP_JumpComponent_parameters.hpp"


namespace SDK
{

// Function BP_JumpComponent.BP_JumpComponent_C.ExecuteUbergraph_BP_JumpComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JumpComponent_C::ExecuteUbergraph_BP_JumpComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "ExecuteUbergraph_BP_JumpComponent");

	Params::BP_JumpComponent_C_ExecuteUbergraph_BP_JumpComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JumpComponent.BP_JumpComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_JumpComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JumpComponent.BP_JumpComponent_C.StartJump
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_JumpComponent_C::StartJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "StartJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JumpComponent.BP_JumpComponent_C.Land
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_JumpComponent_C::Land()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "Land");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JumpComponent.BP_JumpComponent_C.GetFirstJumpPastTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   PastTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JumpComponent_C::GetFirstJumpPastTime(float* PastTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "GetFirstJumpPastTime");

	Params::BP_JumpComponent_C_GetFirstJumpPastTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PastTime != nullptr)
		*PastTime = Parms.PastTime;
}


// Function BP_JumpComponent.BP_JumpComponent_C.SetJumpMaxCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_JumpMaxCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JumpComponent_C::SetJumpMaxCount(int32 Param_JumpMaxCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "SetJumpMaxCount");

	Params::BP_JumpComponent_C_SetJumpMaxCount Parms{};

	Parms.Param_JumpMaxCount = Param_JumpMaxCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_JumpComponent.BP_JumpComponent_C.AirJumpEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_JumpComponent_C::AirJumpEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "AirJumpEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_JumpComponent.BP_JumpComponent_C.GetCurrentJumpCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Param_CurrentJumpCount                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_JumpComponent_C::GetCurrentJumpCount(int32* Param_CurrentJumpCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "GetCurrentJumpCount");

	Params::BP_JumpComponent_C_GetCurrentJumpCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CurrentJumpCount != nullptr)
		*Param_CurrentJumpCount = Parms.Param_CurrentJumpCount;
}


// Function BP_JumpComponent.BP_JumpComponent_C.IsAirJumpAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bAble                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_JumpComponent_C::IsAirJumpAble(bool* bAble) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_JumpComponent_C", "IsAirJumpAble");

	Params::BP_JumpComponent_C_IsAirJumpAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAble != nullptr)
		*bAble = Parms.bAble;
}

}

