#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DamagePostEffectComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DamagePostEffectComponent.DamagePostEffectComponent_C
// 0x0060 (0x0120 - 0x00C0)
class UDamagePostEffectComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             FlashTimer;                                        // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         START_HP_RATE;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         END_HP_RATE;                                       // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FLASH_TIME;                                        // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RE_FLASH_TIME;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_REST_HP_EFFECT_POWER;                          // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_DAMAGE_FLASH_EFFECT_POWER;                     // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             ReFlashTimer;                                      // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             InterpTimer;                                       // 0x0100(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         StartPower;                                        // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndPower;                                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPower;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_413B[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentHp;                                         // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_DamagePostEffectComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Setup(int32 HP);
	void UpdatePostEffect(int32 HP);
	void TickUpdate(float DeltaSeconds);
	void SetRestHpEffectPower(float Power);
	void SetDamageFlashEffectPower(float Power);
	void SetEnableDamagePostEffect(bool Param_bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DamagePostEffectComponent_C">();
	}
	static class UDamagePostEffectComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDamagePostEffectComponent_C>();
	}
};
static_assert(alignof(UDamagePostEffectComponent_C) == 0x000008, "Wrong alignment on UDamagePostEffectComponent_C");
static_assert(sizeof(UDamagePostEffectComponent_C) == 0x000120, "Wrong size on UDamagePostEffectComponent_C");
static_assert(offsetof(UDamagePostEffectComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UDamagePostEffectComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, OwnerPlayer) == 0x0000C8, "Member 'UDamagePostEffectComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, FlashTimer) == 0x0000D0, "Member 'UDamagePostEffectComponent_C::FlashTimer' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, START_HP_RATE) == 0x0000DC, "Member 'UDamagePostEffectComponent_C::START_HP_RATE' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, END_HP_RATE) == 0x0000E0, "Member 'UDamagePostEffectComponent_C::END_HP_RATE' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, FLASH_TIME) == 0x0000E4, "Member 'UDamagePostEffectComponent_C::FLASH_TIME' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, RE_FLASH_TIME) == 0x0000E8, "Member 'UDamagePostEffectComponent_C::RE_FLASH_TIME' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, MAX_REST_HP_EFFECT_POWER) == 0x0000EC, "Member 'UDamagePostEffectComponent_C::MAX_REST_HP_EFFECT_POWER' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, MAX_DAMAGE_FLASH_EFFECT_POWER) == 0x0000F0, "Member 'UDamagePostEffectComponent_C::MAX_DAMAGE_FLASH_EFFECT_POWER' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, ReFlashTimer) == 0x0000F4, "Member 'UDamagePostEffectComponent_C::ReFlashTimer' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, InterpTimer) == 0x000100, "Member 'UDamagePostEffectComponent_C::InterpTimer' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, StartPower) == 0x00010C, "Member 'UDamagePostEffectComponent_C::StartPower' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, EndPower) == 0x000110, "Member 'UDamagePostEffectComponent_C::EndPower' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, CurrentPower) == 0x000114, "Member 'UDamagePostEffectComponent_C::CurrentPower' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, bEnable) == 0x000118, "Member 'UDamagePostEffectComponent_C::bEnable' has a wrong offset!");
static_assert(offsetof(UDamagePostEffectComponent_C, CurrentHp) == 0x00011C, "Member 'UDamagePostEffectComponent_C::CurrentHp' has a wrong offset!");

}

