#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AjitoNPCTalk

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_AjitoNPCTalkBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AjitoNPCTalk.BP_AjitoNPCTalk_C
// 0x03A8 (0x0830 - 0x0488)
class ABP_AjitoNPCTalk_C : public ABP_AjitoNPCTalkBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AjitoNPCTalk_C;                  // 0x0488(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class FString>                         MessageIDList;                                     // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Episode_DLC1;                                      // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Episode_DLC2;                                      // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Lvup_DLC1;                                         // 0x04A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Lvup_DLC2;                                         // 0x04A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1861[0x4];                                     // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPlayerID, class FName>                  MatchingAttachment;                                // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayerID, ELibraryFlagType>             TwoshotTalkFlag;                                   // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ProgressArray_M;                                   // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 ProgressArray_F;                                   // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EPlayerID                                     TalkerCharaID;                                     // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1862[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PresentDataDT;                                     // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PresentCancelMesID;                                // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           KizunaLvupEvList;                                  // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   TwoshotTalkEvent;                                  // 0x05A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   MatchingAttachmentEvent;                           // 0x05C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           BondsEpisodeList_M;                                // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsTransformEpList_M;                               // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           BondsEpisodeList_F;                                // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsTransformEpList_F;                               // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<EPlayerID, class FName>                  AjitoStay_DTRowName;                               // 0x0630(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, bool>                     CheckChoiceFlag;                                   // 0x0680(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ChoiceMessageIDs;                                  // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          NotUseNextChoice;                                  // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InputNext;                                         // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1863[0x2];                                     // 0x06E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamBondsEpisodeNo;                                // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Episode_5_NoItem;                                  // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1864[0x7];                                     // 0x06E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPlayerID, class FName>                  QuestID_DLC1_M;                                    // 0x06F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayerID, class FName>                  QuestID_DLC1_F;                                    // 0x0740(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayerID, class FName>                  QuestID_DLC2_M;                                    // 0x0790(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPlayerID, class FName>                  QuestID_DLC2_F;                                    // 0x07E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AjitoNPCTalk(int32 EntryPoint);
	void ChangePlayerEvent();
	void StartAjitoStay();
	void NoBondsEvent();
	void PresentEnd(EPlayerID CharaID);
	void StartEvent();
	void CheckInterludeProgressInRange(int32 MinInterludePhase, int32 MaxInterludePhase, bool* ProgressInRange);
	void CheckBondsEpisodeNum(int32* FinshEpisode);
	class FString SearchStringID(TArray<class FString>& SearchArray, const class FString& SearchCharaID);
	void StringIDConvertProgressID(const class FString& MsgID, int32* ConvertProgressID);
	void CheckPossiblePresent(bool* AlreadyUnion);
	void Check_Exsist_Kizuna_EP(bool* IsKizunaEP);
	void CheckMemberAlreadyUnion(EPlayerID CheckCharaID, bool* AlreadyUnion);
	void Field_Event_Transform();
	void CheckKizunaLvup_DLC();
	void FreeWord_KizunaEP(bool* IsSwapKizunaEPFreeWord);
	void SetChoiceMesIDList();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AjitoNPCTalk_C">();
	}
	static class ABP_AjitoNPCTalk_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AjitoNPCTalk_C>();
	}
};
static_assert(alignof(ABP_AjitoNPCTalk_C) == 0x000008, "Wrong alignment on ABP_AjitoNPCTalk_C");
static_assert(sizeof(ABP_AjitoNPCTalk_C) == 0x000830, "Wrong size on ABP_AjitoNPCTalk_C");
static_assert(offsetof(ABP_AjitoNPCTalk_C, UberGraphFrame_BP_AjitoNPCTalk_C) == 0x000488, "Member 'ABP_AjitoNPCTalk_C::UberGraphFrame_BP_AjitoNPCTalk_C' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, MessageIDList) == 0x000490, "Member 'ABP_AjitoNPCTalk_C::MessageIDList' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, Episode_DLC1) == 0x0004A0, "Member 'ABP_AjitoNPCTalk_C::Episode_DLC1' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, Episode_DLC2) == 0x0004A1, "Member 'ABP_AjitoNPCTalk_C::Episode_DLC2' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, Lvup_DLC1) == 0x0004A2, "Member 'ABP_AjitoNPCTalk_C::Lvup_DLC1' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, Lvup_DLC2) == 0x0004A3, "Member 'ABP_AjitoNPCTalk_C::Lvup_DLC2' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, MatchingAttachment) == 0x0004A8, "Member 'ABP_AjitoNPCTalk_C::MatchingAttachment' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, TwoshotTalkFlag) == 0x0004F8, "Member 'ABP_AjitoNPCTalk_C::TwoshotTalkFlag' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, ProgressArray_M) == 0x000548, "Member 'ABP_AjitoNPCTalk_C::ProgressArray_M' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, ProgressArray_F) == 0x000558, "Member 'ABP_AjitoNPCTalk_C::ProgressArray_F' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, TalkerCharaID) == 0x000568, "Member 'ABP_AjitoNPCTalk_C::TalkerCharaID' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, PresentDataDT) == 0x000570, "Member 'ABP_AjitoNPCTalk_C::PresentDataDT' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, PresentCancelMesID) == 0x000580, "Member 'ABP_AjitoNPCTalk_C::PresentCancelMesID' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, KizunaLvupEvList) == 0x000590, "Member 'ABP_AjitoNPCTalk_C::KizunaLvupEvList' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, TwoshotTalkEvent) == 0x0005A0, "Member 'ABP_AjitoNPCTalk_C::TwoshotTalkEvent' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, MatchingAttachmentEvent) == 0x0005C8, "Member 'ABP_AjitoNPCTalk_C::MatchingAttachmentEvent' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, BondsEpisodeList_M) == 0x0005F0, "Member 'ABP_AjitoNPCTalk_C::BondsEpisodeList_M' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, IsTransformEpList_M) == 0x000600, "Member 'ABP_AjitoNPCTalk_C::IsTransformEpList_M' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, BondsEpisodeList_F) == 0x000610, "Member 'ABP_AjitoNPCTalk_C::BondsEpisodeList_F' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, IsTransformEpList_F) == 0x000620, "Member 'ABP_AjitoNPCTalk_C::IsTransformEpList_F' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, AjitoStay_DTRowName) == 0x000630, "Member 'ABP_AjitoNPCTalk_C::AjitoStay_DTRowName' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, CheckChoiceFlag) == 0x000680, "Member 'ABP_AjitoNPCTalk_C::CheckChoiceFlag' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, ChoiceMessageIDs) == 0x0006D0, "Member 'ABP_AjitoNPCTalk_C::ChoiceMessageIDs' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, NotUseNextChoice) == 0x0006E0, "Member 'ABP_AjitoNPCTalk_C::NotUseNextChoice' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, InputNext) == 0x0006E1, "Member 'ABP_AjitoNPCTalk_C::InputNext' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, TeamBondsEpisodeNo) == 0x0006E4, "Member 'ABP_AjitoNPCTalk_C::TeamBondsEpisodeNo' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, Episode_5_NoItem) == 0x0006E8, "Member 'ABP_AjitoNPCTalk_C::Episode_5_NoItem' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, QuestID_DLC1_M) == 0x0006F0, "Member 'ABP_AjitoNPCTalk_C::QuestID_DLC1_M' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, QuestID_DLC1_F) == 0x000740, "Member 'ABP_AjitoNPCTalk_C::QuestID_DLC1_F' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, QuestID_DLC2_M) == 0x000790, "Member 'ABP_AjitoNPCTalk_C::QuestID_DLC2_M' has a wrong offset!");
static_assert(offsetof(ABP_AjitoNPCTalk_C, QuestID_DLC2_F) == 0x0007E0, "Member 'ABP_AjitoNPCTalk_C::QuestID_DLC2_F' has a wrong offset!");

}

