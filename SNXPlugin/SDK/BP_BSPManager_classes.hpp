#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSPManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "S_BSPInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BSPManager.BP_BSPManager_C
// 0x0080 (0x02E8 - 0x0268)
class ABP_BSPManager_C final : public ABSPManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABSPBlockVolume*>                BlockWithPlayer;                                   // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<struct FS_BSPInfo>                     BlockNearPlayerInfo;                               // 0x0288(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class ABSPBlockVolume*>                AreaBlocks;                                        // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnActorOverlapBSPBlock;                            // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsDirty;                                           // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA4[0x3];                                     // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlockUpdateID;                                     // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OldPlayerPos;                                      // 0x02C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSoundDistance;                                  // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerInBlock;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA5[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerLocation;                                    // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayWork;                                         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MyDelayDeltaSeconds;                               // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnActorOverlapBSPBlock__DelegateSignature();
	void ExecuteUbergraph_BP_BSPManager(int32 EntryPoint);
	void OnBlockBeginOverlap_Event_0(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnBlockEndOverlap_Event_0(class AActor* OverlappedActor, class AActor* OtherActor);
	void BindCallbacks();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ResetBlockNearPlayer();
	void RegisterAllBlocksInArea();
	void AddBlockInPlayer(class ABSPBlockVolume* bLock);
	void RemoveBlockInPlayer(class ABSPBlockVolume* bLock);
	void UpdateBlockNearPlayer();
	void RegisterAllBlocksInArea_();
	void UnregisterAllBlocks();
	void UpdateBSPAttenuation(float DeltaSeconds);
	void IsPlayerInAnyBlock(bool* InBlock);
	void GetSoundAttenuationRate(const struct FVector& Pos, float* AttenuationRate, class ABSPBlockVolume** bLock);
	void Update(float DeltaSeconds);
	void CalcBSPAttenuationFirstFromPlayer(class ABSPBlockVolume* FromBSPVolume, TArray<class ABSPPortalBase*>& Portals, const struct FVector& BasePos);
	void CalcAttenuationByPortal(class ABSPPortalBase* PortalSrc, class ABSPPortalBase* PortalDst, float* AttenuationRate);
	void CalcAttenuation(const struct FVector& Src, const struct FVector& Dst, float* AttenuationRate);
	void CalcAttenuationByLength(float Distance, float* AttenuationRate);
	void CalcLengthToPortal(class AActor* Portal, const struct FVector& Pos, float* Length);
	void ResetBlockNearPlayer_();
	void GetSoundAttenuationRate_Call(const struct FVector& Pos, float* AttenuationRate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BSPManager_C">();
	}
	static class ABP_BSPManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BSPManager_C>();
	}
};
static_assert(alignof(ABP_BSPManager_C) == 0x000008, "Wrong alignment on ABP_BSPManager_C");
static_assert(sizeof(ABP_BSPManager_C) == 0x0002E8, "Wrong size on ABP_BSPManager_C");
static_assert(offsetof(ABP_BSPManager_C, UberGraphFrame) == 0x000268, "Member 'ABP_BSPManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_BSPManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, BlockWithPlayer) == 0x000278, "Member 'ABP_BSPManager_C::BlockWithPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, BlockNearPlayerInfo) == 0x000288, "Member 'ABP_BSPManager_C::BlockNearPlayerInfo' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, AreaBlocks) == 0x000298, "Member 'ABP_BSPManager_C::AreaBlocks' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, OnActorOverlapBSPBlock) == 0x0002A8, "Member 'ABP_BSPManager_C::OnActorOverlapBSPBlock' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, IsDirty) == 0x0002B8, "Member 'ABP_BSPManager_C::IsDirty' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, BlockUpdateID) == 0x0002BC, "Member 'ABP_BSPManager_C::BlockUpdateID' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, OldPlayerPos) == 0x0002C0, "Member 'ABP_BSPManager_C::OldPlayerPos' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, MaxSoundDistance) == 0x0002CC, "Member 'ABP_BSPManager_C::MaxSoundDistance' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, IsPlayerInBlock) == 0x0002D0, "Member 'ABP_BSPManager_C::IsPlayerInBlock' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, PlayerLocation) == 0x0002D4, "Member 'ABP_BSPManager_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, DelayWork) == 0x0002E0, "Member 'ABP_BSPManager_C::DelayWork' has a wrong offset!");
static_assert(offsetof(ABP_BSPManager_C, MyDelayDeltaSeconds) == 0x0002E4, "Member 'ABP_BSPManager_C::MyDelayDeltaSeconds' has a wrong offset!");

}

