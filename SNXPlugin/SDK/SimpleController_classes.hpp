#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleController

#include "Basic.hpp"

#include "SimpleController_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SimpleController.SimpleControllerBPLibrary
// 0x0130 (0x0158 - 0x0028)
class USimpleControllerBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	FMulticastInlineDelegateProperty_             OnButtonDownEventDelegate;                         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonUpEventDelegate;                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDirectionalPadEventDelegate;                     // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBallMovedEventDelegate;                          // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnaxisMovedEventDelegate;                          // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OndeviceAttachedEventDelegate;                     // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OndeviceDetachedEventDelegate;                     // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_140B[0xC0];                                    // 0x0098(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void breakDeviceForceFeedbackInfo(const struct FSimpleControllerDevice& Device, bool* HasHaptic, bool* ForceFeedback_CONSTANT, bool* ForceFeedback_SINE, bool* ForceFeedback_LEFTRIGHT, bool* ForceFeedback_TRIANGLE, bool* ForceFeedback_SAWTOOTHUP, bool* ForceFeedback_SAWTOOTHDOWN, bool* ForceFeedback_RAMP, bool* ForceFeedback_SPRING, bool* ForceFeedback_DAMPER, bool* ForceFeedback_INERTIA, bool* ForceFeedback_FRICTION, bool* ForceFeedback_CUSTOM, bool* ForceFeedback_GAIN, bool* ForceFeedback_AUTOCENTER, bool* ForceFeedback_STATUS, bool* ForceFeedback_PAUSE, bool* ForceFeedback_POLAR, bool* ForceFeedback_CARTESIAN, bool* ForceFeedback_SPHERICAL, bool* ForceFeedback_INFINITY, int32* MaxSimultaneouslyEffects);
	static void breakDeviceInfo(const struct FSimpleControllerDevice& Device, int32* DeviceIndex, int32* ConnectionIndex, class FString* DeviceID, class FString* DeviceName, class FString* ControllerName, int32* VendorID, int32* ProductID, int32* NumAxes, int32* NumButtons, int32* NumDirectionalPadAxes, int32* NumBalls, bool* HasHaptic);
	static void breakForceFeedbackEffect(const struct FSimpleControllerForceFeedbackEffect& ForceFeedbackEffect, int32* EffectID, bool* Successful);
	static void buttonIDToButton(int32 buttonID, ESimpleControllerButtons* buttons);
	static void DestroyForceFeedbackEffect(const struct FSimpleControllerForceFeedbackEffect& ForceFeedbackEffect);
	static void DirectinalPadValueToDirection(int32 DirectionalPadValue, ESimpleControllerDirectionalPad* Direction);
	static class USimpleControllerBPLibrary* GetSimpleControllerTarget();
	static void SimpleRumble(const struct FSimpleControllerDevice& Device, int32 Low_runble, int32 High_rumble, int32 Duration);
	static struct FSimpleControllerForceFeedbackEffect UploadAndRunForceFeedbackEffect(bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerForceFeedbackEffect& ForceFeedbackEffect, int32 Iterations);

	void AxisMovedEventDelegate(const class FString& DeviceID, const int32 AxisID, const float AxisValue, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void AxisMovedEventDelegate__DelegateSignature(const class FString& DeviceID, int32 AxisID, float AxisValue, int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void ballMovedEventDelegate(const class FString& DeviceID, const int32 ballID, const int32 XRel, const int32 YRel, const struct FSimpleControllerDevice& Device);
	void ballMovedEventDelegate__DelegateSignature(const class FString& DeviceID, int32 ballID, float XRel, int32 YRel, const struct FSimpleControllerDevice& Device);
	void buttonDownEventDelegate(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void buttonDownEventDelegate__DelegateSignature(const class FString& DeviceID, int32 buttonID, int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void buttonUpEventDelegate(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void buttonUpEventDelegate__DelegateSignature(const class FString& DeviceID, int32 buttonID, int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void ChangeAxisMapping(int32 DeviceIndex, int32 OldAxisID, int32 NewAxisID);
	void ChangeButtonMapping(int32 DeviceIndex, int32 OldButtonID, int32 NewButtonID);
	void CreateForceFeedbackEffectCondition(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackEffectConditionType ConditionType, bool UseDirectionX, bool UseDirectionY, bool UseDirectionZ, int32 Length, int32 Delay, float RightLevel, float LeftLevel, int32 RightLevelIncreaseSpeed, int32 LeftLevelIncreaseSpeed, float Deadband, int32 Center);
	void CreateForceFeedbackEffectConstant(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackDirectionType DirectionType, int32 DirectionX, int32 DirectionY, int32 DirectionZ, int32 Length, int32 Delay, float Level, int32 AttackLength, float AttackLevel, int32 FadeLength, float FadeLevel);
	void CreateForceFeedbackEffectPeriodic(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackEffectPeriodicType PeriodicType, ESimpleControllerForceFeedbackDirectionType DirectionType, int32 DirectionX, int32 DirectionY, int32 DirectionZ, int32 Length, int32 Delay, int32 Period, float Magnitude, int32 Offset, int32 Phase, int32 AttackLength, float AttackLevel, int32 FadeLength, float FadeLevel);
	void CreateForceFeedbackEffectRamp(struct FSimpleControllerForceFeedbackEffect* ForceFeedbackEffect, bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, ESimpleControllerForceFeedbackDirectionType DirectionType, int32 DirectionX, int32 DirectionY, int32 DirectionZ, int32 Length, int32 Delay, float StartLevel, float EndLevel, int32 AttackLength, float AttackLevel, int32 FadeLength, float FadeLevel);
	void DeviceAttachedEventDelegate(const struct FSimpleControllerDevice& Device);
	void DeviceAttachedEventDelegate__DelegateSignature(const struct FSimpleControllerDevice& Device);
	void DeviceDetachedEventDelegate(const struct FSimpleControllerDevice& Device);
	void DeviceDetachedEventDelegate__DelegateSignature(const struct FSimpleControllerDevice& Device);
	void DirectionalPadEventDelegate(const class FString& DeviceID, const int32 DirectionalPadValue, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void DirectionalPadEventDelegate__DelegateSignature(const class FString& DeviceID, int32 DirectionalPadValue, int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	struct FSimpleControllerDevice FindControllerByDeviceID(const class FString& DeviceID, bool* Found);
	struct FSimpleControllerDevice FindControllerByDeviceIndex(int32 DeviceIndex, bool* Found);
	TArray<struct FSimpleControllerDevice> GetConnectedControllers();
	void InitController(float RefreshRateButtonsAndAxis);
	void InvertAxis(int32 DeviceIndex, int32 AxisID);
	bool LoadMapping(ESimpleControllerDirectoryType DirectoryType, int32 DeviceIndex, const class FString& FileNameWithPath);
	void OnButtonDownEvent(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void OnButtonUpEvent(const class FString& DeviceID, const int32 buttonID, const int32 DeviceIndex, const struct FSimpleControllerDevice& Device);
	void ResetAllAxisInverting(int32 DeviceIndex);
	void ResetAllAxisToDefaultMapping(int32 DeviceIndex);
	void ResetAllButtonsToDefaultMapping(int32 DeviceIndex);
	void ResetAxisInverting(int32 DeviceIndex, int32 AxisID);
	void ResetAxisToDefaultMapping(int32 DeviceIndex, int32 OldAxisID);
	void ResetButtonToDefaultMapping(int32 DeviceIndex, int32 OldButtonID);
	void Rumble(bool* Successful, class FString* ErrorMessage, const struct FSimpleControllerDevice& Device, float StrengthSmallMotor, float StrengthLargeMotor, int32 LengthInMilliseconds);
	bool SaveMapping(ESimpleControllerDirectoryType DirectoryType, int32 DeviceIndex, const class FString& FileNameWithPath, bool CreateDirectory);
	void StopController();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleControllerBPLibrary">();
	}
	static class USimpleControllerBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleControllerBPLibrary>();
	}
};
static_assert(alignof(USimpleControllerBPLibrary) == 0x000008, "Wrong alignment on USimpleControllerBPLibrary");
static_assert(sizeof(USimpleControllerBPLibrary) == 0x000158, "Wrong size on USimpleControllerBPLibrary");
static_assert(offsetof(USimpleControllerBPLibrary, OnButtonDownEventDelegate) == 0x000028, "Member 'USimpleControllerBPLibrary::OnButtonDownEventDelegate' has a wrong offset!");
static_assert(offsetof(USimpleControllerBPLibrary, OnButtonUpEventDelegate) == 0x000038, "Member 'USimpleControllerBPLibrary::OnButtonUpEventDelegate' has a wrong offset!");
static_assert(offsetof(USimpleControllerBPLibrary, OnDirectionalPadEventDelegate) == 0x000048, "Member 'USimpleControllerBPLibrary::OnDirectionalPadEventDelegate' has a wrong offset!");
static_assert(offsetof(USimpleControllerBPLibrary, OnBallMovedEventDelegate) == 0x000058, "Member 'USimpleControllerBPLibrary::OnBallMovedEventDelegate' has a wrong offset!");
static_assert(offsetof(USimpleControllerBPLibrary, OnaxisMovedEventDelegate) == 0x000068, "Member 'USimpleControllerBPLibrary::OnaxisMovedEventDelegate' has a wrong offset!");
static_assert(offsetof(USimpleControllerBPLibrary, OndeviceAttachedEventDelegate) == 0x000078, "Member 'USimpleControllerBPLibrary::OndeviceAttachedEventDelegate' has a wrong offset!");
static_assert(offsetof(USimpleControllerBPLibrary, OndeviceDetachedEventDelegate) == 0x000088, "Member 'USimpleControllerBPLibrary::OndeviceDetachedEventDelegate' has a wrong offset!");

}

