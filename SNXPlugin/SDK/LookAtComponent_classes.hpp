#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LookAtComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LookAtComponent.LookAtComponent_C
// 0x0058 (0x0118 - 0x00C0)
class ULookAtComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 LookAtActor;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LookAtRotation;                                    // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HeadRoll;                                          // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadYaw;                                           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtFollowSpeed;                                 // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OwnerSocketName;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LookAtSocketName;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLookAtEnabled;                                    // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50B0[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitDegreeUp;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDegreeDown;                                   // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDegreeRight;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDegreeLeft;                                   // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FinishLookAtRotation;                              // 0x010C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_LookAtComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void GetAnim(class URSPlayerAnimInstance** Anim);
	void CalcLookAtRotation();
	void GetMeshComponent(class USkeletalMeshComponent** Mesh);
	void UpdateAnimLookAtRotation();
	void ForceReset();
	void CalcLookAtRotationLimit(const struct FRotator& RawRotation, struct FRotator* LimitedRotation);
	void GetMesh(class USkeletalMesh** Mesh);
	void GetNpcMeshComponent(class UNpcSkeletalMeshComponent** NpcMesh);
	void GetNpcAnim(class URSNpcAnimInstance** Anim);
	void GetAjitoCharaAnim(class URSAjitoAnimInstance** Anim);
	void Get_Look_At_Rotation_Difference_Yaw(float* Difference);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LookAtComponent_C">();
	}
	static class ULookAtComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULookAtComponent_C>();
	}
};
static_assert(alignof(ULookAtComponent_C) == 0x000008, "Wrong alignment on ULookAtComponent_C");
static_assert(sizeof(ULookAtComponent_C) == 0x000118, "Wrong size on ULookAtComponent_C");
static_assert(offsetof(ULookAtComponent_C, UberGraphFrame) == 0x0000C0, "Member 'ULookAtComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LookAtActor) == 0x0000C8, "Member 'ULookAtComponent_C::LookAtActor' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LookAtRotation) == 0x0000D0, "Member 'ULookAtComponent_C::LookAtRotation' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, HeadRoll) == 0x0000DC, "Member 'ULookAtComponent_C::HeadRoll' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, HeadYaw) == 0x0000E0, "Member 'ULookAtComponent_C::HeadYaw' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LookAtFollowSpeed) == 0x0000E4, "Member 'ULookAtComponent_C::LookAtFollowSpeed' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, OwnerSocketName) == 0x0000E8, "Member 'ULookAtComponent_C::OwnerSocketName' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LookAtSocketName) == 0x0000F0, "Member 'ULookAtComponent_C::LookAtSocketName' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, bLookAtEnabled) == 0x0000F8, "Member 'ULookAtComponent_C::bLookAtEnabled' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LimitDegreeUp) == 0x0000FC, "Member 'ULookAtComponent_C::LimitDegreeUp' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LimitDegreeDown) == 0x000100, "Member 'ULookAtComponent_C::LimitDegreeDown' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LimitDegreeRight) == 0x000104, "Member 'ULookAtComponent_C::LimitDegreeRight' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, LimitDegreeLeft) == 0x000108, "Member 'ULookAtComponent_C::LimitDegreeLeft' has a wrong offset!");
static_assert(offsetof(ULookAtComponent_C, FinishLookAtRotation) == 0x00010C, "Member 'ULookAtComponent_C::FinishLookAtRotation' has a wrong offset!");

}

