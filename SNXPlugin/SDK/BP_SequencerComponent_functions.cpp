#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SequencerComponent

#include "Basic.hpp"

#include "BP_SequencerComponent_classes.hpp"
#include "BP_SequencerComponent_parameters.hpp"


namespace SDK
{

// Function BP_SequencerComponent.BP_SequencerComponent_C.ExecuteUbergraph_BP_SequencerComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SequencerComponent_C::ExecuteUbergraph_BP_SequencerComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "ExecuteUbergraph_BP_SequencerComponent");

	Params::BP_SequencerComponent_C_ExecuteUbergraph_BP_SequencerComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SequencerComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "ReceiveTick");

	Params::BP_SequencerComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.Initialize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::Initialize(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "Initialize");

	Params::BP_SequencerComponent_C_Initialize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.Update
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::Update(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "Update");

	Params::BP_SequencerComponent_C_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.Finalize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::Finalize(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "Finalize");

	Params::BP_SequencerComponent_C_Finalize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.StartSequnecer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_in                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::StartSequnecer(int32 Index_in, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "StartSequnecer");

	Params::BP_SequencerComponent_C_StartSequnecer Parms{};

	Parms.Index_in = Index_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.EndSequencer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_SequencerIndex                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::EndSequencer(int32 Param_SequencerIndex, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "EndSequencer");

	Params::BP_SequencerComponent_C_EndSequencer Parms{};

	Parms.Param_SequencerIndex = Param_SequencerIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.CreateSequencer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharactersSequencerData         Seq_data_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_SequencerComponent_C::CreateSequencer(const struct FCharactersSequencerData& Seq_data_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "CreateSequencer");

	Params::BP_SequencerComponent_C_CreateSequencer Parms{};

	Parms.Seq_data_in = std::move(Seq_data_in);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.SetFade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Fade_start_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Fade_out_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::SetFade(bool Fade_start_in, bool Fade_out_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "SetFade");

	Params::BP_SequencerComponent_C_SetFade Parms{};

	Parms.Fade_start_in = Fade_start_in;
	Parms.Fade_out_in = Fade_out_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.SetOption
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start_in                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::SetOption(bool Start_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "SetOption");

	Params::BP_SequencerComponent_C_SetOption Parms{};

	Parms.Start_in = Start_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.PlaySequencer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::PlaySequencer(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "PlaySequencer");

	Params::BP_SequencerComponent_C_PlaySequencer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.GetPlayerList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ARSBattlePlayer_C*>        Player_list                                            (Parm, OutParm, HasGetValueTypeHash)

void UBP_SequencerComponent_C::GetPlayerList(TArray<class ARSBattlePlayer_C*>* Player_list)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "GetPlayerList");

	Params::BP_SequencerComponent_C_GetPlayerList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_list != nullptr)
		*Player_list = std::move(Parms.Player_list);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.GetEnemyList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ARSCharacterBase*>         Param_EnemyList                                        (Parm, OutParm, HasGetValueTypeHash)

void UBP_SequencerComponent_C::GetEnemyList(TArray<class ARSCharacterBase*>* Param_EnemyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "GetEnemyList");

	Params::BP_SequencerComponent_C_GetEnemyList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_EnemyList != nullptr)
		*Param_EnemyList = std::move(Parms.Param_EnemyList);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.GetRootActorBindingID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FMovieSceneObjectBindingID       binding_id                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SequencerComponent_C::GetRootActorBindingID(struct FMovieSceneObjectBindingID* binding_id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "GetRootActorBindingID");

	Params::BP_SequencerComponent_C_GetRootActorBindingID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (binding_id != nullptr)
		*binding_id = std::move(Parms.binding_id);
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.BindActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ObjName                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class AActor*                           Param_BindActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::BindActor(const class FText& ObjName, class AActor* Param_BindActor, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "BindActor");

	Params::BP_SequencerComponent_C_BindActor Parms{};

	Parms.ObjName = std::move(ObjName);
	Parms.Param_BindActor = Param_BindActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.BindCineCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::BindCineCamera(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "BindCineCamera");

	Params::BP_SequencerComponent_C_BindCineCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.CharacterDynamicEventEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 RSCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::CharacterDynamicEventEnd(class ARSCharacterBase* RSCharacter, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "CharacterDynamicEventEnd");

	Params::BP_SequencerComponent_C_CharacterDynamicEventEnd Parms{};

	Parms.RSCharacter = RSCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.PlayerDynamicEventStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                RSPlayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SequencerComponent_C::PlayerDynamicEventStart(class ARSBattlePlayer_C* RSPlayer, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "PlayerDynamicEventStart");

	Params::BP_SequencerComponent_C_PlayerDynamicEventStart Parms{};

	Parms.RSPlayer = RSPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BP_SequencerComponent.BP_SequencerComponent_C.BindingSetupCode
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SequencerComponent_C::BindingSetupCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerComponent_C", "BindingSetupCode");

	UObject::ProcessEvent(Func, nullptr);
}

}

