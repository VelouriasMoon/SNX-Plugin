#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PsychicAttackComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BP_PsychicAttackBaseComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PsychicAttackComponent.BP_PsychicAttackComponent_C
// 0x00B8 (0x0260 - 0x01A8)
class UBP_PsychicAttackComponent_C final : public UBP_PsychicAttackBaseComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PsychicAttackComponent_C;        // 0x01A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimMontage*                           EndMontage;                                        // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StartMontage;                                      // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LoopMontage;                                       // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AttackMontage;                                     // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CurrentMontage;                                    // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddedCombo;                                       // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8507[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTimer;                                         // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClaimantName;                                      // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlying;                                           // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bChangingOwnMontage;                               // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8508[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   EndMontageList;                                    // 0x01F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   StartMontageList;                                  // 0x0200(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   LoopMontageList;                                   // 0x0210(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EPlayerCaptureAnimPattern                     CurrentAnimPattern;                                // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8509[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   AttackMontageList;                                 // 0x0228(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimSequence*>                  ObjectAnimationList;                               // 0x0238(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PsychicLevel;                                      // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlyingCombo;                                      // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_850A[0x3];                                     // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          CaptureSE;                                         // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlyingDirectShot;                                 // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PsychicAttackComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnCaptureCancel();
	void ReceiveBeginPlay();
	bool InputButtonByCombo(bool bPressed, bool bComboFirst);
	bool CheckStartAttack(float DeltaTime);
	bool OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void EndAttack(bool* Dummy);
	void SetMontage(class UAnimMontage* Montage, bool bAddCombo);
	void SetAttackMontage(bool* bSuccess, bool* bCancel);
	void AnimPatternSetting(EPlayerCaptureAnimPattern* Pattern);
	void AnimationSetting(EPlayerCaptureAnimPattern Pattern);
	void SetLoopMotion();
	void EndCaptureObjectSE();

	void GetCurrentMontage(class UAnimMontage** Montage) const;
	void IsEnableAttack(bool* bEnable) const;
	void IsEnableAcceptInputAttack(bool* bEnable) const;
	void GetObjectAnimation(class UAnimSequence** Animation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PsychicAttackComponent_C">();
	}
	static class UBP_PsychicAttackComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PsychicAttackComponent_C>();
	}
};
static_assert(alignof(UBP_PsychicAttackComponent_C) == 0x000008, "Wrong alignment on UBP_PsychicAttackComponent_C");
static_assert(sizeof(UBP_PsychicAttackComponent_C) == 0x000260, "Wrong size on UBP_PsychicAttackComponent_C");
static_assert(offsetof(UBP_PsychicAttackComponent_C, UberGraphFrame_BP_PsychicAttackComponent_C) == 0x0001A8, "Member 'UBP_PsychicAttackComponent_C::UberGraphFrame_BP_PsychicAttackComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, EndMontage) == 0x0001B0, "Member 'UBP_PsychicAttackComponent_C::EndMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, StartMontage) == 0x0001B8, "Member 'UBP_PsychicAttackComponent_C::StartMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, LoopMontage) == 0x0001C0, "Member 'UBP_PsychicAttackComponent_C::LoopMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, AttackMontage) == 0x0001C8, "Member 'UBP_PsychicAttackComponent_C::AttackMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, CurrentMontage) == 0x0001D0, "Member 'UBP_PsychicAttackComponent_C::CurrentMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, bAddedCombo) == 0x0001D8, "Member 'UBP_PsychicAttackComponent_C::bAddedCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, WaitTimer) == 0x0001DC, "Member 'UBP_PsychicAttackComponent_C::WaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, ClaimantName) == 0x0001E0, "Member 'UBP_PsychicAttackComponent_C::ClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, bFlying) == 0x0001E8, "Member 'UBP_PsychicAttackComponent_C::bFlying' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, bChangingOwnMontage) == 0x0001E9, "Member 'UBP_PsychicAttackComponent_C::bChangingOwnMontage' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, EndMontageList) == 0x0001F0, "Member 'UBP_PsychicAttackComponent_C::EndMontageList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, StartMontageList) == 0x000200, "Member 'UBP_PsychicAttackComponent_C::StartMontageList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, LoopMontageList) == 0x000210, "Member 'UBP_PsychicAttackComponent_C::LoopMontageList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, CurrentAnimPattern) == 0x000220, "Member 'UBP_PsychicAttackComponent_C::CurrentAnimPattern' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, AttackMontageList) == 0x000228, "Member 'UBP_PsychicAttackComponent_C::AttackMontageList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, ObjectAnimationList) == 0x000238, "Member 'UBP_PsychicAttackComponent_C::ObjectAnimationList' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, PsychicLevel) == 0x000248, "Member 'UBP_PsychicAttackComponent_C::PsychicLevel' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, bFlyingCombo) == 0x00024C, "Member 'UBP_PsychicAttackComponent_C::bFlyingCombo' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, CaptureSE) == 0x000250, "Member 'UBP_PsychicAttackComponent_C::CaptureSE' has a wrong offset!");
static_assert(offsetof(UBP_PsychicAttackComponent_C, bFlyingDirectShot) == 0x000258, "Member 'UBP_PsychicAttackComponent_C::bFlyingDirectShot' has a wrong offset!");

}

