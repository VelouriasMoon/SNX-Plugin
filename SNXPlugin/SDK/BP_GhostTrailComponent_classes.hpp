#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GhostTrailComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_GhostMaterialParam_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GhostTrailComponent.BP_GhostTrailComponent_C
// 0x0080 (0x0140 - 0x00C0)
class UBP_GhostTrailComponent_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ActiveAtStart;                                     // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EBD[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GhostSpawnDelay;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GhostLifetime;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GhostAllMeshes;                                    // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EBE[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TagsToGhost;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UMaterialInterface*                     GhostMaterial;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FE_GhostMaterialParam>          MatParams;                                         // 0x00F0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          ScaleOverTime;                                     // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EBF[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ScaleCurve;                                        // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastIsInvisible;                                   // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VelocityDepending;                                 // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EC0[0x2];                                     // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityThreshold;                                 // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActiveTrail;                                       // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EC1[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GhostTrailManager_C*                GhostTrailManager;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomOffset;                                      // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EC2[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnRandomDistance;                               // 0x012C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreateManager;                                     // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GhostTrailComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void InitManager();
	void AddMeshesToGhost();
	bool MeshMustCastTrails(class USceneComponent* Component);
	void SetTrailActive(bool Active);
	void GetTrailActive(bool* Active);
	void DestroyGhostAll();
	void SetSpawnRandomDistance(const struct FVector& Param_SpawnRandomDistance);
	void ForceSpawnGhost(float Param_GhostLifetime);
	void SpawnManager(class ABP_GhostTrailManager_C** Param_GhostTrailManager);
	void SetColor(const struct FLinearColor& Color);
	void AddTrailMesh(class UMeshComponent* Mesh);
	void RemoveTrailMesh(class UMeshComponent* Mesh);
	void SetTrailPause(bool bPauseSpawn);
	void SetVelocityDepending(bool bVelocityDepending);
	void SetPhotoMode(bool bPhotoMode, float MeshOffset, float CapsuleHeight, float CapsuleRadius);
	void PhotoModeTick();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GhostTrailComponent_C">();
	}
	static class UBP_GhostTrailComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GhostTrailComponent_C>();
	}
};
static_assert(alignof(UBP_GhostTrailComponent_C) == 0x000008, "Wrong alignment on UBP_GhostTrailComponent_C");
static_assert(sizeof(UBP_GhostTrailComponent_C) == 0x000140, "Wrong size on UBP_GhostTrailComponent_C");
static_assert(offsetof(UBP_GhostTrailComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_GhostTrailComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, ActiveAtStart) == 0x0000C8, "Member 'UBP_GhostTrailComponent_C::ActiveAtStart' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, GhostSpawnDelay) == 0x0000CC, "Member 'UBP_GhostTrailComponent_C::GhostSpawnDelay' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, GhostLifetime) == 0x0000D0, "Member 'UBP_GhostTrailComponent_C::GhostLifetime' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, GhostAllMeshes) == 0x0000D4, "Member 'UBP_GhostTrailComponent_C::GhostAllMeshes' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, TagsToGhost) == 0x0000D8, "Member 'UBP_GhostTrailComponent_C::TagsToGhost' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, GhostMaterial) == 0x0000E8, "Member 'UBP_GhostTrailComponent_C::GhostMaterial' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, MatParams) == 0x0000F0, "Member 'UBP_GhostTrailComponent_C::MatParams' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, ScaleOverTime) == 0x000100, "Member 'UBP_GhostTrailComponent_C::ScaleOverTime' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, ScaleCurve) == 0x000108, "Member 'UBP_GhostTrailComponent_C::ScaleCurve' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, LastIsInvisible) == 0x000110, "Member 'UBP_GhostTrailComponent_C::LastIsInvisible' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, VelocityDepending) == 0x000111, "Member 'UBP_GhostTrailComponent_C::VelocityDepending' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, VelocityThreshold) == 0x000114, "Member 'UBP_GhostTrailComponent_C::VelocityThreshold' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, ActiveTrail) == 0x000118, "Member 'UBP_GhostTrailComponent_C::ActiveTrail' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, GhostTrailManager) == 0x000120, "Member 'UBP_GhostTrailComponent_C::GhostTrailManager' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, RandomOffset) == 0x000128, "Member 'UBP_GhostTrailComponent_C::RandomOffset' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, SpawnRandomDistance) == 0x00012C, "Member 'UBP_GhostTrailComponent_C::SpawnRandomDistance' has a wrong offset!");
static_assert(offsetof(UBP_GhostTrailComponent_C, CreateManager) == 0x000138, "Member 'UBP_GhostTrailComponent_C::CreateManager' has a wrong offset!");

}

