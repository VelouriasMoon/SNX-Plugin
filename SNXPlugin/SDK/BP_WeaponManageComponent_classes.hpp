#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponManageComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeaponManageComponent.BP_WeaponManageComponent_C
// 0x0080 (0x0140 - 0x00C0)
class UBP_WeaponManageComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_WeaponBase_C*>               WeaponList;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         AttachMesh;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               ThrowWeaponList;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bCopy;                                             // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSeparateVisibility;                               // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bChangeWeaponScale;                                // 0x00FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bResetWeaponScale;                                 // 0x00FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                OriginalWeaponScale;                               // 0x00FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SrcWeaponScale;                                    // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestWeaponScale;                                   // 0x0114(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             ScaleTimer;                                        // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5689[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MaterialSwitchLayerID;                             // 0x0130(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WeaponManageComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void CreateWeapon(class UClass* WeaponClass, class FName SocketName, bool bMainWeapon);
	void SetBattleEffect(bool bBattle);
	void SetWeaponVisibility(bool bVisibility, bool bBattle, bool bWithSubWeapon);
	void SetMaterialScalarParameter(class FName ParamName, float Value);
	void SetMaterialScalarArrayParameter(TArray<class FName>& ParamName, TArray<float>& Value);
	void SetMaterialVectorParameter(class FName ParamName, const struct FLinearColor& Color);
	void SetShadowEnable(bool bEnable);
	void SetWeaponHidden(bool bHidden);
	void AttachWeapon(bool bBattle, bool ForceBattle);
	void Initialize(class ARSBattlePlayer_C* Param_OwnerPlayer, class UMeshComponent* Param_AttachMesh, bool Param_bCopy);
	void SetLoopAnim(bool bBattle);
	void SetTransAnim(bool bBattle);
	void SetBattleEmission(bool ForceIn, bool FlagIn, float LerpTimeIn);
	void SetMaterialAlphaPsychicEmission(float Alpha, class FName ClaimantName);
	void ResetMaterialAlphaPsychicEmission(class FName ClaimantName);
	void SetMaterialColorPsychicEmission(float R, float G, float B, class FName ClaimantName);
	void ResetMaterialColorPsychicEmission(class FName ClaimantName);
	void CreateThrowWeapon(class UClass* WeaponClass);
	void DestroyWeapon();
	void SetWeaponVisibilityByIndex(int32 Param_Index, bool bVisibility);
	void SetSeparateVisibility(bool bSeparate);
	void ChangeWeaponScale(const struct FVector& Scale, float Time);
	void ResetWeaponScale(float Time);
	void UpdateWeaponScale();
	void SwitchMaterial(struct FMaterialSwitchCache& MaterialCache, TArray<class FName>& ExcludeSlots, class UMaterialInterface* NewMaterial);
	void SetMaterialVectorArrayParameter(TArray<class FName>& ParamName, TArray<struct FLinearColor>& Color);
	void ResetupSwitchMaterial(struct FMaterialSwitchCache& MaterialCache, TArray<class FName>& ExcludeSlots, class UMaterialInterface* NewMaterial);
	void RestoreSwtichMaterial(struct FMaterialSwitchCache& MaterialCache, bool ClearCache);
	void CompleteRestoreSwitchMaterial();

	void GetWeaponList(TArray<class ABP_WeaponBase_C*>* Param_WeaponList) const;
	void GetThrowWeaponList(TArray<class ABP_WeaponBase_C*>* Param_ThrowWeaponList) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeaponManageComponent_C">();
	}
	static class UBP_WeaponManageComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WeaponManageComponent_C>();
	}
};
static_assert(alignof(UBP_WeaponManageComponent_C) == 0x000008, "Wrong alignment on UBP_WeaponManageComponent_C");
static_assert(sizeof(UBP_WeaponManageComponent_C) == 0x000140, "Wrong size on UBP_WeaponManageComponent_C");
static_assert(offsetof(UBP_WeaponManageComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_WeaponManageComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, WeaponList) == 0x0000C8, "Member 'UBP_WeaponManageComponent_C::WeaponList' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, OwnerPlayer) == 0x0000D8, "Member 'UBP_WeaponManageComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, AttachMesh) == 0x0000E0, "Member 'UBP_WeaponManageComponent_C::AttachMesh' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, ThrowWeaponList) == 0x0000E8, "Member 'UBP_WeaponManageComponent_C::ThrowWeaponList' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, bCopy) == 0x0000F8, "Member 'UBP_WeaponManageComponent_C::bCopy' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, bSeparateVisibility) == 0x0000F9, "Member 'UBP_WeaponManageComponent_C::bSeparateVisibility' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, bChangeWeaponScale) == 0x0000FA, "Member 'UBP_WeaponManageComponent_C::bChangeWeaponScale' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, bResetWeaponScale) == 0x0000FB, "Member 'UBP_WeaponManageComponent_C::bResetWeaponScale' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, OriginalWeaponScale) == 0x0000FC, "Member 'UBP_WeaponManageComponent_C::OriginalWeaponScale' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, SrcWeaponScale) == 0x000108, "Member 'UBP_WeaponManageComponent_C::SrcWeaponScale' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, DestWeaponScale) == 0x000114, "Member 'UBP_WeaponManageComponent_C::DestWeaponScale' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, ScaleTimer) == 0x000120, "Member 'UBP_WeaponManageComponent_C::ScaleTimer' has a wrong offset!");
static_assert(offsetof(UBP_WeaponManageComponent_C, MaterialSwitchLayerID) == 0x000130, "Member 'UBP_WeaponManageComponent_C::MaterialSwitchLayerID' has a wrong offset!");

}

