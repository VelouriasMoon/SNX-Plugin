#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ui_WorldMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ui_WorldMap.WB_ui_WorldMap_C
// 0x0268 (0x0600 - 0x0398)
class UWB_ui_WorldMap_C final : public UUIWorldMap
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Out;                                               // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_none;                                      // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default;                                           // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                All_Color;                                         // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               All_Set;                                           // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_Gradation_G;                                  // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_Gradation_G_1;                                // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_Gradation_G_2;                                // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_Gradation_G_3;                                // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Grid;                                           // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Shadow;                                         // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BlackBand_L;                                       // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BlackBand_R;                                       // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BlackBand_Un;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BlackBand_Up;                                      // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_ViewRange;                             // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ghost_size;                                        // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Goal_Line1;                                        // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Help;                                              // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Help_base;                                         // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_1;                                            // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Frame;                                        // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Frame_1;                                      // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Frame_2;                                      // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Frame_3;                                      // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_frame_6_add;                                  // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_frame_6_add_1;                                // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Icon_kizuna;                                       // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Icon_main;                                         // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_5;                                 // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               List_Set;                                          // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Noise;                                             // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_2;                                         // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDRetainerBox*                        REDRetainerBox_Menu;                               // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDScrollBox*                          RedScrollBox_C_0;                                  // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RT_map;                                            // 0x04D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_worldmap_goal_1;                              // 0x04D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UREDTextBlock*                          Text_worldmap_help_1;                              // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Viewer_noise;                                      // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_Guide_C*                         WB_ui_Guide;                                       // 0x04F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_ListWindow_1_C*         WB_ui_WorldMap_ListWindow_1;                       // 0x04F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ui_WorldMap_Window_1_C*             WB_ui_WorldMap_Window_1;                           // 0x0500(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          FlagDecide;                                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagCancel;                                        // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagBattle;                                        // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagKizuna;                                        // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CursorPos;                                         // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CursorPosBackup;                                   // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585A[0x4];                                     // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ui_SceneWorldMap_C*                 SceneWorldMap;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLocation;                                   // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentArea;                                       // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPortal;                                     // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MessageIndex;                                      // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugUnlockFlag;                                   // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_585B[0x3];                                     // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorldmapOpenLCParam>           AllLocationList;                                   // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FlagChange;                                        // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_585C[0x7];                                     // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LocationNameList;                                  // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         AreaNameList;                                      // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsMainQuestList;                                   // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsMainQuestList2;                                  // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  LocationNewFlag;                                   // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FlagBrainField;                                    // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_585D[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsSubQuestList;                                    // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsSubQuestList2;                                   // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsSubQuestRequestList;                             // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  IsSubQuestRequestList2;                            // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HasMemory;                                         // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_585E[0x3];                                     // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemoryLocationNo;                                  // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MemoryAreaNo;                                      // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MemoryPortalNo;                                    // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MemoryAtSubList;                                   // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagVisionSimulator;                               // 0x05F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagVisionSimulatorRetry;                          // 0x05FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagVisionSimulatorJewelPool;                      // 0x05FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WB_ui_WorldMap(int32 EntryPoint);
	void ClearCursorMemory();
	void OnInitialized();
	void ______(int32 Param_Cursor, class UUserWidget* PWidget);
	void ________(int32 IsMouseScroll, int32 Param_Cursor, class UUserWidget* PWidget);
	void __________(int32 IsMouseScroll, int32 Param_Cursor, class UUserWidget* PWidget);
	void SetDebugUnlockFlag(bool UnlockFlag);
	void Event_ListUnFocus(class UUserWidget* PWidget);
	void Event_ListFocus(class UUserWidget* PWidget);
	void Event_ListUpdateElement(int32 Param_Index, class UUserWidget* PWidget);
	void UpdateState(int32 State, int32 SubState, float DeltaSeconds);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void StateNone(int32 SubState);
	void StateOpen(int32 SubState);
	void StateLoop(int32 SubState);
	void StateClose(int32 SubState);
	void IsCancel(bool* Param_IsCancel);
	void SetupList();
	void SetupListElement(int32 Param_Index, class UWB_ui_WorldMap_Parts_1_C* Widget);
	void MoveCursor();
	void CreateWorldMap();
	void ReleaseWorldMap();
	void UpdateCursorPosition(bool Isinit);
	void UpdateTextDetail();
	void GetLocationID(int32 Param_Index, int32* ID);
	void GetAreaID(int32 Param_Index, int32* ID);
	void GetPortalID(int32 Param_Index, int32* ID);
	bool IsDecide();
	void GetPortalName(int32 Param_Index, class FName* Param_Name);
	void GetLocationName(int32 Param_Index, class FString* Param_Name);
	void GetCurrentPortalName(class FName* Param_Name);
	void GetCurrentPortalID(int32* PortalID);
	void GetCurrentLocationName(class FString* Param_Name);
	void GetCurrentLocationID(int32* LocationId);
	void GetCurrentAreaID(int32* AreaId);
	void StateLoopSubList(int32 SubState);
	void GetAreaName(int32 Param_Index, class FString* Param_Name);
	void CreateCurrentAreaList(TArray<struct FWorldmapOpenAreaParam>* List);
	void GetListLocationName(int32 Param_Index, class FString* Param_Name);
	void ChangeDetailWindow();
	void SetCurrentArea();
	void InitGuide(bool IsUpdate);
	void InitText();
	void CheckInputCancel(bool* IsCancel);
	bool IsChange();
	void SetupMainQuestFlag();
	void CreateAreaNameList();
	void UpdateAreaList();
	void OpenCheckAreaChange();
	void OpenDisableAreaChange(bool IsArea);
	void UpdateCurrentLocationNewFlag();
	void IsNewLocation(int32 Param_Index, bool* IsNew);
	void CreateDebugLocationList();
	void SetupSubQuestFlag();
	void IsCurrentArea(int32 Param_Index, int32 LocationNo, bool* Result);
	void GetLocationAreaParam(int32 LocationNo, int32 AreaNo, int32 PortalNo, class FName* CurrentLocationID, int32* AllLocationListIndex, int32* AreaListIndex);
	void SetMemory(bool CallSubList);
	void ClearMemory();
	void Decide(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ui_WorldMap_C">();
	}
	static class UWB_ui_WorldMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ui_WorldMap_C>();
	}
};
static_assert(alignof(UWB_ui_WorldMap_C) == 0x000008, "Wrong alignment on UWB_ui_WorldMap_C");
static_assert(sizeof(UWB_ui_WorldMap_C) == 0x000600, "Wrong size on UWB_ui_WorldMap_C");
static_assert(offsetof(UWB_ui_WorldMap_C, UberGraphFrame) == 0x000398, "Member 'UWB_ui_WorldMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Out) == 0x0003A0, "Member 'UWB_ui_WorldMap_C::Out' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, In) == 0x0003A8, "Member 'UWB_ui_WorldMap_C::In' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Default_none) == 0x0003B0, "Member 'UWB_ui_WorldMap_C::Default_none' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Default) == 0x0003B8, "Member 'UWB_ui_WorldMap_C::Default' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, All_Color) == 0x0003C0, "Member 'UWB_ui_WorldMap_C::All_Color' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, All_Set) == 0x0003C8, "Member 'UWB_ui_WorldMap_C::All_Set' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Base_Gradation_G) == 0x0003D0, "Member 'UWB_ui_WorldMap_C::Base_Gradation_G' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Base_Gradation_G_1) == 0x0003D8, "Member 'UWB_ui_WorldMap_C::Base_Gradation_G_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Base_Gradation_G_2) == 0x0003E0, "Member 'UWB_ui_WorldMap_C::Base_Gradation_G_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Base_Gradation_G_3) == 0x0003E8, "Member 'UWB_ui_WorldMap_C::Base_Gradation_G_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, BG_Grid) == 0x0003F0, "Member 'UWB_ui_WorldMap_C::BG_Grid' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, BG_Shadow) == 0x0003F8, "Member 'UWB_ui_WorldMap_C::BG_Shadow' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, BlackBand_L) == 0x000400, "Member 'UWB_ui_WorldMap_C::BlackBand_L' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, BlackBand_R) == 0x000408, "Member 'UWB_ui_WorldMap_C::BlackBand_R' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, BlackBand_Un) == 0x000410, "Member 'UWB_ui_WorldMap_C::BlackBand_Un' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, BlackBand_Up) == 0x000418, "Member 'UWB_ui_WorldMap_C::BlackBand_Up' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CanvasPanel_0) == 0x000420, "Member 'UWB_ui_WorldMap_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CanvasPanel_ViewRange) == 0x000428, "Member 'UWB_ui_WorldMap_C::CanvasPanel_ViewRange' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Ghost_size) == 0x000430, "Member 'UWB_ui_WorldMap_C::Ghost_size' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Goal_Line1) == 0x000438, "Member 'UWB_ui_WorldMap_C::Goal_Line1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Help) == 0x000440, "Member 'UWB_ui_WorldMap_C::Help' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Help_base) == 0x000448, "Member 'UWB_ui_WorldMap_C::Help_base' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon) == 0x000450, "Member 'UWB_ui_WorldMap_C::Icon' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_1) == 0x000458, "Member 'UWB_ui_WorldMap_C::Icon_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_Frame) == 0x000460, "Member 'UWB_ui_WorldMap_C::Icon_Frame' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_Frame_1) == 0x000468, "Member 'UWB_ui_WorldMap_C::Icon_Frame_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_Frame_2) == 0x000470, "Member 'UWB_ui_WorldMap_C::Icon_Frame_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_Frame_3) == 0x000478, "Member 'UWB_ui_WorldMap_C::Icon_Frame_3' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_frame_6_add) == 0x000480, "Member 'UWB_ui_WorldMap_C::Icon_frame_6_add' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_frame_6_add_1) == 0x000488, "Member 'UWB_ui_WorldMap_C::Icon_frame_6_add_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_kizuna) == 0x000490, "Member 'UWB_ui_WorldMap_C::Icon_kizuna' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Icon_main) == 0x000498, "Member 'UWB_ui_WorldMap_C::Icon_main' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, InvalidationBox_5) == 0x0004A0, "Member 'UWB_ui_WorldMap_C::InvalidationBox_5' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, List_Set) == 0x0004A8, "Member 'UWB_ui_WorldMap_C::List_Set' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Noise) == 0x0004B0, "Member 'UWB_ui_WorldMap_C::Noise' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Overlay_2) == 0x0004B8, "Member 'UWB_ui_WorldMap_C::Overlay_2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, REDRetainerBox_Menu) == 0x0004C0, "Member 'UWB_ui_WorldMap_C::REDRetainerBox_Menu' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, RedScrollBox_C_0) == 0x0004C8, "Member 'UWB_ui_WorldMap_C::RedScrollBox_C_0' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, RT_map) == 0x0004D0, "Member 'UWB_ui_WorldMap_C::RT_map' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Text_worldmap_goal_1) == 0x0004D8, "Member 'UWB_ui_WorldMap_C::Text_worldmap_goal_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Text_worldmap_help_1) == 0x0004E0, "Member 'UWB_ui_WorldMap_C::Text_worldmap_help_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, Viewer_noise) == 0x0004E8, "Member 'UWB_ui_WorldMap_C::Viewer_noise' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, WB_ui_Guide) == 0x0004F0, "Member 'UWB_ui_WorldMap_C::WB_ui_Guide' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, WB_ui_WorldMap_ListWindow_1) == 0x0004F8, "Member 'UWB_ui_WorldMap_C::WB_ui_WorldMap_ListWindow_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, WB_ui_WorldMap_Window_1) == 0x000500, "Member 'UWB_ui_WorldMap_C::WB_ui_WorldMap_Window_1' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagDecide) == 0x000508, "Member 'UWB_ui_WorldMap_C::FlagDecide' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagCancel) == 0x000509, "Member 'UWB_ui_WorldMap_C::FlagCancel' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagBattle) == 0x00050A, "Member 'UWB_ui_WorldMap_C::FlagBattle' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagKizuna) == 0x00050B, "Member 'UWB_ui_WorldMap_C::FlagKizuna' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CursorPos) == 0x00050C, "Member 'UWB_ui_WorldMap_C::CursorPos' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CursorPosBackup) == 0x000510, "Member 'UWB_ui_WorldMap_C::CursorPosBackup' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, SceneWorldMap) == 0x000518, "Member 'UWB_ui_WorldMap_C::SceneWorldMap' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CurrentLocation) == 0x000520, "Member 'UWB_ui_WorldMap_C::CurrentLocation' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CurrentArea) == 0x000524, "Member 'UWB_ui_WorldMap_C::CurrentArea' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CurrentPortal) == 0x000528, "Member 'UWB_ui_WorldMap_C::CurrentPortal' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, CurrentIndex) == 0x00052C, "Member 'UWB_ui_WorldMap_C::CurrentIndex' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, MessageIndex) == 0x000530, "Member 'UWB_ui_WorldMap_C::MessageIndex' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, DebugUnlockFlag) == 0x000534, "Member 'UWB_ui_WorldMap_C::DebugUnlockFlag' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, AllLocationList) == 0x000538, "Member 'UWB_ui_WorldMap_C::AllLocationList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagChange) == 0x000548, "Member 'UWB_ui_WorldMap_C::FlagChange' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, LocationNameList) == 0x000550, "Member 'UWB_ui_WorldMap_C::LocationNameList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, AreaNameList) == 0x000560, "Member 'UWB_ui_WorldMap_C::AreaNameList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, IsMainQuestList) == 0x000570, "Member 'UWB_ui_WorldMap_C::IsMainQuestList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, IsMainQuestList2) == 0x000580, "Member 'UWB_ui_WorldMap_C::IsMainQuestList2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, LocationNewFlag) == 0x000590, "Member 'UWB_ui_WorldMap_C::LocationNewFlag' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagBrainField) == 0x0005A0, "Member 'UWB_ui_WorldMap_C::FlagBrainField' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, IsSubQuestList) == 0x0005A8, "Member 'UWB_ui_WorldMap_C::IsSubQuestList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, IsSubQuestList2) == 0x0005B8, "Member 'UWB_ui_WorldMap_C::IsSubQuestList2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, IsSubQuestRequestList) == 0x0005C8, "Member 'UWB_ui_WorldMap_C::IsSubQuestRequestList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, IsSubQuestRequestList2) == 0x0005D8, "Member 'UWB_ui_WorldMap_C::IsSubQuestRequestList2' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, HasMemory) == 0x0005E8, "Member 'UWB_ui_WorldMap_C::HasMemory' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, MemoryLocationNo) == 0x0005EC, "Member 'UWB_ui_WorldMap_C::MemoryLocationNo' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, MemoryAreaNo) == 0x0005F0, "Member 'UWB_ui_WorldMap_C::MemoryAreaNo' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, MemoryPortalNo) == 0x0005F4, "Member 'UWB_ui_WorldMap_C::MemoryPortalNo' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, MemoryAtSubList) == 0x0005F8, "Member 'UWB_ui_WorldMap_C::MemoryAtSubList' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagVisionSimulator) == 0x0005F9, "Member 'UWB_ui_WorldMap_C::FlagVisionSimulator' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagVisionSimulatorRetry) == 0x0005FA, "Member 'UWB_ui_WorldMap_C::FlagVisionSimulatorRetry' has a wrong offset!");
static_assert(offsetof(UWB_ui_WorldMap_C, FlagVisionSimulatorJewelPool) == 0x0005FB, "Member 'UWB_ui_WorldMap_C::FlagVisionSimulatorJewelPool' has a wrong offset!");

}

