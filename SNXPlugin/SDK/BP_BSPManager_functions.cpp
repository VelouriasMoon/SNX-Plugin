#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSPManager

#include "Basic.hpp"

#include "BP_BSPManager_classes.hpp"
#include "BP_BSPManager_parameters.hpp"


namespace SDK
{

// Function BP_BSPManager.BP_BSPManager_C.OnActorOverlapBSPBlock__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::OnActorOverlapBSPBlock__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "OnActorOverlapBSPBlock__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.ExecuteUbergraph_BP_BSPManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::ExecuteUbergraph_BP_BSPManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "ExecuteUbergraph_BP_BSPManager");

	Params::BP_BSPManager_C_ExecuteUbergraph_BP_BSPManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.OnBlockBeginOverlap_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::OnBlockBeginOverlap_Event_0(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "OnBlockBeginOverlap_Event_0");

	Params::BP_BSPManager_C_OnBlockBeginOverlap_Event_0 Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.OnBlockEndOverlap_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::OnBlockEndOverlap_Event_0(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "OnBlockEndOverlap_Event_0");

	Params::BP_BSPManager_C_OnBlockEndOverlap_Event_0 Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.BindCallbacks
// (BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::BindCallbacks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "BindCallbacks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "ReceiveTick");

	Params::BP_BSPManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BSPManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.ResetBlockNearPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::ResetBlockNearPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "ResetBlockNearPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.RegisterAllBlocksInArea
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::RegisterAllBlocksInArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "RegisterAllBlocksInArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.AddBlockInPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABSPBlockVolume*                  bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::AddBlockInPlayer(class ABSPBlockVolume* bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "AddBlockInPlayer");

	Params::BP_BSPManager_C_AddBlockInPlayer Parms{};

	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.RemoveBlockInPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABSPBlockVolume*                  bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::RemoveBlockInPlayer(class ABSPBlockVolume* bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "RemoveBlockInPlayer");

	Params::BP_BSPManager_C_RemoveBlockInPlayer Parms{};

	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.UpdateBlockNearPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::UpdateBlockNearPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "UpdateBlockNearPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.RegisterAllBlocksInArea_
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::RegisterAllBlocksInArea_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "RegisterAllBlocksInArea_");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.UnregisterAllBlocks
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::UnregisterAllBlocks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "UnregisterAllBlocks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.UpdateBSPAttenuation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::UpdateBSPAttenuation(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "UpdateBSPAttenuation");

	Params::BP_BSPManager_C_UpdateBSPAttenuation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.IsPlayerInAnyBlock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InBlock                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BSPManager_C::IsPlayerInAnyBlock(bool* InBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "IsPlayerInAnyBlock");

	Params::BP_BSPManager_C_IsPlayerInAnyBlock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InBlock != nullptr)
		*InBlock = Parms.InBlock;
}


// Function BP_BSPManager.BP_BSPManager_C.GetSoundAttenuationRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRate                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABSPBlockVolume*                  bLock                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::GetSoundAttenuationRate(const struct FVector& Pos, float* AttenuationRate, class ABSPBlockVolume** bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "GetSoundAttenuationRate");

	Params::BP_BSPManager_C_GetSoundAttenuationRate Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	if (AttenuationRate != nullptr)
		*AttenuationRate = Parms.AttenuationRate;

	if (bLock != nullptr)
		*bLock = Parms.bLock;
}


// Function BP_BSPManager.BP_BSPManager_C.Update
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "Update");

	Params::BP_BSPManager_C_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSPManager.BP_BSPManager_C.CalcBSPAttenuationFirstFromPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABSPBlockVolume*                  FromBSPVolume                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABSPPortalBase*>           Portals                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// struct FVector                          BasePos                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::CalcBSPAttenuationFirstFromPlayer(class ABSPBlockVolume* FromBSPVolume, TArray<class ABSPPortalBase*>& Portals, const struct FVector& BasePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "CalcBSPAttenuationFirstFromPlayer");

	Params::BP_BSPManager_C_CalcBSPAttenuationFirstFromPlayer Parms{};

	Parms.FromBSPVolume = FromBSPVolume;
	Parms.Portals = std::move(Portals);
	Parms.BasePos = std::move(BasePos);

	UObject::ProcessEvent(Func, &Parms);

	Portals = std::move(Parms.Portals);
}


// Function BP_BSPManager.BP_BSPManager_C.CalcAttenuationByPortal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABSPPortalBase*                   PortalSrc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABSPPortalBase*                   PortalDst                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRate                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::CalcAttenuationByPortal(class ABSPPortalBase* PortalSrc, class ABSPPortalBase* PortalDst, float* AttenuationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "CalcAttenuationByPortal");

	Params::BP_BSPManager_C_CalcAttenuationByPortal Parms{};

	Parms.PortalSrc = PortalSrc;
	Parms.PortalDst = PortalDst;

	UObject::ProcessEvent(Func, &Parms);

	if (AttenuationRate != nullptr)
		*AttenuationRate = Parms.AttenuationRate;
}


// Function BP_BSPManager.BP_BSPManager_C.CalcAttenuation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Src                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRate                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::CalcAttenuation(const struct FVector& Src, const struct FVector& Dst, float* AttenuationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "CalcAttenuation");

	Params::BP_BSPManager_C_CalcAttenuation Parms{};

	Parms.Src = std::move(Src);
	Parms.Dst = std::move(Dst);

	UObject::ProcessEvent(Func, &Parms);

	if (AttenuationRate != nullptr)
		*AttenuationRate = Parms.AttenuationRate;
}


// Function BP_BSPManager.BP_BSPManager_C.CalcAttenuationByLength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRate                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::CalcAttenuationByLength(float Distance, float* AttenuationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "CalcAttenuationByLength");

	Params::BP_BSPManager_C_CalcAttenuationByLength Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);

	if (AttenuationRate != nullptr)
		*AttenuationRate = Parms.AttenuationRate;
}


// Function BP_BSPManager.BP_BSPManager_C.CalcLengthToPortal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Portal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::CalcLengthToPortal(class AActor* Portal, const struct FVector& Pos, float* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "CalcLengthToPortal");

	Params::BP_BSPManager_C_CalcLengthToPortal Parms{};

	Parms.Portal = Portal;
	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BP_BSPManager.BP_BSPManager_C.ResetBlockNearPlayer_
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BSPManager_C::ResetBlockNearPlayer_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "ResetBlockNearPlayer_");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSPManager.BP_BSPManager_C.GetSoundAttenuationRate_Call
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRate                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSPManager_C::GetSoundAttenuationRate_Call(const struct FVector& Pos, float* AttenuationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSPManager_C", "GetSoundAttenuationRate_Call");

	Params::BP_BSPManager_C_GetSoundAttenuationRate_Call Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	if (AttenuationRate != nullptr)
		*AttenuationRate = Parms.AttenuationRate;
}

}

