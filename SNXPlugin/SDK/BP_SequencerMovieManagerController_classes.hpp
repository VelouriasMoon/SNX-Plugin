#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SequencerMovieManagerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SequencerMovieManagerController.BP_SequencerMovieManagerController_C
// 0x0020 (0x0260 - 0x0240)
class ABP_SequencerMovieManagerController_C final : public ASequencerMovieManagerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_MovieManager_C*                     MovieManager;                                      // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayed;                                          // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31F2[0x3];                                     // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovieAlphaRate;                                    // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SequencerMovieManagerController(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EventStopMovie();
	void ReceiveBeginPlay();
	void EventPlayMovie(int32 MovieTextureIndex);
	void GetMovieTexture(int32 MovieTextureIndex, class UManaTexture** MovieTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SequencerMovieManagerController_C">();
	}
	static class ABP_SequencerMovieManagerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SequencerMovieManagerController_C>();
	}
};
static_assert(alignof(ABP_SequencerMovieManagerController_C) == 0x000008, "Wrong alignment on ABP_SequencerMovieManagerController_C");
static_assert(sizeof(ABP_SequencerMovieManagerController_C) == 0x000260, "Wrong size on ABP_SequencerMovieManagerController_C");
static_assert(offsetof(ABP_SequencerMovieManagerController_C, UberGraphFrame) == 0x000240, "Member 'ABP_SequencerMovieManagerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SequencerMovieManagerController_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_SequencerMovieManagerController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SequencerMovieManagerController_C, MovieManager) == 0x000250, "Member 'ABP_SequencerMovieManagerController_C::MovieManager' has a wrong offset!");
static_assert(offsetof(ABP_SequencerMovieManagerController_C, IsPlayed) == 0x000258, "Member 'ABP_SequencerMovieManagerController_C::IsPlayed' has a wrong offset!");
static_assert(offsetof(ABP_SequencerMovieManagerController_C, MovieAlphaRate) == 0x00025C, "Member 'ABP_SequencerMovieManagerController_C::MovieAlphaRate' has a wrong offset!");

}

