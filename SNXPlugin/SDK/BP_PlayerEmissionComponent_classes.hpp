#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerEmissionComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C
// 0x0080 (0x0140 - 0x00C0)
class UBP_PlayerEmissionComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WakeInterpolateTime;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartInterpolate;                                // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C7[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EmissionColor;                                     // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CollectionParameterName;                           // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetup;                                           // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsWakeInterpolate;                                 // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Accelerator;                                       // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Psychic;                                           // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsColorBlendInterpolate;                           // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C8[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NextEmissionColor;                                 // 0x00F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ColorBlendInterpolateTime;                         // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeMax;                                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSASDamage;                                       // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDamageBrainCrash;                                // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          IsDamageHiBrainCrash;                              // 0x010E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          IsPlayer;                                          // 0x010F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseEmissionOutlineControl;                         // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85C9[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SASActiveCount;                                    // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrainField;                                        // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_85CA[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BrainFieldNormal;                                  // 0x011C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BrainFieldWeek;                                    // 0x0128(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainFieldWeekRate;                                // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SASHide;                                           // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Drive;                                             // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          PreviousDamageRate;                                // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PreviousDamagePattern2;                            // 0x013B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerEmissionComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Setup();
	void UpdateWakeInterpolate(float DeltaSeconds);
	void SetupMaterialParameter();
	void UpdateCheckSAS(float Delta_Seconds);
	void SetupStart();
	void SetupEnd();
	void SetupColorBlend(const struct FVector& NextColor);
	void GetEmissionColor(struct FVector* Color);
	void UpdateColorBlend(float DeltaSeconds);
	void UpdateDamage(float DeltaTime);
	void IncSASActiveCount();
	void DecSASActiveCount();
	void IsContinueEmissionColor(bool OffMaskPsychic, bool OffMaskAccelerator, bool OffMaskBrainField, bool OffMaskDrive, bool* IsContinue);
	void ChangeBrainField(bool Param_BrainField);
	void ChangeSAS(bool Param_Accelerator);
	void ChangePhychicEmission(bool Phychic);
	void UpdateBrainField(float DeltaTime);
	struct FLinearColor GetBrainFieldEmissionColor();
	void SetOutlineParamValue(const struct FLinearColor& Color);
	void HideSAS(bool Hidden);
	void ClearEmission();
	void ChangeDrive(bool Param_Drive);

	void IsActiveSAS(bool* bActive) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerEmissionComponent_C">();
	}
	static class UBP_PlayerEmissionComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerEmissionComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerEmissionComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerEmissionComponent_C");
static_assert(sizeof(UBP_PlayerEmissionComponent_C) == 0x000140, "Wrong size on UBP_PlayerEmissionComponent_C");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_PlayerEmissionComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, Mesh) == 0x0000C8, "Member 'UBP_PlayerEmissionComponent_C::Mesh' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, Time) == 0x0000D0, "Member 'UBP_PlayerEmissionComponent_C::Time' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, WakeInterpolateTime) == 0x0000D4, "Member 'UBP_PlayerEmissionComponent_C::WakeInterpolateTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsStartInterpolate) == 0x0000D8, "Member 'UBP_PlayerEmissionComponent_C::IsStartInterpolate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, EmissionColor) == 0x0000DC, "Member 'UBP_PlayerEmissionComponent_C::EmissionColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, CollectionParameterName) == 0x0000E8, "Member 'UBP_PlayerEmissionComponent_C::CollectionParameterName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsSetup) == 0x0000F0, "Member 'UBP_PlayerEmissionComponent_C::IsSetup' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsWakeInterpolate) == 0x0000F1, "Member 'UBP_PlayerEmissionComponent_C::IsWakeInterpolate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, Accelerator) == 0x0000F2, "Member 'UBP_PlayerEmissionComponent_C::Accelerator' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, Psychic) == 0x0000F3, "Member 'UBP_PlayerEmissionComponent_C::Psychic' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsColorBlendInterpolate) == 0x0000F4, "Member 'UBP_PlayerEmissionComponent_C::IsColorBlendInterpolate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, NextEmissionColor) == 0x0000F8, "Member 'UBP_PlayerEmissionComponent_C::NextEmissionColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, ColorBlendInterpolateTime) == 0x000104, "Member 'UBP_PlayerEmissionComponent_C::ColorBlendInterpolateTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, TimeMax) == 0x000108, "Member 'UBP_PlayerEmissionComponent_C::TimeMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsSASDamage) == 0x00010C, "Member 'UBP_PlayerEmissionComponent_C::IsSASDamage' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsDamageBrainCrash) == 0x00010D, "Member 'UBP_PlayerEmissionComponent_C::IsDamageBrainCrash' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsDamageHiBrainCrash) == 0x00010E, "Member 'UBP_PlayerEmissionComponent_C::IsDamageHiBrainCrash' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, IsPlayer) == 0x00010F, "Member 'UBP_PlayerEmissionComponent_C::IsPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, UseEmissionOutlineControl) == 0x000110, "Member 'UBP_PlayerEmissionComponent_C::UseEmissionOutlineControl' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, SASActiveCount) == 0x000114, "Member 'UBP_PlayerEmissionComponent_C::SASActiveCount' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, BrainField) == 0x000118, "Member 'UBP_PlayerEmissionComponent_C::BrainField' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, BrainFieldNormal) == 0x00011C, "Member 'UBP_PlayerEmissionComponent_C::BrainFieldNormal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, BrainFieldWeek) == 0x000128, "Member 'UBP_PlayerEmissionComponent_C::BrainFieldWeek' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, BrainFieldWeekRate) == 0x000134, "Member 'UBP_PlayerEmissionComponent_C::BrainFieldWeekRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, SASHide) == 0x000138, "Member 'UBP_PlayerEmissionComponent_C::SASHide' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, Drive) == 0x000139, "Member 'UBP_PlayerEmissionComponent_C::Drive' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, PreviousDamageRate) == 0x00013A, "Member 'UBP_PlayerEmissionComponent_C::PreviousDamageRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEmissionComponent_C, PreviousDamagePattern2) == 0x00013B, "Member 'UBP_PlayerEmissionComponent_C::PreviousDamagePattern2' has a wrong offset!");

}

