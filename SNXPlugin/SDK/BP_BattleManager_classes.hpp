#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleManager

#include "Basic.hpp"

#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "EDeadFactor_structs.hpp"
#include "Struct_EnemyDeadLogParam_structs.hpp"
#include "Enum_EnemySound_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleManager.BP_BattleManager_C
// 0x00B8 (0x03B8 - 0x0300)
class ABP_BattleManager_C final : public ABattleManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ENPCBrainFieldGauge_C*              BP_ENPCBrainFieldGauge;                            // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RenderScarManage_C*                BPC_RenderScarManage;                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BattleSettingComponent_C*           BP_BattleSettingComponent;                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerHitStopComponent_C*           BP_PlayerHitStopComponent;                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BattleSituationComponent_C*         BP_BattleSituationComponent;                       // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	Enum_EnemySound                               CurrentEnemySound;                                 // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoop;                                            // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAB[0x6];                                     // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         HudMain;                                           // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyDeadLogDelay;                                 // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAC[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_EnemyDeadLogParam>      EnemyDeadLogDispQueue;                             // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                DropParticles;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         UseParticleIndex;                                  // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAD[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystem*>                GetParticle;                                       // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHpDownEvent;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DelayBattleLog;                                    // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAE[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrainCrashBonusExp;                                // 0x039C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashBonusMoney;                              // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrainCrashBonusItemDrop;                           // 0x03A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExistBattleEnemy;                                 // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNoLimitHitEffect;                                 // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BattleLogWaitFade;                                 // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDoneStealthLostBrainTalk;                         // 0x03AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAF[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEventManager*                          EventManagerGlobal;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnHpDownEvent__DelegateSignature(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo);
	void ExecuteUbergraph_BP_BattleManager(int32 EntryPoint);
	void OnBattleFieldEnd();
	void OnBattleFieldBegin();
	void StartTutorialOperation(class FName HelpTutoID, float DelaySec);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void DispEnemyDeadLog();
	void StartPlayerDeadFlow();
	void UpdateBattleMode();
	void UpdateBattleSound();
	class UBattleSituationComponent* GetSituation();
	void SetEnemyDead(class FName Character_ID, int32 DropDataIndex, const struct FTransform& EnemyLocation, EDeadFactor DeadFactor, int32 DeadActorLevel, bool UseDeadCharacterName, class FName DeadCharacterName, bool bDefeatedMainPlayer, bool IsDispKillEnemyName, class FName LogReplaceName, const struct FHCHitResult& DeadHitResult);
	void Set_Enemy_Dead_Log_Param(class FName CharacterId, int32 Experience, int32 Money, int32 bonus, class FName DropItemId, int32 DropItemNum);
	void ListUpBattleActor(const struct FVector& Location, float Distance, const struct FVector& Dir, float Angle, int32 Num, class ARSCharacterBase* BaseActor, TArray<class AActor*>& IgnoreActorList, TArray<class AActor*>* TargetList);
	void SpawnCoreDrop(int32 DropDataIndex, const struct FTransform& SpawnLocation, bool IsBig);
	class UBattleSettingComponent* GetBattleSetting();
	void Start();
	void SetEnableENPCBrainFieldGauge(bool bEnable, bool bForce, class AActor* BrainFieldUser);
	void AddENPCBrainFieldGaugeByAttack(class AActor* Attacker);
	void ResetENPCBrainFieldGauge();
	void CallHpDownEventDispatcher(class AActor* Actor, const struct FCharacterHPEventInfo& EventInfo);
	void AddENPCBrainFieldGaugeByDefense(class AActor* Attacker);
	void SetVisibleENPCBrainFieldGauge(bool bVisible, bool bFromEnpc);
	void SetENPCBrainFieldGaugeUpdate(bool bUpdate, class FName ClaimantName);
	void SetFullEnpcBrainFieldGauge();
	void ClearCurrentBattle();
	void StartDelayBattleLog();
	void EndDelayBattleLog();
	void GetAccessoryGoldBonus(float* Rate);
	void Set_Enemy_Dead_from_Event(int32 DeadEnemyLevel, int32 DropDataIndex, class FName EnemyId, bool IsDispKillEnemyName, EDeadFactor DeadFactor);
	void IsExistBattleEnemy(bool* bExist);
	void Is_Disp_Enemy_Name_Log(class FName EnemyId, bool* DisplayName);
	void SetModeEnpcBrainFieldGauge(bool bInBrainField, class AActor* BFUser);

	void CheckExistBattleEnemy(bool* bExistEnemy, class ARSCharacterBase** LastEnemy) const;
	void GetENPCBrainFieldRate(float* Rate) const;
	void IsEnableENPCBrainField(bool* bEnableGauge) const;
	void IsPlayerStealth(bool* bStealth, bool* bAfterStealth) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleManager_C">();
	}
	static class ABP_BattleManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleManager_C>();
	}
};
static_assert(alignof(ABP_BattleManager_C) == 0x000008, "Wrong alignment on ABP_BattleManager_C");
static_assert(sizeof(ABP_BattleManager_C) == 0x0003B8, "Wrong size on ABP_BattleManager_C");
static_assert(offsetof(ABP_BattleManager_C, UberGraphFrame) == 0x000300, "Member 'ABP_BattleManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BP_ENPCBrainFieldGauge) == 0x000308, "Member 'ABP_BattleManager_C::BP_ENPCBrainFieldGauge' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BPC_RenderScarManage) == 0x000310, "Member 'ABP_BattleManager_C::BPC_RenderScarManage' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BP_BattleSettingComponent) == 0x000318, "Member 'ABP_BattleManager_C::BP_BattleSettingComponent' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BP_PlayerHitStopComponent) == 0x000320, "Member 'ABP_BattleManager_C::BP_PlayerHitStopComponent' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BP_BattleSituationComponent) == 0x000328, "Member 'ABP_BattleManager_C::BP_BattleSituationComponent' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_BattleManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, CurrentEnemySound) == 0x000338, "Member 'ABP_BattleManager_C::CurrentEnemySound' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, IsLoop) == 0x000339, "Member 'ABP_BattleManager_C::IsLoop' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, HudMain) == 0x000340, "Member 'ABP_BattleManager_C::HudMain' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, EnemyDeadLogDelay) == 0x000348, "Member 'ABP_BattleManager_C::EnemyDeadLogDelay' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, EnemyDeadLogDispQueue) == 0x000350, "Member 'ABP_BattleManager_C::EnemyDeadLogDispQueue' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, DropParticles) == 0x000360, "Member 'ABP_BattleManager_C::DropParticles' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, UseParticleIndex) == 0x000370, "Member 'ABP_BattleManager_C::UseParticleIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, GetParticle) == 0x000378, "Member 'ABP_BattleManager_C::GetParticle' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, OnHpDownEvent) == 0x000388, "Member 'ABP_BattleManager_C::OnHpDownEvent' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, DelayBattleLog) == 0x000398, "Member 'ABP_BattleManager_C::DelayBattleLog' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BrainCrashBonusExp) == 0x00039C, "Member 'ABP_BattleManager_C::BrainCrashBonusExp' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BrainCrashBonusMoney) == 0x0003A0, "Member 'ABP_BattleManager_C::BrainCrashBonusMoney' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BrainCrashBonusItemDrop) == 0x0003A4, "Member 'ABP_BattleManager_C::BrainCrashBonusItemDrop' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, bExistBattleEnemy) == 0x0003A8, "Member 'ABP_BattleManager_C::bExistBattleEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, bNoLimitHitEffect) == 0x0003A9, "Member 'ABP_BattleManager_C::bNoLimitHitEffect' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, BattleLogWaitFade) == 0x0003AA, "Member 'ABP_BattleManager_C::BattleLogWaitFade' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, bDoneStealthLostBrainTalk) == 0x0003AB, "Member 'ABP_BattleManager_C::bDoneStealthLostBrainTalk' has a wrong offset!");
static_assert(offsetof(ABP_BattleManager_C, EventManagerGlobal) == 0x0003B0, "Member 'ABP_BattleManager_C::EventManagerGlobal' has a wrong offset!");

}

