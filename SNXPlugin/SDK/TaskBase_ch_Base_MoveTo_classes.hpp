#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TaskBase_ch_Base_MoveTo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TaskBase_ch_Base_MoveTo.TaskBase_ch_Base_MoveTo_C
// 0x0008 (0x0178 - 0x0170)
class UTaskBase_ch_Base_MoveTo_C : public UBTTask_RSPlayerMoveTo_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0170(0x0008)(ZeroConstructor, Transient, DuplicateTransient)

public:
	void ExecuteUbergraph_TaskBase_ch_Base_MoveTo(int32 EntryPoint);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void GetDirectionVectorXY(const struct FVector& From, const struct FVector& To, struct FVector* Direction);
	void StopMoveAndAbort(class AController* OwnerController);
	void GetDirectionByMovementMode(class APawn* FromControlledPawn, class AActor* ToTarget, struct FVector* Direction);
	void GetRandomReachablePointFromTarget(class AActor* TargetActor, float Radius, class ANavigationData* NavData, struct FVector* ReachablePoint, bool* IsValidPoint);
	void ConvertDistanceAToB(class AActor* ActorA, class AActor* ActorB, float Distance, float* ConvertedDistance);
	void DebugPrintStringWithMyName(class APawn* ControlledPawn, const class FString& String);
	void TurnToTarget(class APawn* ControlledPawn, class AActor* Target, float DeltaSeconds, float InterpSpeed);
	void GetRandomPointOriginLocation(const struct FVector& OriginLocation, float Radius, float FlightAltittude, struct FVector* Point);
	void GetRandomPointOriginTarget(class AActor* OriginTarget, float Radius, float FlightAltittude, struct FVector* Point);
	void CalculateSpeedScaleFromDistance(const struct FVector& Start, const struct FVector& Goal, float BaseRange, float BaseSpeedScale, float* Scale);
	void GetRandomReachablePointAndCheck(const struct FVector& Origin, float Radius, class ANavigationData* NavData, struct FVector* Point, bool* IsValidPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TaskBase_ch_Base_MoveTo_C">();
	}
	static class UTaskBase_ch_Base_MoveTo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTaskBase_ch_Base_MoveTo_C>();
	}
};
static_assert(alignof(UTaskBase_ch_Base_MoveTo_C) == 0x000008, "Wrong alignment on UTaskBase_ch_Base_MoveTo_C");
static_assert(sizeof(UTaskBase_ch_Base_MoveTo_C) == 0x000178, "Wrong size on UTaskBase_ch_Base_MoveTo_C");
static_assert(offsetof(UTaskBase_ch_Base_MoveTo_C, UberGraphFrame) == 0x000170, "Member 'UTaskBase_ch_Base_MoveTo_C::UberGraphFrame' has a wrong offset!");

}

