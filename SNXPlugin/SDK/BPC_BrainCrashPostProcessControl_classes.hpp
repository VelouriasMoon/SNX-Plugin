#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_BrainCrashPostProcessControl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_BrainCrashPostProcessControl.BPC_BrainCrashPostProcessControl_C
// 0x0170 (0x0230 - 0x00C0)
class UBPC_BrainCrashPostProcessControl_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UMaterialInstance>       PP_PluseForceAsset;                                // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       PP_ProductEnemyAsset;                              // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstance*                      PP_PluseForce;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_ProductEnemy;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPostProcessComponent*                  PerformPostProcess;                                // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         EmbossColorClamp;                                  // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EmbossIntensity;                                   // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         EmbossPow;                                         // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RimColor;                                          // 0x013C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         RimIntensity;                                      // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         RimOffset;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         RimSmooth;                                         // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         SNNIntensity;                                      // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         SNNScale;                                          // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       PP_ProductEnemyGeneralAsset;                       // 0x0160(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       PP_BGCrashAsset;                                   // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_ProductEnemyGeneral;                            // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_BGCrash;                                        // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       PP_BGMaskAsset;                                    // 0x01C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstance*                      PP_BGMask;                                         // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          UseGeneral;                                        // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95ED[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       PP_ENPCDamageAsset;                                // 0x01F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_ENPCDamage;                                     // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          ActiveENPCDamage;                                  // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseProductEnemyPPM;                                // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPC_BrainCrashPostProcessControl(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void LoadAssets();
	void SetupAllOff();
	void PrivateGetPerformPostProcess(bool* Enable);
	void Update(float DeltaSeconds);
	void GetBGCrashMID(class UMaterialInstanceDynamic** Mid);
	void SetupGeneral(bool General);
	void UpdateProductEnemy();
	void GetENPCDamageMID(class UMaterialInstanceDynamic** Mid);
	void ActivateENPCDamageMID(bool Param_IsActive);
	void SetUseProductEnemyPPM(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_BrainCrashPostProcessControl_C">();
	}
	static class UBPC_BrainCrashPostProcessControl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_BrainCrashPostProcessControl_C>();
	}
};
static_assert(alignof(UBPC_BrainCrashPostProcessControl_C) == 0x000008, "Wrong alignment on UBPC_BrainCrashPostProcessControl_C");
static_assert(sizeof(UBPC_BrainCrashPostProcessControl_C) == 0x000230, "Wrong size on UBPC_BrainCrashPostProcessControl_C");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, UberGraphFrame) == 0x0000C0, "Member 'UBPC_BrainCrashPostProcessControl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_PluseForceAsset) == 0x0000C8, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_PluseForceAsset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_ProductEnemyAsset) == 0x0000F0, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_ProductEnemyAsset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_PluseForce) == 0x000118, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_PluseForce' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_ProductEnemy) == 0x000120, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_ProductEnemy' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PerformPostProcess) == 0x000128, "Member 'UBPC_BrainCrashPostProcessControl_C::PerformPostProcess' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, EmbossColorClamp) == 0x000130, "Member 'UBPC_BrainCrashPostProcessControl_C::EmbossColorClamp' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, EmbossIntensity) == 0x000134, "Member 'UBPC_BrainCrashPostProcessControl_C::EmbossIntensity' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, EmbossPow) == 0x000138, "Member 'UBPC_BrainCrashPostProcessControl_C::EmbossPow' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, RimColor) == 0x00013C, "Member 'UBPC_BrainCrashPostProcessControl_C::RimColor' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, RimIntensity) == 0x00014C, "Member 'UBPC_BrainCrashPostProcessControl_C::RimIntensity' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, RimOffset) == 0x000150, "Member 'UBPC_BrainCrashPostProcessControl_C::RimOffset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, RimSmooth) == 0x000154, "Member 'UBPC_BrainCrashPostProcessControl_C::RimSmooth' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, SNNIntensity) == 0x000158, "Member 'UBPC_BrainCrashPostProcessControl_C::SNNIntensity' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, SNNScale) == 0x00015C, "Member 'UBPC_BrainCrashPostProcessControl_C::SNNScale' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_ProductEnemyGeneralAsset) == 0x000160, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_ProductEnemyGeneralAsset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_BGCrashAsset) == 0x000188, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_BGCrashAsset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_ProductEnemyGeneral) == 0x0001B0, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_ProductEnemyGeneral' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_BGCrash) == 0x0001B8, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_BGCrash' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_BGMaskAsset) == 0x0001C0, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_BGMaskAsset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_BGMask) == 0x0001E8, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_BGMask' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, UseGeneral) == 0x0001F0, "Member 'UBPC_BrainCrashPostProcessControl_C::UseGeneral' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_ENPCDamageAsset) == 0x0001F8, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_ENPCDamageAsset' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, PP_ENPCDamage) == 0x000220, "Member 'UBPC_BrainCrashPostProcessControl_C::PP_ENPCDamage' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, ActiveENPCDamage) == 0x000228, "Member 'UBPC_BrainCrashPostProcessControl_C::ActiveENPCDamage' has a wrong offset!");
static_assert(offsetof(UBPC_BrainCrashPostProcessControl_C, UseProductEnemyPPM) == 0x000229, "Member 'UBPC_BrainCrashPostProcessControl_C::UseProductEnemyPPM' has a wrong offset!");

}

