#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SequencerComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "CharactersSequencerData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SequencerComponent.BP_SequencerComponent_C
// 0x01A0 (0x0260 - 0x00C0)
#pragma pack(push, 0x1)
class alignas(0x10) UBP_SequencerComponent_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ARSLevelSequenceActor*                  SequencerActor;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCharactersSequencerData>       SequencerDataList;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSBattlePlayer_C*>              PlayerList;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               EnemyList;                                         // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  PlayerHiddenList;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  EnemyHiddenList;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bCurrentPos;                                       // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUIDisplayOff;                                     // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayerDisplayOff;                                 // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyDisplayOff;                                  // 0x0123(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPsyObjDisplayOff;                                 // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeStartOut;                                     // 0x0125(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeStartIn;                                      // 0x0126(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeEndOut;                                       // 0x0127(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeEndIn;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayerEvent;                                      // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnemyEvent;                                       // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlaying;                                          // 0x012B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         SequencerIndex;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharactersSequencerData               SequencerData;                                     // 0x0130(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PlayIndex;                                         // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFadeProc;                                         // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeStartProc;                                    // 0x01CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFadeOutProc;                                      // 0x01CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSequencerProc;                                    // 0x01CF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 RootActor;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EDA[0x8];                                     // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RootTransform;                                     // 0x01E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             CurrentPos;                                        // 0x0210(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<EPlayerActionKind>                     PlayerActionKindList;                              // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPartyBind;                                        // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNormalEnd;                                        // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAfterEventState;                                  // 0x0252(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SequencerComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Initialize(bool* Dummy);
	void Update(bool* Dummy);
	void Finalize(bool* Dummy);
	void StartSequnecer(int32 Index_in, bool* Dummy);
	void EndSequencer(int32 Param_SequencerIndex, bool* Dummy);
	void CreateSequencer(const struct FCharactersSequencerData& Seq_data_in);
	void SetFade(bool Fade_start_in, bool Fade_out_in);
	void SetOption(bool Start_in);
	void PlaySequencer(bool* Return);
	void GetPlayerList(TArray<class ARSBattlePlayer_C*>* Player_list);
	void GetEnemyList(TArray<class ARSCharacterBase*>* Param_EnemyList);
	void GetRootActorBindingID(struct FMovieSceneObjectBindingID* binding_id);
	void BindActor(const class FText& ObjName, class AActor* Param_BindActor, bool* Dummy);
	void BindCineCamera(bool* Dummy);
	void CharacterDynamicEventEnd(class ARSCharacterBase* RSCharacter, bool* Dummy);
	void PlayerDynamicEventStart(class ARSBattlePlayer_C* RSPlayer, bool* Dummy);
	void BindingSetupCode();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SequencerComponent_C">();
	}
	static class UBP_SequencerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SequencerComponent_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBP_SequencerComponent_C) == 0x000010, "Wrong alignment on UBP_SequencerComponent_C");
static_assert(sizeof(UBP_SequencerComponent_C) == 0x000260, "Wrong size on UBP_SequencerComponent_C");
static_assert(offsetof(UBP_SequencerComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_SequencerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, SequencerActor) == 0x0000C8, "Member 'UBP_SequencerComponent_C::SequencerActor' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, SequencerDataList) == 0x0000D0, "Member 'UBP_SequencerComponent_C::SequencerDataList' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, PlayerList) == 0x0000E0, "Member 'UBP_SequencerComponent_C::PlayerList' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, EnemyList) == 0x0000F0, "Member 'UBP_SequencerComponent_C::EnemyList' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, PlayerHiddenList) == 0x000100, "Member 'UBP_SequencerComponent_C::PlayerHiddenList' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, EnemyHiddenList) == 0x000110, "Member 'UBP_SequencerComponent_C::EnemyHiddenList' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bCurrentPos) == 0x000120, "Member 'UBP_SequencerComponent_C::bCurrentPos' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bUIDisplayOff) == 0x000121, "Member 'UBP_SequencerComponent_C::bUIDisplayOff' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bPlayerDisplayOff) == 0x000122, "Member 'UBP_SequencerComponent_C::bPlayerDisplayOff' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bEnemyDisplayOff) == 0x000123, "Member 'UBP_SequencerComponent_C::bEnemyDisplayOff' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bPsyObjDisplayOff) == 0x000124, "Member 'UBP_SequencerComponent_C::bPsyObjDisplayOff' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeStartOut) == 0x000125, "Member 'UBP_SequencerComponent_C::bFadeStartOut' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeStartIn) == 0x000126, "Member 'UBP_SequencerComponent_C::bFadeStartIn' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeEndOut) == 0x000127, "Member 'UBP_SequencerComponent_C::bFadeEndOut' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeEndIn) == 0x000128, "Member 'UBP_SequencerComponent_C::bFadeEndIn' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bPlayerEvent) == 0x000129, "Member 'UBP_SequencerComponent_C::bPlayerEvent' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bEnemyEvent) == 0x00012A, "Member 'UBP_SequencerComponent_C::bEnemyEvent' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bPlaying) == 0x00012B, "Member 'UBP_SequencerComponent_C::bPlaying' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, SequencerIndex) == 0x00012C, "Member 'UBP_SequencerComponent_C::SequencerIndex' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, SequencerData) == 0x000130, "Member 'UBP_SequencerComponent_C::SequencerData' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, PlayIndex) == 0x0001C8, "Member 'UBP_SequencerComponent_C::PlayIndex' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeProc) == 0x0001CC, "Member 'UBP_SequencerComponent_C::bFadeProc' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeStartProc) == 0x0001CD, "Member 'UBP_SequencerComponent_C::bFadeStartProc' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bFadeOutProc) == 0x0001CE, "Member 'UBP_SequencerComponent_C::bFadeOutProc' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bSequencerProc) == 0x0001CF, "Member 'UBP_SequencerComponent_C::bSequencerProc' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, RootActor) == 0x0001D0, "Member 'UBP_SequencerComponent_C::RootActor' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, RootTransform) == 0x0001E0, "Member 'UBP_SequencerComponent_C::RootTransform' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, CurrentPos) == 0x000210, "Member 'UBP_SequencerComponent_C::CurrentPos' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, PlayerActionKindList) == 0x000240, "Member 'UBP_SequencerComponent_C::PlayerActionKindList' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bPartyBind) == 0x000250, "Member 'UBP_SequencerComponent_C::bPartyBind' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bNormalEnd) == 0x000251, "Member 'UBP_SequencerComponent_C::bNormalEnd' has a wrong offset!");
static_assert(offsetof(UBP_SequencerComponent_C, bAfterEventState) == 0x000252, "Member 'UBP_SequencerComponent_C::bAfterEventState' has a wrong offset!");

}

