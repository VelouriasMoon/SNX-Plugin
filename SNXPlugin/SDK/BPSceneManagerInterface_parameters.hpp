#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPSceneManagerInterface

#include "Basic.hpp"

#include "E_SceneManagerStatus_structs.hpp"
#include "BattlePrototype_structs.hpp"


namespace SDK::Params
{

// Function BPSceneManagerInterface.BPSceneManagerInterface_C.IRequestChangeSceneImmediate
// 0x0030 (0x0030 - 0x0000)
struct BPSceneManagerInterface_C_IRequestChangeSceneImmediate final
{
public:
	int32                                         LocationId;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VariationID;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PortalID;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           SceneArgs;                                         // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          NoFade;                                            // 0x0020(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ELoadingScreenType                            LoadingScreenType;                                 // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A2[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoadingScreenParam;                                // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSaveDataLoadFlow;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Error;                                             // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate) == 0x000008, "Wrong alignment on BPSceneManagerInterface_C_IRequestChangeSceneImmediate");
static_assert(sizeof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate) == 0x000030, "Wrong size on BPSceneManagerInterface_C_IRequestChangeSceneImmediate");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, LocationId) == 0x000000, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::LocationId' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, AreaId) == 0x000004, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::AreaId' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, VariationID) == 0x000008, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::VariationID' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, PortalID) == 0x00000C, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::PortalID' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, SceneArgs) == 0x000010, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::SceneArgs' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, NoFade) == 0x000020, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::NoFade' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, LoadingScreenType) == 0x000021, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::LoadingScreenType' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, LoadingScreenParam) == 0x000024, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::LoadingScreenParam' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, IsSaveDataLoadFlow) == 0x000028, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::IsSaveDataLoadFlow' has a wrong offset!");
static_assert(offsetof(BPSceneManagerInterface_C_IRequestChangeSceneImmediate, Error) == 0x000029, "Member 'BPSceneManagerInterface_C_IRequestChangeSceneImmediate::Error' has a wrong offset!");

// Function BPSceneManagerInterface.BPSceneManagerInterface_C.GetCurrentStatus
// 0x0001 (0x0001 - 0x0000)
struct BPSceneManagerInterface_C_GetCurrentStatus final
{
public:
	E_SceneManagerStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPSceneManagerInterface_C_GetCurrentStatus) == 0x000001, "Wrong alignment on BPSceneManagerInterface_C_GetCurrentStatus");
static_assert(sizeof(BPSceneManagerInterface_C_GetCurrentStatus) == 0x000001, "Wrong size on BPSceneManagerInterface_C_GetCurrentStatus");
static_assert(offsetof(BPSceneManagerInterface_C_GetCurrentStatus, ReturnValue) == 0x000000, "Member 'BPSceneManagerInterface_C_GetCurrentStatus::ReturnValue' has a wrong offset!");

// Function BPSceneManagerInterface.BPSceneManagerInterface_C.GetCurrentLocationID
// 0x0004 (0x0004 - 0x0000)
struct BPSceneManagerInterface_C_GetCurrentLocationID final
{
public:
	int32                                         LocationId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPSceneManagerInterface_C_GetCurrentLocationID) == 0x000004, "Wrong alignment on BPSceneManagerInterface_C_GetCurrentLocationID");
static_assert(sizeof(BPSceneManagerInterface_C_GetCurrentLocationID) == 0x000004, "Wrong size on BPSceneManagerInterface_C_GetCurrentLocationID");
static_assert(offsetof(BPSceneManagerInterface_C_GetCurrentLocationID, LocationId) == 0x000000, "Member 'BPSceneManagerInterface_C_GetCurrentLocationID::LocationId' has a wrong offset!");

// Function BPSceneManagerInterface.BPSceneManagerInterface_C.Debug Set Current Status
// 0x0001 (0x0001 - 0x0000)
struct BPSceneManagerInterface_C_Debug_Set_Current_Status final
{
public:
	E_SceneManagerStatus                          CurrentStatus;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPSceneManagerInterface_C_Debug_Set_Current_Status) == 0x000001, "Wrong alignment on BPSceneManagerInterface_C_Debug_Set_Current_Status");
static_assert(sizeof(BPSceneManagerInterface_C_Debug_Set_Current_Status) == 0x000001, "Wrong size on BPSceneManagerInterface_C_Debug_Set_Current_Status");
static_assert(offsetof(BPSceneManagerInterface_C_Debug_Set_Current_Status, CurrentStatus) == 0x000000, "Member 'BPSceneManagerInterface_C_Debug_Set_Current_Status::CurrentStatus' has a wrong offset!");

// Function BPSceneManagerInterface.BPSceneManagerInterface_C.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct BPSceneManagerInterface_C_IsInitialized final
{
public:
	bool                                          Initialized;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPSceneManagerInterface_C_IsInitialized) == 0x000001, "Wrong alignment on BPSceneManagerInterface_C_IsInitialized");
static_assert(sizeof(BPSceneManagerInterface_C_IsInitialized) == 0x000001, "Wrong size on BPSceneManagerInterface_C_IsInitialized");
static_assert(offsetof(BPSceneManagerInterface_C_IsInitialized, Initialized) == 0x000000, "Member 'BPSceneManagerInterface_C_IsInitialized::Initialized' has a wrong offset!");

// Function BPSceneManagerInterface.BPSceneManagerInterface_C.IsChangeLocation
// 0x0001 (0x0001 - 0x0000)
struct BPSceneManagerInterface_C_IsChangeLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPSceneManagerInterface_C_IsChangeLocation) == 0x000001, "Wrong alignment on BPSceneManagerInterface_C_IsChangeLocation");
static_assert(sizeof(BPSceneManagerInterface_C_IsChangeLocation) == 0x000001, "Wrong size on BPSceneManagerInterface_C_IsChangeLocation");
static_assert(offsetof(BPSceneManagerInterface_C_IsChangeLocation, ReturnValue) == 0x000000, "Member 'BPSceneManagerInterface_C_IsChangeLocation::ReturnValue' has a wrong offset!");

}

