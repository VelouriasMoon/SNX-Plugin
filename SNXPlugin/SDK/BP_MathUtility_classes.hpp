#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MathUtility

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MathUtility.BP_MathUtility_C
// 0x0000 (0x0028 - 0x0028)
class UBP_MathUtility_C final : public UBlueprintFunctionLibrary
{
public:
	static void CheckDistanceFromVector(struct FVector& Dist, float Distance, bool bIgnoreHeight, class UObject* __WorldContext, bool* bResult);
	static void CalcRate(float Value, float Min, float Max, bool bClamp, class UObject* __WorldContext, float* Rate);
	static void RandomLotSequence(TArray<float>& HitArray, class UObject* __WorldContext, int32* HitIndex);
	static void UpDownVector(const struct FVector& Src, float Angle, class UObject* __WorldContext, struct FVector* Out);
	static void TurnToTargetRotation(const struct FRotator& Src, const struct FRotator& Dst, float Angle, class UObject* __WorldContext, struct FRotator* NewRotate);
	static void TurnToTargetVector(const struct FVector& Src, const struct FVector& Dst, float Angle, class UObject* __WorldContext, struct FVector* NewVector);
	static void CalcAnySearchBase(class UObject* __WorldContext, struct FVector* baseLocation, struct FVector* BaseDir);
	static void CalcScreenRectFromBounds(class USceneComponent* BoundsComponent, class UObject* __WorldContext, struct FBox2D* BoxSize, struct FBox2D* BoxUV, bool* Success);
	static void ClampVectorLimitAngle(const struct FVector& BaseVector, const struct FVector& CheckVector, float LimitDegree, class UObject* __WorldContext, struct FVector* ClampVector);
	static void ClampRotationLimitAngle(const struct FRotator& baseRot, const struct FRotator& CheckRot, float LimitDegree, class UObject* __WorldContext, struct FRotator* ClampRot);

	static void GetTargetAngle(const struct FVector& BaseDirection, const struct FVector& TargetDirection, class UObject* __WorldContext, float* TargeDegreetAngle);
	static void CheckDistance(struct FVector& RefPos1, struct FVector& RefPos2, float Distance, bool bIgnoreHeight, class UObject* __WorldContext, bool* bResult);
	static void GetTargetRangeAngle(const struct FVector& BaseDirection, const struct FVector& TargetDirection, class UObject* __WorldContext, float* RangeAngle);
	static void RandomLot(float HitPer, class UObject* __WorldContext, bool* IsHit);
	static void RandomLotSum(TArray<int32>& HitArray, class UObject* __WorldContext, int32* HitIndex);
	static void ClampCircleAngle(float BaseAngle, class UObject* __WorldContext, float* ClampAngle);
	static void IsInCameraSimple(const struct FVector& CheckLocation, class UObject* __WorldContext, bool* bin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MathUtility_C">();
	}
	static class UBP_MathUtility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MathUtility_C>();
	}
};
static_assert(alignof(UBP_MathUtility_C) == 0x000008, "Wrong alignment on UBP_MathUtility_C");
static_assert(sizeof(UBP_MathUtility_C) == 0x000028, "Wrong size on UBP_MathUtility_C");

}

