#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JumpComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JumpComponent.BP_JumpComponent_C
// 0x0020 (0x00E0 - 0x00C0)
class UBP_JumpComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         JumpMaxCount;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentJumpCount;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      OwnerPlayer;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirstJampStartTime;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_JumpComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void StartJump();
	void Land();
	void GetFirstJumpPastTime(float* PastTime);
	void SetJumpMaxCount(int32 Param_JumpMaxCount);
	void AirJumpEnd();

	void GetCurrentJumpCount(int32* Param_CurrentJumpCount) const;
	void IsAirJumpAble(bool* bAble) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JumpComponent_C">();
	}
	static class UBP_JumpComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_JumpComponent_C>();
	}
};
static_assert(alignof(UBP_JumpComponent_C) == 0x000008, "Wrong alignment on UBP_JumpComponent_C");
static_assert(sizeof(UBP_JumpComponent_C) == 0x0000E0, "Wrong size on UBP_JumpComponent_C");
static_assert(offsetof(UBP_JumpComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_JumpComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_JumpComponent_C, JumpMaxCount) == 0x0000C8, "Member 'UBP_JumpComponent_C::JumpMaxCount' has a wrong offset!");
static_assert(offsetof(UBP_JumpComponent_C, CurrentJumpCount) == 0x0000CC, "Member 'UBP_JumpComponent_C::CurrentJumpCount' has a wrong offset!");
static_assert(offsetof(UBP_JumpComponent_C, OwnerPlayer) == 0x0000D0, "Member 'UBP_JumpComponent_C::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_JumpComponent_C, FirstJampStartTime) == 0x0000D8, "Member 'UBP_JumpComponent_C::FirstJampStartTime' has a wrong offset!");

}

