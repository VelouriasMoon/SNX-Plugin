#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyChangePlayRate

#include "Basic.hpp"

#include "ST_em_ChangePlayRate_structs.hpp"
#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "ST_em_ChangeRateParam_structs.hpp"
#include "DE_em_ChangePlayRate_structs.hpp"


namespace SDK::Params
{

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.ExecuteUbergraph_BP_EnemyChangePlayRate
// 0x0008 (0x0008 - 0x0000)
struct BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate) == 0x000004, "Wrong alignment on BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate");
static_assert(sizeof(BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate) == 0x000008, "Wrong size on BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate");
static_assert(offsetof(BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate, EntryPoint) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_EnemyChangePlayRate_C_ExecuteUbergraph_BP_EnemyChangePlayRate::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_EnemyChangePlayRate_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_EnemyChangePlayRate_C_ReceiveTick");
static_assert(sizeof(BP_EnemyChangePlayRate_C_ReceiveTick) == 0x000004, "Wrong size on BP_EnemyChangePlayRate_C_ReceiveTick");
static_assert(offsetof(BP_EnemyChangePlayRate_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.Start
// 0x0068 (0x0068 - 0x0000)
struct BP_EnemyChangePlayRate_C_Start final
{
public:
	float                                         Param_StartPlayRate;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_LearpTime;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   Param_EaseFunc;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4198[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_EaseBlendExp;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Steps;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4199[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Animation;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LSuccess;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419B[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419C[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419D[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_GetPlayRate_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsChangePlayRate_bChange;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_Start) == 0x000008, "Wrong alignment on BP_EnemyChangePlayRate_C_Start");
static_assert(sizeof(BP_EnemyChangePlayRate_C_Start) == 0x000068, "Wrong size on BP_EnemyChangePlayRate_C_Start");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, Param_StartPlayRate) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_Start::Param_StartPlayRate' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, Param_LearpTime) == 0x000004, "Member 'BP_EnemyChangePlayRate_C_Start::Param_LearpTime' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, Param_EaseFunc) == 0x000008, "Member 'BP_EnemyChangePlayRate_C_Start::Param_EaseFunc' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, Param_EaseBlendExp) == 0x00000C, "Member 'BP_EnemyChangePlayRate_C_Start::Param_EaseBlendExp' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, Param_Steps) == 0x000010, "Member 'BP_EnemyChangePlayRate_C_Start::Param_Steps' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, Animation) == 0x000018, "Member 'BP_EnemyChangePlayRate_C_Start::Animation' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, LSuccess) == 0x000020, "Member 'BP_EnemyChangePlayRate_C_Start::LSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000030, "Member 'BP_EnemyChangePlayRate_C_Start::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_EnemyChangePlayRate_C_Start::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_GetBaseMontage_BaseMontage) == 0x000040, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_GetBaseMontage_BaseMontage' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_GetAnimInstance_ReturnValue) == 0x000050, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_IsValid_ReturnValue_2) == 0x000058, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_Montage_GetPlayRate_ReturnValue) == 0x00005C, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_Montage_GetPlayRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_IsValid_ReturnValue_3) == 0x000060, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Start, CallFunc_IsChangePlayRate_bChange) == 0x000061, "Member 'BP_EnemyChangePlayRate_C_Start::CallFunc_IsChangePlayRate_bChange' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.Update
// 0x0090 (0x0090 - 0x0000)
struct BP_EnemyChangePlayRate_C_Update final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       LEnemy;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPlayerCustomTimeDilation;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A0[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A1[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A2[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A3[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetBaseMontage_BaseMontage_1;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A4[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41A5[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy_1;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A6[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_Update) == 0x000008, "Wrong alignment on BP_EnemyChangePlayRate_C_Update");
static_assert(sizeof(BP_EnemyChangePlayRate_C_Update) == 0x000090, "Wrong size on BP_EnemyChangePlayRate_C_Update");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, DeltaSec) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_Update::DeltaSec' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, LEnemy) == 0x000008, "Member 'BP_EnemyChangePlayRate_C_Update::LEnemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, LPlayerCustomTimeDilation) == 0x000010, "Member 'BP_EnemyChangePlayRate_C_Update::LPlayerCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_GetBaseMontage_BaseMontage) == 0x000018, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_GetBaseMontage_BaseMontage' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_3) == 0x000031, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_4) == 0x000040, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_5) == 0x000041, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000048, "Member 'BP_EnemyChangePlayRate_C_Update::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_EnemyChangePlayRate_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_GetBaseMontage_BaseMontage_1) == 0x000058, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_GetBaseMontage_BaseMontage_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_6) == 0x000060, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_IsValid_ReturnValue_7) == 0x000061, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000062, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000063, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_FClamp_ReturnValue) == 0x000064, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_Add_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_GetOwner_ReturnValue_1) == 0x000070, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, K2Node_DynamicCast_AsRSBattle_Enemy_1) == 0x000080, "Member 'BP_EnemyChangePlayRate_C_Update::K2Node_DynamicCast_AsRSBattle_Enemy_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'BP_EnemyChangePlayRate_C_Update::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_Update, CallFunc_Ease_ReturnValue) == 0x00008C, "Member 'BP_EnemyChangePlayRate_C_Update::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.IsPlayerAccelerating
// 0x0038 (0x0038 - 0x0000)
struct BP_EnemyChangePlayRate_C_IsPlayerAccelerating final
{
public:
	bool                                          bAccelerating;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LAccelerating;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A7[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAccelerating_Accelerating;             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating) == 0x000008, "Wrong alignment on BP_EnemyChangePlayRate_C_IsPlayerAccelerating");
static_assert(sizeof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating) == 0x000038, "Wrong size on BP_EnemyChangePlayRate_C_IsPlayerAccelerating");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, bAccelerating) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::bAccelerating' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, LAccelerating) == 0x000001, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::LAccelerating' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, CallFunc_GetMainPlayer_Player) == 0x000018, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000020, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsPlayerAccelerating, CallFunc_GetAccelerating_Accelerating) == 0x000032, "Member 'BP_EnemyChangePlayRate_C_IsPlayerAccelerating::CallFunc_GetAccelerating_Accelerating' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.IsChangePlayRate
// 0x0001 (0x0001 - 0x0000)
struct BP_EnemyChangePlayRate_C_IsChangePlayRate final
{
public:
	bool                                          bChange;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_IsChangePlayRate) == 0x000001, "Wrong alignment on BP_EnemyChangePlayRate_C_IsChangePlayRate");
static_assert(sizeof(BP_EnemyChangePlayRate_C_IsChangePlayRate) == 0x000001, "Wrong size on BP_EnemyChangePlayRate_C_IsChangePlayRate");
static_assert(offsetof(BP_EnemyChangePlayRate_C_IsChangePlayRate, bChange) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_IsChangePlayRate::bChange' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.SetObjType
// 0x0038 (0x0038 - 0x0000)
struct BP_EnemyChangePlayRate_C_SetObjType final
{
public:
	class AActor*                                 Obj;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectSizeType                        LObjSize;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LSuccess;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LUnique;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41AA[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueObjectC_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_SetObjType) == 0x000008, "Wrong alignment on BP_EnemyChangePlayRate_C_SetObjType");
static_assert(sizeof(BP_EnemyChangePlayRate_C_SetObjType) == 0x000038, "Wrong size on BP_EnemyChangePlayRate_C_SetObjType");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, Obj) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_SetObjType::Obj' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, LObjSize) == 0x000008, "Member 'BP_EnemyChangePlayRate_C_SetObjType::LObjSize' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, LSuccess) == 0x000009, "Member 'BP_EnemyChangePlayRate_C_SetObjType::LSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, LUnique) == 0x00000A, "Member 'BP_EnemyChangePlayRate_C_SetObjType::LUnique' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'BP_EnemyChangePlayRate_C_SetObjType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000010, "Member 'BP_EnemyChangePlayRate_C_SetObjType::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_EnemyChangePlayRate_C_SetObjType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000020, "Member 'BP_EnemyChangePlayRate_C_SetObjType::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_EnemyChangePlayRate_C_SetObjType::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, CallFunc_IsUniqueObjectC_ReturnValue) == 0x000031, "Member 'BP_EnemyChangePlayRate_C_SetObjType::CallFunc_IsUniqueObjectC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SetObjType, K2Node_SwitchEnum_CmpSuccess) == 0x000032, "Member 'BP_EnemyChangePlayRate_C_SetObjType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_EnemyChangePlayRate.BP_EnemyChangePlayRate_C.SelectPlayRateParam
// 0x00B8 (0x00B8 - 0x0000)
struct BP_EnemyChangePlayRate_C_SelectPlayRateParam final
{
public:
	bool                                          bAddDamage;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41AB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_StartPlayRate;                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpTime;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   Param_EaseFunc;                                    // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_EaseBlendExp;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step;                                              // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LSuccess;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41AD[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_em_ChangeRateParam                 LChangeRateParam;                                  // 0x001C(0x0014)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_em_ChangePlayRate                  LRowData;                                          // 0x0030(0x0014)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AE[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LDTChangePlayRate;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            LAliveKind;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AF[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       LEnemy;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDE_em_ChangePlayRate                         LChangeEnum;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41B0[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_em_ChangePlayRate                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0080(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyCrashChanceAnimKind                      CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue;  // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyDamageDownAnimKind                       CallFunc_GetEnemyDamageDownAnimKind_ReturnValue;   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EnemyDamageAnimKind                           CallFunc_GetEnemyDamageAnimKind_ReturnValue;       // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnemyAliveAnimKind                            CallFunc_GetEnemyAliveAnimKind_ReturnValue;        // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41B1[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EnemyChangePlayRate_C_SelectPlayRateParam) == 0x000008, "Wrong alignment on BP_EnemyChangePlayRate_C_SelectPlayRateParam");
static_assert(sizeof(BP_EnemyChangePlayRate_C_SelectPlayRateParam) == 0x0000B8, "Wrong size on BP_EnemyChangePlayRate_C_SelectPlayRateParam");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, bAddDamage) == 0x000000, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::bAddDamage' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, bSuccess) == 0x000001, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, Param_StartPlayRate) == 0x000004, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::Param_StartPlayRate' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LerpTime) == 0x000008, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LerpTime' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, Param_EaseFunc) == 0x00000C, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::Param_EaseFunc' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, Param_EaseBlendExp) == 0x000010, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::Param_EaseBlendExp' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, Step) == 0x000014, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::Step' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LSuccess) == 0x000018, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LChangeRateParam) == 0x00001C, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LChangeRateParam' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LRowData) == 0x000030, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LRowData' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LDTChangePlayRate) == 0x000048, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LDTChangePlayRate' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LAliveKind) == 0x000050, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LAliveKind' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LEnemy) == 0x000058, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LEnemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, LChangeEnum) == 0x000060, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::LChangeEnum' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000061, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_SwitchEnum_CmpSuccess) == 0x000062, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_SwitchEnum_CmpSuccess_1) == 0x000063, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000068, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_Conv_StringToName_ReturnValue) == 0x000078, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetDataTableRowFromName_OutRow) == 0x000080, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000094, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000095, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_IsValid_ReturnValue_1) == 0x000096, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue) == 0x000097, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetEnemyCrashChanceAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetEnemyDamageDownAnimKind_ReturnValue) == 0x000098, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetEnemyDamageDownAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_SwitchEnum_CmpSuccess_2) == 0x000099, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_SwitchEnum_CmpSuccess_3) == 0x00009A, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetEnemyDamageAnimKind_ReturnValue) == 0x00009B, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetEnemyDamageAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetEnemyAliveAnimKind_ReturnValue) == 0x00009C, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetEnemyAliveAnimKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_SwitchEnum_CmpSuccess_4) == 0x00009D, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, CallFunc_GetOwner_ReturnValue) == 0x0000A0, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x0000A8, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_EnemyChangePlayRate_C_SelectPlayRateParam, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BP_EnemyChangePlayRate_C_SelectPlayRateParam::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

