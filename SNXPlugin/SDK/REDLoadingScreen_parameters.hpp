#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: REDLoadingScreen

#include "Basic.hpp"


namespace SDK::Params
{

// Function REDLoadingScreen.REDLoadingScreenBlueprintLibrary.IsFinishLoadingScreenMovie
// 0x0001 (0x0001 - 0x0000)
struct REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie) == 0x000001, "Wrong alignment on REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie");
static_assert(sizeof(REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie) == 0x000001, "Wrong size on REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie");
static_assert(offsetof(REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie, ReturnValue) == 0x000000, "Member 'REDLoadingScreenBlueprintLibrary_IsFinishLoadingScreenMovie::ReturnValue' has a wrong offset!");

// Function REDLoadingScreen.REDLoadingScreenBlueprintLibrary.PlayLoadingScreenMovie
// 0x0008 (0x0008 - 0x0000)
struct REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie final
{
public:
	bool                                          bPlayUntilStopped;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1041[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie) == 0x000004, "Wrong alignment on REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie");
static_assert(sizeof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie) == 0x000008, "Wrong size on REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie");
static_assert(offsetof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie, bPlayUntilStopped) == 0x000000, "Member 'REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie::bPlayUntilStopped' has a wrong offset!");
static_assert(offsetof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie, PlayTime) == 0x000004, "Member 'REDLoadingScreenBlueprintLibrary_PlayLoadingScreenMovie::PlayTime' has a wrong offset!");

// Function REDLoadingScreen.REDLoadingScreenBlueprintLibrary.PlayLoadingScreenSlate
// 0x0004 (0x0004 - 0x0000)
struct REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate final
{
public:
	int32                                         SlatePriority;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate) == 0x000004, "Wrong alignment on REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate");
static_assert(sizeof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate) == 0x000004, "Wrong size on REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate");
static_assert(offsetof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate, SlatePriority) == 0x000000, "Member 'REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate::SlatePriority' has a wrong offset!");

// Function REDLoadingScreen.REDLoadingScreenBlueprintLibrary.PlayLoadingScreenSlate2
// 0x0004 (0x0004 - 0x0000)
struct REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2 final
{
public:
	int32                                         SlatePriority;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2) == 0x000004, "Wrong alignment on REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2");
static_assert(sizeof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2) == 0x000004, "Wrong size on REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2");
static_assert(offsetof(REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2, SlatePriority) == 0x000000, "Member 'REDLoadingScreenBlueprintLibrary_PlayLoadingScreenSlate2::SlatePriority' has a wrong offset!");

}

