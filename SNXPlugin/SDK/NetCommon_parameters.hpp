#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NetCommon

#include "Basic.hpp"


namespace SDK::Params
{

// Function NetCommon.NetMessage.Create
// 0x0010 (0x0010 - 0x0000)
struct NetMessage_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Create) == 0x000008, "Wrong alignment on NetMessage_Create");
static_assert(sizeof(NetMessage_Create) == 0x000010, "Wrong size on NetMessage_Create");
static_assert(offsetof(NetMessage_Create, WorldContextObject) == 0x000000, "Member 'NetMessage_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetMessage_Create, ReturnValue) == 0x000008, "Member 'NetMessage_Create::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.Dump
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_Dump final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Dump) == 0x000008, "Wrong alignment on NetMessage_Dump");
static_assert(sizeof(NetMessage_Dump) == 0x000020, "Wrong size on NetMessage_Dump");
static_assert(offsetof(NetMessage_Dump, Prefix) == 0x000000, "Member 'NetMessage_Dump::Prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_Dump, ReturnValue) == 0x000010, "Member 'NetMessage_Dump::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.DumpHttp
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_DumpHttp final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_DumpHttp) == 0x000008, "Wrong alignment on NetMessage_DumpHttp");
static_assert(sizeof(NetMessage_DumpHttp) == 0x000020, "Wrong size on NetMessage_DumpHttp");
static_assert(offsetof(NetMessage_DumpHttp, Prefix) == 0x000000, "Member 'NetMessage_DumpHttp::Prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_DumpHttp, ReturnValue) == 0x000010, "Member 'NetMessage_DumpHttp::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.DumpHttpHeader
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_DumpHttpHeader final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_DumpHttpHeader) == 0x000008, "Wrong alignment on NetMessage_DumpHttpHeader");
static_assert(sizeof(NetMessage_DumpHttpHeader) == 0x000020, "Wrong size on NetMessage_DumpHttpHeader");
static_assert(offsetof(NetMessage_DumpHttpHeader, Prefix) == 0x000000, "Member 'NetMessage_DumpHttpHeader::Prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_DumpHttpHeader, ReturnValue) == 0x000010, "Member 'NetMessage_DumpHttpHeader::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.Set
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_Set final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Set) == 0x000008, "Wrong alignment on NetMessage_Set");
static_assert(sizeof(NetMessage_Set) == 0x000020, "Wrong size on NetMessage_Set");
static_assert(offsetof(NetMessage_Set, ID) == 0x000000, "Member 'NetMessage_Set::ID' has a wrong offset!");
static_assert(offsetof(NetMessage_Set, Data) == 0x000008, "Member 'NetMessage_Set::Data' has a wrong offset!");
static_assert(offsetof(NetMessage_Set, ReturnValue) == 0x000018, "Member 'NetMessage_Set::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.ToJson
// 0x0010 (0x0010 - 0x0000)
struct NetMessage_ToJson final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_ToJson) == 0x000008, "Wrong alignment on NetMessage_ToJson");
static_assert(sizeof(NetMessage_ToJson) == 0x000010, "Wrong size on NetMessage_ToJson");
static_assert(offsetof(NetMessage_ToJson, ReturnValue) == 0x000000, "Member 'NetMessage_ToJson::ReturnValue' has a wrong offset!");

}

