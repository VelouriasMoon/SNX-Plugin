#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainFieldFunction

#include "Basic.hpp"

#include "BP_BrainFieldFunction_classes.hpp"
#include "BP_BrainFieldFunction_parameters.hpp"


namespace SDK
{

// Function BP_BrainFieldFunction.BP_BrainFieldFunction_C.CheckBrainFieldTarget
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CheckActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseBattleField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BattleFieldID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BattleFieldTarget                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NormalTarget                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BrainFieldFunction_C::CheckBrainFieldTarget(class AActor* CheckActor, bool UseBattleField, int32 BattleFieldID, class UObject* __WorldContext, bool* BattleFieldTarget, bool* NormalTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_BrainFieldFunction_C", "CheckBrainFieldTarget");

	Params::BP_BrainFieldFunction_C_CheckBrainFieldTarget Parms{};

	Parms.CheckActor = CheckActor;
	Parms.UseBattleField = UseBattleField;
	Parms.BattleFieldID = BattleFieldID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BattleFieldTarget != nullptr)
		*BattleFieldTarget = Parms.BattleFieldTarget;

	if (NormalTarget != nullptr)
		*NormalTarget = Parms.NormalTarget;
}


// Function BP_BrainFieldFunction.BP_BrainFieldFunction_C.GetBrainFieldLeftPlayerLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Transform                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BrainFieldFunction_C::GetBrainFieldLeftPlayerLocation(class UObject* __WorldContext, struct FVector* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_BrainFieldFunction_C", "GetBrainFieldLeftPlayerLocation");

	Params::BP_BrainFieldFunction_C_GetBrainFieldLeftPlayerLocation Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_BrainFieldFunction.BP_BrainFieldFunction_C.GetBrainFieldRightPlayerLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Transform                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BrainFieldFunction_C::GetBrainFieldRightPlayerLocation(class UObject* __WorldContext, struct FVector* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_BrainFieldFunction_C", "GetBrainFieldRightPlayerLocation");

	Params::BP_BrainFieldFunction_C_GetBrainFieldRightPlayerLocation Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_BrainFieldFunction.BP_BrainFieldFunction_C.CheckBattleFieldNoFenceEnemy
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   EnemyTargetNormalTarget                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseBattleField                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BFGroupID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BrainFieldFunction_C::CheckBattleFieldNoFenceEnemy(TArray<class AActor*>& EnemyTargetNormalTarget, class UObject* __WorldContext, bool* UseBattleField, int32* BFGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_BrainFieldFunction_C", "CheckBattleFieldNoFenceEnemy");

	Params::BP_BrainFieldFunction_C_CheckBattleFieldNoFenceEnemy Parms{};

	Parms.EnemyTargetNormalTarget = std::move(EnemyTargetNormalTarget);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	EnemyTargetNormalTarget = std::move(Parms.EnemyTargetNormalTarget);

	if (UseBattleField != nullptr)
		*UseBattleField = Parms.UseBattleField;

	if (BFGroupID != nullptr)
		*BFGroupID = Parms.BFGroupID;
}

}

