#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SoundManager

#include "Basic.hpp"

#include "FAlertSoundSpecification_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "FSasCutInVoiceData_structs.hpp"
#include "CriWareRuntime_structs.hpp"
#include "Enum_EnemySound_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SoundManager.BP_SoundManager_C
// 0x0350 (0x0880 - 0x0530)
class ABP_SoundManager_C final : public ARSSoundManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USIWManager_C*                          SIWManager;                                        // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_RSCvManager_C*                      BP_RSCvManager;                                    // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvComponent_C*                     EnvComponent;                                      // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UAtomComponent*>                 TempComponents;                                    // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          IsBattling;                                        // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4C[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRSCollisionSound>              CollisionSoundArray;                               // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundAtomCue>           BgmBrainFieldCue;                                  // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundAtomCue>           BgmSpBrainFieldCue;                                // 0x05A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundAtomCue>           MeBattleOutCue;                                    // 0x05D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IgnoreChangeBattleBgm;                             // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4D[0x7];                                     // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          LevelBgmCue;                                       // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          LevelEnvCue;                                       // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          LastBgmCue;                                        // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBgmCategory                                  LastBgmCategory;                                   // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4E[0x3];                                     // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastBgmVolume;                                     // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          ShopBeforeBgmCue;                                  // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBgmCategory                                  ShopBeforeBgmCategory;                             // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4F[0x3];                                     // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShopBeforeBgmVolume;                               // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShopBeforeSaveFlag;                                // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E50[0x7];                                     // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USoundAtomCueSheet>> LoadCueSheetList;                                  // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	ESoundState                                   LastSoundState;                                    // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E51[0x3];                                     // 0x0649(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MenuStateVolumeBackupSe_Env;                       // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NonPlayerCueSheetVolume;                           // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDriving;                                         // 0x0654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E52[0x3];                                     // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundSnapshot                         DSPBus_SnapShot;                                   // 0x0658(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FFSasCutInVoiceData                    SasCutInVoiceVar;                                  // 0x0660(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundAtomCue>           TmpCueRef1;                                        // 0x0690(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundAtomCue>           TmpCueRef2;                                        // 0x06B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EBgmCategory                                  LevelBgmCategory;                                  // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E53[0x7];                                     // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          LevelBgmCtrlCue;                                   // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ConstSelectorName;                                 // 0x06F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsBattleFieldActive;                               // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DriveAtLoaction;                                   // 0x0701(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBgmCategory                                  PreviousBgmCategoryByBrainField;                   // 0x0702(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTitle;                                           // 0x0703(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEventInProgress;                                 // 0x0704(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDriveOut;                                        // 0x0705(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          battleIoBufSwitch;                                 // 0x0706(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E54[0x1];                                     // 0x0707(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TmpExpBeforeBattle;                                // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangingLocation;                                  // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkipping;                                        // 0x070D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E55[0x2];                                     // 0x070E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          TmpAtomCue;                                        // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ChangeLevelSoundLabel;                             // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsApllyChangeLevelSoundOnEventIn;                  // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E56[0x7];                                     // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             AlertSoundSpecification;                           // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFAlertSoundSpecification              FAlertSound;                                       // 0x0730(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class URSAtomComponentBase*                   AlertSound;                                        // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ProgressIdTmp;                                     // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayNow;                                           // 0x0774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E57[0x3];                                     // 0x0775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DriveBgmLevel;                                     // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E58[0x4];                                     // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   DriveModifyAtomComponentRef;                       // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USoundAtomCue>>   DriveResumeCue;                                    // 0x0788(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDrivePause;                                      // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E59[0x7];                                     // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSoundLevelParam>    DLCBondsLevelSound;                                // 0x07A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           DlcBondsBaseFlag;                                  // 0x07F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FName, TSoftObjectPtr<class USoundAtomCue>> VisionSimulatorMissionBGM;                         // 0x0800(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundAtomCue>           BGM_ARISE_BrainFieldCue;                           // 0x0850(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DontTouchSeVolumeAtAc;                             // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DontPlayAnimNotifySound;                           // 0x0879(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDlc4Available;                                   // 0x087A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SoundManager(int32 EntryPoint);
	void VisionSimulatorStartEndBar();
	void VisionSimulatorIndividualRank();
	void VisionSimulatorCompleteLogo();
	void VisionSimulatorRecieveMission();
	void VisionSimulatorStart();
	void VisionSimulatorResultRankSE();
	void VisionSimulatorResult();
	void VisionSimulatorComplete();
	void PlaySE_NoDamage();
	void OnSkipEvent();
	void OnMessageSkipSePlay();
	void OnEndCutScene();
	void OnStartCutScene();
	void OnChangeArea(EChangeAreaStatus Status, bool IsChangeLocation);
	void OnBattleFieldEnd();
	void OnBattleFieldBegin();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnBattleStartDriveBgmModifyResume();
	void OnBattleEndDriveBgmModifyPause();
	void OnLastBattlePhase3();
	void OnLastBattlePhase2();
	void OnChangeDriveLevel(int32 DriveLevel);
	void OnDriveEnd();
	void OnDriveStart(int32 DriveLevel);
	void OnAreaChangeLocationBgm();
	void OnTitleEnd();
	void OnTitleStart();
	void OnChangeLocationBgm();
	void OnChangeBattleBgm(Enum_EnemySound EnemySound);
	void OnCopyEnd(const struct FFSASCopyParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnCopyStart(const struct FFSASCopyParam& Param, class AActor* Param_Owner);
	void OnStealthStart(const struct FFSASStealthParam& Param, class AActor* Param_Owner);
	void OnStealthEnd(const struct FFSASStealthParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnMetalEnd(const struct FFSASMetalParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnMetalStart(const struct FFSASMetalParam& Param, class AActor* Param_Owner);
	void OnTelepoEnd(const struct FFSASTelepoParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnTelepoStart(const struct FFSASTelepoParam& Param, class AActor* Param_Owner);
	void OnSeeThroughEnd(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnSeeThroughStart(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner);
	void OnFireEnd(const struct FFSASFireParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnFireStart(const struct FFSASFireParam& Param, class AActor* Param_Owner);
	void OnSASCutinStart();
	void OnElectricEnd(const struct FFSASElectricParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnElectricStart(const struct FFSASElectricParam& Param, class AActor* Param_Owner);
	void OnAcceleratorEnd(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, float RemainTime, bool bHologram);
	void OnAcceleratorStart(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, bool bHologram);
	void OnNoticeQuest();
	void OnNoticeQuestRewareOut();
	void OnNoticeQuestRewardIn();
	void OnCrashGuageEmphasis_Boss();
	void OnCrashGuageFull_Boss();
	void OnCrashGuageFull();
	void OnStaticEventPhaseMove_(const class FString& AnimPath);
	void OnProceedMessage();
	void OnCrashGuageEmphasis();
	void OnPlaySeSASCommandPageChange();
	void OnPlaySoundSASCode();
	void OnPlaySeEmAppearEnd(const struct FVector& Location, const struct FRotator& Rotation, class UObject* Creator);
	void OnPlaySeEmAppearStart(const struct FVector& Location, const struct FRotator& Rotation, class UObject* Creator);
	void OnPlaySeBrainGaugeMAX();
	void OnPlaySeSASCommandOn(bool IsSAS);
	void OnPlaySeBrainGaugeUp();
	void OnPlaySeItemUse();
	void OnPlaySeItemChange();
	void OnPlaySeTargetLockCursor();
	void OnPlaySeTargetLockOff();
	void OnPlaySeTargetLockOn();
	void OnRevitalizationEnd();
	void OnRevitalizationStart();
	void OnBrainCrashOn();
	void OnPlayVoArmorBreak();
	void OnBrainCrashTarget(class ARSCharacterBase* Target);
	void OnBonusGhostEnd();
	void OnBonusGhostStart();
	void OnEndJustDodge();
	void OnStartJustDodge();
	void OnBrainFieldCloseFromNative();
	void OnEndCutScene_SoundSetting();
	void OnStartCutScene_SoundSetting();
	void LoadSASExtraAdlibVoice(class ULevelSequence* TargetSequence);
	void LoadAdlibVoiceCue(class ULevelSequence* Sequencer);
	void Bgm_Selector_For_Static_Event_Out();
	void Bgm_Selector_For_Static_Event_In();
	void OnEventEnd(ESequencerSoundDemoType DemoType, int32 EventID, class USoundAtomCue* SoundCue);
	void OnEventStart(ESequencerSoundDemoType DemoType, int32 EventID, class USoundAtomCue* SoundCue);
	void OnPsychicEnd(const struct FFSASPsychicParam& Param, class AActor* Param_Owner, float RemainTime);
	void OnPsychicStart(const struct FFSASPsychicParam& Param, class AActor* Param_Owner);
	void OnCutInEnd();
	void OnCutInStart();
	void UserConstructionScript();
	void UpdateOcclusion();
	void GetPhyshicsCollisionSound(const struct FRSCollisionSoundInfo& CollisionSoundInfo, struct FRSCollisionSound* CollisionSound);
	void Initialize();
	void Change_Level(class FName Param_Name);
	void Aplly_Change_Level_Sound_Setting();
	void ChangeBgmLcOrBt(bool IsBattleIn);
	bool PlayBgm(EBgmCategory Category, class USoundAtomCue* AtomCue, float FadeTime, float FadeVolume, bool ForceFirstStart);
	bool StopBgm(EBgmCategory Category, float FadeTime, float FadeVolume);
	bool ResumeBgm(EBgmCategory Category, float FadeTime, float FadeVolume);
	bool PauseBgm(EBgmCategory Category, float FadeTime, float FadeVolume);
	bool PlayEnv(class USoundAtomCue* AtomCue, float FadeTime, float FadeVolume);
	bool StopEnv(float FadeTime, float FadeVolume);
	bool PauseEnv(float FadeTime, float FadeVolume);
	bool ResumeEnv(float FadeTime, float FadeVolume);
	void GetBgmComponent(EBgmCategory Category, class URSAtomComponentBase** Component);
	void SelectBgmCue(class USoundAtomCue* OldCue, class USoundAtomCue* NewCue, class USoundAtomCue** Return);
	void IsBrainField(bool* Param_IsBrainField);
	void SetLevelSound(const struct FSoundLevelParam& LevelParam);
	void SetSoundEmitterVolume(float Volume);
	void BgmChangeToShop();
	void BgmChangeFromShop();
	void PlaySoundEmitterByPlayID(class FName PlayID);
	void StopSoundEmitterByPlayID(class FName PlayID, float FadeTime);
	void PlaySoundEmitter(float Volume);
	void StopSoundEmitter(float FadeTime);
	bool PlayLoopSe(class FName Param_Name, class USoundAtomCue* AtomCue, const struct FVector& Location, const struct FRotator& Rotation, float FadeTime, float FadeVolume, bool ForceFirstStart);
	bool StopLoopSe(class FName Param_Name, float FadeTime, float FadeVolume);
	bool ReplacedVoiceSheet(bool IsJapanese);
	bool LoadVoiceCueSheetPlayStage(const class FString& SeName);
	bool SetBaseSoundVolume(ESoundCategory SoundCategory, const class FString& ParamName, float Volume);
	float GetBaseSoundVolume(ESoundCategory SoundCategory, const class FString& ParamName);
	void IsBossBatlle(bool* IsBossBattle);
	void Debug_Print_Sound();
	bool SetConfigVolumeByCategoryName(ESoundCategory SoundCategory, float DestVolume);
	bool SetResumeFromMuteAll();
	bool SetInGameVolumeByCategoryName(ESoundCategory Category, float DestVol);
	bool SetMuteAll();
	bool SetInGameVolumeAll(float DestVol);
	bool SetFadeByCategoryName(ESoundCategory Category, float FadeTime, float DestVol);
	bool SetFadeAllCategory(float FadeTime, float DestVol);
	bool PauseAllSound();
	bool ResumeFromPauseAllSound();
	bool ChangeSoundState(ESoundState SndState);
	void PlayEnvFromEV(class USoundAtomCue* Cue, float FadeTime, float FadeVolume);
	void PlayBGEffectSound(class FName EventName, const struct FVector& Location);
	bool LoadScenarioCueSheet();
	bool LoadBondsCueSheet(EPlayerID HeroID, EPlayerID PartnerId);
	void Set_Selector_Label(class UAtomComponent* AtomComponent, const class FString& SelectorString);
	void SetBgmControl(class USoundAtomCue* ControlCue);
	void On_Battle_Field_Changed(bool IsStart);
	void OnChangeArea_SoundSetting(EChangeAreaStatus Stat, bool IsChangeLocation);
	void ReserveApllyChangeLevelSound();
	void SetDspSnapShot(const struct FSoundSnapshot& DspSnapShot);
	void PlaySoundBySoundManager(class UClass* ComponentClass, TSoftObjectPtr<class USoundAtomCue> AtomSound);
	class URSAtomComponentBase* PlayVoice(class USoundAtomCue* Sound, bool IsAttache, bool IsAutoActivate, class USceneComponent* AttachToComponent, class FName AttachPointName, EFilterCallbackType FilterCallbackType);
	class URSAtomComponentBase* PlayCueWeaponLocation(class AActor* OwnerPlayer, class USoundAtomCue* Sound, EGetPlayerWeaponType WeaponType, TSubclassOf<class URSAtomComponentBase> ComponentClass, class USoundAttenuation* AttenuationSettings);
	void LoadSASExtraAdlibVoiceData(class ULevelSequence* TargetSequence);
	void Get_Movie_Volume(class UManaComponent* ManaComponent, float* Volume);
	void CleanUpBgm(EBgmCategory Category);
	void BGMComponentOnPlayEnd(EAtomComponentStatus Status, class UAtomComponent* AtomComponent);
	void BgmStopAllDestroyReserveList();
	bool IsPlayingByBgmComponent(EBgmCategory Category);
	void GetPlayerIDFromSASKind(E_SASKind Sas, EPlayerID* PlayerId);
	void PreLoadPhaseAnimSE(TArray<class USoundAtomCue*>& OutAtomCues);
	void PlayAlertAtAC();
	void StopAlert(float FadeTime);
	void PlayAlert(class USoundAtomCue* Sound, float Volume);
	void SetUpDLCSounds();
	void SetUpIsDlcAvailable();
	void IsAnyDlcAvailable(bool* Available);
	void LoadDlcSound();
	void SetUpDlcBondsLevelSound();
	void IsDlcBondsPlaying(bool* IsPlaying);
	void DetectDlcBondsLevelSound(bool* IsDetected, TSoftObjectPtr<class USoundAtomCue>* BGMCue, EBgmCategory* BgmSlot, TSoftObjectPtr<class USoundAtomCue>* BGMCtrlCue, TSoftObjectPtr<class USoundAtomCue>* EnvCue);
	void SetUpVisionSimulatorSound();
	void PlayNexudDriveSasCutinSE(E_SASKind Kind);
	void SetDontTouchSeVolumeAtAc(bool Param_DontTouchSeVolumeAtAc);
	void SetDontPlayAnimNotifySound(bool IsDontPlay);
	void SAS_CommonStart(const struct FFSASCommand& SAS_Command, bool* Dummy);
	void SAS_CommonEnd(E_SASKind SAS_Kind, bool bCancelSASCost, bool* bDummy, float* RemainTime);
	bool EventManagerStart(bool EnableTick, bool Visibility);
	bool EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility);

	void IsValidBgmIndex(int32 Param_Index, bool* Valid) const;
	void IsAcceleratorValid(bool* Valid) const;
	void IsAccelerating(bool* Accelerating) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SoundManager_C">();
	}
	static class ABP_SoundManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SoundManager_C>();
	}
};
static_assert(alignof(ABP_SoundManager_C) == 0x000008, "Wrong alignment on ABP_SoundManager_C");
static_assert(sizeof(ABP_SoundManager_C) == 0x000880, "Wrong size on ABP_SoundManager_C");
static_assert(offsetof(ABP_SoundManager_C, UberGraphFrame) == 0x000530, "Member 'ABP_SoundManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, SIWManager) == 0x000538, "Member 'ABP_SoundManager_C::SIWManager' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, BP_RSCvManager) == 0x000540, "Member 'ABP_SoundManager_C::BP_RSCvManager' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, EnvComponent) == 0x000548, "Member 'ABP_SoundManager_C::EnvComponent' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DefaultSceneRoot) == 0x000550, "Member 'ABP_SoundManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, TempComponents) == 0x000558, "Member 'ABP_SoundManager_C::TempComponents' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsBattling) == 0x000568, "Member 'ABP_SoundManager_C::IsBattling' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, CollisionSoundArray) == 0x000570, "Member 'ABP_SoundManager_C::CollisionSoundArray' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, BgmBrainFieldCue) == 0x000580, "Member 'ABP_SoundManager_C::BgmBrainFieldCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, BgmSpBrainFieldCue) == 0x0005A8, "Member 'ABP_SoundManager_C::BgmSpBrainFieldCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, MeBattleOutCue) == 0x0005D0, "Member 'ABP_SoundManager_C::MeBattleOutCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IgnoreChangeBattleBgm) == 0x0005F8, "Member 'ABP_SoundManager_C::IgnoreChangeBattleBgm' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LevelBgmCue) == 0x000600, "Member 'ABP_SoundManager_C::LevelBgmCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LevelEnvCue) == 0x000608, "Member 'ABP_SoundManager_C::LevelEnvCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LastBgmCue) == 0x000610, "Member 'ABP_SoundManager_C::LastBgmCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LastBgmCategory) == 0x000618, "Member 'ABP_SoundManager_C::LastBgmCategory' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LastBgmVolume) == 0x00061C, "Member 'ABP_SoundManager_C::LastBgmVolume' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ShopBeforeBgmCue) == 0x000620, "Member 'ABP_SoundManager_C::ShopBeforeBgmCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ShopBeforeBgmCategory) == 0x000628, "Member 'ABP_SoundManager_C::ShopBeforeBgmCategory' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ShopBeforeBgmVolume) == 0x00062C, "Member 'ABP_SoundManager_C::ShopBeforeBgmVolume' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ShopBeforeSaveFlag) == 0x000630, "Member 'ABP_SoundManager_C::ShopBeforeSaveFlag' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LoadCueSheetList) == 0x000638, "Member 'ABP_SoundManager_C::LoadCueSheetList' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LastSoundState) == 0x000648, "Member 'ABP_SoundManager_C::LastSoundState' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, MenuStateVolumeBackupSe_Env) == 0x00064C, "Member 'ABP_SoundManager_C::MenuStateVolumeBackupSe_Env' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, NonPlayerCueSheetVolume) == 0x000650, "Member 'ABP_SoundManager_C::NonPlayerCueSheetVolume' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsDriving) == 0x000654, "Member 'ABP_SoundManager_C::IsDriving' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DSPBus_SnapShot) == 0x000658, "Member 'ABP_SoundManager_C::DSPBus_SnapShot' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, SasCutInVoiceVar) == 0x000660, "Member 'ABP_SoundManager_C::SasCutInVoiceVar' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, TmpCueRef1) == 0x000690, "Member 'ABP_SoundManager_C::TmpCueRef1' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, TmpCueRef2) == 0x0006B8, "Member 'ABP_SoundManager_C::TmpCueRef2' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LevelBgmCategory) == 0x0006E0, "Member 'ABP_SoundManager_C::LevelBgmCategory' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, LevelBgmCtrlCue) == 0x0006E8, "Member 'ABP_SoundManager_C::LevelBgmCtrlCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ConstSelectorName) == 0x0006F0, "Member 'ABP_SoundManager_C::ConstSelectorName' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsBattleFieldActive) == 0x000700, "Member 'ABP_SoundManager_C::IsBattleFieldActive' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DriveAtLoaction) == 0x000701, "Member 'ABP_SoundManager_C::DriveAtLoaction' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, PreviousBgmCategoryByBrainField) == 0x000702, "Member 'ABP_SoundManager_C::PreviousBgmCategoryByBrainField' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsTitle) == 0x000703, "Member 'ABP_SoundManager_C::IsTitle' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsEventInProgress) == 0x000704, "Member 'ABP_SoundManager_C::IsEventInProgress' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsDriveOut) == 0x000705, "Member 'ABP_SoundManager_C::IsDriveOut' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, battleIoBufSwitch) == 0x000706, "Member 'ABP_SoundManager_C::battleIoBufSwitch' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, TmpExpBeforeBattle) == 0x000708, "Member 'ABP_SoundManager_C::TmpExpBeforeBattle' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ChangingLocation) == 0x00070C, "Member 'ABP_SoundManager_C::ChangingLocation' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsSkipping) == 0x00070D, "Member 'ABP_SoundManager_C::IsSkipping' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, TmpAtomCue) == 0x000710, "Member 'ABP_SoundManager_C::TmpAtomCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ChangeLevelSoundLabel) == 0x000718, "Member 'ABP_SoundManager_C::ChangeLevelSoundLabel' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsApllyChangeLevelSoundOnEventIn) == 0x000720, "Member 'ABP_SoundManager_C::IsApllyChangeLevelSoundOnEventIn' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, AlertSoundSpecification) == 0x000728, "Member 'ABP_SoundManager_C::AlertSoundSpecification' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, FAlertSound) == 0x000730, "Member 'ABP_SoundManager_C::FAlertSound' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, AlertSound) == 0x000768, "Member 'ABP_SoundManager_C::AlertSound' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, ProgressIdTmp) == 0x000770, "Member 'ABP_SoundManager_C::ProgressIdTmp' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, PlayNow) == 0x000774, "Member 'ABP_SoundManager_C::PlayNow' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DriveBgmLevel) == 0x000778, "Member 'ABP_SoundManager_C::DriveBgmLevel' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DriveModifyAtomComponentRef) == 0x000780, "Member 'ABP_SoundManager_C::DriveModifyAtomComponentRef' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DriveResumeCue) == 0x000788, "Member 'ABP_SoundManager_C::DriveResumeCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsDrivePause) == 0x000798, "Member 'ABP_SoundManager_C::IsDrivePause' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DLCBondsLevelSound) == 0x0007A0, "Member 'ABP_SoundManager_C::DLCBondsLevelSound' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DlcBondsBaseFlag) == 0x0007F0, "Member 'ABP_SoundManager_C::DlcBondsBaseFlag' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, VisionSimulatorMissionBGM) == 0x000800, "Member 'ABP_SoundManager_C::VisionSimulatorMissionBGM' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, BGM_ARISE_BrainFieldCue) == 0x000850, "Member 'ABP_SoundManager_C::BGM_ARISE_BrainFieldCue' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DontTouchSeVolumeAtAc) == 0x000878, "Member 'ABP_SoundManager_C::DontTouchSeVolumeAtAc' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, DontPlayAnimNotifySound) == 0x000879, "Member 'ABP_SoundManager_C::DontPlayAnimNotifySound' has a wrong offset!");
static_assert(offsetof(ABP_SoundManager_C, IsDlc4Available) == 0x00087A, "Member 'ABP_SoundManager_C::IsDlc4Available' has a wrong offset!");

}

