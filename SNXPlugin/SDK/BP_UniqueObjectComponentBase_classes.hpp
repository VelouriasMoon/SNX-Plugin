#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UniqueObjectComponentBase

#include "Basic.hpp"

#include "UniqueObjectCommonParameter_structs.hpp"
#include "UniqueObjectAttackInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "UniqueObjectCameraParameter_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_ui_action_icon_device_type_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UniqueObjectComponentBase.BP_UniqueObjectComponentBase_C
// 0x09E8 (0x0AA8 - 0x00C0)
class UBP_UniqueObjectComponentBase_C final : public UActorComponent
{
public:
	class UBP_PsychicComponentMain_C*             PsyCompMain;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PsychicObjectComponent_C*           PsyObjComp;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUniqueObjectCommonParameter           UnqObjParameter;                                   // 0x00D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bInputWaitNotify;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAB[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputDelayTime;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputWaitTime;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputDilationRate;                                 // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputWait;                                        // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputPause;                                       // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputWaitEnable;                                  // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputWaitCancel;                                  // 0x0113(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCallUniqueInputStart;                             // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputSuccess;                                     // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputSuccessWaitAttack;                           // 0x0116(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputFailure;                                     // 0x0117(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputCancel;                                      // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputCancelSkip;                                  // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputDelay;                                       // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncInputDelay;                           // 0x011B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncInputDelay;                                  // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAC[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             InputDelayTimer;                                   // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncInputWait;                            // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncInputWait;                                   // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputWaitSkipUpdateTimer;                         // 0x012E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAD[0x1];                                     // 0x012F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             InputWaitTimer;                                    // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InputTimeDilationRate;                             // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 InputTimeDailtionName;                             // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniqueAttackInputSignOld;                         // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAE[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPsychicObjectUniqueInputButton>       UniqueAttackInputButton;                           // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EPsychicObjectUniqueInputType>         UniqueAttackIputType;                              // 0x0168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<bool>                                  UniqueAttackInputSuccess;                          // 0x0178(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bCheckInputReturn;                                 // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckInputSuccess;                                // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLastThrow;                                        // 0x018A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDelayDeath;                                       // 0x018B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DelayDeathTime;                                    // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             DelayDeathTimer;                                   // 0x0190(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestAsyncCommon;                               // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsyncCommon;                                      // 0x019D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputObject;                                      // 0x019E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAF[0x1];                                     // 0x019F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CommonFlag;                                        // 0x01A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         InputStep;                                         // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InputSectorMax;                                    // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InputSector;                                       // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputStepDir;                                     // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeRapid;                                   // 0x01BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB0[0x2];                                     // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputRapidMax;                                     // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InputRapidCount;                                   // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputEnableTime;                                  // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB1[0x3];                                     // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputEnableTime;                                   // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             InputEnableTimer;                                  // 0x01D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputSetting;                                     // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB2[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputIndex;                                        // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InputMax;                                          // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputGuide;                                       // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputGuidePos;                                    // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB3[0x2];                                     // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputGuidePos;                                     // 0x01EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GuideTargetRateInput;                              // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GuideTargetRateAttack;                             // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGuideDirectInput;                                 // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGuideDirectAttack;                                // 0x0201(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGuideDirectInputProc;                             // 0x0202(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGuideDirectAttackProc;                            // 0x0203(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputGuideAutoOff;                                // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputGuideToWait;                                 // 0x0205(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGuideUseActorPos;                                 // 0x0206(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB4[0x1];                                     // 0x0207(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GuideLerpTimeInput;                                // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GuideLerpTimeAttack;                               // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputExtra;                                       // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputExtraProc;                                   // 0x0211(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputExtraFirst;                                  // 0x0212(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB5[0x1];                                     // 0x0213(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputExtraTime;                                    // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputExtraTimeTotal;                               // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             InputExtraTimer;                                   // 0x021C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbPrintInputExtra;                                // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbPrintInputRotate;                               // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbPrintAttackCheck;                               // 0x022A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbPrintCancel;                                    // 0x022B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDbCheckDestroy;                                   // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawUniqueRideCapsule;                       // 0x022D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawUniqueRideLocRot;                        // 0x022E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDrawInputWait;                               // 0x022F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintFloatSuspension;                        // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeHold;                                    // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckInputHold;                                   // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputMoveMouse;                                   // 0x0233(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputStickTriggerLt;                              // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputStickTriggerRt;                              // 0x0235(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputExtraCancel;                                 // 0x0236(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueRebound;                                    // 0x0237(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueReboundTargetBase;                          // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueReboundTargetTop;                           // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB6[0x2];                                     // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniqueReboundPosOffset;                            // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueReboundPos;                                  // 0x0248(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueReboundDirection;                            // 0x0254(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputDelayToGuide;                                // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputDelayCancel;                                 // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDelayDeathCheckHitOld;                            // 0x0262(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeRotate;                                  // 0x0263(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGuideCheckHit;                                    // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB7[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GuideHitCheckTime;                                 // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             GuideHitCheckTimer;                                // 0x026C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackCheck;                                      // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitTarget;                                        // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitTargetSingle;                                  // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNextAttackUnique;                                 // 0x027B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAnimNotifyFirstAttack;                            // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAttackCheckSkip;                                  // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB8[0x2];                                     // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackCheckTime;                                   // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             AttackCheckTimer;                                  // 0x0284(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InputExtraSkipTimeDilation;                        // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InputExtraSkipPostProcess;                         // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputWaitSkipTimeDilation;                        // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputWaitSkipPostProcess;                         // 0x0293(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeRepeat;                                  // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeRepeatFirst;                             // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DB9[0x2];                                     // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputRepeatMax;                                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InputRepeatCount;                                  // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLinearDamp;                                       // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DBA[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDampBackUp;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinearDampValue;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinearDampTime;                                    // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             LinearDampTimer;                                   // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DBB[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AttackRowNameKey;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           AttackRowNameList;                                 // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AttackInfoIndex;                                   // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DBC[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHCCollisionCommonInfo>         AttackCommonInfoList;                              // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FHCSkillCommonInfo>             AttackSkillInfoList;                               // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FUniqueObjectAttackInfo>        AttackInfoList;                                    // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EPsychicObjectUniqueInputType                 InputLeftType;                                     // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputType                 InputCentreType;                                   // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputType                 InputRightType;                                    // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               InputLeftButton;                                   // 0x031B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               InputCentreButton;                                 // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               InputRightButton;                                  // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DBD[0x2];                                     // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageCancel;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniquePress;                                      // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressHit;                                   // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressTargetLocation;                        // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressFixHeight;                             // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressTraceHeight;                           // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressUpdateHeight;                          // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DBE[0x2];                                     // 0x032E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            UniquePressPosCurve;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniquePressHeightRange;                           // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DBF[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniquePressHeightRange;                            // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressHeight;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressRotLerpTime;                            // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             UniquePressTimer;                                  // 0x0348(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             UniquePressRotTimer;                               // 0x0354(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UniquePressHeightStt;                              // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressHeightEnd;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkLerpPosStt;                                    // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkLerpRotStt;                                    // 0x0374(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WorkLerpPosEnd;                                    // 0x0380(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkLerpRotEnd;                                    // 0x038C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WorkObjPos;                                        // 0x0398(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkObjRot;                                        // 0x03A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueExplosion;                                  // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC0[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueExplosionTime;                               // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueExplosionRadius;                             // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             UniqueExplosionTimer;                              // 0x03BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWaitAttackNotify;                                 // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC1[0x3];                                     // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniquePressPos;                                    // 0x03CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniquePressVibrate;                               // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressVibrateLoop;                           // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressVibrateLoopProc;                       // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC2[0x5];                                     // 0x03DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           UniquePressVibrateLoopCurve;                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniquePressVibrateLoopScale;                       // 0x03E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateLoopTimer;                       // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateLoopTime;                        // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateLoopTimeRate;                    // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniquePressVibrateLoopHit;                        // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC3[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             UniquePressVibrateLoopHitTimer;                    // 0x0404(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                UniquePressVibrateLoopHitScale;                    // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateLoopHitTimeRate;                 // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateLoopHitTime;                     // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseNewCancel;                                     // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseNewFailure;                                    // 0x0425(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueBend;                                       // 0x0426(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueBendProc;                                   // 0x0427(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueBendSelf;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueBended;                                     // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC4[0x6];                                     // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            UniqueBendAngleCurve;                              // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueBendAngleRate;                               // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueBendTimeRate;                                // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             UniqueBendTimer;                                   // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UniqueBendTime;                                    // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueBendRate;                                    // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueBendHeightMax;                               // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueBendHeight;                                  // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueBendAxis;                                    // 0x045C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueBendPos;                                     // 0x0468(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueBendPosOffsetStt;                            // 0x0474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueBendPosOffsetEnd;                            // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               UniqueBendRotStt;                                  // 0x048C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               UniqueBendRotEnd;                                  // 0x0498(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               UniqueBendRot;                                     // 0x04A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         UnqObjStateEnemyList;                              // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniquePressVibrateDir;                            // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC5[0x3];                                     // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniquePressVibrateTimeMin;                         // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateTimeMax;                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateSpeedMin;                        // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateSpeedMax;                        // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateSpeed;                           // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateRangeMin;                        // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateRangeMax;                        // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniquePressVibrateRange;                           // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             UniquePressVibrateTimer;                           // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UniquePressVibrateOffset;                          // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniquePressVibrateOffset2;                         // 0x04F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 DamageMaterialValueList;                           // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         DamageMaterialLevel;                               // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DC6[0x4];                                     // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        CameraOwner;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraRowName;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUniqueObjectCameraParameter           CameraParameter;                                   // 0x0528(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraUniqueObjectParameter           UniqueObjectCameraParameter;                       // 0x0560(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUniqueCameraTypeNormal;                           // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCameraTypeSocket;                           // 0x05B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCameraTypeControl;                          // 0x05BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCameraTypeRemote;                           // 0x05BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCameraTriggerInfo;                          // 0x05BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCameraBackupRootLerp;                       // 0x05BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueCameraBackupLockRoot;                       // 0x05BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC7[0x1];                                     // 0x05BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueCameraResetTime;                             // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueCameraSideIndex;                             // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueCameraTargetPos;                             // 0x05C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueCameraCheck;                                // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeDuel;                                    // 0x05D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputTypeControl;                                 // 0x05D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDelayDeathCheckSuccess;                           // 0x05D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDelayDeathCheckLastHit;                           // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDelayDeathCheckSkip;                              // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC8[0x2];                                     // 0x05DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WeightGaugePosOffset;                              // 0x05DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCapturePos;                                       // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DC9[0x7];                                     // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CapturePosCurve;                                   // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CapturePosRate;                                    // 0x05F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CapturePosOffset;                                  // 0x0604(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureVibratePos;                                // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DCA[0x7];                                     // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CaptureVibratePosCurve;                            // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureVibratePosRate;                             // 0x0620(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureVibratePosOffset;                           // 0x062C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCaptureVibrateRot;                                // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DCB[0x7];                                     // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CaptureVibrateRotCurve;                            // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureVibrateRotRate;                             // 0x0648(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureVibrateRotOffset;                           // 0x0654(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureWaitAttack;                                // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseNewCommon;                                     // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGroundSlope;                                      // 0x0662(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGroundSlopeNextLocation;                          // 0x0663(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGroundSlopeFailed;                                // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGroundSlopeFloat;                                 // 0x0665(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGroundSlopeFall;                                  // 0x0666(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DCC[0x1];                                     // 0x0667(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        GroundSlopeOffsetList;                             // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                GroundSlopeFrontDirHz;                             // 0x0678(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundSlopeNormal;                                 // 0x0684(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundSlopeLocation;                               // 0x0690(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundSlopeLocationNext;                           // 0x069C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRide;                                       // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DCD[0x3];                                     // 0x06A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueRideSpeed;                                   // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideSpeedMax;                                // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideAccel;                                   // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRideDecel;                                  // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DCE[0x3];                                     // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueRideDecel;                                   // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRideDecelStop;                              // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DCF[0x3];                                     // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueRideDecelStopTime;                           // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             UniqueRideDecelStopTimer;                          // 0x06C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UniqueRideDecelStopSpeedStt;                       // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   UniqueRideDecelStopEaseFunction;                   // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DD0[0x3];                                     // 0x06D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueRideDecelStopEaseBlendExp;                   // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideTurnSpeed;                               // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideTurnSpeedMax;                            // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideTurnAccel;                               // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideTurnDecel;                               // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideTurnRate;                                // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueRidePos;                                     // 0x06F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniqueRidePosOffset;                               // 0x0700(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               UniqueRideRot;                                     // 0x070C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueRideCheckBg;                                // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueRideChkBgHit;                               // 0x0719(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD1[0x2];                                     // 0x071A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniqueRideChkBgAdjustPos;                          // 0x071C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideChkBgAdjustAngle;                        // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputRotateFirst;                                 // 0x072C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThrowMontageCancelCheck;                          // 0x072D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThrowMontageCancel;                               // 0x072E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD2[0x1];                                     // 0x072F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             ThrowMontageCancelTimer;                           // 0x0730(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ThrowMontageCancelTime;                            // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueCameraHitLerp;                              // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD3[0x3];                                     // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             UniqueCameraHitLerpTimer;                          // 0x0744(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UniqueCameraHitLerpTime;                           // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueCameraHitLerpStt;                            // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueCameraHitLerpEnd;                            // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   UniqueCameraHitLerpEaseType;                       // 0x075C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DD4[0x3];                                     // 0x075D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSAtomComponentBase*                   SeCompInputGuage;                                  // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewElectricPole;                                  // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDispHitDamageMesh;                                // 0x0769(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD5[0x6];                                     // 0x076A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    HitDamageMeshList;                                 // 0x0770(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMesh*                            HitBackupMesh;                                     // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCallUniqueObjectEnd;                              // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD6[0x7];                                     // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SoundInputStart;                                   // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          SoundInputRepeat;                                  // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          SoundInputRotate;                                  // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 PlayerLerpAngleList;                               // 0x07A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PlayerLerpTraceDistance;                           // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerLerpDistance;                                // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyLerpDistance;                                 // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyLerpRate;                                     // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRideImpactOverWrite;                        // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD7[0x3];                                     // 0x07C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueRideImpactMass;                              // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideObjMass;                                 // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRideTimer;                                  // 0x07D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD8[0x3];                                     // 0x07D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             UniqueRideTimer;                                   // 0x07D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         UniqueRideTime;                                    // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputTypeOneRepeat;                               // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFirstAttackThrow;                                 // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipAddGauge;                                     // 0x07EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCallAddGaugeEnable;                               // 0x07EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNewUnqObjCam;                                     // 0x07EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD9[0x3];                                     // 0x07ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FString>                    CommonIndex;                                       // 0x07F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bLookAtObjUseSelfDelay;                            // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLookAtObjEndDelay;                                // 0x0841(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DDA[0x2];                                     // 0x0842(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueReboundInterpolationSpeed;                   // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundSlopeTraceUp;                                // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundSlopeTraceDn;                                // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideDropSpeed;                               // 0x0850(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideDropSpeedMax;                            // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideDropAccel;                               // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideDropAccelSecond;                         // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketPlayerName;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugPrintGroundSlope;                            // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEmKarenObj;                                       // 0x0869(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitTargetInvincible;                              // 0x086A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueScaleChange;                                // 0x086B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             UniqueScaleChangeTimer;                            // 0x086C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bScaleChanged;                                     // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DDB[0x7];                                     // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            UniqueScaleChangeCurve;                            // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NowUniqueScaleValue;                               // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BackupMeshCompScale;                               // 0x088C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueScaleCurveMaxTime;                           // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueReboundCheckHeight;                         // 0x089C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DDC[0x3];                                     // 0x089D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueReboundCheckHeightOffset;                    // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueReboundResultHeight;                        // 0x08A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DDD[0x3];                                     // 0x08A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueReboundResultHeight;                         // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmKarenEndUniqueObjectStateWaitTime;               // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnemyTargetActorFixUniqueId;                       // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DDE[0x4];                                     // 0x08B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      UniqueRideCapsule;                                 // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRideCapsule;                                // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DDF[0x3];                                     // 0x08C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueRideCapsuleRadius;                           // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueRideCapsuleHalfHeight;                       // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               UniqueRideCapsuleBaseRot;                          // 0x08CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                UniqueRideCapsuleRelativePos;                      // 0x08D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               UniqueRideCapsuleRelativeRot;                      // 0x08E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             UnqiueRideCapsuleOwnerCharaCollision;              // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             UnqiueRideCapsuleOwnerCapCollision;                // 0x08F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniqueRideCapsuleApply;                           // 0x08F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueRideCapsuleReset;                           // 0x08F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniqueRideCapsuleShape;                           // 0x08F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE0[0x3];                                     // 0x08F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniqueRideCapsuleShapePos;                         // 0x08F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               UniqueRideCapsuleShapeRot;                         // 0x0904(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   FlyingClaimantName;                                // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowMontageCancelBaseTime;                        // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DE1[0x4];                                     // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraUniqueObjectParameter           UniqueObjectCameraParameterCh0200;                 // 0x0920(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bInputRotateCheckFirst;                            // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputRotateCheckMouse;                            // 0x0979(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE2[0x2];                                     // 0x097A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputRotateKbStep;                                 // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputRotateKbStepLt;                              // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputRotateKbStepRt;                              // 0x0981(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputUIKeyboardType;                              // 0x0982(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bClearDelayDeathWait;                              // 0x0983(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameTimer                             ClearDelayDeathWaitTimer;                          // 0x0984(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckEnemyLerp;                                   // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAchievementCheckUniqueInput;                      // 0x0991(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE3[0x2];                                     // 0x0992(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttackCapsuleOffsetUnq;                            // 0x0994(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUniquePressHandle;                                // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUniquePressHandleApply;                           // 0x09A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE4[0x2];                                     // 0x09A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniquePressHandleOffset;                           // 0x09A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 EffectUniqueHitCopyMaterialIndexList;              // 0x09B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 EffectUniqueHitTargetMaterialIndexList;            // 0x09C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUniquePressLiftUp;                                // 0x09D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE5[0x7];                                     // 0x09D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            UniquePressLiftUpCurve;                            // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             UniquePressLiftUpTimer;                            // 0x09E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RespawnRestrictRadiusUq;                           // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerPullDistance;                                // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerPullMoveDistMax;                             // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCallEndUniqueObjectStateWait;                     // 0x09F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE6[0x3];                                     // 0x09F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameTimer                             CallEndUniqueObjectStateWaitTimer;                 // 0x09FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEventCancelEnable;                                // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputReserve;                                     // 0x0A09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputReserveSuccess;                              // 0x0A0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputReserveWait;                                 // 0x0A0B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputReserveSkipAutoOff;                          // 0x0A0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseInputReserveButton;                            // 0x0A0D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EPsychicObjectUniqueInputType                 InputReserveType;                                  // 0x0A0E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPsychicObjectUniqueInputButton               InputReserveButton;                                // 0x0A0F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputSuccessDelay;                                // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputSuccessReserve;                              // 0x0A11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE7[0x2];                                     // 0x0A12(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputReserveDelaytime;                             // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             InputReserveDelayTimer;                            // 0x0A18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintInputReserve;                           // 0x0A24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEventCancelInputDelay;                            // 0x0A25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE8[0x2];                                     // 0x0A26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputSuccessDelayTime;                             // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameTimer                             InputSuccessDelayTimer;                            // 0x0A2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureSkipLookAtObj;                             // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCaptureCancelSas;                                 // 0x0A39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE9[0x2];                                     // 0x0A3A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatDampLimit;                                    // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatDampRange;                                    // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatDampCoefficients;                             // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatDampEaseBlendExp;                             // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatSpringRange;                                  // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFloatInertia;                                     // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DEA[0x3];                                     // 0x0A51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatInertia;                                      // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatInertiaCoefficients;                          // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatInertiaPrevHeight;                            // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseFloatSuspension;                               // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputModeAutoLock;                                // 0x0A61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintAutoLockInputMode;                      // 0x0A62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputModeAutoSkip;                                // 0x0A63(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkeletonUpdateEnable;                             // 0x0A64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNoSkeletonUpdateUq;                               // 0x0A65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DEB[0x2];                                     // 0x0A66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SkeletonUpdateRefList;                             // 0x0A68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 InputWaitTimeList;                                 // 0x0A78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bSkipPsychicObjectUse;                             // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DEC[0x3];                                     // 0x0A89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniquePressTraceRadius;                            // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<E_SASKind>                             CancelSasList;                                     // 0x0A90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bInputMoveMouseValue;                              // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableInputMouseIcon;                             // 0x0AA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSelfCallUnqObjEnd;                                // 0x0AA2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void InitializeUniqueObject(class UBP_PsychicObjectComponent_C* Psy_obj_comp_in, class UBP_PsychicComponentMain_C* Psy_comp_main_in);
	void UpdateUniqueObject();
	void FinalizeUniqueObject(bool* Dummy);
	void InitialComponent(bool* Dummy);
	void InitialParameter(bool Flag_in, bool First_time_in, bool* Dummy);
	void SetAsyncCapture(bool Flag_in, bool Capture_success_in, bool* Dummy);
	void PrevAsyncCapture(bool* Dummy);
	void UpdateAsyncCapture(bool* Dummy);
	void PostAsyncCapture(bool* Dummy);
	void SetCaptureLevel(bool* Dummy);
	void PrevAsyncCommon(bool* Dummy);
	void UpdateAsyncCommon(bool* Dummy);
	void PostAsyncCommon(bool* Dummy);
	void SetHitUnqObj(bool Hit_enemy_in, bool Hit_background_in, const struct FHCHitResult& Hit_result_in, const struct FHitResult& Hit_result_bg_in, bool* Dummy);
	void SetAttackUnique(bool Flag_in, bool* Dummy);
	void PrevAsyncAttackUnique();
	void UpdateAsyncAttackUnique();
	void PostAsyncAttackUnique();
	void SetInputDelay(bool Flag_in);
	void PrevAsyncInputDelayOld();
	void UpdateAsyncInputDelay();
	void PostAsyncInputDelayOld();
	void SetInputWait(bool Flag_in, bool Success_in, bool* Dummy);
	void PrevAsyncInputWait();
	void UpdateAsyncInputWait();
	void PostAsyncInputWait();
	void CheckInput(bool* Return);
	void GetAnimationIndex(int32* Anim_index);
	void SetAttractUnique(bool* Dummy);
	void SetInputSuccess(bool* Dummy);
	void SetAttackThrow(bool* Dummy);
	void UpdateDelayDeathOld();
	void SetAttack(bool* Dummy);
	void CancelInput(bool* Skip);
	void InitialInstanceParameter(bool* Dummy);
	void SetInputWaitNotify(bool Flag_in, bool* Dummy);
	void CheckInputRotate();
	void SetAttackSpline(bool Flag_in, bool* Dummy);
	void SetAttackPursue(bool Flag_in, bool* Dummy);
	void SetAttackPursueChild(bool* Dummy);
	void SetDelayDeathOld(bool Flag_in, bool Force_in);
	void SetBulletAppear(bool* Dummy);
	void BulletDestroyReport(class ABP_PsychicObjectBasic_C* bullet_obj_in, bool* Dummy);
	void SetInputFailure(bool* Dummy);
	void SetInputEnableTime(bool Flag_in);
	void UpdateInputEnableTime();
	void SetDestroyUnqObj(bool* Dummy);
	void ResetCommonFlag(int32 Length_in);
	void SetCommonFlag(int32 Index_in, bool Flag_in);
	void CheckCommonFlag(int32 Index_in, bool* Return);
	void SetEffectHitUnqObj(bool Hit_enemy_in, bool Hit_background_in, const struct FHCHitResult& Hit_result_in, const struct FHitResult& Hit_result_bg_in, bool* Dummy);
	void UpdateCheckDestroy(bool* Dummy);
	void SetInputGuideOld(bool Flag_in, class AActor* Target_actor_in, const struct FVector& Target_pos_in, bool Reverse_lerp_in, bool Direct_in, bool Auto_off_in, bool To_wait_in);
	void UpdateInputGuideOld();
	void GetGuidePos(bool Input_in, float Pos_rate_in, struct FVector* Guide_pos);
	void SetInputExtraSuccess(bool* Dummy);
	void SetPhaseDestroyUnqObj(bool* Dunmy);
	void SetCheckDestroyUnqObj(bool Flag_in, bool* Dummy);
	void GetTopParent(class ABP_PsychicObjectBasic_C** Top_parent);
	void GetCameraLookAtPos(struct FVector* Pos);
	void SetSeInputStart();
	void SetSeInputSuccess(bool* Dummy);
	void SetUniqueRebound(bool Flag_in, const struct FVector& Pos_in, bool Set_rot_in, const struct FRotator& Rot_in, bool Target_in, bool Target_top_in);
	void UpdateUniqueRebound();
	void UpdateUniqueReboundPos();
	void SetInputDelayCancel(bool* Dummy);
	void SetDelayDeathHitCheckOld(bool Flag_in);
	void SetGuideHitCheckOld(bool Flag_in);
	void UpdateGuideHitCheckOld();
	void SetHitGuideOld();
	void SetAttackCheck(bool Flag_in);
	void UpdateAttackCheck();
	void SetPsyObjLinearDamp(bool Flag_in, float Value_in, float Time_in);
	void UpdatePsyObjLinearDamp();
	void SetExtraTypeUnqObj(TArray<EHCSkillExtraType>* Extra_type);
	void GetAttackParameter(struct FHCCollisionCommonInfo* CommonInfo, struct FHCSkillCommonInfo* SkillInfo);
	void GetAnimationDirect(class UAnimSequence** AnimSequence);
	void SetPhasePullOutUnqObj(bool Flag_in, bool* Dummy);
	void UpdatePullOutUnqObj(bool* Dummy);
	void SetInputSetting(bool* Dummy);
	void LoadAttackParameter();
	void InitializeDataTable();
	void SetSplineUnqObj(bool Flag_in, bool* Dunnmy);
	void UpdateSplineUnqObj(float In_rate, bool* Dummy);
	void SetUniquePress(bool Flag_in, float Offset_height_in, class UCurveFloat* Pos_curve_in, float Rot_lerp_time_in, bool Target_enemy_weak_point_in, bool* Dummy);
	void UpdateUniquePress(bool* Dummy);
	void SetUniqueExplosion(bool Flag_in, float Explode_time_in, float Explode_radius_in, bool* Dummy);
	void UpdateUniqueExplosion(bool* Dummy);
	void GetInputMoveValue(float* Value_x, float* Value_y);
	void InitInputStickTrigger();
	void CheckInputStickTrigger(bool Left_in, bool Right_in, float Tolerance_in, bool* Return);
	void SetInputWaitPause(bool Flag_in);
	void SetInputGuideCancelOld(bool* Dummy);
	void SetUniquePressHit(bool* Dummy);
	void SetUniquePressVibrate(bool Flag_in);
	void SetUniquePressVibrateParam();
	void SetUniqueReboundImpulse(float Impulse_in);
	void SetUniquePressOffsetHeight(float Offset_height_in);
	void SetUniqueBend(bool Flag_in, bool* Dummy);
	void UpdateUniqueBend();
	void SetUniqueBendSetting(class UCurveFloat* Angle_curve_in, float Angle_rate_in, float Time_rate_in);
	void SetUniqueBendCapture();
	void SetEffectUniqueBend();
	void RequestEndUniqueObjectState(class AActor* Actor_in);
	void CallEndUniqueObjectState();
	void LoadAttackInfo();
	void GetEffectHit(TArray<TSoftObjectPtr<class UParticleSystem>>* UniqueEffectList, TArray<class FName>* UniqueEffectSocketList, TArray<struct FVector>* UniqueEffectScaleList, TArray<bool>* UniqueEffectApplyThrowRotList, bool* SkipNormalEffect);
	void GetCameraShakeUnqObj(class UClass** Camera_shake, float* Camera_shake_scale);
	void GetObjectShakeUnqObj(class UCurveVector** Shake_curve, struct FVector* Shake_loop_scale, float* Shake_loop_time_rate, struct FVector* Shake_scale, float* Shake_time_rate, float* Shake_time);
	void SetEffectUniqueHit(const struct FVector& Eft_pos_in);
	void SetAttackInfoIndex(int32 Index_in);
	void SetUniquePressVibrateLoopParam(int32 Attack_info_index_in);
	void SetUniquePressVibrateLoop(bool Flag_in);
	void SetUniquePressVibrateLoopHit(bool Flag_in);
	void SetDamageMaterialValue(TArray<float>& Value_list_in);
	void SetDamageMaterial(bool Reset_in, int32 Damage_level_in);
	void GetUnqObjCamTargetPos(struct FVector* Pos);
	void SetUniqueObjectCameraOld(bool Flag_in, int32 Side_index_in);
	void LoadUniqueObjectCameraParameter();
	void CheckInputDuel(bool* Success);
	void CheckDelayDeath();
	void ClearDelayDeath(bool ForceIn);
	void GetWeightGaugePosUnqObj(bool* Return, struct FVector* Pos);
	void GetMeshCompUnqObj(bool* Return, class UStaticMesh** Mesh_comp, struct FVector* Scale);
	void SetCaptureUnqObj(bool Flag_in, bool Success_in);
	void UpdateCaptureUnqObj();
	void SetCapturePos(bool Flag_in, class UCurveVector* Curve_in, const struct FVector& Rate_in);
	void SetCaptureVibratePos(bool Flag_in, class UCurveVector* Curve_in, const struct FVector& Rate_in);
	void SetCaptureVibrateRot(bool Flag_in, class UCurveVector* Curve_in, const struct FVector& Rate_in);
	void CheckInputControl(bool* Dummy);
	void SetGroundSlope(bool Flag_in);
	void UpdateGroundSlope(bool* Dummy);
	void SetUniqueRide(bool Flag_in, bool* Update);
	void UpdateUniqueRidePrev(bool* Dummy);
	void UpdateUniqueRide(bool* Dummy);
	void UpdateUniqueRideCheckBg(bool* Dummy);
	void CheckTimeDilation(bool* Return);
	void SetTimeDilationAttackUnqObj(bool Flag_in, bool* Dummy);
	void CallAttackThrowCancel();
	void SetThrowMontageCancel(bool Flag_in, float Time_in, bool Cancel_in);
	void UpdateThrowMontageCancel();
	void SetUniqueCameraHitCheck();
	void UniqueCameraHitCheck();
	void SetUniqueCameraHitLerp(bool Flag_in);
	void UpdateUniqueCameraHitLerp();
	void SetSeInputFailure(bool* Dummy);
	void SetSeInputGauge(bool Flag_in, bool* Dummy);
	void SetPursuitIconStickRollSuccess();
	void SetHitDamageMesh(bool Reset_in, bool* Dummy);
	void SetPlayerMontageFirstAttack(bool* Dummy);
	void SetAttackInterpolate(float Interpolate_time_in, bool* Dummy);
	void CallUniqueInputStart(bool Force_in);
	void CallUniqueObjectEnd();
	void SetSeInputRepeat();
	void SetSeInputRotate();
	void SetPursuitIconStickHold();
	void SetPursuitIconStickHoldPercent();
	void SetPursuitIconRushPercent(float Rate_in);
	void SetPursuitIconStickRollStart();
	void CallUniqueAddGauge();
	void LoadEffectParameter();
	void GetUniqueObjectCameraLookAtPos(float Look_rate_in, struct FVector* Pos);
	void GetMoveVelocity(struct FVector* VelocityOut);
	void Get_Unique_Move_Look_at_Target_Pos(struct FVector* TargetPos);
	void GetUniqueObjectCameraOwnerRotation(struct FRotator* Rotation);
	void SetUniqueAttackCollision(bool* Dummy);
	void SetInputWaitEnemy(bool Flag_in, bool Success_in, bool* Dummy);
	void PrevAsyncInputWaitEnemy();
	void PostAsyncInputWaitEnemy();
	void ApplyUniqueRideLocationRotation();
	void GetUniqueRideFrontDir(struct FVector* Front_dir);
	void GetUniqueRideTransform(struct FTransform* Location);
	void GetUniqueRidePos(struct FVector* Location);
	void GetUniqueRideRot(struct FRotator* Location);
	void SetPursuitIconStickButtonPercent();
	void SetUniqueRideTimer(bool Flag_in);
	void UpdateUniqueRideTimer();
	void IsUniqueRideTimerOver(bool* Return);
	void StartUniqueObjectCamera(bool Socket_type_in, bool Control_type_in, bool Remote_type_in);
	void EndUniqueObjectCamera();
	void SetUniqueObjectCameraTriggerInfo(bool Flag_in, const struct FCameraTriggerInfo& Trigger_info_in);
	void SetUniqueObjectCameraRemoteOption(bool Flag_in);
	void ResetUniqueObjectCamera();
	void SetUniqueScaleChange(bool FlagIn, class UCurveFloat* CurveIn);
	void UpdateUniqueScaleChange();
	void ResetUniqueScaleChange();
	void CheckUniqueReboundHeight();
	void SearchEnemyTargetActorFix();
	void TraceMultiCapsule(const struct FVector& Pos_in, float Offset_up_in, float Offset_dn_in, float Radius_in, bool* Return, float* Hit_height);
	void GetSocketPlayerTransform(struct FTransform* Return);
	void InitUniqueRideCapsule(class UCapsuleComponent* Capsule_in, float Radius_in, float Half_height_in, const struct FRotator& Rot_in);
	void SetUniqueRideCapsule(bool Flag_in);
	void UpdateUniqueRideCapsule();
	void SetUniqueRideCapsuleCollision(ECollisionEnabled Collision_in, bool Simulate_in, bool Gravity_in);
	void SetUniqueRideCapsuleLocationRotation(const struct FVector& Location_in, const struct FRotator& Rotation_in, bool Teleport_in);
	void SetUniqueRideCapsuleShape(bool Flag_in);
	void GetSocketCapsuleTransform(struct FTransform* Return);
	void SetPlayerFlying(bool Flag_in);
	void GetUniqueObjectCameraParameter(struct FCameraUniqueObjectParameter* Return_);
	void SetMeshCompHitUnqObj(class UPrimitiveComponent* Prim_comp_in, const struct FVector& Normal_in, const struct FHitResult& Hit_result_in);
	void SetClearDelayDeathWait(bool FlagIn, float WaitTimeIn);
	void UpdateClearDelayDeathWait();
	void SetOwnerLocationRotation(const struct FVector& Location_in, const struct FRotator& Rotation_in, bool Sweep_in, bool Add_capsule_height_in);
	void SetUniqueRideCapsuleHit(class UPrimitiveComponent* Prim_comp_in, const struct FVector& Hit_normal_in, const struct FHitResult& Hit_result_in);
	void CheckAchievementThrowObject(bool* Return);
	void SetAchievementUniqueInput(bool Force_in);
	void CheckAchievementUniqueInput(bool* Return);
	void SetUniquePressLiftUp(bool Flag_in);
	void SetUniquePressLiftUpParameter(class UCurveFloat* Lift_up_curve_in);
	void GetAttackDirectionUnqObj(bool* Return, struct FVector* Direction);
	void SetDuelType(bool Duel_type_in, bool* Return);
	void SetCallEndUniqueObjectStateWait(bool FlagIn, float WaitTimeIn);
	void UpdateCallEndUniqueObjectStateWait();
	void PrevEventCancel();
	void PostEventCancel();
	void StartEventCancel();
	void EndEventCancel();
	void SetInputReserve(bool Flag_in, bool Reserve_wait_in, bool Skip_auto_off_in, bool Use_reserve_button, EPsychicObjectUniqueInputButton Reserve_button_in, EPsychicObjectUniqueInputType Reserve_type_in);
	void UpdateInputReserve();
	void ClearInputReserveWait();
	void SetInputSuccessDelay(bool Flag_in, float Time_in);
	void SetEventCancelInputDelay();
	void SetLockInputMode(bool Flag_in);
	void InitialSkeletalMeshParam();
	void SetSkeletalMeshParam(bool Flag_in, class FName Ref_name_in);
	void SetSimulateControlAwakeUnqObj();
	void ClearInputReserveSkipAutoOff();
	void SetInputWaitTime(int32 IndexIn);
	void GetMaterialParameterMeshList(TArray<class ABP_PsychicObjectBasic_C*>& Child_list_in, TArray<class UMeshComponent*>* Mesh_list);
	void SetEventSetting(bool Event_start_in);
	void SetUniquePressFailure();
	void CancelSAS();
	void NeedsEndSASCutin(bool* bNeedsEndCutin);
	void ForceWarpPartyMember();

	void GetUniqueObjectPlayerMontage(EPsychicObjectUniqueMontageIndex MontageIndexIn, bool bLeft, bool bMaleHero, class UAnimMontage** Montage) const;
	void GetUniqueCaptureTime(TArray<float>* CaptureTimeList) const;
	void GetAttackCountMontageIndex(EPsychicObjectUniqueMontageIndex* Montage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UniqueObjectComponentBase_C">();
	}
	static class UBP_UniqueObjectComponentBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UniqueObjectComponentBase_C>();
	}
};
static_assert(alignof(UBP_UniqueObjectComponentBase_C) == 0x000008, "Wrong alignment on UBP_UniqueObjectComponentBase_C");
static_assert(sizeof(UBP_UniqueObjectComponentBase_C) == 0x000AA8, "Wrong size on UBP_UniqueObjectComponentBase_C");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PsyCompMain) == 0x0000C0, "Member 'UBP_UniqueObjectComponentBase_C::PsyCompMain' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PsyObjComp) == 0x0000C8, "Member 'UBP_UniqueObjectComponentBase_C::PsyObjComp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UnqObjParameter) == 0x0000D0, "Member 'UBP_UniqueObjectComponentBase_C::UnqObjParameter' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWaitNotify) == 0x000100, "Member 'UBP_UniqueObjectComponentBase_C::bInputWaitNotify' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputDelayTime) == 0x000104, "Member 'UBP_UniqueObjectComponentBase_C::InputDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputWaitTime) == 0x000108, "Member 'UBP_UniqueObjectComponentBase_C::InputWaitTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputDilationRate) == 0x00010C, "Member 'UBP_UniqueObjectComponentBase_C::InputDilationRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWait) == 0x000110, "Member 'UBP_UniqueObjectComponentBase_C::bInputWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputPause) == 0x000111, "Member 'UBP_UniqueObjectComponentBase_C::bInputPause' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWaitEnable) == 0x000112, "Member 'UBP_UniqueObjectComponentBase_C::bInputWaitEnable' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWaitCancel) == 0x000113, "Member 'UBP_UniqueObjectComponentBase_C::bInputWaitCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCallUniqueInputStart) == 0x000114, "Member 'UBP_UniqueObjectComponentBase_C::bCallUniqueInputStart' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputSuccess) == 0x000115, "Member 'UBP_UniqueObjectComponentBase_C::bInputSuccess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputSuccessWaitAttack) == 0x000116, "Member 'UBP_UniqueObjectComponentBase_C::bInputSuccessWaitAttack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputFailure) == 0x000117, "Member 'UBP_UniqueObjectComponentBase_C::bInputFailure' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputCancel) == 0x000118, "Member 'UBP_UniqueObjectComponentBase_C::bInputCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputCancelSkip) == 0x000119, "Member 'UBP_UniqueObjectComponentBase_C::bInputCancelSkip' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputDelay) == 0x00011A, "Member 'UBP_UniqueObjectComponentBase_C::bInputDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bRequestAsyncInputDelay) == 0x00011B, "Member 'UBP_UniqueObjectComponentBase_C::bRequestAsyncInputDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAsyncInputDelay) == 0x00011C, "Member 'UBP_UniqueObjectComponentBase_C::bAsyncInputDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputDelayTimer) == 0x000120, "Member 'UBP_UniqueObjectComponentBase_C::InputDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bRequestAsyncInputWait) == 0x00012C, "Member 'UBP_UniqueObjectComponentBase_C::bRequestAsyncInputWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAsyncInputWait) == 0x00012D, "Member 'UBP_UniqueObjectComponentBase_C::bAsyncInputWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWaitSkipUpdateTimer) == 0x00012E, "Member 'UBP_UniqueObjectComponentBase_C::bInputWaitSkipUpdateTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputWaitTimer) == 0x000130, "Member 'UBP_UniqueObjectComponentBase_C::InputWaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputTimeDilationRate) == 0x00013C, "Member 'UBP_UniqueObjectComponentBase_C::InputTimeDilationRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputTimeDailtionName) == 0x000140, "Member 'UBP_UniqueObjectComponentBase_C::InputTimeDailtionName' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueAttackInputSignOld) == 0x000150, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueAttackInputSignOld' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueAttackInputButton) == 0x000158, "Member 'UBP_UniqueObjectComponentBase_C::UniqueAttackInputButton' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueAttackIputType) == 0x000168, "Member 'UBP_UniqueObjectComponentBase_C::UniqueAttackIputType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueAttackInputSuccess) == 0x000178, "Member 'UBP_UniqueObjectComponentBase_C::UniqueAttackInputSuccess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCheckInputReturn) == 0x000188, "Member 'UBP_UniqueObjectComponentBase_C::bCheckInputReturn' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCheckInputSuccess) == 0x000189, "Member 'UBP_UniqueObjectComponentBase_C::bCheckInputSuccess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bLastThrow) == 0x00018A, "Member 'UBP_UniqueObjectComponentBase_C::bLastThrow' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDelayDeath) == 0x00018B, "Member 'UBP_UniqueObjectComponentBase_C::bDelayDeath' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, DelayDeathTime) == 0x00018C, "Member 'UBP_UniqueObjectComponentBase_C::DelayDeathTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, DelayDeathTimer) == 0x000190, "Member 'UBP_UniqueObjectComponentBase_C::DelayDeathTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bRequestAsyncCommon) == 0x00019C, "Member 'UBP_UniqueObjectComponentBase_C::bRequestAsyncCommon' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAsyncCommon) == 0x00019D, "Member 'UBP_UniqueObjectComponentBase_C::bAsyncCommon' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputObject) == 0x00019E, "Member 'UBP_UniqueObjectComponentBase_C::bInputObject' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CommonFlag) == 0x0001A0, "Member 'UBP_UniqueObjectComponentBase_C::CommonFlag' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputStep) == 0x0001B0, "Member 'UBP_UniqueObjectComponentBase_C::InputStep' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputSectorMax) == 0x0001B4, "Member 'UBP_UniqueObjectComponentBase_C::InputSectorMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputSector) == 0x0001B8, "Member 'UBP_UniqueObjectComponentBase_C::InputSector' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputStepDir) == 0x0001BC, "Member 'UBP_UniqueObjectComponentBase_C::bInputStepDir' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeRapid) == 0x0001BD, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeRapid' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRapidMax) == 0x0001C0, "Member 'UBP_UniqueObjectComponentBase_C::InputRapidMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRapidCount) == 0x0001C4, "Member 'UBP_UniqueObjectComponentBase_C::InputRapidCount' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputEnableTime) == 0x0001C8, "Member 'UBP_UniqueObjectComponentBase_C::bInputEnableTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputEnableTime) == 0x0001CC, "Member 'UBP_UniqueObjectComponentBase_C::InputEnableTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputEnableTimer) == 0x0001D0, "Member 'UBP_UniqueObjectComponentBase_C::InputEnableTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputSetting) == 0x0001DC, "Member 'UBP_UniqueObjectComponentBase_C::bInputSetting' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputIndex) == 0x0001E0, "Member 'UBP_UniqueObjectComponentBase_C::InputIndex' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputMax) == 0x0001E4, "Member 'UBP_UniqueObjectComponentBase_C::InputMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputGuide) == 0x0001E8, "Member 'UBP_UniqueObjectComponentBase_C::bInputGuide' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputGuidePos) == 0x0001E9, "Member 'UBP_UniqueObjectComponentBase_C::bInputGuidePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputGuidePos) == 0x0001EC, "Member 'UBP_UniqueObjectComponentBase_C::InputGuidePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GuideTargetRateInput) == 0x0001F8, "Member 'UBP_UniqueObjectComponentBase_C::GuideTargetRateInput' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GuideTargetRateAttack) == 0x0001FC, "Member 'UBP_UniqueObjectComponentBase_C::GuideTargetRateAttack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGuideDirectInput) == 0x000200, "Member 'UBP_UniqueObjectComponentBase_C::bGuideDirectInput' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGuideDirectAttack) == 0x000201, "Member 'UBP_UniqueObjectComponentBase_C::bGuideDirectAttack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGuideDirectInputProc) == 0x000202, "Member 'UBP_UniqueObjectComponentBase_C::bGuideDirectInputProc' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGuideDirectAttackProc) == 0x000203, "Member 'UBP_UniqueObjectComponentBase_C::bGuideDirectAttackProc' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputGuideAutoOff) == 0x000204, "Member 'UBP_UniqueObjectComponentBase_C::bInputGuideAutoOff' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputGuideToWait) == 0x000205, "Member 'UBP_UniqueObjectComponentBase_C::bInputGuideToWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGuideUseActorPos) == 0x000206, "Member 'UBP_UniqueObjectComponentBase_C::bGuideUseActorPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GuideLerpTimeInput) == 0x000208, "Member 'UBP_UniqueObjectComponentBase_C::GuideLerpTimeInput' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GuideLerpTimeAttack) == 0x00020C, "Member 'UBP_UniqueObjectComponentBase_C::GuideLerpTimeAttack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputExtra) == 0x000210, "Member 'UBP_UniqueObjectComponentBase_C::bInputExtra' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputExtraProc) == 0x000211, "Member 'UBP_UniqueObjectComponentBase_C::bInputExtraProc' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputExtraFirst) == 0x000212, "Member 'UBP_UniqueObjectComponentBase_C::bInputExtraFirst' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputExtraTime) == 0x000214, "Member 'UBP_UniqueObjectComponentBase_C::InputExtraTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputExtraTimeTotal) == 0x000218, "Member 'UBP_UniqueObjectComponentBase_C::InputExtraTimeTotal' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputExtraTimer) == 0x00021C, "Member 'UBP_UniqueObjectComponentBase_C::InputExtraTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDbPrintInputExtra) == 0x000228, "Member 'UBP_UniqueObjectComponentBase_C::bDbPrintInputExtra' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDbPrintInputRotate) == 0x000229, "Member 'UBP_UniqueObjectComponentBase_C::bDbPrintInputRotate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDbPrintAttackCheck) == 0x00022A, "Member 'UBP_UniqueObjectComponentBase_C::bDbPrintAttackCheck' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDbPrintCancel) == 0x00022B, "Member 'UBP_UniqueObjectComponentBase_C::bDbPrintCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDbCheckDestroy) == 0x00022C, "Member 'UBP_UniqueObjectComponentBase_C::bDbCheckDestroy' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugDrawUniqueRideCapsule) == 0x00022D, "Member 'UBP_UniqueObjectComponentBase_C::bDebugDrawUniqueRideCapsule' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugDrawUniqueRideLocRot) == 0x00022E, "Member 'UBP_UniqueObjectComponentBase_C::bDebugDrawUniqueRideLocRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugDrawInputWait) == 0x00022F, "Member 'UBP_UniqueObjectComponentBase_C::bDebugDrawInputWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugPrintFloatSuspension) == 0x000230, "Member 'UBP_UniqueObjectComponentBase_C::bDebugPrintFloatSuspension' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeHold) == 0x000231, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeHold' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCheckInputHold) == 0x000232, "Member 'UBP_UniqueObjectComponentBase_C::bCheckInputHold' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputMoveMouse) == 0x000233, "Member 'UBP_UniqueObjectComponentBase_C::bInputMoveMouse' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputStickTriggerLt) == 0x000234, "Member 'UBP_UniqueObjectComponentBase_C::bInputStickTriggerLt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputStickTriggerRt) == 0x000235, "Member 'UBP_UniqueObjectComponentBase_C::bInputStickTriggerRt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputExtraCancel) == 0x000236, "Member 'UBP_UniqueObjectComponentBase_C::bInputExtraCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRebound) == 0x000237, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRebound' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueReboundTargetBase) == 0x000238, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueReboundTargetBase' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueReboundTargetTop) == 0x000239, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueReboundTargetTop' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueReboundPosOffset) == 0x00023C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueReboundPosOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueReboundPos) == 0x000248, "Member 'UBP_UniqueObjectComponentBase_C::UniqueReboundPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueReboundDirection) == 0x000254, "Member 'UBP_UniqueObjectComponentBase_C::UniqueReboundDirection' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputDelayToGuide) == 0x000260, "Member 'UBP_UniqueObjectComponentBase_C::bInputDelayToGuide' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputDelayCancel) == 0x000261, "Member 'UBP_UniqueObjectComponentBase_C::bInputDelayCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDelayDeathCheckHitOld) == 0x000262, "Member 'UBP_UniqueObjectComponentBase_C::bDelayDeathCheckHitOld' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeRotate) == 0x000263, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeRotate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGuideCheckHit) == 0x000264, "Member 'UBP_UniqueObjectComponentBase_C::bGuideCheckHit' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GuideHitCheckTime) == 0x000268, "Member 'UBP_UniqueObjectComponentBase_C::GuideHitCheckTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GuideHitCheckTimer) == 0x00026C, "Member 'UBP_UniqueObjectComponentBase_C::GuideHitCheckTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAttackCheck) == 0x000278, "Member 'UBP_UniqueObjectComponentBase_C::bAttackCheck' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bHitTarget) == 0x000279, "Member 'UBP_UniqueObjectComponentBase_C::bHitTarget' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bHitTargetSingle) == 0x00027A, "Member 'UBP_UniqueObjectComponentBase_C::bHitTargetSingle' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bNextAttackUnique) == 0x00027B, "Member 'UBP_UniqueObjectComponentBase_C::bNextAttackUnique' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAnimNotifyFirstAttack) == 0x00027C, "Member 'UBP_UniqueObjectComponentBase_C::bAnimNotifyFirstAttack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAttackCheckSkip) == 0x00027D, "Member 'UBP_UniqueObjectComponentBase_C::bAttackCheckSkip' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackCheckTime) == 0x000280, "Member 'UBP_UniqueObjectComponentBase_C::AttackCheckTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackCheckTimer) == 0x000284, "Member 'UBP_UniqueObjectComponentBase_C::AttackCheckTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputExtraSkipTimeDilation) == 0x000290, "Member 'UBP_UniqueObjectComponentBase_C::InputExtraSkipTimeDilation' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputExtraSkipPostProcess) == 0x000291, "Member 'UBP_UniqueObjectComponentBase_C::InputExtraSkipPostProcess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWaitSkipTimeDilation) == 0x000292, "Member 'UBP_UniqueObjectComponentBase_C::bInputWaitSkipTimeDilation' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputWaitSkipPostProcess) == 0x000293, "Member 'UBP_UniqueObjectComponentBase_C::bInputWaitSkipPostProcess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeRepeat) == 0x000294, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeRepeat' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeRepeatFirst) == 0x000295, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeRepeatFirst' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRepeatMax) == 0x000298, "Member 'UBP_UniqueObjectComponentBase_C::InputRepeatMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRepeatCount) == 0x00029C, "Member 'UBP_UniqueObjectComponentBase_C::InputRepeatCount' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bLinearDamp) == 0x0002A0, "Member 'UBP_UniqueObjectComponentBase_C::bLinearDamp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, LinearDampBackUp) == 0x0002A4, "Member 'UBP_UniqueObjectComponentBase_C::LinearDampBackUp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, LinearDampValue) == 0x0002A8, "Member 'UBP_UniqueObjectComponentBase_C::LinearDampValue' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, LinearDampTime) == 0x0002AC, "Member 'UBP_UniqueObjectComponentBase_C::LinearDampTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, LinearDampTimer) == 0x0002B0, "Member 'UBP_UniqueObjectComponentBase_C::LinearDampTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackRowNameKey) == 0x0002C0, "Member 'UBP_UniqueObjectComponentBase_C::AttackRowNameKey' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackRowNameList) == 0x0002D0, "Member 'UBP_UniqueObjectComponentBase_C::AttackRowNameList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackInfoIndex) == 0x0002E0, "Member 'UBP_UniqueObjectComponentBase_C::AttackInfoIndex' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackCommonInfoList) == 0x0002E8, "Member 'UBP_UniqueObjectComponentBase_C::AttackCommonInfoList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackSkillInfoList) == 0x0002F8, "Member 'UBP_UniqueObjectComponentBase_C::AttackSkillInfoList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackInfoList) == 0x000308, "Member 'UBP_UniqueObjectComponentBase_C::AttackInfoList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputLeftType) == 0x000318, "Member 'UBP_UniqueObjectComponentBase_C::InputLeftType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputCentreType) == 0x000319, "Member 'UBP_UniqueObjectComponentBase_C::InputCentreType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRightType) == 0x00031A, "Member 'UBP_UniqueObjectComponentBase_C::InputRightType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputLeftButton) == 0x00031B, "Member 'UBP_UniqueObjectComponentBase_C::InputLeftButton' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputCentreButton) == 0x00031C, "Member 'UBP_UniqueObjectComponentBase_C::InputCentreButton' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRightButton) == 0x00031D, "Member 'UBP_UniqueObjectComponentBase_C::InputRightButton' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, MontageCancel) == 0x000320, "Member 'UBP_UniqueObjectComponentBase_C::MontageCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePress) == 0x000328, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePress' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressHit) == 0x000329, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressHit' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressTargetLocation) == 0x00032A, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressFixHeight) == 0x00032B, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressFixHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressTraceHeight) == 0x00032C, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressTraceHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressUpdateHeight) == 0x00032D, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressUpdateHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressPosCurve) == 0x000330, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressPosCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressHeightRange) == 0x000338, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressHeightRange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressHeightRange) == 0x00033C, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressHeightRange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressHeight) == 0x000340, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressRotLerpTime) == 0x000344, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressRotLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressTimer) == 0x000348, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressRotTimer) == 0x000354, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressRotTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressHeightStt) == 0x000360, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressHeightStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressHeightEnd) == 0x000364, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressHeightEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WorkLerpPosStt) == 0x000368, "Member 'UBP_UniqueObjectComponentBase_C::WorkLerpPosStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WorkLerpRotStt) == 0x000374, "Member 'UBP_UniqueObjectComponentBase_C::WorkLerpRotStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WorkLerpPosEnd) == 0x000380, "Member 'UBP_UniqueObjectComponentBase_C::WorkLerpPosEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WorkLerpRotEnd) == 0x00038C, "Member 'UBP_UniqueObjectComponentBase_C::WorkLerpRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WorkObjPos) == 0x000398, "Member 'UBP_UniqueObjectComponentBase_C::WorkObjPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WorkObjRot) == 0x0003A4, "Member 'UBP_UniqueObjectComponentBase_C::WorkObjRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueExplosion) == 0x0003B0, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueExplosion' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueExplosionTime) == 0x0003B4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueExplosionTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueExplosionRadius) == 0x0003B8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueExplosionRadius' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueExplosionTimer) == 0x0003BC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueExplosionTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bWaitAttackNotify) == 0x0003C8, "Member 'UBP_UniqueObjectComponentBase_C::bWaitAttackNotify' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressPos) == 0x0003CC, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressVibrate) == 0x0003D8, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressVibrate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressVibrateLoop) == 0x0003D9, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressVibrateLoop' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressVibrateLoopProc) == 0x0003DA, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressVibrateLoopProc' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopCurve) == 0x0003E0, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopScale) == 0x0003E8, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopScale' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopTimer) == 0x0003F4, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopTime) == 0x0003F8, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopTimeRate) == 0x0003FC, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopTimeRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressVibrateLoopHit) == 0x000400, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressVibrateLoopHit' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopHitTimer) == 0x000404, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopHitTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopHitScale) == 0x000410, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopHitScale' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopHitTimeRate) == 0x00041C, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopHitTimeRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateLoopHitTime) == 0x000420, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateLoopHitTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUseNewCancel) == 0x000424, "Member 'UBP_UniqueObjectComponentBase_C::bUseNewCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUseNewFailure) == 0x000425, "Member 'UBP_UniqueObjectComponentBase_C::bUseNewFailure' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueBend) == 0x000426, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueBend' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueBendProc) == 0x000427, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueBendProc' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueBendSelf) == 0x000428, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueBendSelf' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueBended) == 0x000429, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueBended' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendAngleCurve) == 0x000430, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendAngleCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendAngleRate) == 0x000438, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendAngleRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendTimeRate) == 0x00043C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendTimeRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendTimer) == 0x000440, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendTime) == 0x00044C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendRate) == 0x000450, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendHeightMax) == 0x000454, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendHeightMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendHeight) == 0x000458, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendAxis) == 0x00045C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendAxis' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendPos) == 0x000468, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendPosOffsetStt) == 0x000474, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendPosOffsetStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendPosOffsetEnd) == 0x000480, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendPosOffsetEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendRotStt) == 0x00048C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendRotStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendRotEnd) == 0x000498, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendRotEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueBendRot) == 0x0004A4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueBendRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UnqObjStateEnemyList) == 0x0004B0, "Member 'UBP_UniqueObjectComponentBase_C::UnqObjStateEnemyList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressVibrateDir) == 0x0004C0, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressVibrateDir' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateTimeMin) == 0x0004C4, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateTimeMin' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateTimeMax) == 0x0004C8, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateTimeMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateSpeedMin) == 0x0004CC, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateSpeedMin' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateSpeedMax) == 0x0004D0, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateSpeed) == 0x0004D4, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateRangeMin) == 0x0004D8, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateRangeMax) == 0x0004DC, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateRange) == 0x0004E0, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateRange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateTimer) == 0x0004E4, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateOffset) == 0x0004F0, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressVibrateOffset2) == 0x0004F4, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressVibrateOffset2' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, DamageMaterialValueList) == 0x000500, "Member 'UBP_UniqueObjectComponentBase_C::DamageMaterialValueList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, DamageMaterialLevel) == 0x000510, "Member 'UBP_UniqueObjectComponentBase_C::DamageMaterialLevel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CameraOwner) == 0x000518, "Member 'UBP_UniqueObjectComponentBase_C::CameraOwner' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CameraRowName) == 0x000520, "Member 'UBP_UniqueObjectComponentBase_C::CameraRowName' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CameraParameter) == 0x000528, "Member 'UBP_UniqueObjectComponentBase_C::CameraParameter' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueObjectCameraParameter) == 0x000560, "Member 'UBP_UniqueObjectComponentBase_C::UniqueObjectCameraParameter' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraTypeNormal) == 0x0005B8, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraTypeNormal' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraTypeSocket) == 0x0005B9, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraTypeSocket' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraTypeControl) == 0x0005BA, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraTypeControl' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraTypeRemote) == 0x0005BB, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraTypeRemote' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraTriggerInfo) == 0x0005BC, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraTriggerInfo' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraBackupRootLerp) == 0x0005BD, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraBackupRootLerp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraBackupLockRoot) == 0x0005BE, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraBackupLockRoot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraResetTime) == 0x0005C0, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraResetTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraSideIndex) == 0x0005C4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraSideIndex' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraTargetPos) == 0x0005C8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraTargetPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraCheck) == 0x0005D4, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraCheck' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeDuel) == 0x0005D5, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeDuel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeControl) == 0x0005D6, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeControl' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDelayDeathCheckSuccess) == 0x0005D7, "Member 'UBP_UniqueObjectComponentBase_C::bDelayDeathCheckSuccess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDelayDeathCheckLastHit) == 0x0005D8, "Member 'UBP_UniqueObjectComponentBase_C::bDelayDeathCheckLastHit' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDelayDeathCheckSkip) == 0x0005D9, "Member 'UBP_UniqueObjectComponentBase_C::bDelayDeathCheckSkip' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, WeightGaugePosOffset) == 0x0005DC, "Member 'UBP_UniqueObjectComponentBase_C::WeightGaugePosOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCapturePos) == 0x0005E8, "Member 'UBP_UniqueObjectComponentBase_C::bCapturePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CapturePosCurve) == 0x0005F0, "Member 'UBP_UniqueObjectComponentBase_C::CapturePosCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CapturePosRate) == 0x0005F8, "Member 'UBP_UniqueObjectComponentBase_C::CapturePosRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CapturePosOffset) == 0x000604, "Member 'UBP_UniqueObjectComponentBase_C::CapturePosOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCaptureVibratePos) == 0x000610, "Member 'UBP_UniqueObjectComponentBase_C::bCaptureVibratePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CaptureVibratePosCurve) == 0x000618, "Member 'UBP_UniqueObjectComponentBase_C::CaptureVibratePosCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CaptureVibratePosRate) == 0x000620, "Member 'UBP_UniqueObjectComponentBase_C::CaptureVibratePosRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CaptureVibratePosOffset) == 0x00062C, "Member 'UBP_UniqueObjectComponentBase_C::CaptureVibratePosOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCaptureVibrateRot) == 0x000638, "Member 'UBP_UniqueObjectComponentBase_C::bCaptureVibrateRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CaptureVibrateRotCurve) == 0x000640, "Member 'UBP_UniqueObjectComponentBase_C::CaptureVibrateRotCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CaptureVibrateRotRate) == 0x000648, "Member 'UBP_UniqueObjectComponentBase_C::CaptureVibrateRotRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CaptureVibrateRotOffset) == 0x000654, "Member 'UBP_UniqueObjectComponentBase_C::CaptureVibrateRotOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCaptureWaitAttack) == 0x000660, "Member 'UBP_UniqueObjectComponentBase_C::bCaptureWaitAttack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUseNewCommon) == 0x000661, "Member 'UBP_UniqueObjectComponentBase_C::bUseNewCommon' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGroundSlope) == 0x000662, "Member 'UBP_UniqueObjectComponentBase_C::bGroundSlope' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGroundSlopeNextLocation) == 0x000663, "Member 'UBP_UniqueObjectComponentBase_C::bGroundSlopeNextLocation' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGroundSlopeFailed) == 0x000664, "Member 'UBP_UniqueObjectComponentBase_C::bGroundSlopeFailed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGroundSlopeFloat) == 0x000665, "Member 'UBP_UniqueObjectComponentBase_C::bGroundSlopeFloat' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bGroundSlopeFall) == 0x000666, "Member 'UBP_UniqueObjectComponentBase_C::bGroundSlopeFall' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeOffsetList) == 0x000668, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeOffsetList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeFrontDirHz) == 0x000678, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeFrontDirHz' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeNormal) == 0x000684, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeNormal' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeLocation) == 0x000690, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeLocation' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeLocationNext) == 0x00069C, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeLocationNext' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRide) == 0x0006A8, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRide' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideSpeed) == 0x0006AC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideSpeedMax) == 0x0006B0, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideAccel) == 0x0006B4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideAccel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideDecel) == 0x0006B8, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideDecel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDecel) == 0x0006BC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDecel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideDecelStop) == 0x0006C0, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideDecelStop' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDecelStopTime) == 0x0006C4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDecelStopTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDecelStopTimer) == 0x0006C8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDecelStopTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDecelStopSpeedStt) == 0x0006D4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDecelStopSpeedStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDecelStopEaseFunction) == 0x0006D8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDecelStopEaseFunction' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDecelStopEaseBlendExp) == 0x0006DC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDecelStopEaseBlendExp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTurnSpeed) == 0x0006E0, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTurnSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTurnSpeedMax) == 0x0006E4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTurnSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTurnAccel) == 0x0006E8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTurnAccel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTurnDecel) == 0x0006EC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTurnDecel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTurnRate) == 0x0006F0, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTurnRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRidePos) == 0x0006F4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRidePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRidePosOffset) == 0x000700, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRidePosOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideRot) == 0x00070C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideCheckBg) == 0x000718, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideCheckBg' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideChkBgHit) == 0x000719, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideChkBgHit' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideChkBgAdjustPos) == 0x00071C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideChkBgAdjustPos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideChkBgAdjustAngle) == 0x000728, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideChkBgAdjustAngle' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputRotateFirst) == 0x00072C, "Member 'UBP_UniqueObjectComponentBase_C::bInputRotateFirst' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bThrowMontageCancelCheck) == 0x00072D, "Member 'UBP_UniqueObjectComponentBase_C::bThrowMontageCancelCheck' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bThrowMontageCancel) == 0x00072E, "Member 'UBP_UniqueObjectComponentBase_C::bThrowMontageCancel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, ThrowMontageCancelTimer) == 0x000730, "Member 'UBP_UniqueObjectComponentBase_C::ThrowMontageCancelTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, ThrowMontageCancelTime) == 0x00073C, "Member 'UBP_UniqueObjectComponentBase_C::ThrowMontageCancelTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueCameraHitLerp) == 0x000740, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueCameraHitLerp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraHitLerpTimer) == 0x000744, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraHitLerpTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraHitLerpTime) == 0x000750, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraHitLerpTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraHitLerpStt) == 0x000754, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraHitLerpStt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraHitLerpEnd) == 0x000758, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraHitLerpEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueCameraHitLerpEaseType) == 0x00075C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueCameraHitLerpEaseType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, SeCompInputGuage) == 0x000760, "Member 'UBP_UniqueObjectComponentBase_C::SeCompInputGuage' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bNewElectricPole) == 0x000768, "Member 'UBP_UniqueObjectComponentBase_C::bNewElectricPole' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDispHitDamageMesh) == 0x000769, "Member 'UBP_UniqueObjectComponentBase_C::bDispHitDamageMesh' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, HitDamageMeshList) == 0x000770, "Member 'UBP_UniqueObjectComponentBase_C::HitDamageMeshList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, HitBackupMesh) == 0x000780, "Member 'UBP_UniqueObjectComponentBase_C::HitBackupMesh' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCallUniqueObjectEnd) == 0x000788, "Member 'UBP_UniqueObjectComponentBase_C::bCallUniqueObjectEnd' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, SoundInputStart) == 0x000790, "Member 'UBP_UniqueObjectComponentBase_C::SoundInputStart' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, SoundInputRepeat) == 0x000798, "Member 'UBP_UniqueObjectComponentBase_C::SoundInputRepeat' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, SoundInputRotate) == 0x0007A0, "Member 'UBP_UniqueObjectComponentBase_C::SoundInputRotate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PlayerLerpAngleList) == 0x0007A8, "Member 'UBP_UniqueObjectComponentBase_C::PlayerLerpAngleList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PlayerLerpTraceDistance) == 0x0007B8, "Member 'UBP_UniqueObjectComponentBase_C::PlayerLerpTraceDistance' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PlayerLerpDistance) == 0x0007BC, "Member 'UBP_UniqueObjectComponentBase_C::PlayerLerpDistance' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, EnemyLerpDistance) == 0x0007C0, "Member 'UBP_UniqueObjectComponentBase_C::EnemyLerpDistance' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, EnemyLerpRate) == 0x0007C4, "Member 'UBP_UniqueObjectComponentBase_C::EnemyLerpRate' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideImpactOverWrite) == 0x0007C8, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideImpactOverWrite' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideImpactMass) == 0x0007CC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideImpactMass' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideObjMass) == 0x0007D0, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideObjMass' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideTimer) == 0x0007D4, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTimer) == 0x0007D8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideTime) == 0x0007E4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputTypeOneRepeat) == 0x0007E8, "Member 'UBP_UniqueObjectComponentBase_C::bInputTypeOneRepeat' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bFirstAttackThrow) == 0x0007E9, "Member 'UBP_UniqueObjectComponentBase_C::bFirstAttackThrow' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bSkipAddGauge) == 0x0007EA, "Member 'UBP_UniqueObjectComponentBase_C::bSkipAddGauge' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCallAddGaugeEnable) == 0x0007EB, "Member 'UBP_UniqueObjectComponentBase_C::bCallAddGaugeEnable' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bNewUnqObjCam) == 0x0007EC, "Member 'UBP_UniqueObjectComponentBase_C::bNewUnqObjCam' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CommonIndex) == 0x0007F0, "Member 'UBP_UniqueObjectComponentBase_C::CommonIndex' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bLookAtObjUseSelfDelay) == 0x000840, "Member 'UBP_UniqueObjectComponentBase_C::bLookAtObjUseSelfDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bLookAtObjEndDelay) == 0x000841, "Member 'UBP_UniqueObjectComponentBase_C::bLookAtObjEndDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueReboundInterpolationSpeed) == 0x000844, "Member 'UBP_UniqueObjectComponentBase_C::UniqueReboundInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeTraceUp) == 0x000848, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeTraceUp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, GroundSlopeTraceDn) == 0x00084C, "Member 'UBP_UniqueObjectComponentBase_C::GroundSlopeTraceDn' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDropSpeed) == 0x000850, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDropSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDropSpeedMax) == 0x000854, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDropSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDropAccel) == 0x000858, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDropAccel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideDropAccelSecond) == 0x00085C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideDropAccelSecond' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, SocketPlayerName) == 0x000860, "Member 'UBP_UniqueObjectComponentBase_C::SocketPlayerName' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugPrintGroundSlope) == 0x000868, "Member 'UBP_UniqueObjectComponentBase_C::bDebugPrintGroundSlope' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bEmKarenObj) == 0x000869, "Member 'UBP_UniqueObjectComponentBase_C::bEmKarenObj' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bHitTargetInvincible) == 0x00086A, "Member 'UBP_UniqueObjectComponentBase_C::bHitTargetInvincible' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueScaleChange) == 0x00086B, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueScaleChange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueScaleChangeTimer) == 0x00086C, "Member 'UBP_UniqueObjectComponentBase_C::UniqueScaleChangeTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bScaleChanged) == 0x000878, "Member 'UBP_UniqueObjectComponentBase_C::bScaleChanged' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueScaleChangeCurve) == 0x000880, "Member 'UBP_UniqueObjectComponentBase_C::UniqueScaleChangeCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, NowUniqueScaleValue) == 0x000888, "Member 'UBP_UniqueObjectComponentBase_C::NowUniqueScaleValue' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, BackupMeshCompScale) == 0x00088C, "Member 'UBP_UniqueObjectComponentBase_C::BackupMeshCompScale' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueScaleCurveMaxTime) == 0x000898, "Member 'UBP_UniqueObjectComponentBase_C::UniqueScaleCurveMaxTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueReboundCheckHeight) == 0x00089C, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueReboundCheckHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueReboundCheckHeightOffset) == 0x0008A0, "Member 'UBP_UniqueObjectComponentBase_C::UniqueReboundCheckHeightOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueReboundResultHeight) == 0x0008A4, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueReboundResultHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueReboundResultHeight) == 0x0008A8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueReboundResultHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, EmKarenEndUniqueObjectStateWaitTime) == 0x0008AC, "Member 'UBP_UniqueObjectComponentBase_C::EmKarenEndUniqueObjectStateWaitTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, EnemyTargetActorFixUniqueId) == 0x0008B0, "Member 'UBP_UniqueObjectComponentBase_C::EnemyTargetActorFixUniqueId' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsule) == 0x0008B8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsule' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideCapsule) == 0x0008C0, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideCapsule' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleRadius) == 0x0008C4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleHalfHeight) == 0x0008C8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleBaseRot) == 0x0008CC, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleBaseRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleRelativePos) == 0x0008D8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleRelativePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleRelativeRot) == 0x0008E4, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleRelativeRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UnqiueRideCapsuleOwnerCharaCollision) == 0x0008F0, "Member 'UBP_UniqueObjectComponentBase_C::UnqiueRideCapsuleOwnerCharaCollision' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UnqiueRideCapsuleOwnerCapCollision) == 0x0008F1, "Member 'UBP_UniqueObjectComponentBase_C::UnqiueRideCapsuleOwnerCapCollision' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideCapsuleApply) == 0x0008F2, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideCapsuleApply' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideCapsuleReset) == 0x0008F3, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideCapsuleReset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniqueRideCapsuleShape) == 0x0008F4, "Member 'UBP_UniqueObjectComponentBase_C::bUniqueRideCapsuleShape' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleShapePos) == 0x0008F8, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleShapePos' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueRideCapsuleShapeRot) == 0x000904, "Member 'UBP_UniqueObjectComponentBase_C::UniqueRideCapsuleShapeRot' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FlyingClaimantName) == 0x000910, "Member 'UBP_UniqueObjectComponentBase_C::FlyingClaimantName' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, ThrowMontageCancelBaseTime) == 0x000918, "Member 'UBP_UniqueObjectComponentBase_C::ThrowMontageCancelBaseTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniqueObjectCameraParameterCh0200) == 0x000920, "Member 'UBP_UniqueObjectComponentBase_C::UniqueObjectCameraParameterCh0200' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputRotateCheckFirst) == 0x000978, "Member 'UBP_UniqueObjectComponentBase_C::bInputRotateCheckFirst' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputRotateCheckMouse) == 0x000979, "Member 'UBP_UniqueObjectComponentBase_C::bInputRotateCheckMouse' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputRotateKbStep) == 0x00097C, "Member 'UBP_UniqueObjectComponentBase_C::InputRotateKbStep' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputRotateKbStepLt) == 0x000980, "Member 'UBP_UniqueObjectComponentBase_C::bInputRotateKbStepLt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputRotateKbStepRt) == 0x000981, "Member 'UBP_UniqueObjectComponentBase_C::bInputRotateKbStepRt' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputUIKeyboardType) == 0x000982, "Member 'UBP_UniqueObjectComponentBase_C::bInputUIKeyboardType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bClearDelayDeathWait) == 0x000983, "Member 'UBP_UniqueObjectComponentBase_C::bClearDelayDeathWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, ClearDelayDeathWaitTimer) == 0x000984, "Member 'UBP_UniqueObjectComponentBase_C::ClearDelayDeathWaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCheckEnemyLerp) == 0x000990, "Member 'UBP_UniqueObjectComponentBase_C::bCheckEnemyLerp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bAchievementCheckUniqueInput) == 0x000991, "Member 'UBP_UniqueObjectComponentBase_C::bAchievementCheckUniqueInput' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, AttackCapsuleOffsetUnq) == 0x000994, "Member 'UBP_UniqueObjectComponentBase_C::AttackCapsuleOffsetUnq' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressHandle) == 0x0009A0, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressHandle' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressHandleApply) == 0x0009A1, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressHandleApply' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressHandleOffset) == 0x0009A4, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressHandleOffset' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, EffectUniqueHitCopyMaterialIndexList) == 0x0009B0, "Member 'UBP_UniqueObjectComponentBase_C::EffectUniqueHitCopyMaterialIndexList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, EffectUniqueHitTargetMaterialIndexList) == 0x0009C0, "Member 'UBP_UniqueObjectComponentBase_C::EffectUniqueHitTargetMaterialIndexList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUniquePressLiftUp) == 0x0009D0, "Member 'UBP_UniqueObjectComponentBase_C::bUniquePressLiftUp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressLiftUpCurve) == 0x0009D8, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressLiftUpCurve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressLiftUpTimer) == 0x0009E0, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressLiftUpTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, RespawnRestrictRadiusUq) == 0x0009EC, "Member 'UBP_UniqueObjectComponentBase_C::RespawnRestrictRadiusUq' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PlayerPullDistance) == 0x0009F0, "Member 'UBP_UniqueObjectComponentBase_C::PlayerPullDistance' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, PlayerPullMoveDistMax) == 0x0009F4, "Member 'UBP_UniqueObjectComponentBase_C::PlayerPullMoveDistMax' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCallEndUniqueObjectStateWait) == 0x0009F8, "Member 'UBP_UniqueObjectComponentBase_C::bCallEndUniqueObjectStateWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CallEndUniqueObjectStateWaitTimer) == 0x0009FC, "Member 'UBP_UniqueObjectComponentBase_C::CallEndUniqueObjectStateWaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bEventCancelEnable) == 0x000A08, "Member 'UBP_UniqueObjectComponentBase_C::bEventCancelEnable' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputReserve) == 0x000A09, "Member 'UBP_UniqueObjectComponentBase_C::bInputReserve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputReserveSuccess) == 0x000A0A, "Member 'UBP_UniqueObjectComponentBase_C::bInputReserveSuccess' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputReserveWait) == 0x000A0B, "Member 'UBP_UniqueObjectComponentBase_C::bInputReserveWait' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputReserveSkipAutoOff) == 0x000A0C, "Member 'UBP_UniqueObjectComponentBase_C::bInputReserveSkipAutoOff' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUseInputReserveButton) == 0x000A0D, "Member 'UBP_UniqueObjectComponentBase_C::bUseInputReserveButton' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputReserveType) == 0x000A0E, "Member 'UBP_UniqueObjectComponentBase_C::InputReserveType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputReserveButton) == 0x000A0F, "Member 'UBP_UniqueObjectComponentBase_C::InputReserveButton' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputSuccessDelay) == 0x000A10, "Member 'UBP_UniqueObjectComponentBase_C::bInputSuccessDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputSuccessReserve) == 0x000A11, "Member 'UBP_UniqueObjectComponentBase_C::bInputSuccessReserve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputReserveDelaytime) == 0x000A14, "Member 'UBP_UniqueObjectComponentBase_C::InputReserveDelaytime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputReserveDelayTimer) == 0x000A18, "Member 'UBP_UniqueObjectComponentBase_C::InputReserveDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugPrintInputReserve) == 0x000A24, "Member 'UBP_UniqueObjectComponentBase_C::bDebugPrintInputReserve' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bEventCancelInputDelay) == 0x000A25, "Member 'UBP_UniqueObjectComponentBase_C::bEventCancelInputDelay' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputSuccessDelayTime) == 0x000A28, "Member 'UBP_UniqueObjectComponentBase_C::InputSuccessDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputSuccessDelayTimer) == 0x000A2C, "Member 'UBP_UniqueObjectComponentBase_C::InputSuccessDelayTimer' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCaptureSkipLookAtObj) == 0x000A38, "Member 'UBP_UniqueObjectComponentBase_C::bCaptureSkipLookAtObj' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bCaptureCancelSas) == 0x000A39, "Member 'UBP_UniqueObjectComponentBase_C::bCaptureCancelSas' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatDampLimit) == 0x000A3C, "Member 'UBP_UniqueObjectComponentBase_C::FloatDampLimit' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatDampRange) == 0x000A40, "Member 'UBP_UniqueObjectComponentBase_C::FloatDampRange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatDampCoefficients) == 0x000A44, "Member 'UBP_UniqueObjectComponentBase_C::FloatDampCoefficients' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatDampEaseBlendExp) == 0x000A48, "Member 'UBP_UniqueObjectComponentBase_C::FloatDampEaseBlendExp' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatSpringRange) == 0x000A4C, "Member 'UBP_UniqueObjectComponentBase_C::FloatSpringRange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bFloatInertia) == 0x000A50, "Member 'UBP_UniqueObjectComponentBase_C::bFloatInertia' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatInertia) == 0x000A54, "Member 'UBP_UniqueObjectComponentBase_C::FloatInertia' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatInertiaCoefficients) == 0x000A58, "Member 'UBP_UniqueObjectComponentBase_C::FloatInertiaCoefficients' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, FloatInertiaPrevHeight) == 0x000A5C, "Member 'UBP_UniqueObjectComponentBase_C::FloatInertiaPrevHeight' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bUseFloatSuspension) == 0x000A60, "Member 'UBP_UniqueObjectComponentBase_C::bUseFloatSuspension' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputModeAutoLock) == 0x000A61, "Member 'UBP_UniqueObjectComponentBase_C::bInputModeAutoLock' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bDebugPrintAutoLockInputMode) == 0x000A62, "Member 'UBP_UniqueObjectComponentBase_C::bDebugPrintAutoLockInputMode' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputModeAutoSkip) == 0x000A63, "Member 'UBP_UniqueObjectComponentBase_C::bInputModeAutoSkip' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bSkeletonUpdateEnable) == 0x000A64, "Member 'UBP_UniqueObjectComponentBase_C::bSkeletonUpdateEnable' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bNoSkeletonUpdateUq) == 0x000A65, "Member 'UBP_UniqueObjectComponentBase_C::bNoSkeletonUpdateUq' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, SkeletonUpdateRefList) == 0x000A68, "Member 'UBP_UniqueObjectComponentBase_C::SkeletonUpdateRefList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, InputWaitTimeList) == 0x000A78, "Member 'UBP_UniqueObjectComponentBase_C::InputWaitTimeList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bSkipPsychicObjectUse) == 0x000A88, "Member 'UBP_UniqueObjectComponentBase_C::bSkipPsychicObjectUse' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, UniquePressTraceRadius) == 0x000A8C, "Member 'UBP_UniqueObjectComponentBase_C::UniquePressTraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, CancelSasList) == 0x000A90, "Member 'UBP_UniqueObjectComponentBase_C::CancelSasList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bInputMoveMouseValue) == 0x000AA0, "Member 'UBP_UniqueObjectComponentBase_C::bInputMoveMouseValue' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bEnableInputMouseIcon) == 0x000AA1, "Member 'UBP_UniqueObjectComponentBase_C::bEnableInputMouseIcon' has a wrong offset!");
static_assert(offsetof(UBP_UniqueObjectComponentBase_C, bSelfCallUnqObjEnd) == 0x000AA2, "Member 'UBP_UniqueObjectComponentBase_C::bSelfCallUnqObjEnd' has a wrong offset!");

}

