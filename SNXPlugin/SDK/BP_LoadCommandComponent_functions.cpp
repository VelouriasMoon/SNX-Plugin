#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LoadCommandComponent

#include "Basic.hpp"

#include "BP_LoadCommandComponent_classes.hpp"
#include "BP_LoadCommandComponent_parameters.hpp"


namespace SDK
{

// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishLoadAreaDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishLoadAreaDispatcher__DelegateSignature(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishLoadAreaDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishLoadAreaDispatcher__DelegateSignature Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishUnloadAreaDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishUnloadAreaDispatcher__DelegateSignature(class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishUnloadAreaDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishUnloadAreaDispatcher__DelegateSignature Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishLoadLevelDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishLoadLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> LevelName, class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishLoadLevelDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishLoadLevelDispatcher__DelegateSignature Parms{};

	Parms.LevelName = LevelName;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishUnloadLevelDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishUnloadLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> LevelName, class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishUnloadLevelDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishUnloadLevelDispatcher__DelegateSignature Parms{};

	Parms.LevelName = LevelName;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishLoadPackDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Pack                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishLoadPackDispatcher__DelegateSignature(const struct FPrimaryAssetType& Pack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishLoadPackDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishLoadPackDispatcher__DelegateSignature Parms{};

	Parms.Pack = std::move(Pack);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishUnloadPackDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Pack                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishUnloadPackDispatcher__DelegateSignature(const struct FPrimaryAssetType& Pack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishUnloadPackDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishUnloadPackDispatcher__DelegateSignature Parms{};

	Parms.Pack = std::move(Pack);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishVisibleLevelDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishVisibleLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishVisibleLevelDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishVisibleLevelDispatcher__DelegateSignature Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishUnvisibleLevelDispatcher__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishUnvisibleLevelDispatcher__DelegateSignature(TSoftObjectPtr<class UObject> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishUnvisibleLevelDispatcher__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventFinishUnvisibleLevelDispatcher__DelegateSignature Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventStartLoadLevel__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventStartLoadLevel__DelegateSignature(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventStartLoadLevel__DelegateSignature");

	Params::BP_LoadCommandComponent_C_EventStartLoadLevel__DelegateSignature Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.ExecuteUbergraph_BP_LoadCommandComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::ExecuteUbergraph_BP_LoadCommandComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "ExecuteUbergraph_BP_LoadCommandComponent");

	Params::BP_LoadCommandComponent_C_ExecuteUbergraph_BP_LoadCommandComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadAssetAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadAssetAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadAssetAsync");

	Params::BP_LoadCommandComponent_C_EventLoadAssetAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventSetAreaVisible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventSetAreaVisible(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventSetAreaVisible");

	Params::BP_LoadCommandComponent_C_EventSetAreaVisible Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventSetCurrentArea
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventSetCurrentArea(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventSetCurrentArea");

	Params::BP_LoadCommandComponent_C_EventSetCurrentArea Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventFinishLoadLevelDispatcher_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventFinishLoadLevelDispatcher_Event(TSoftObjectPtr<class UObject> LevelName, class FName AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventFinishLoadLevelDispatcher_Event");

	Params::BP_LoadCommandComponent_C_EventFinishLoadLevelDispatcher_Event Parms{};

	Parms.LevelName = LevelName;
	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventWaitLoadAreaAndSetVisible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::EventWaitLoadAreaAndSetVisible(const struct FS_LoadQueueCommand& Command, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventWaitLoadAreaAndSetVisible");

	Params::BP_LoadCommandComponent_C_EventWaitLoadAreaAndSetVisible Parms{};

	Parms.Command = std::move(Command);
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventUnloadPackAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventUnloadPackAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventUnloadPackAsync");

	Params::BP_LoadCommandComponent_C_EventUnloadPackAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadPackAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadPackAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadPackAsync");

	Params::BP_LoadCommandComponent_C_EventLoadPackAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventUnloadLevelAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventUnloadLevelAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventUnloadLevelAsync");

	Params::BP_LoadCommandComponent_C_EventUnloadLevelAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadLevelAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   LoadSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadLevelAsync(const struct FS_LoadQueueCommand& Command, int32 LoadSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadLevelAsync");

	Params::BP_LoadCommandComponent_C_EventLoadLevelAsync Parms{};

	Parms.Command = std::move(Command);
	Parms.LoadSlot = LoadSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_LoadCommandComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadThread3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadThread3(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadThread3");

	Params::BP_LoadCommandComponent_C_EventLoadThread3 Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadThread2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadThread2(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadThread2");

	Params::BP_LoadCommandComponent_C_EventLoadThread2 Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadThread1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadThread1(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadThread1");

	Params::BP_LoadCommandComponent_C_EventLoadThread1 Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.EventLoadThread0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::EventLoadThread0(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "EventLoadThread0");

	Params::BP_LoadCommandComponent_C_EventLoadThread0 Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.OnLoaded_733FDC874866DE4E2E262C86B89DFADF
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::OnLoaded_733FDC874866DE4E2E262C86B89DFADF(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "OnLoaded_733FDC874866DE4E2E262C86B89DFADF");

	Params::BP_LoadCommandComponent_C_OnLoaded_733FDC874866DE4E2E262C86B89DFADF Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.Completed_6A37619A4AAF51DD0A88479B9DF73E37
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UObject*>                  Loaded                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::Completed_6A37619A4AAF51DD0A88479B9DF73E37(const TArray<class UObject*>& Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "Completed_6A37619A4AAF51DD0A88479B9DF73E37");

	Params::BP_LoadCommandComponent_C_Completed_6A37619A4AAF51DD0A88479B9DF73E37 Parms{};

	Parms.Loaded = std::move(Loaded);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.ExecLoadCommandQueue
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::ExecLoadCommandQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "ExecLoadCommandQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.AddLoadCommandToQueue
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_LoadQueueCommand                      Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetType                PackName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AssetPackName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Flag                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::AddLoadCommandToQueue(E_LoadQueueCommand Command, class FName AreaName, class FName LevelName, const struct FPrimaryAssetType& PackName, TSoftObjectPtr<class UObject> Asset, class FName AssetPackName, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "AddLoadCommandToQueue");

	Params::BP_LoadCommandComponent_C_AddLoadCommandToQueue Parms{};

	Parms.Command = Command;
	Parms.AreaName = AreaName;
	Parms.LevelName = LevelName;
	Parms.PackName = std::move(PackName);
	Parms.Asset = Asset;
	Parms.AssetPackName = AssetPackName;
	Parms.Flag = Flag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.FinishWaitCommand
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::FinishWaitCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "FinishWaitCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.FinishWaitCommandAndExecNext
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::FinishWaitCommandAndExecNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "FinishWaitCommandAndExecNext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.GetNewCommandID
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::GetNewCommandID(int32* NewID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "GetNewCommandID");

	Params::BP_LoadCommandComponent_C_GetNewCommandID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewID != nullptr)
		*NewID = Parms.NewID;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.FinishAsyncCommand
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::FinishAsyncCommand(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "FinishAsyncCommand");

	Params::BP_LoadCommandComponent_C_FinishAsyncCommand Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandUnloadLevelAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandUnloadLevelAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandUnloadLevelAsync");

	Params::BP_LoadCommandComponent_C_CommandUnloadLevelAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandLoadPackAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandLoadPackAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandLoadPackAsync");

	Params::BP_LoadCommandComponent_C_CommandLoadPackAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandUnloadPackAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandUnloadPackAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandUnloadPackAsync");

	Params::BP_LoadCommandComponent_C_CommandUnloadPackAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C._CommandWaitLoadArea
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::_CommandWaitLoadArea(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "_CommandWaitLoadArea");

	Params::BP_LoadCommandComponent_C__CommandWaitLoadArea Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C._CommandWaitUnloadArea
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::_CommandWaitUnloadArea(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "_CommandWaitUnloadArea");

	Params::BP_LoadCommandComponent_C__CommandWaitUnloadArea Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestLoadAreaAsync
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEnemyLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SkipEventLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestLoadAreaAsync(class FName AreaName, bool SkipEnemyLevel, bool SkipEventLevel, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestLoadAreaAsync");

	Params::BP_LoadCommandComponent_C_LDRequestLoadAreaAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.SkipEnemyLevel = SkipEnemyLevel;
	Parms.SkipEventLevel = SkipEventLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestLoadLevelAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UObject>           LevelRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestLoadLevelAsync(class FName AreaName, TSoftObjectPtr<class UObject> LevelRef, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestLoadLevelAsync");

	Params::BP_LoadCommandComponent_C_LDRequestLoadLevelAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.LevelRef = LevelRef;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.DebugPrintLoadCommandQueue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::DebugPrintLoadCommandQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "DebugPrintLoadCommandQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.DebugPrintLoadCommandLoading
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::DebugPrintLoadCommandLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "DebugPrintLoadCommandLoading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.DebugPrintLoadCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::DebugPrintLoadCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "DebugPrintLoadCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestUnloadAreaAsync
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NextAreaName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestUnloadAreaAsync(class FName AreaName, class FName NextAreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestUnloadAreaAsync");

	Params::BP_LoadCommandComponent_C_LDRequestUnloadAreaAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.NextAreaName = NextAreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestUnloadLevelAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UObject>           LevelRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestUnloadLevelAsync(class FName AreaName, TSoftObjectPtr<class UObject> LevelRef, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestUnloadLevelAsync");

	Params::BP_LoadCommandComponent_C_LDRequestUnloadLevelAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.LevelRef = LevelRef;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.IsExistAreaCommandInQueueWithoutID
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_LoadQueueCommand                      Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ExcludeID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::IsExistAreaCommandInQueueWithoutID(class FName AreaName, E_LoadQueueCommand Command, int32 ExcludeID, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "IsExistAreaCommandInQueueWithoutID");

	Params::BP_LoadCommandComponent_C_IsExistAreaCommandInQueueWithoutID Parms{};

	Parms.AreaName = AreaName;
	Parms.Command = Command;
	Parms.ExcludeID = ExcludeID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.UpdateLoadCommand
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LoadCommandComponent_C::UpdateLoadCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "UpdateLoadCommand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestLoadPackAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Pack                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestLoadPackAsync(const struct FPrimaryAssetType& Pack, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestLoadPackAsync");

	Params::BP_LoadCommandComponent_C_LDRequestLoadPackAsync Parms{};

	Parms.Pack = std::move(Pack);

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestUnloadPackAsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetType                Pack                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::LDRequestUnloadPackAsync(const struct FPrimaryAssetType& Pack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestUnloadPackAsync");

	Params::BP_LoadCommandComponent_C_LDRequestUnloadPackAsync Parms{};

	Parms.Pack = std::move(Pack);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.IsExistAreaCommandInQueue
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_LoadQueueCommand                      Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::IsExistAreaCommandInQueue(class FName AreaName, E_LoadQueueCommand Command, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "IsExistAreaCommandInQueue");

	Params::BP_LoadCommandComponent_C_IsExistAreaCommandInQueue Parms{};

	Parms.AreaName = AreaName;
	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.__LDRequestWaitLoadAreaAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::__LDRequestWaitLoadAreaAsync(class FName AreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "__LDRequestWaitLoadAreaAsync");

	Params::BP_LoadCommandComponent_C___LDRequestWaitLoadAreaAsync Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.__LDRequestWaitUnloadAreaAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::__LDRequestWaitUnloadAreaAsync(class FName AreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "__LDRequestWaitUnloadAreaAsync");

	Params::BP_LoadCommandComponent_C___LDRequestWaitUnloadAreaAsync Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandLoadLevelAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandLoadLevelAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandLoadLevelAsync");

	Params::BP_LoadCommandComponent_C_CommandLoadLevelAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.RemoveLoadCommandQueueByID
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::RemoveLoadCommandQueueByID(int32 ID, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "RemoveLoadCommandQueueByID");

	Params::BP_LoadCommandComponent_C_RemoveLoadCommandQueueByID Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.UpdateLoadCommandStatusInQueueByID
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_LevelCommandStatus                    Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::UpdateLoadCommandStatusInQueueByID(int32 ID, E_LevelCommandStatus Status, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "UpdateLoadCommandStatusInQueueByID");

	Params::BP_LoadCommandComponent_C_UpdateLoadCommandStatusInQueueByID Parms{};

	Parms.ID = ID;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.StartLoadCommandQueue
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Error                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::StartLoadCommandQueue(int32 ID, bool* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "StartLoadCommandQueue");

	Params::BP_LoadCommandComponent_C_StartLoadCommandQueue Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Error != nullptr)
		*Error = Parms.Error;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestSetVisibleAfterLoadAreaAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestSetVisibleAfterLoadAreaAsync(class FName AreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestSetVisibleAfterLoadAreaAsync");

	Params::BP_LoadCommandComponent_C_LDRequestSetVisibleAfterLoadAreaAsync Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.__CommandSetAreaVisibleAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::__CommandSetAreaVisibleAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "__CommandSetAreaVisibleAsync");

	Params::BP_LoadCommandComponent_C___CommandSetAreaVisibleAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandSetAreaVisible
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandSetAreaVisible(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandSetAreaVisible");

	Params::BP_LoadCommandComponent_C_CommandSetAreaVisible Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestSetAreaVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestSetAreaVisible(class FName AreaName, bool Visible, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestSetAreaVisible");

	Params::BP_LoadCommandComponent_C_LDRequestSetAreaVisible Parms{};

	Parms.AreaName = AreaName;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestSetAreaOnlyVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestSetAreaOnlyVisible(class FName AreaName, bool Visible, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestSetAreaOnlyVisible");

	Params::BP_LoadCommandComponent_C_LDRequestSetAreaOnlyVisible Parms{};

	Parms.AreaName = AreaName;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDDebugPrint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Str                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::LDDebugPrint(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDDebugPrint");

	Params::BP_LoadCommandComponent_C_LDDebugPrint Parms{};

	Parms.Str = std::move(Str);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandSetAreaOnlyVisible
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandSetAreaOnlyVisible(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandSetAreaOnlyVisible");

	Params::BP_LoadCommandComponent_C_CommandSetAreaOnlyVisible Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestChangeArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestChangeArea(class FName AreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestChangeArea");

	Params::BP_LoadCommandComponent_C_LDRequestChangeArea Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandChangeCurrentArea
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandChangeCurrentArea(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandChangeCurrentArea");

	Params::BP_LoadCommandComponent_C_CommandChangeCurrentArea Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.MakePrimaryAssetIdDependencies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          PAIs                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     AssetNames                                             (Parm, OutParm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::MakePrimaryAssetIdDependencies(TArray<struct FPrimaryAssetId>& PAIs, TArray<class FName>* AssetNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "MakePrimaryAssetIdDependencies");

	Params::BP_LoadCommandComponent_C_MakePrimaryAssetIdDependencies Parms{};

	Parms.PAIs = std::move(PAIs);

	UObject::ProcessEvent(Func, &Parms);

	PAIs = std::move(Parms.PAIs);

	if (AssetNames != nullptr)
		*AssetNames = std::move(Parms.AssetNames);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandSetAreaVisibleAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandSetAreaVisibleAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandSetAreaVisibleAsync");

	Params::BP_LoadCommandComponent_C_CommandSetAreaVisibleAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.__LDRequestSetAreaVisibleAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::__LDRequestSetAreaVisibleAsync(class FName AreaName, bool Visible, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "__LDRequestSetAreaVisibleAsync");

	Params::BP_LoadCommandComponent_C___LDRequestSetAreaVisibleAsync Parms{};

	Parms.AreaName = AreaName;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C._CommandCancelLoadLevelAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::_CommandCancelLoadLevelAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "_CommandCancelLoadLevelAsync");

	Params::BP_LoadCommandComponent_C__CommandCancelLoadLevelAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandLoadAssetAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandLoadAssetAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandLoadAssetAsync");

	Params::BP_LoadCommandComponent_C_CommandLoadAssetAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestLoadAssetAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AssetListName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestLoadAssetAsync(TSoftObjectPtr<class UObject> Asset, class FName AssetListName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestLoadAssetAsync");

	Params::BP_LoadCommandComponent_C_LDRequestLoadAssetAsync Parms{};

	Parms.Asset = Asset;
	Parms.AssetListName = AssetListName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestLoadAssetListAsync
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetListName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestLoadAssetListAsync(class FName AssetListName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestLoadAssetListAsync");

	Params::BP_LoadCommandComponent_C_LDRequestLoadAssetListAsync Parms{};

	Parms.AssetListName = AssetListName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestUnloadAssetAsync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             AssetListName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestUnloadAssetAsync(TSoftObjectPtr<class UObject> Asset, class FName AssetListName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestUnloadAssetAsync");

	Params::BP_LoadCommandComponent_C_LDRequestUnloadAssetAsync Parms{};

	Parms.Asset = Asset;
	Parms.AssetListName = AssetListName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.CommandUnloadAssetAsync
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LoadQueueCommand              Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::CommandUnloadAssetAsync(const struct FS_LoadQueueCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "CommandUnloadAssetAsync");

	Params::BP_LoadCommandComponent_C_CommandUnloadAssetAsync Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.DebugSetLoadThreadNum
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadThreadNum                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LoadCommandComponent_C::DebugSetLoadThreadNum(int32 LoadThreadNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "DebugSetLoadThreadNum");

	Params::BP_LoadCommandComponent_C_DebugSetLoadThreadNum Parms{};

	Parms.LoadThreadNum = LoadThreadNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.IsLoadingAnyLevels
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLoading                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::IsLoadingAnyLevels(bool* IsLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "IsLoadingAnyLevels");

	Params::BP_LoadCommandComponent_C_IsLoadingAnyLevels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoading != nullptr)
		*IsLoading = Parms.IsLoading;
}


// Function BP_LoadCommandComponent.BP_LoadCommandComponent_C.LDRequestLoadAreaLBPortalAsync
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsError                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LoadCommandComponent_C::LDRequestLoadAreaLBPortalAsync(class FName AreaName, bool* IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LoadCommandComponent_C", "LDRequestLoadAreaLBPortalAsync");

	Params::BP_LoadCommandComponent_C_LDRequestLoadAreaLBPortalAsync Parms{};

	Parms.AreaName = AreaName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsError != nullptr)
		*IsError = Parms.IsError;
}

}

