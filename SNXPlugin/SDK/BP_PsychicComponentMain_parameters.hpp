#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PsychicComponentMain

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "PsychicObjectAttackType_structs.hpp"
#include "SPsychicCaptureMaterial_structs.hpp"
#include "PsychicObjectAttackSwingType_structs.hpp"
#include "PsychicObjectID_structs.hpp"


namespace SDK::Params
{

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetupComponentParam
// 0x0038 (0x0038 - 0x0000)
struct BP_PsychicComponentMain_C_SetupComponentParam final
{
public:
	class UMeshComponent*                         Meah_comp;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         Aura_comp;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         Shadow_comp;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Dir_comp;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInertialMoveComponent_C*               Inertial_move_comp;                                // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Hit_primitive;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Attack_primitive;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetupComponentParam) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetupComponentParam");
static_assert(sizeof(BP_PsychicComponentMain_C_SetupComponentParam) == 0x000038, "Wrong size on BP_PsychicComponentMain_C_SetupComponentParam");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Meah_comp) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Meah_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Aura_comp) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Aura_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Shadow_comp) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Shadow_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Dir_comp) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Dir_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Inertial_move_comp) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Inertial_move_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Hit_primitive) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Hit_primitive' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetupComponentParam, Attack_primitive) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetupComponentParam::Attack_primitive' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.Update
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PsychicComponentMain_C_Update final
{
public:
	float                                         Delta_second;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F32[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 L_str;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F33[0xF];                                     // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F34[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F35[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_Update) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_Update");
static_assert(sizeof(BP_PsychicComponentMain_C_Update) == 0x0000A0, "Wrong size on BP_PsychicComponentMain_C_Update");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, Delta_second) == 0x000000, "Member 'BP_PsychicComponentMain_C_Update::Delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, L_str) == 0x000008, "Member 'BP_PsychicComponentMain_C_Update::L_str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000060, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_GetPlayerFixParam_Param) == 0x000068, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_IsValid_ReturnValue_2) == 0x000080, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_GetOwner_ReturnValue_1) == 0x000088, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Update, CallFunc_IsValid_ReturnValue_3) == 0x000090, "Member 'BP_PsychicComponentMain_C_Update::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrowLinear
// 0x0128 (0x0128 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrowLinear final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_checkFloor;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F36[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               L_rot;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         L_deltaSec;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F37[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckHitBackground_return;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F38[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F39[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorDeltaSeconds_ReturnValue;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrowLinear) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrowLinear");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrowLinear) == 0x000128, "Wrong size on BP_PsychicComponentMain_C_UpdateThrowLinear");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, DeltaSeconds) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, L_checkFloor) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::L_checkFloor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, L_rot) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::L_rot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, L_deltaSec) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::L_deltaSec' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_CheckHitBackground_return) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_CheckHitBackground_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_GetOwner_ReturnValue_1) == 0x000038, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000044, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_GetActorDeltaSeconds_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_GetActorDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_NegateRotator_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_MakeRotFromX_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_ComposeRotators_ReturnValue) == 0x00006C, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00007C, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_Add_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_Add_VectorVector_ReturnValue) == 0x00008C, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000098, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowLinear, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000120, "Member 'BP_PsychicComponentMain_C_UpdateThrowLinear::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.StartMoveThrow
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_StartMoveThrow final
{
public:
	struct FVector                                WorkPos;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorkScale;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_StartMoveThrow) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_StartMoveThrow");
static_assert(sizeof(BP_PsychicComponentMain_C_StartMoveThrow) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_StartMoveThrow");
static_assert(offsetof(BP_PsychicComponentMain_C_StartMoveThrow, WorkPos) == 0x000000, "Member 'BP_PsychicComponentMain_C_StartMoveThrow::WorkPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_StartMoveThrow, WorkScale) == 0x00000C, "Member 'BP_PsychicComponentMain_C_StartMoveThrow::WorkScale' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CalcDirectionVectorToTarget
// 0x0128 (0x0128 - 0x0000)
struct BP_PsychicComponentMain_C_CalcDirectionVectorToTarget final
{
public:
	bool                                          bPlayerTarget;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNowRot;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F3A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F3B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetadjustZ;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDiffZ;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OwnRot;                                            // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TgtPos;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDone;                                             // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F3C[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TgtActor;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F3D[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetGrabOwnerTarget_target;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F3E[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttackPos_attack_pos;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F3F[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_CalcDirectionVectorToTarget");
static_assert(sizeof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget) == 0x000128, "Wrong size on BP_PsychicComponentMain_C_CalcDirectionVectorToTarget");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, bPlayerTarget) == 0x000000, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::bPlayerTarget' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, bNowRot) == 0x000001, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::bNowRot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, TargetadjustZ) == 0x000014, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::TargetadjustZ' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, TargetDiffZ) == 0x000018, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::TargetDiffZ' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, OwnRot) == 0x00001C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::OwnRot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, TgtPos) == 0x000028, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::TgtPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, bDone) == 0x000034, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::bDone' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, TgtActor) == 0x000038, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::TgtActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetGrabOwnerTarget_target) == 0x000058, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetGrabOwnerTarget_target' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_BreakVector_X) == 0x000078, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_BreakVector_Y) == 0x00007C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_BreakVector_Z) == 0x000080, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetCameraRotation_ReturnValue) == 0x000084, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000090, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetAttackPos_attack_pos) == 0x00009C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetAttackPos_attack_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetOwner_ReturnValue_1) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GetActorScale3D_ReturnValue) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_BreakVector_X_1) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_BreakVector_Y_1) == 0x0000D4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_BreakVector_Z_1) == 0x0000D8, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000DC, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000E4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_MakeVector_ReturnValue_1) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x0000F4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000100, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00010C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorToTarget, CallFunc_Normal_ReturnValue) == 0x000118, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorToTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackThrow
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackThrow final
{
public:
	class AActor*                                 Param_TargetActor;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_throw;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Psychic_combo;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Psychic_ex_in;                                     // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_attach;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackThrow) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackThrow");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackThrow) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetAttackThrow");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrow, Param_TargetActor) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackThrow::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrow, Force_throw) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackThrow::Force_throw' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrow, Psychic_combo) == 0x000009, "Member 'BP_PsychicComponentMain_C_SetAttackThrow::Psychic_combo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrow, Psychic_ex_in) == 0x00000A, "Member 'BP_PsychicComponentMain_C_SetAttackThrow::Psychic_ex_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrow, Check_attach) == 0x00000B, "Member 'BP_PsychicComponentMain_C_SetAttackThrow::Check_attach' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateGrabGauge
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateGrabGauge final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F40[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F41[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateGrabGauge) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateGrabGauge");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateGrabGauge) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_UpdateGrabGauge");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabGauge, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateGrabGauge::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplay
// 0x00C8 (0x00C8 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplay final
{
public:
	class FString                                 StrDisplay;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplaySearchInfo_return;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayName_return;                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayIndex_str_out;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayState_return;                 // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayGauge_return;                 // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayPos_return;                   // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayDistance_return;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayAttack_return;                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_DebugDisplayAura_return;                  // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F42[0x5];                                     // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F43[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplay) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplay");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplay) == 0x0000C8, "Wrong size on BP_PsychicComponentMain_C_DebugDisplay");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, StrDisplay) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplay::StrDisplay' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplaySearchInfo_return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplaySearchInfo_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayName_return) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayName_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayIndex_str_out) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayIndex_str_out' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayState_return) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayState_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayGauge_return) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayGauge_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayPos_return) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayPos_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayDistance_return) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayDistance_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayAttack_return) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayAttack_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_DebugDisplayAura_return) == 0x000090, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_DebugDisplayAura_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_1) == 0x0000A1, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_2) == 0x0000A2, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_GetOwner_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_3) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_4) == 0x0000B1, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_SelectColor_ReturnValue) == 0x0000B4, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_5) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_6) == 0x0000C5, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplay, CallFunc_BooleanOR_ReturnValue_7) == 0x0000C6, "Member 'BP_PsychicComponentMain_C_DebugDisplay::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateGrabMove
// 0x0650 (0x0650 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateGrabMove final
{
public:
	struct FVector                                L_actorPos;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DstPos;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AxisSlope;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecFront;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotFrontRate;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosTarget;                                         // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F44[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F45[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_4;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttachPos_grab_pos;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F46[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue_1;               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_5;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F47[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_6;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F48[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue_1;              // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue_1;          // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue_1;               // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F49[0x2];                                     // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue_2;              // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_3;              // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime_1;                   // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime_1;                   // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F4A[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue_4;              // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_2;            // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x02C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F4B[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue_1;    // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_3;            // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1; // 0x0388(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1; // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F4C[0x3];                                     // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue_2;               // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue_2;    // 0x043C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_2;         // 0x0448(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_4;            // 0x0454(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x0460(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_2;     // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue_2;              // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue_2;          // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_3; // 0x04B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue_2;               // 0x04C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_7;                   // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_5;            // 0x04D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_2; // 0x04E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue_2; // 0x056C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F4D[0x3];                                     // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0570(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_4; // 0x057C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0588(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F4E[0x4];                                     // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_8;                   // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x05A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x05AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_9;                   // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x05C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x05CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_2;                       // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x05DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x05DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F4F[0x2];                                     // 0x05DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            K2Node_Select_Default;                             // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_5;              // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_3;                       // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x05F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttachPos_grab_pos_1;                  // 0x0604(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0610(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x061C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x0628(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0634(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F50[0x3];                                     // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue_1;         // 0x063C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateGrabMove) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateGrabMove");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateGrabMove) == 0x000650, "Wrong size on BP_PsychicComponentMain_C_UpdateGrabMove");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, L_actorPos) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::L_actorPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, DstPos) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::DstPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, AxisSlope) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::AxisSlope' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, VecFront) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::VecFront' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, RotFrontRate) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::RotFrontRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, PosTarget) == 0x000034, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::PosTarget' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_1) == 0x000058, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00006C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000078, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_2) == 0x000088, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000090, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00009C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_3) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_4) == 0x0000C8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0000DC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetAttachPos_grab_pos) == 0x0000F4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetAttachPos_grab_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000100, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00010C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, Temp_bool_Variable) == 0x000118, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_VSizeSquared_ReturnValue) == 0x00011C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FClamp_ReturnValue) == 0x000120, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000124, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000128, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_VSizeSquared_ReturnValue_1) == 0x00012C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_VSizeSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FClamp_ReturnValue_1) == 0x000130, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000134, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_5) == 0x000138, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000140, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_6) == 0x000148, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetFloatValue_ReturnValue) == 0x000150, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetFloatValue_ReturnValue_1) == 0x000154, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_SelectFloat_ReturnValue) == 0x000158, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_NegateRotator_ReturnValue) == 0x00015C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue) == 0x000168, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000178, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_NegateRotator_ReturnValue_1) == 0x000180, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_NegateRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetCameraRotation_ReturnValue) == 0x00018C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue_1) == 0x000198, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Roll) == 0x0001A4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Pitch) == 0x0001A8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Yaw) == 0x0001AC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x0001B0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeRotator_ReturnValue) == 0x0001B8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetCameraRotation_ReturnValue_1) == 0x0001C4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetCameraRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001D0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Roll_1) == 0x0001DC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Pitch_1) == 0x0001E0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Yaw_1) == 0x0001E4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeRotFromX_ReturnValue) == 0x0001E8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeRotator_ReturnValue_1) == 0x0001F4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_ComposeRotators_ReturnValue) == 0x000200, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x00020C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeRotFromX_ReturnValue_1) == 0x000218, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeRotFromX_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_ComposeRotators_ReturnValue_1) == 0x000224, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000230, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000231, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetFloatValue_ReturnValue_2) == 0x000234, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetFloatValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x000238, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000244, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetFloatValue_ReturnValue_3) == 0x000250, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetFloatValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000254, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000260, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_VLerp_ReturnValue) == 0x00026C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetTimeRange_MinTime) == 0x000278, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetTimeRange_MaxTime) == 0x00027C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetTimeRange_MinTime_1) == 0x000280, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetTimeRange_MinTime_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetTimeRange_MaxTime_1) == 0x000284, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetTimeRange_MaxTime_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000288, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetFloatValue_ReturnValue_4) == 0x00028C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetFloatValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x000290, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue_2) == 0x00029C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_ComposeRotators_ReturnValue_2) == 0x0002A8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_ComposeRotators_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Cross_VectorVector_ReturnValue) == 0x0002B4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0002C0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000348, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Normal_ReturnValue) == 0x00034C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_RotatorFromAxisAndAngle_ReturnValue_1) == 0x000358, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_RotatorFromAxisAndAngle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue_3) == 0x000364, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_ComposeRotators_ReturnValue_3) == 0x000370, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_ComposeRotators_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x00037C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1) == 0x000388, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1) == 0x000410, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Normal_ReturnValue_1) == 0x000414, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_VSizeSquared_ReturnValue_2) == 0x000420, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_VSizeSquared_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FClamp_ReturnValue_2) == 0x000424, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000428, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00042C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue_4) == 0x000430, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_RotatorFromAxisAndAngle_ReturnValue_2) == 0x00043C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_RotatorFromAxisAndAngle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Cross_VectorVector_ReturnValue_2) == 0x000448, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Cross_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_ComposeRotators_ReturnValue_4) == 0x000454, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_ComposeRotators_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Normal_ReturnValue_2) == 0x000460, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue_5) == 0x00046C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetPlayerCameraManager_ReturnValue_2) == 0x000478, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetPlayerCameraManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_NegateRotator_ReturnValue_2) == 0x000480, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_NegateRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetCameraRotation_ReturnValue_2) == 0x00048C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetCameraRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Roll_2) == 0x000498, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Pitch_2) == 0x00049C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BreakRotator_Yaw_2) == 0x0004A0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0004A4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeRotator_ReturnValue_2) == 0x0004A8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FMin_ReturnValue) == 0x0004B4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GreaterGreater_VectorRotator_ReturnValue_3) == 0x0004B8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GreaterGreater_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeRotFromX_ReturnValue_2) == 0x0004C4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeRotFromX_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_7) == 0x0004D0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_ComposeRotators_ReturnValue_5) == 0x0004D8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_ComposeRotators_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_2) == 0x0004E4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_SetActorLocationAndRotation_ReturnValue_2) == 0x00056C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_SetActorLocationAndRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_RLerp_ReturnValue) == 0x000570, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GreaterGreater_VectorRotator_ReturnValue_4) == 0x00057C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GreaterGreater_VectorRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000588, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_8) == 0x000598, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x0005A0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x0005AC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetOwner_ReturnValue_9) == 0x0005B8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetOwner_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x0005C0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x0005CC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FMin_ReturnValue_1) == 0x0005D0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0005D4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FMin_ReturnValue_2) == 0x0005D8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FMin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x0005DC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Less_FloatFloat_ReturnValue) == 0x0005DD, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, K2Node_Select_Default) == 0x0005E0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0005E8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetFloatValue_ReturnValue_5) == 0x0005EC, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetFloatValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_FMin_ReturnValue_3) == 0x0005F0, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_FMin_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0005F4, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_MakeVector_ReturnValue_6) == 0x0005F8, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_GetAttachPos_grab_pos_1) == 0x000604, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_GetAttachPos_grab_pos_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000610, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_VectorVector_ReturnValue_4) == 0x00061C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_VLerp_ReturnValue_1) == 0x000628, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000634, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Not_PreBool_ReturnValue) == 0x000638, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_Divide_VectorFloat_ReturnValue_1) == 0x00063C, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_Divide_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabMove, CallFunc_BooleanAND_ReturnValue) == 0x000648, "Member 'BP_PsychicComponentMain_C_UpdateGrabMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.StartGrabMove
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_StartGrabMove final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReload;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCombo;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_StartGrabMove) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_StartGrabMove");
static_assert(sizeof(BP_PsychicComponentMain_C_StartGrabMove) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_StartGrabMove");
static_assert(offsetof(BP_PsychicComponentMain_C_StartGrabMove, bForce) == 0x000000, "Member 'BP_PsychicComponentMain_C_StartGrabMove::bForce' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_StartGrabMove, bReload) == 0x000001, "Member 'BP_PsychicComponentMain_C_StartGrabMove::bReload' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_StartGrabMove, bCombo) == 0x000002, "Member 'BP_PsychicComponentMain_C_StartGrabMove::bCombo' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayName
// 0x0080 (0x0080 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayName final
{
public:
	class FString                                 Str_in;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_name;                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayName) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayName");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayName) == 0x000080, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayName");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, Str_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::Str_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, CallFunc_GetDisplayName_name) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::CallFunc_GetDisplayName_name' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayName, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplayName::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayState
// 0x0120 (0x0120 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayState final
{
public:
	class FString                                 Str_in;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_1;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_2;               // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_3;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_4;               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_5;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_6;               // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_7;               // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_8;               // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayState) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayState");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayState) == 0x000120, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayState");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, Str_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::Str_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_1) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_2) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_3) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_4) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_5) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_6) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue) == 0x000090, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_7) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_SelectString_ReturnValue_8) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_SelectString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000F0, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000100, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayState, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000110, "Member 'BP_PsychicComponentMain_C_DebugDisplayState::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplaySearchInfo
// 0x0090 (0x0090 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplaySearchInfo final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplaySearchInfo");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo) == 0x000090, "Wrong size on BP_PsychicComponentMain_C_DebugDisplaySearchInfo");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, Str) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::Str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Conv_FloatToString_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplaySearchInfo, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplaySearchInfo::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayDistance
// 0x00B8 (0x00B8 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayDistance final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F51[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetMainPlayerBP_Player;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F52[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F53[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F54[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F55[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayDistance) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayDistance");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayDistance) == 0x0000B8, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayDistance");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, Str) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::Str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_GetGameMode_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x000028, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_GetMainPlayerBP_Player) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_GetMainPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000064, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_BooleanAND_ReturnValue_1) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_VSize_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_Conv_FloatToString_ReturnValue) == 0x000088, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_Concat_StrStr_ReturnValue) == 0x000098, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDistance, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_DebugDisplayDistance::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayPos
// 0x00A8 (0x00A8 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayPos final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F56[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F57[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayPos) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayPos");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayPos) == 0x0000A8, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayPos");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, Str) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::Str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_Conv_VectorToString_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000078, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayPos, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000098, "Member 'BP_PsychicComponentMain_C_DebugDisplayPos::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayGauge
// 0x0080 (0x0080 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayGauge final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayGauge) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayGauge");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayGauge) == 0x000080, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayGauge");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, Str) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::Str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, CallFunc_Conv_FloatToString_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayGauge, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplayGauge::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetGrab
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_SetGrab final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F58[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grab_index_in;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecPlayerFront;                                    // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecPsyObj;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetGrab) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetGrab");
static_assert(sizeof(BP_PsychicComponentMain_C_SetGrab) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_SetGrab");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrab, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetGrab::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrab, Grab_owner_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetGrab::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrab, Grab_index_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetGrab::Grab_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrab, VecPlayerFront) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetGrab::VecPlayerFront' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrab, VecPsyObj) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetGrab::VecPsyObj' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.Initialize
// 0x0048 (0x0048 - 0x0000)
struct BP_PsychicComponentMain_C_Initialize final
{
public:
	class UMeshComponent*                         Mesh_comp;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         Aura_comp;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         Shadow_comp;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Dir_comp;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInertialMoveComponent_C*               Inertial_move_comp;                                // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Hit_primitive;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Attack_primitive;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	PsychicObjectID::EPsychicObjectID             PsychicObjectID_in;                                // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_static;                                         // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_skeletal;                                       // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F59[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_Initialize) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_Initialize");
static_assert(sizeof(BP_PsychicComponentMain_C_Initialize) == 0x000048, "Wrong size on BP_PsychicComponentMain_C_Initialize");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Mesh_comp) == 0x000000, "Member 'BP_PsychicComponentMain_C_Initialize::Mesh_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Aura_comp) == 0x000008, "Member 'BP_PsychicComponentMain_C_Initialize::Aura_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Shadow_comp) == 0x000010, "Member 'BP_PsychicComponentMain_C_Initialize::Shadow_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Dir_comp) == 0x000018, "Member 'BP_PsychicComponentMain_C_Initialize::Dir_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Inertial_move_comp) == 0x000020, "Member 'BP_PsychicComponentMain_C_Initialize::Inertial_move_comp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Hit_primitive) == 0x000028, "Member 'BP_PsychicComponentMain_C_Initialize::Hit_primitive' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Attack_primitive) == 0x000030, "Member 'BP_PsychicComponentMain_C_Initialize::Attack_primitive' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, PsychicObjectID_in) == 0x000038, "Member 'BP_PsychicComponentMain_C_Initialize::PsychicObjectID_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Is_static) == 0x000039, "Member 'BP_PsychicComponentMain_C_Initialize::Is_static' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, Is_skeletal) == 0x00003A, "Member 'BP_PsychicComponentMain_C_Initialize::Is_skeletal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, K2Node_SwitchEnum_CmpSuccess) == 0x00003B, "Member 'BP_PsychicComponentMain_C_Initialize::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_Initialize, CallFunc_GetPlayerFixParam_Param) == 0x000040, "Member 'BP_PsychicComponentMain_C_Initialize::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayAttack
// 0x0170 (0x0170 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayAttack final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsCollisionEnabled_ReturnValue;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F5A[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F5B[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_1;               // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_2;               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F5C[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USphereComponent*                       K2Node_DynamicCast_AsSphere_Collision;             // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F5D[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsCollisionEnabled_ReturnValue_1;      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F5E[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x014C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledSphereRadius_ReturnValue;        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayAttack) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayAttack");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayAttack) == 0x000170, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayAttack");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, Str) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::Str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, K2Node_DynamicCast_AsCapsule_Collision) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_K2_IsCollisionEnabled_ReturnValue) == 0x000029, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_K2_IsCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectFloat_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectColor_ReturnValue) == 0x000044, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000064, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000078, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectString_ReturnValue) == 0x000088, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectString_ReturnValue_1) == 0x000098, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectString_ReturnValue_2) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C8, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000F0, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000100, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, K2Node_DynamicCast_AsSphere_Collision) == 0x000110, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::K2Node_DynamicCast_AsSphere_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000120, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_K2_IsCollisionEnabled_ReturnValue_1) == 0x000130, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_K2_IsCollisionEnabled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000138, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectFloat_ReturnValue_1) == 0x000148, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_SelectColor_ReturnValue_1) == 0x00014C, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_GetScaledSphereRadius_ReturnValue) == 0x00015C, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_GetScaledSphereRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAttack, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000160, "Member 'BP_PsychicComponentMain_C_DebugDisplayAttack::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayArrow
// 0x0064 (0x0064 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayArrow final
{
public:
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F5F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxElement_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayArrow) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayArrow");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayArrow) == 0x000064, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayArrow");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_SelectColor_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_GetMaxElement_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00004C, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayArrow, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_DebugDisplayArrow::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CanPsyAction
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_CanPsyAction final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CanPsyAction) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_CanPsyAction");
static_assert(sizeof(BP_PsychicComponentMain_C_CanPsyAction) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_CanPsyAction");
static_assert(offsetof(BP_PsychicComponentMain_C_CanPsyAction, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_CanPsyAction::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CanPsyAction, Ret) == 0x000001, "Member 'BP_PsychicComponentMain_C_CanPsyAction::Ret' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackParam
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackParam final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Set_time_limit_in;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F60[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackParam) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackParam");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackParam) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetAttackParam");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackParam, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackParam::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackParam, Set_time_limit_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetAttackParam::Set_time_limit_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackParam, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetAttackParam::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetActiveComponent
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_SetActiveComponent final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return_1;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetActiveComponent) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetActiveComponent");
static_assert(sizeof(BP_PsychicComponentMain_C_SetActiveComponent) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_SetActiveComponent");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActiveComponent, bActive) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetActiveComponent::bActive' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActiveComponent, CallFunc_SetVisibilityPsyObj_return) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetActiveComponent::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActiveComponent, CallFunc_SetVisibilityPsyObj_return_1) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetActiveComponent::CallFunc_SetVisibilityPsyObj_return_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CalcDirectionVectorHoming
// 0x00E8 (0x00E8 - 0x0000)
struct BP_PsychicComponentMain_C_CalcDirectionVectorHoming final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Rot;                                               // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingDistMax;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingDistMin;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleHoming;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecRot;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecTarget;                                         // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F61[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetGrabOwnerTarget_target;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F62[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Square_ReturnValue_1;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_2;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_3;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_4;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcDirectionVectorToTarget_ReturnValue;  // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcDirectionVectorToTarget_return;       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_CalcDirectionVectorHoming");
static_assert(sizeof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming) == 0x0000E8, "Wrong size on BP_PsychicComponentMain_C_CalcDirectionVectorHoming");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, Vector) == 0x000000, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::Vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, Rot) == 0x00000C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::Rot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, HomingDistMax) == 0x000018, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::HomingDistMax' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, HomingDistMin) == 0x00001C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::HomingDistMin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, AngleHoming) == 0x000020, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::AngleHoming' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, VecRot) == 0x000024, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::VecRot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, VecTarget) == 0x000030, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::VecTarget' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_GetGrabOwnerTarget_target) == 0x000040, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_GetGrabOwnerTarget_target' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Square_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Square_ReturnValue_1) == 0x00005C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Square_ReturnValue_2) == 0x000060, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Square_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Square_ReturnValue_3) == 0x000064, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Square_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_GetOwner_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00007C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_SelectVector_ReturnValue) == 0x000088, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_VSizeSquared_ReturnValue) == 0x000094, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_FClamp_ReturnValue) == 0x000098, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Square_ReturnValue_4) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Square_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x0000A4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Normal_ReturnValue) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_Lerp_ReturnValue) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000C8, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_CalcDirectionVectorToTarget_ReturnValue) == 0x0000D4, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_CalcDirectionVectorToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDirectionVectorHoming, CallFunc_CalcDirectionVectorToTarget_return) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_CalcDirectionVectorHoming::CallFunc_CalcDirectionVectorToTarget_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrowCurve
// 0x0100 (0x0100 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrowCurve final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckHitBackground_return;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F63[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F64[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCheckBackground_return;                 // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F65[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrowCurve) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrowCurve");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrowCurve) == 0x000100, "Wrong size on BP_PsychicComponentMain_C_UpdateThrowCurve");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, DeltaSeconds) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_MakeRotFromX_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_CheckHitBackground_return) == 0x000021, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_CheckHitBackground_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_NegateRotator_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_ComposeRotators_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000060, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000EC, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_IsCheckBackground_return) == 0x0000F0, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_IsCheckBackground_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000F4, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowCurve, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000F8, "Member 'BP_PsychicComponentMain_C_UpdateThrowCurve::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrow
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrow final
{
public:
	bool                                          CallFunc_isHoming_return;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrow) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrow");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrow) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_UpdateThrow");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrow, CallFunc_isHoming_return) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrow::CallFunc_isHoming_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrowSpeed
// 0x0044 (0x0044 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrowSpeed final
{
public:
	float                                         DeltaSecond;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F66[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueRange_MinValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MaxValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F67[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isHitBackground_return;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F68[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueRange_MinValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MaxValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F69[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrowSpeed) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrowSpeed");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrowSpeed) == 0x000044, "Wrong size on BP_PsychicComponentMain_C_UpdateThrowSpeed");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, DeltaSecond) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::DeltaSecond' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetValueRange_MinValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetValueRange_MinValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetValueRange_MaxValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetValueRange_MaxValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_Less_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_isHitBackground_return) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_isHitBackground_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetValueRange_MinValue_1) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetValueRange_MinValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetValueRange_MaxValue_1) == 0x00002C, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetValueRange_MaxValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetTimeRange_MinTime) == 0x000034, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetTimeRange_MaxTime) == 0x000038, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_FClamp_ReturnValue_1) == 0x00003C, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSpeed, CallFunc_GetFloatValue_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateThrowSpeed::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrowRotate
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrowRotate final
{
public:
	float                                         DeltaSecond;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowHzt;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dir;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollDiff;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetRoll;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecTarget;                                         // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecRot;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAngle;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaAngle;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sign;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F6A[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isHitBackground_return;                   // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F6B[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F6C[0x1];                                     // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcDirectionVectorToTarget_ReturnValue;  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcDirectionVectorToTarget_return;       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F6D[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrowRotate) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrowRotate");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrowRotate) == 0x0000A0, "Wrong size on BP_PsychicComponentMain_C_UpdateThrowRotate");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, DeltaSecond) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::DeltaSecond' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, ThrowHzt) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::ThrowHzt' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, Dir) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::Dir' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, RollDiff) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::RollDiff' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, TargetRoll) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::TargetRoll' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, VecTarget) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::VecTarget' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, VecRot) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::VecRot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, TargetAngle) == 0x000034, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::TargetAngle' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, DeltaAngle) == 0x000038, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::DeltaAngle' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, Sign) == 0x00003C, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::Sign' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Less_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000041, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Cross_VectorVector_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_FClamp_ReturnValue) == 0x00006C, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_SelectFloat_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_isHitBackground_return) == 0x000074, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_isHitBackground_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000078, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Not_PreBool_ReturnValue) == 0x00007C, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_BooleanAND_ReturnValue) == 0x00007D, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_BooleanOR_ReturnValue) == 0x00007E, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_CalcDirectionVectorToTarget_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_CalcDirectionVectorToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_CalcDirectionVectorToTarget_return) == 0x00008C, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_CalcDirectionVectorToTarget_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Dot_VectorVector_ReturnValue) == 0x000090, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_DegAcos_ReturnValue) == 0x000094, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000098, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowRotate, CallFunc_IsValid_ReturnValue) == 0x00009D, "Member 'BP_PsychicComponentMain_C_UpdateThrowRotate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isHoming
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_IsHoming final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsHoming) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsHoming");
static_assert(sizeof(BP_PsychicComponentMain_C_IsHoming) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_IsHoming");
static_assert(offsetof(BP_PsychicComponentMain_C_IsHoming, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsHoming::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsHoming, CallFunc_Less_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsHoming::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CheckHitBackGround
// 0x0290 (0x0290 - 0x0000)
struct BP_PsychicComponentMain_C_CheckHitBackGround final
{
public:
	bool                                          Check_floor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_wall;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Check_celling;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                PosHit;                                            // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DbDrawType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypeList;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         HalfRadius;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosEnd;                                            // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosStart;                                          // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAttackType_return;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F6F[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHit_return;                            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F70[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isHitBackground_return;                   // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F71[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	uint8                                         Pad_5F72[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F73[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0160(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0170(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F74[0x1];                                     // 0x01FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F75[0x4];                                     // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            CallFunc_GetCollisionResponseToChannel_ReturnValue; // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F76[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x028A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CheckHitBackGround) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_CheckHitBackGround");
static_assert(sizeof(BP_PsychicComponentMain_C_CheckHitBackGround) == 0x000290, "Wrong size on BP_PsychicComponentMain_C_CheckHitBackGround");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, Check_floor) == 0x000000, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::Check_floor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, Check_wall) == 0x000001, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::Check_wall' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, Check_celling) == 0x000002, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::Check_celling' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, Return) == 0x000003, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, PosHit) == 0x000004, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::PosHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, DbDrawType) == 0x000010, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::DbDrawType' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, ObjectTypeList) == 0x000018, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::ObjectTypeList' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, HalfRadius) == 0x000028, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::HalfRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, Radius) == 0x00002C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::Radius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, PosEnd) == 0x000030, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::PosEnd' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, PosStart) == 0x00003C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::PosStart' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_CheckAttackType_return) == 0x000048, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_CheckAttackType_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00004C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_X) == 0x000058, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_Y) == 0x00005C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_Z) == 0x000060, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_SetHit_return) == 0x000064, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_SetHit_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_X_1) == 0x000074, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_Y_1) == 0x000078, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_Z_1) == 0x00007C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_isHitBackground_return) == 0x000081, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_isHitBackground_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, K2Node_MakeArray_Array) == 0x000088, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakTransform_Rotation) == 0x0000DC, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakTransform_Scale) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_GetComponentBounds_Origin) == 0x0000F4, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_GetComponentBounds_BoxExtent) == 0x000100, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_GetComponentBounds_SphereRadius) == 0x00010C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_MakeVector_ReturnValue) == 0x000114, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_MakeVector_ReturnValue_1) == 0x000120, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00012C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000138, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_Add_VectorVector_ReturnValue) == 0x000144, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000150, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, Temp_object_Variable) == 0x000160, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000170, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0001F8, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_bBlockingHit) == 0x0001F9, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001FA, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_Time) == 0x0001FC, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_Distance) == 0x000200, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_Location) == 0x000204, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_ImpactPoint) == 0x000210, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_Normal) == 0x00021C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000228, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_PhysMat) == 0x000238, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_HitActor) == 0x000240, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_HitComponent) == 0x000248, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_HitBoneName) == 0x000250, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_HitItem) == 0x000258, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_FaceIndex) == 0x00025C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_TraceStart) == 0x000260, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakHitResult_TraceEnd) == 0x00026C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_GetCollisionResponseToChannel_ReturnValue) == 0x000278, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_GetCollisionResponseToChannel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_X_2) == 0x00027C, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_Y_2) == 0x000280, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_BreakVector_Z_2) == 0x000284, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000288, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_Less_FloatFloat_ReturnValue) == 0x000289, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckHitBackGround, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x00028A, "Member 'BP_PsychicComponentMain_C_CheckHitBackGround::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CheckThrowLimit
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_CheckThrowLimit final
{
public:
	float                                         InputPin;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDestroyMain_return;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F77[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CheckThrowLimit) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_CheckThrowLimit");
static_assert(sizeof(BP_PsychicComponentMain_C_CheckThrowLimit) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_CheckThrowLimit");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckThrowLimit, InputPin) == 0x000000, "Member 'BP_PsychicComponentMain_C_CheckThrowLimit::InputPin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckThrowLimit, CallFunc_SetDestroyMain_return) == 0x000004, "Member 'BP_PsychicComponentMain_C_CheckThrowLimit::CallFunc_SetDestroyMain_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckThrowLimit, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_PsychicComponentMain_C_CheckThrowLimit::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckThrowLimit, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_CheckThrowLimit::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckThrowLimit, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_CheckThrowLimit::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetImpactPos
// 0x02B8 (0x02B8 - 0x0000)
struct BP_PsychicComponentMain_C_GetImpactPos final
{
public:
	struct FVector                                Param_PosImpact;                                   // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPos;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0094(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F78[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x0120(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F79[0x1];                                     // 0x01AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7A[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7B[0x2];                                     // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7C[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetImpactPos) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetImpactPos");
static_assert(sizeof(BP_PsychicComponentMain_C_GetImpactPos) == 0x0002B8, "Wrong size on BP_PsychicComponentMain_C_GetImpactPos");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, Param_PosImpact) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetImpactPos::Param_PosImpact' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, ImpactPos) == 0x00000C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::ImpactPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetImpactPos::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, Temp_object_Variable) == 0x000028, "Member 'BP_PsychicComponentMain_C_GetImpactPos::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, Temp_object_Variable_1) == 0x000038, "Member 'BP_PsychicComponentMain_C_GetImpactPos::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_GetComponentBounds_Origin) == 0x000060, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_GetComponentBounds_BoxExtent) == 0x00006C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_GetComponentBounds_SphereRadius) == 0x000078, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_Add_VectorVector_ReturnValue) == 0x00007C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000088, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000094, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x00011C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x000120, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x0001A8, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A9, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001AA, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Time) == 0x0001AC, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Distance) == 0x0001B0, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Location) == 0x0001B4, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_ImpactPoint) == 0x0001C0, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Normal) == 0x0001CC, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_ImpactNormal) == 0x0001D8, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_PhysMat) == 0x0001E8, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitActor) == 0x0001F0, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitComponent) == 0x0001F8, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitBoneName) == 0x000200, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitItem) == 0x000208, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_FaceIndex) == 0x00020C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_TraceStart) == 0x000210, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_TraceEnd) == 0x00021C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000228, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000229, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Time_1) == 0x00022C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Distance_1) == 0x000230, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Location_1) == 0x000234, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000240, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_Normal_1) == 0x00024C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000258, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_PhysMat_1) == 0x000268, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitActor_1) == 0x000270, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitComponent_1) == 0x000278, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitBoneName_1) == 0x000280, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_HitItem_1) == 0x000288, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_FaceIndex_1) == 0x00028C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_TraceStart_1) == 0x000290, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_BreakHitResult_TraceEnd_1) == 0x00029C, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetImpactPos, CallFunc_VLerp_ReturnValue) == 0x0002A8, "Member 'BP_PsychicComponentMain_C_GetImpactPos::CallFunc_VLerp_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.decAttackCount
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_DecAttackCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DecAttackCount) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_DecAttackCount");
static_assert(sizeof(BP_PsychicComponentMain_C_DecAttackCount) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_DecAttackCount");
static_assert(offsetof(BP_PsychicComponentMain_C_DecAttackCount, Count) == 0x000000, "Member 'BP_PsychicComponentMain_C_DecAttackCount::Count' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DecAttackCount, Temp_int_Variable) == 0x000004, "Member 'BP_PsychicComponentMain_C_DecAttackCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DecAttackCount, CallFunc_Less_IntInt_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_DecAttackCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DecAttackCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_DecAttackCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateLiftUp
// 0x0130 (0x0130 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateLiftUp final
{
public:
	bool                                          bDone;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LiftPosCenNew;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorToCentre_vector;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7F[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F80[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F81[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x00A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateLiftUp) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateLiftUp");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateLiftUp) == 0x000130, "Wrong size on BP_PsychicComponentMain_C_UpdateLiftUp");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, bDone) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::bDone' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, LiftPosCenNew) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::LiftPosCenNew' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_GetVectorToCentre_vector) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_GetVectorToCentre_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_BreakVector_X) == 0x00003C, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_BreakVector_Y) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_BreakVector_Z) == 0x000044, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_GetFloatValue_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_GetOwner_ReturnValue_1) == 0x000068, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Add_VectorVector_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00008C, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000090, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00009C, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUp, CallFunc_FClamp_ReturnValue) == 0x000128, "Member 'BP_PsychicComponentMain_C_UpdateLiftUp::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CheckGrabIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_CheckGrabIndex final
{
public:
	int32                                         Param_GrabIndex;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CheckGrabIndex) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_CheckGrabIndex");
static_assert(sizeof(BP_PsychicComponentMain_C_CheckGrabIndex) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_CheckGrabIndex");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckGrabIndex, Param_GrabIndex) == 0x000000, "Member 'BP_PsychicComponentMain_C_CheckGrabIndex::Param_GrabIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckGrabIndex, Return) == 0x000004, "Member 'BP_PsychicComponentMain_C_CheckGrabIndex::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckGrabIndex, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'BP_PsychicComponentMain_C_CheckGrabIndex::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.ReloadGrab
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_ReloadGrab final
{
public:
	int32                                         New_grab_index;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCombo;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_ReloadGrab) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_ReloadGrab");
static_assert(sizeof(BP_PsychicComponentMain_C_ReloadGrab) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_ReloadGrab");
static_assert(offsetof(BP_PsychicComponentMain_C_ReloadGrab, New_grab_index) == 0x000000, "Member 'BP_PsychicComponentMain_C_ReloadGrab::New_grab_index' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_ReloadGrab, bCombo) == 0x000004, "Member 'BP_PsychicComponentMain_C_ReloadGrab::bCombo' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetVectorToCentre
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_GetVectorToCentre final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F82[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetVectorToCentre) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetVectorToCentre");
static_assert(sizeof(BP_PsychicComponentMain_C_GetVectorToCentre) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_GetVectorToCentre");
static_assert(offsetof(BP_PsychicComponentMain_C_GetVectorToCentre, Vector) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetVectorToCentre::Vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetVectorToCentre, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_GetVectorToCentre::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetVectorToCentre, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetVectorToCentre::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetVectorToCentre, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_GetVectorToCentre::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.initParam
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_InitParam final
{
public:
	bool                                          Force_clear;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitParam) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_InitParam");
static_assert(sizeof(BP_PsychicComponentMain_C_InitParam) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_InitParam");
static_assert(offsetof(BP_PsychicComponentMain_C_InitParam, Force_clear) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitParam::Force_clear' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdatePosRot
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_UpdatePosRot final
{
public:
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F83[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateLiftUp_bDone;                       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateGrabStart_return;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNewAttach_return;                       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateGrabGauge_return;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdatePosRot) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdatePosRot");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdatePosRot) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_UpdatePosRot");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_Less_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_UpdateLiftUp_bDone) == 0x000009, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_UpdateLiftUp_bDone' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_UpdateGrabStart_return) == 0x00000A, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_UpdateGrabStart_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_IsNewAttach_return) == 0x00000B, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_IsNewAttach_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePosRot, CallFunc_UpdateGrabGauge_return) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdatePosRot::CallFunc_UpdateGrabGauge_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetAttachPos
// 0x000C (0x000C - 0x0000)
struct BP_PsychicComponentMain_C_GetAttachPos final
{
public:
	struct FVector                                Grab_pos;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetAttachPos) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_GetAttachPos");
static_assert(sizeof(BP_PsychicComponentMain_C_GetAttachPos) == 0x00000C, "Wrong size on BP_PsychicComponentMain_C_GetAttachPos");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttachPos, Grab_pos) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetAttachPos::Grab_pos' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetGrabOwnerTarget
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_GetGrabOwnerTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F84[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetCurrentTargetActor_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetGrabOwnerTarget) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetGrabOwnerTarget");
static_assert(sizeof(BP_PsychicComponentMain_C_GetGrabOwnerTarget) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_GetGrabOwnerTarget");
static_assert(offsetof(BP_PsychicComponentMain_C_GetGrabOwnerTarget, Target) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetGrabOwnerTarget::Target' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetGrabOwnerTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetGrabOwnerTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetGrabOwnerTarget, CallFunc_GetCurrentTargetActor_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_GetGrabOwnerTarget::CallFunc_GetCurrentTargetActor_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateEffectAura
// 0x0038 (0x0038 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateEffectAura final
{
public:
	float                                         AuraMax;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F85[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F86[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F87[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateEffectAura) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateEffectAura");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateEffectAura) == 0x000038, "Wrong size on BP_PsychicComponentMain_C_UpdateEffectAura");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, AuraMax) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::AuraMax' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_FClamp_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Less_FloatFloat_ReturnValue) == 0x000011, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_FClamp_ReturnValue_1) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_FClamp_ReturnValue_2) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectAura, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000034, "Member 'BP_PsychicComponentMain_C_UpdateEffectAura::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayAura
// 0x0078 (0x0078 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayAura final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Return;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F88[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayAura) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayAura");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayAura) == 0x000078, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayAura");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, Str) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::Str' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, CallFunc_Conv_FloatToString_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, CallFunc_IsVisible_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, CallFunc_SelectString_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayAura, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000068, "Member 'BP_PsychicComponentMain_C_DebugDisplayAura::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetPsychicDeltaSecond
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_GetPsychicDeltaSecond final
{
public:
	bool                                          bPsychicSpeed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bGetRate;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F89[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta_second;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F8B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds;   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetPsychicDeltaSecond");
static_assert(sizeof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_GetPsychicDeltaSecond");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, bPsychicSpeed) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::bPsychicSpeed' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, bGetRate) == 0x000001, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::bGetRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, Delta_second) == 0x000004, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::Delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, Rate) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::Rate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, CallFunc_GetPlayerManager_PlayerManager) == 0x000010, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, CallFunc_GetMainPlayer_Player) == 0x000020, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicDeltaSecond, CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds) == 0x000028, "Member 'BP_PsychicComponentMain_C_GetPsychicDeltaSecond::CallFunc_GetActorDeltaSeconds_ActorDeltaSeconds' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEffectAttackOld
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_SetEffectAttackOld final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	PsychicObjectAttackType::EPsychicObjectAttackType Attack_type;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEffectAttackOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetEffectAttackOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEffectAttackOld) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_SetEffectAttackOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAttackOld, Flag) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEffectAttackOld::Flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAttackOld, Attack_type) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetEffectAttackOld::Attack_type' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetDestroyMain
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_SetDestroyMain final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_fade_in;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetDestroyMain) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetDestroyMain");
static_assert(sizeof(BP_PsychicComponentMain_C_SetDestroyMain) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_SetDestroyMain");
static_assert(offsetof(BP_PsychicComponentMain_C_SetDestroyMain, Force) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetDestroyMain::Force' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetDestroyMain, No_fade_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetDestroyMain::No_fade_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetDestroyMain, Return) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetDestroyMain::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateDestroy
// 0x000C (0x000C - 0x0000)
struct BP_PsychicComponentMain_C_UpdateDestroy final
{
public:
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F8C[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isFadeFinish_return;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateDestroy) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateDestroy");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateDestroy) == 0x00000C, "Wrong size on BP_PsychicComponentMain_C_UpdateDestroy");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateDestroy, CallFunc_BooleanOR_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateDestroy::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateDestroy, CallFunc_BooleanOR_ReturnValue_1) == 0x000001, "Member 'BP_PsychicComponentMain_C_UpdateDestroy::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateDestroy, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'BP_PsychicComponentMain_C_UpdateDestroy::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateDestroy, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateDestroy::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateDestroy, CallFunc_isFadeFinish_return) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateDestroy::CallFunc_isFadeFinish_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CalcDeltaSecond
// 0x0040 (0x0040 - 0x0000)
struct BP_PsychicComponentMain_C_CalcDeltaSecond final
{
public:
	float                                         Delta_second;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Calc_delta_second;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F8D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldNormalDeltaSeconds_ReturnValue;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicDeltaSecond_delta_second;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicDeltaSecond_rate;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAccelerator_bAccelerator;               // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CalcDeltaSecond) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_CalcDeltaSecond");
static_assert(sizeof(BP_PsychicComponentMain_C_CalcDeltaSecond) == 0x000040, "Wrong size on BP_PsychicComponentMain_C_CalcDeltaSecond");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, Delta_second) == 0x000000, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::Delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, Calc_delta_second) == 0x000004, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::Calc_delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_GetWorldNormalDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_GetWorldNormalDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_FMin_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_GetPsychicDeltaSecond_delta_second) == 0x00002C, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_GetPsychicDeltaSecond_delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_GetPsychicDeltaSecond_rate) == 0x000030, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_GetPsychicDeltaSecond_rate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_Ease_ReturnValue) == 0x000034, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_Less_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_BooleanOR_ReturnValue) == 0x000039, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcDeltaSecond, CallFunc_IsAccelerator_bAccelerator) == 0x00003B, "Member 'BP_PsychicComponentMain_C_CalcDeltaSecond::CallFunc_IsAccelerator_bAccelerator' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.AddForce
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PsychicComponentMain_C_AddForce final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0024(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PsychicComponentMain_C_AddForce) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_AddForce");
static_assert(sizeof(BP_PsychicComponentMain_C_AddForce) == 0x0000B0, "Wrong size on BP_PsychicComponentMain_C_AddForce");
static_assert(offsetof(BP_PsychicComponentMain_C_AddForce, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_AddForce::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_AddForce, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_AddForce::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_AddForce, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_AddForce::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_AddForce, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000024, "Member 'BP_PsychicComponentMain_C_AddForce::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.setAccelerateFilter
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_SetAccelerateFilter final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAccelerateFilter) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetAccelerateFilter");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAccelerateFilter) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_SetAccelerateFilter");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAccelerateFilter, Flag) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAccelerateFilter::Flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAccelerateFilter, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetAccelerateFilter::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetOutline
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetOutline final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_flag;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F8F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F90[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetOutline) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetOutline");
static_assert(sizeof(BP_PsychicComponentMain_C_SetOutline) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetOutline");
static_assert(offsetof(BP_PsychicComponentMain_C_SetOutline, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetOutline::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetOutline, L_flag) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetOutline::L_flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetOutline, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetOutline::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetOutline, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetOutline::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetOutline, CallFunc_SelectInt_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetOutline::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrowSnapOld
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrowSnapOld final
{
public:
	float                                         Delta_second;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DstRot;                                            // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrowSnapOld) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrowSnapOld");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrowSnapOld) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_UpdateThrowSnapOld");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSnapOld, Delta_second) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrowSnapOld::Delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowSnapOld, DstRot) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateThrowSnapOld::DstRot' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetActionCount
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetActionCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPress;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetActionCount) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetActionCount");
static_assert(sizeof(BP_PsychicComponentMain_C_SetActionCount) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetActionCount");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActionCount, Count) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetActionCount::Count' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActionCount, bPress) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetActionCount::bPress' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdatePsychicDelta
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_UpdatePsychicDelta final
{
public:
	float                                         Delta_second;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicDeltaSecond_delta_second;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychicDeltaSecond_rate;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcDeltaSecond_calc_delta_second;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdatePsychicDelta) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdatePsychicDelta");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdatePsychicDelta) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_UpdatePsychicDelta");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePsychicDelta, Delta_second) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdatePsychicDelta::Delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePsychicDelta, CallFunc_GetPsychicDeltaSecond_delta_second) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdatePsychicDelta::CallFunc_GetPsychicDeltaSecond_delta_second' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePsychicDelta, CallFunc_GetPsychicDeltaSecond_rate) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdatePsychicDelta::CallFunc_GetPsychicDeltaSecond_rate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdatePsychicDelta, CallFunc_CalcDeltaSecond_calc_delta_second) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdatePsychicDelta::CallFunc_CalcDeltaSecond_calc_delta_second' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CanThrow
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_CanThrow final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CanThrow) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_CanThrow");
static_assert(sizeof(BP_PsychicComponentMain_C_CanThrow) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_CanThrow");
static_assert(offsetof(BP_PsychicComponentMain_C_CanThrow, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_CanThrow::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CanThrow, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_CanThrow::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CallAttackSE
// 0x0014 (0x0014 - 0x0000)
struct BP_PsychicComponentMain_C_CallAttackSE final
{
public:
	bool                                          bForceThrow;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Param_bPsychicCombo;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F91[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SoundPos;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_CallAttackSE) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_CallAttackSE");
static_assert(sizeof(BP_PsychicComponentMain_C_CallAttackSE) == 0x000014, "Wrong size on BP_PsychicComponentMain_C_CallAttackSE");
static_assert(offsetof(BP_PsychicComponentMain_C_CallAttackSE, bForceThrow) == 0x000000, "Member 'BP_PsychicComponentMain_C_CallAttackSE::bForceThrow' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CallAttackSE, Param_bPsychicCombo) == 0x000001, "Member 'BP_PsychicComponentMain_C_CallAttackSE::Param_bPsychicCombo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CallAttackSE, Param_Index) == 0x000004, "Member 'BP_PsychicComponentMain_C_CallAttackSE::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CallAttackSE, SoundPos) == 0x000008, "Member 'BP_PsychicComponentMain_C_CallAttackSE::SoundPos' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isDestroy
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsDestroy final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsDestroy) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsDestroy");
static_assert(sizeof(BP_PsychicComponentMain_C_IsDestroy) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsDestroy");
static_assert(offsetof(BP_PsychicComponentMain_C_IsDestroy, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsDestroy::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetGrabStart
// 0x0028 (0x0028 - 0x0000)
struct BP_PsychicComponentMain_C_SetGrabStart final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F92[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vec_start;                                         // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecPlayerFront;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecPsyObj;                                         // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetGrabStart) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetGrabStart");
static_assert(sizeof(BP_PsychicComponentMain_C_SetGrabStart) == 0x000028, "Wrong size on BP_PsychicComponentMain_C_SetGrabStart");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabStart, bRight) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetGrabStart::bRight' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabStart, Vec_start) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetGrabStart::Vec_start' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabStart, VecPlayerFront) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetGrabStart::VecPlayerFront' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabStart, VecPsyObj) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetGrabStart::VecPsyObj' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateGrabStart
// 0x01F0 (0x01F0 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateGrabStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F93[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DstRot;                                            // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F94[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F95[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F96[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldRotation_SweepHitResult;  // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0148(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F97[0x1];                                     // 0x01D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateGrabStart) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_UpdateGrabStart");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateGrabStart) == 0x0001F0, "Wrong size on BP_PsychicComponentMain_C_UpdateGrabStart");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, DstRot) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::DstRot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_FMin_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_GetFloatValue_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000038, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_MakeRotator_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_BreakTransform_Location) == 0x00007C, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_BreakTransform_Rotation) == 0x000088, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_BreakTransform_Scale) == 0x000094, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_FMin_ReturnValue_1) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_GetFloatValue_ReturnValue_1) == 0x0000A4, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_K2_AddActorWorldRotation_SweepHitResult) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_K2_AddActorWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Add_VectorVector_ReturnValue) == 0x000130, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_ComposeRotators_ReturnValue) == 0x00013C, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000148, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001D0, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0001D1, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_BooleanAND_ReturnValue) == 0x0001D2, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001D4, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001D8, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001DC, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateGrabStart, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001E8, "Member 'BP_PsychicComponentMain_C_UpdateGrabStart::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetGrabGauge
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetGrabGauge final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetGrabGauge) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetGrabGauge");
static_assert(sizeof(BP_PsychicComponentMain_C_SetGrabGauge) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetGrabGauge");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabGauge, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetGrabGauge::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttach
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttach final
{
public:
	bool                                          bAttach;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bForce;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttach) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetAttach");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttach) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_SetAttach");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttach, bAttach) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttach::bAttach' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttach, bForce) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetAttach::bForce' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetSasAttributeOld
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_SetSasAttributeOld final
{
public:
	E_SASKind                                     Param_SasKind;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetSasAttributeOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetSasAttributeOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetSasAttributeOld) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_SetSasAttributeOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasAttributeOld, Param_SasKind) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetSasAttributeOld::Param_SasKind' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasAttributeOld, Force) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetSasAttributeOld::Force' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackSkillInfo
// 0x03B8 (0x03B8 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackSkillInfo final
{
public:
	struct FHCSkillCommonInfo                     WorkSkillInfo;                                     // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FHCSkillCommonInfo                     Return;                                            // 0x00F0(0x00F0)(Parm, OutParm)
	EHCSkillExtraType                             L_extraType;                                       // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F98[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillExtraType>                     WorkExtraList;                                     // 0x01E8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         L_Power;                                           // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Crash;                                           // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Value;                                           // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F99[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCSkillCommonInfo                     TmpCmd;                                            // 0x0208(0x00F0)(Edit, BlueprintVisible)
	EHCSkillExtraType                             Temp_byte_Variable;                                // 0x02F8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_1;                              // 0x02F9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_2;                              // 0x02FA(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9A[0x5];                                     // 0x02FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillAttribute>                     K2Node_MakeArray_Array;                            // 0x0300(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F9B[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHCSkillAttribute>                     K2Node_MakeArray_Array_1;                          // 0x0318(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F9C[0x3];                                     // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_3;                              // 0x0330(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_4;                              // 0x0331(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9D[0x6];                                     // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9E[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F9F[0x3];                                     // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA0[0x3];                                     // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA1[0x3];                                     // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHCSkillExtraType                             Temp_byte_Variable_5;                              // 0x0390(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA2[0x3];                                     // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA3[0x2];                                     // 0x03AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackSkillInfo) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackSkillInfo");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackSkillInfo) == 0x0003B8, "Wrong size on BP_PsychicComponentMain_C_SetAttackSkillInfo");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, WorkSkillInfo) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::WorkSkillInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Return) == 0x0000F0, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, L_extraType) == 0x0001E0, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::L_extraType' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, WorkExtraList) == 0x0001E8, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::WorkExtraList' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, L_Power) == 0x0001F8, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::L_Power' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, L_Crash) == 0x0001FC, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::L_Crash' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, L_Value) == 0x000200, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::L_Value' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, TmpCmd) == 0x000208, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::TmpCmd' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_byte_Variable) == 0x0002F8, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_byte_Variable_1) == 0x0002F9, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_byte_Variable_2) == 0x0002FA, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, K2Node_MakeArray_Array) == 0x000300, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, K2Node_SwitchEnum_CmpSuccess) == 0x000310, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, K2Node_MakeArray_Array_1) == 0x000318, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, K2Node_SwitchEnum_CmpSuccess_1) == 0x000328, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_int_Loop_Num_Variable) == 0x00032C, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_byte_Variable_3) == 0x000330, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_byte_Variable_4) == 0x000331, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000338, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_int_Array_Index_Variable) == 0x000348, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Concat_StrStr_ReturnValue) == 0x000350, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue) == 0x000360, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue_1) == 0x000364, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Find_ReturnValue) == 0x000368, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00036C, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Length_ReturnValue) == 0x000370, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue_2) == 0x000374, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_int_Loop_Counter_Variable) == 0x000378, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Less_IntInt_ReturnValue) == 0x00037C, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Add_IntInt_ReturnValue) == 0x000380, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_int_Loop_Num_Variable_1) == 0x000384, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, K2Node_SwitchEnum_CmpSuccess_2) == 0x000388, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_int_Array_Index_Variable_1) == 0x00038C, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_byte_Variable_5) == 0x000390, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue_3) == 0x000394, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue_4) == 0x000398, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue_5) == 0x00039C, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Add_ReturnValue_6) == 0x0003A0, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, Temp_int_Loop_Counter_Variable_1) == 0x0003A4, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, K2Node_SwitchEnum_CmpSuccess_3) == 0x0003A8, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Less_IntInt_ReturnValue_1) == 0x0003A9, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Add_IntInt_ReturnValue_1) == 0x0003AC, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfo, CallFunc_Array_Length_ReturnValue_1) == 0x0003B0, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfo::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEffectHitEnemyThrow
// 0x0418 (0x0418 - 0x0000)
struct BP_PsychicComponentMain_C_SetEffectHitEnemyThrow final
{
public:
	bool                                          Check_background;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceFloor;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalFloor;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosHitFloor;                                       // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceWall;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalWall;                                        // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosHitWall;                                        // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bImapct;                                           // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA5[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowDirHz;                                        // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecEffect;                                         // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotEffect;                                         // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                PosEffect;                                         // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA6[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA7[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0128(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA8[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FA9[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0178(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_4;                   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x01D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0262(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FAA[0x1];                                     // 0x0263(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FAB[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x02E0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x02F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FAC[0x3];                                     // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x038D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FAD[0x2];                                     // 0x038E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x03A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x03D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0408(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue_1;               // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetEffectHitEnemyThrow");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow) == 0x000418, "Wrong size on BP_PsychicComponentMain_C_SetEffectHitEnemyThrow");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, Check_background) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::Check_background' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, DistanceFloor) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::DistanceFloor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, NormalFloor) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::NormalFloor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, PosHitFloor) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::PosHitFloor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, DistanceWall) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::DistanceWall' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, NormalWall) == 0x000024, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::NormalWall' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, PosHitWall) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::PosHitWall' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, bImapct) == 0x00003C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::bImapct' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, ThrowDirHz) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::ThrowDirHz' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, VecEffect) == 0x00004C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::VecEffect' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, RotEffect) == 0x000058, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::RotEffect' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, PosEffect) == 0x000064, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::PosEffect' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_GetOwner_ReturnValue) == 0x000078, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00008C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000098, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0000A4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0000BC, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000C8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_MakeRotFromZ_ReturnValue) == 0x0000D4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_GetOwner_ReturnValue_1) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_MakeVector_ReturnValue) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000F4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_MakeVector_ReturnValue_1) == 0x000100, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, K2Node_MakeArray_Array) == 0x000110, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_GetOwner_ReturnValue_2) == 0x000120, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, Temp_object_Variable) == 0x000128, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000138, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_GetOwner_ReturnValue_3) == 0x000148, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000150, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00015C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000168, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, K2Node_MakeArray_Array_1) == 0x000178, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_GetOwner_ReturnValue_4) == 0x000188, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_GetOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000190, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakVector_X) == 0x00019C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakVector_Y) == 0x0001A0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakVector_Z) == 0x0001A4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0001A8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_MakeVector_ReturnValue_2) == 0x0001B4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0001C0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Normal_ReturnValue) == 0x0001CC, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0001D8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000260, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_bBlockingHit) == 0x000261, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_bInitialOverlap) == 0x000262, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Time) == 0x000264, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Distance) == 0x000268, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Location) == 0x00026C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_ImpactPoint) == 0x000278, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Normal) == 0x000284, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_ImpactNormal) == 0x000290, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_PhysMat) == 0x0002A0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitActor) == 0x0002A8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitComponent) == 0x0002B0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitBoneName) == 0x0002B8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitItem) == 0x0002C0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_FaceIndex) == 0x0002C4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_TraceStart) == 0x0002C8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_TraceEnd) == 0x0002D4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, Temp_object_Variable_1) == 0x0002E0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x0002F0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x000378, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00037C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_VSizeSquared_ReturnValue) == 0x000388, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_bBlockingHit_1) == 0x00038C, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00038D, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Time_1) == 0x000390, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Distance_1) == 0x000394, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Location_1) == 0x000398, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0003A4, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_Normal_1) == 0x0003B0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0003BC, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_PhysMat_1) == 0x0003C8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitActor_1) == 0x0003D0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitComponent_1) == 0x0003D8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitBoneName_1) == 0x0003E0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_HitItem_1) == 0x0003E8, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_FaceIndex_1) == 0x0003EC, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_TraceStart_1) == 0x0003F0, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_BreakHitResult_TraceEnd_1) == 0x0003FC, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000408, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectHitEnemyThrow, CallFunc_VSizeSquared_ReturnValue_1) == 0x000414, "Member 'BP_PsychicComponentMain_C_SetEffectHitEnemyThrow::CallFunc_VSizeSquared_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetImpactPos
// 0x01D0 (0x01D0 - 0x0000)
struct BP_PsychicComponentMain_C_SetImpactPos final
{
public:
	struct FVector                                Impact_pos_in;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   MeshBoundingBox;                                   // 0x000C(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                LocalImpactPos;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterPosition;                                    // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosWork;                                           // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FAE[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FAF[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_MathExpression_ReturnValue;                 // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_GetImportedBounds_ReturnValue;            // 0x00A8(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB0[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue;                      // 0x00E8(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   CallFunc_GetBoundingBox_ReturnValue;               // 0x0104(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_5;      // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue_1;                    // 0x016C(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   CallFunc_MakeBox_ReturnValue_2;                    // 0x0188(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LineBoxIntersection_HitLocation;          // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LineBoxIntersection_HitNormal;            // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LineBoxIntersection_HitLength;            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LineBoxIntersection_ReturnValue;          // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB1[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetImpactPos) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetImpactPos");
static_assert(sizeof(BP_PsychicComponentMain_C_SetImpactPos) == 0x0001D0, "Wrong size on BP_PsychicComponentMain_C_SetImpactPos");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, Impact_pos_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetImpactPos::Impact_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, MeshBoundingBox) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::MeshBoundingBox' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, LocalImpactPos) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetImpactPos::LocalImpactPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CenterPosition) == 0x000034, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CenterPosition' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, PosWork) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetImpactPos::PosWork' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_InverseTransformLocation_ReturnValue) == 0x00004C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000064, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Normal_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00007C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000090, "Member 'BP_PsychicComponentMain_C_SetImpactPos::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BP_PsychicComponentMain_C_SetImpactPos::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, K2Node_MathExpression_ReturnValue) == 0x00009C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_GetImportedBounds_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_GetImportedBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_SetImpactPos::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_PsychicComponentMain_C_SetImpactPos::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x0000DC, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_MakeBox_ReturnValue) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_MakeBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_GetBoundingBox_ReturnValue) == 0x000104, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_GetBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_GetComponentBounds_Origin) == 0x000120, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_GetComponentBounds_BoxExtent) == 0x00012C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_GetComponentBounds_SphereRadius) == 0x000138, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x00013C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000148, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x000154, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Subtract_VectorVector_ReturnValue_5) == 0x000160, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Subtract_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_MakeBox_ReturnValue_1) == 0x00016C, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_MakeBox_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_MakeBox_ReturnValue_2) == 0x000188, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_MakeBox_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_LineBoxIntersection_HitLocation) == 0x0001A4, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_LineBoxIntersection_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_LineBoxIntersection_HitNormal) == 0x0001B0, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_LineBoxIntersection_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_LineBoxIntersection_HitLength) == 0x0001BC, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_LineBoxIntersection_HitLength' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_LineBoxIntersection_ReturnValue) == 0x0001C0, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_LineBoxIntersection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetImpactPos, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0001C4, "Member 'BP_PsychicComponentMain_C_SetImpactPos::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetArrowDirection
// 0x0024 (0x0024 - 0x0000)
struct BP_PsychicComponentMain_C_GetArrowDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetArrowDirection) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_GetArrowDirection");
static_assert(sizeof(BP_PsychicComponentMain_C_GetArrowDirection) == 0x000024, "Wrong size on BP_PsychicComponentMain_C_GetArrowDirection");
static_assert(offsetof(BP_PsychicComponentMain_C_GetArrowDirection, Direction) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetArrowDirection::Direction' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetArrowDirection, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_GetArrowDirection::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetArrowDirection, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetArrowDirection::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayDeform
// 0x00F0 (0x00F0 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayDeform final
{
public:
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB3[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0050(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB4[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayDeform) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayDeform");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayDeform) == 0x0000F0, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayDeform");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Add_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_IsVisible_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_MakeVector_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_MakeVector_ReturnValue_1) == 0x000018, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_MakeVector_ReturnValue_2) == 0x000028, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_MakeVector_ReturnValue_3) == 0x000034, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_GetTransform_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_BreakTransform_Location) == 0x000084, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_BreakTransform_Rotation) == 0x000090, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_BreakTransform_Scale) == 0x00009C, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B4, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0000CC, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0000D8, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayDeform, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0000E4, "Member 'BP_PsychicComponentMain_C_DebugDisplayDeform::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitializeDataTableOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_InitializeDataTableOld final
{
public:
	PsychicObjectID::EPsychicObjectID             PsychicObjectID_in;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitializeDataTableOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_InitializeDataTableOld");
static_assert(sizeof(BP_PsychicComponentMain_C_InitializeDataTableOld) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_InitializeDataTableOld");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializeDataTableOld, PsychicObjectID_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitializeDataTableOld::PsychicObjectID_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CheckAttackAtrribute
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_CheckAttackAtrribute final
{
public:
	E_SASKind                                     Attribute_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LEnable;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnableSASEffect_bEnable;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableSASEffect_bEnable_1;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB6[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsEnableSASEffect_Param0_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param1_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param2_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsEnableSASEffect_Param3_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CheckAttackAtrribute) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_CheckAttackAtrribute");
static_assert(sizeof(BP_PsychicComponentMain_C_CheckAttackAtrribute) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_CheckAttackAtrribute");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, Attribute_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::Attribute_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, Return) == 0x000001, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, LEnable) == 0x000002, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::LEnable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_bEnable) == 0x000004, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_bEnable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param0) == 0x000008, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param0' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param1) == 0x00000C, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param2) == 0x000010, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param3) == 0x000014, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_bEnable_1) == 0x000018, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_bEnable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param0_1) == 0x00001C, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param0_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param1_1) == 0x000020, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param1_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param2_1) == 0x000024, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param2_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsEnableSASEffect_Param3_1) == 0x000028, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsEnableSASEffect_Param3_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackAtrribute, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_CheckAttackAtrribute::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackAttributeOld
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackAttributeOld final
{
public:
	E_SASKind                                     Attribute_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SASKind                                     L_prevSasKind;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackAttributeOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackAttributeOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackAttributeOld) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_SetAttackAttributeOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackAttributeOld, Attribute_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackAttributeOld::Attribute_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackAttributeOld, Force) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetAttackAttributeOld::Force' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackAttributeOld, L_prevSasKind) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetAttackAttributeOld::L_prevSasKind' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isHitBackground
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_IsHitBackground final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsHitBackground) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsHitBackground");
static_assert(sizeof(BP_PsychicComponentMain_C_IsHitBackground) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_IsHitBackground");
static_assert(offsetof(BP_PsychicComponentMain_C_IsHitBackground, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsHitBackground::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsHitBackground, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsHitBackground::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsHitBackground, CallFunc_BooleanOR_ReturnValue_1) == 0x000002, "Member 'BP_PsychicComponentMain_C_IsHitBackground::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.convVectorToActorFrontVector
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_ConvVectorToActorFrontVector final
{
public:
	struct FVector                                World_vector;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Actor_vector;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_ConvVectorToActorFrontVector) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_ConvVectorToActorFrontVector");
static_assert(sizeof(BP_PsychicComponentMain_C_ConvVectorToActorFrontVector) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_ConvVectorToActorFrontVector");
static_assert(offsetof(BP_PsychicComponentMain_C_ConvVectorToActorFrontVector, World_vector) == 0x000000, "Member 'BP_PsychicComponentMain_C_ConvVectorToActorFrontVector::World_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_ConvVectorToActorFrontVector, Actor_vector) == 0x00000C, "Member 'BP_PsychicComponentMain_C_ConvVectorToActorFrontVector::Actor_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_ConvVectorToActorFrontVector, CallFunc_NegateRotator_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_ConvVectorToActorFrontVector::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_ConvVectorToActorFrontVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_ConvVectorToActorFrontVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetAttackPos
// 0x0060 (0x0060 - 0x0000)
struct BP_PsychicComponentMain_C_GetAttackPos final
{
public:
	struct FVector                                Attack_pos;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosWork;                                           // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IndexMin;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistMin;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB7[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FB8[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetWeakTargetPoint_Point;                 // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetAttackPos) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetAttackPos");
static_assert(sizeof(BP_PsychicComponentMain_C_GetAttackPos) == 0x000060, "Wrong size on BP_PsychicComponentMain_C_GetAttackPos");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, Attack_pos) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetAttackPos::Attack_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, PosWork) == 0x00000C, "Member 'BP_PsychicComponentMain_C_GetAttackPos::PosWork' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, IndexMin) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetAttackPos::IndexMin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, DistMin) == 0x00001C, "Member 'BP_PsychicComponentMain_C_GetAttackPos::DistMin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, CallFunc_GetComponentBounds_Origin) == 0x000020, "Member 'BP_PsychicComponentMain_C_GetAttackPos::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, CallFunc_GetComponentBounds_BoxExtent) == 0x00002C, "Member 'BP_PsychicComponentMain_C_GetAttackPos::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, CallFunc_GetComponentBounds_SphereRadius) == 0x000038, "Member 'BP_PsychicComponentMain_C_GetAttackPos::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000040, "Member 'BP_PsychicComponentMain_C_GetAttackPos::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PsychicComponentMain_C_GetAttackPos::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'BP_PsychicComponentMain_C_GetAttackPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackPos, CallFunc_GetWeakTargetPoint_Point) == 0x000054, "Member 'BP_PsychicComponentMain_C_GetAttackPos::CallFunc_GetWeakTargetPoint_Point' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackThrowAll
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackThrowAll final
{
public:
	class AActor*                                 Target_actor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Throw_all_index;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Throw_all_angle;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Throw_all_offset;                                  // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LayerNo;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackThrowAll) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackThrowAll");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackThrowAll) == 0x000020, "Wrong size on BP_PsychicComponentMain_C_SetAttackThrowAll");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowAll, Target_actor) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackThrowAll::Target_actor' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowAll, Throw_all_index) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackThrowAll::Throw_all_index' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowAll, Throw_all_angle) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetAttackThrowAll::Throw_all_angle' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowAll, Throw_all_offset) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetAttackThrowAll::Throw_all_offset' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowAll, LayerNo) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetAttackThrowAll::LayerNo' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateThrowAll
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateThrowAll final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosAttack;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateThrowAll) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateThrowAll");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateThrowAll) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_UpdateThrowAll");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowAll, Rate) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateThrowAll::Rate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateThrowAll, PosAttack) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateThrowAll::PosAttack' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetCharacterHitCapsule
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_GetCharacterHitCapsule final
{
public:
	class ARSBattleCharacter_C*                   Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetCharacterHitCapsule) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetCharacterHitCapsule");
static_assert(sizeof(BP_PsychicComponentMain_C_GetCharacterHitCapsule) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_GetCharacterHitCapsule");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCharacterHitCapsule, Character) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetCharacterHitCapsule::Character' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCharacterHitCapsule, Capsule) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetCharacterHitCapsule::Capsule' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetCharacterHitOrigin
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_GetCharacterHitOrigin final
{
public:
	class ARSBattleCharacter_C*                   Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Capsule_pos;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CallFunc_GetCharacterHitCapsule_capsule;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetCharacterHitOrigin) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetCharacterHitOrigin");
static_assert(sizeof(BP_PsychicComponentMain_C_GetCharacterHitOrigin) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_GetCharacterHitOrigin");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCharacterHitOrigin, Character) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetCharacterHitOrigin::Character' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCharacterHitOrigin, Capsule_pos) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetCharacterHitOrigin::Capsule_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCharacterHitOrigin, CallFunc_GetCharacterHitCapsule_capsule) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetCharacterHitOrigin::CallFunc_GetCharacterHitCapsule_capsule' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCharacterHitOrigin, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_GetCharacterHitOrigin::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CalcCharacterHitRadius
// 0x00E0 (0x00E0 - 0x0000)
struct BP_PsychicComponentMain_C_CalcCharacterHitRadius final
{
public:
	class ARSBattleCharacter_C*                   Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHorizontal;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FBA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CallFunc_GetCharacterHitCapsule_capsule;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_CalcCharacterHitRadius) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_CalcCharacterHitRadius");
static_assert(sizeof(BP_PsychicComponentMain_C_CalcCharacterHitRadius) == 0x0000E0, "Wrong size on BP_PsychicComponentMain_C_CalcCharacterHitRadius");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, Character) == 0x000000, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::Character' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, bHorizontal) == 0x000008, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::bHorizontal' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, Radius) == 0x00000C, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::Radius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_GetCharacterHitCapsule_capsule) == 0x000010, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_GetCharacterHitCapsule_capsule' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakVector_X) == 0x000078, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakVector_Y) == 0x00007C, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakVector_Z) == 0x000080, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_Add_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_MakeVector_ReturnValue) == 0x000088, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_MakeVector_ReturnValue_1) == 0x000094, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000AC, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakVector_X_1) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakVector_Y_1) == 0x0000BC, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_BreakVector_Z_1) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_MakeVector_ReturnValue_2) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_VSize_ReturnValue) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CalcCharacterHitRadius, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000D4, "Member 'BP_PsychicComponentMain_C_CalcCharacterHitRadius::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEffectAuraFlashOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetEffectAuraFlashOld final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEffectAuraFlashOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetEffectAuraFlashOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEffectAuraFlashOld) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetEffectAuraFlashOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAuraFlashOld, Flag) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEffectAuraFlashOld::Flag' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetBrainGrab
// 0x0110 (0x0110 - 0x0000)
struct BP_PsychicComponentMain_C_SetBrainGrab final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FBB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         brain_index_in;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                brain_pos_in;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBC[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_name;                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorToCentre_vector;                 // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FBD[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0084(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetBrainGrab) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetBrainGrab");
static_assert(sizeof(BP_PsychicComponentMain_C_SetBrainGrab) == 0x000110, "Wrong size on BP_PsychicComponentMain_C_SetBrainGrab");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, brain_index_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::brain_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, Grab_owner_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, brain_pos_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::brain_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_GetDisplayName_name) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_GetDisplayName_name' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_GetVectorToCentre_vector) == 0x000050, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_GetVectorToCentre_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00005C, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_Add_VectorVector_ReturnValue) == 0x00006C, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainGrab, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000084, "Member 'BP_PsychicComponentMain_C_SetBrainGrab::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateBrainFloatOld
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateBrainFloatOld final
{
public:
	float                                         brainFloatLoop;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         brainFloatRate;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateBrainFloatOld) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateBrainFloatOld");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateBrainFloatOld) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_UpdateBrainFloatOld");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainFloatOld, brainFloatLoop) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateBrainFloatOld::brainFloatLoop' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainFloatOld, brainFloatRate) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateBrainFloatOld::brainFloatRate' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEffectAuraGrow
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_SetEffectAuraGrow final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Force_off;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Instance_on;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEffectAuraGrow) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetEffectAuraGrow");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEffectAuraGrow) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_SetEffectAuraGrow");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAuraGrow, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEffectAuraGrow::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAuraGrow, Force_off) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetEffectAuraGrow::Force_off' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAuraGrow, Instance_on) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetEffectAuraGrow::Instance_on' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectAuraGrow, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000003, "Member 'BP_PsychicComponentMain_C_SetEffectAuraGrow::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetReloadGrab
// 0x0048 (0x0048 - 0x0000)
struct BP_PsychicComponentMain_C_SetReloadGrab final
{
public:
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grab_index_in;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flag_in;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FBE[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_name;                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetReloadGrab) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetReloadGrab");
static_assert(sizeof(BP_PsychicComponentMain_C_SetReloadGrab) == 0x000048, "Wrong size on BP_PsychicComponentMain_C_SetReloadGrab");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, Grab_owner_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, Grab_index_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::Grab_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, Flag_in) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, CallFunc_GetDisplayName_name) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::CallFunc_GetDisplayName_name' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, CallFunc_SetVisibilityPsyObj_return) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetReloadGrab, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_PsychicComponentMain_C_SetReloadGrab::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetRequestFromSearch
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetRequestFromSearch final
{
public:
	int32                                         Request_index_in;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Grab_gauge_in;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetRequestFromSearch) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetRequestFromSearch");
static_assert(sizeof(BP_PsychicComponentMain_C_SetRequestFromSearch) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetRequestFromSearch");
static_assert(offsetof(BP_PsychicComponentMain_C_SetRequestFromSearch, Request_index_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetRequestFromSearch::Request_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetRequestFromSearch, Grab_gauge_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetRequestFromSearch::Grab_gauge_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetRequestFromBrain
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_SetRequestFromBrain final
{
public:
	int32                                         Request_index_in;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetRequestFromBrain) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetRequestFromBrain");
static_assert(sizeof(BP_PsychicComponentMain_C_SetRequestFromBrain) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_SetRequestFromBrain");
static_assert(offsetof(BP_PsychicComponentMain_C_SetRequestFromBrain, Request_index_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetRequestFromBrain::Request_index_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitializeBrainField
// 0x000C (0x000C - 0x0000)
struct BP_PsychicComponentMain_C_InitializeBrainField final
{
public:
	float                                         Float_height_base_in;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Float_height_range_in;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitializeBrainField) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_InitializeBrainField");
static_assert(sizeof(BP_PsychicComponentMain_C_InitializeBrainField) == 0x00000C, "Wrong size on BP_PsychicComponentMain_C_InitializeBrainField");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializeBrainField, Float_height_base_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitializeBrainField::Float_height_base_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializeBrainField, Float_height_range_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_InitializeBrainField::Float_height_range_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializeBrainField, CallFunc_SetVisibilityPsyObj_return) == 0x000008, "Member 'BP_PsychicComponentMain_C_InitializeBrainField::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetUniqueGrab
// 0x0028 (0x0028 - 0x0000)
struct BP_PsychicComponentMain_C_SetUniqueGrab final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FBF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grab_index_in;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket_name;                                       // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_clusterIndex;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_bCluster;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetUniqueGrab) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetUniqueGrab");
static_assert(sizeof(BP_PsychicComponentMain_C_SetUniqueGrab) == 0x000028, "Wrong size on BP_PsychicComponentMain_C_SetUniqueGrab");
static_assert(offsetof(BP_PsychicComponentMain_C_SetUniqueGrab, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetUniqueGrab::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetUniqueGrab, Grab_owner_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetUniqueGrab::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetUniqueGrab, Grab_index_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetUniqueGrab::Grab_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetUniqueGrab, Socket_name) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetUniqueGrab::Socket_name' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetUniqueGrab, L_clusterIndex) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetUniqueGrab::L_clusterIndex' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetUniqueGrab, L_bCluster) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetUniqueGrab::L_bCluster' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetHitThrow
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetHitThrow final
{
public:
	bool                                          CallFunc_SetDestroyMain_return;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetHitThrow) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetHitThrow");
static_assert(sizeof(BP_PsychicComponentMain_C_SetHitThrow) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetHitThrow");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitThrow, CallFunc_SetDestroyMain_return) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetHitThrow::CallFunc_SetDestroyMain_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateFacetsApparition
// 0x00D8 (0x00D8 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateFacetsApparition final
{
public:
	struct FVector                                UpVector;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AffectPos;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC1[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC2[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC3[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC4[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateFacetsApparition) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateFacetsApparition");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateFacetsApparition) == 0x0000D8, "Wrong size on BP_PsychicComponentMain_C_UpdateFacetsApparition");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, UpVector) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::UpVector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, AffectPos) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::AffectPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_GetChildrenComponents_Children) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_GetObjectName_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00006C, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_GetUpVector_ReturnValue) == 0x000078, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_MakeVector_ReturnValue) == 0x000084, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_MakeVector_ReturnValue_1) == 0x000090, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00009C, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_VLerp_ReturnValue) == 0x0000AC, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000C5, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000C8, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000CC, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateFacetsApparition, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_UpdateFacetsApparition::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetFacetApparition
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_SetFacetApparition final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetFacetApparition) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetFacetApparition");
static_assert(sizeof(BP_PsychicComponentMain_C_SetFacetApparition) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_SetFacetApparition");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparition, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetFacetApparition::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparition, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetFacetApparition::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetFacetApparitionMaterial
// 0x0060 (0x0060 - 0x0000)
struct BP_PsychicComponentMain_C_SetFacetApparitionMaterial final
{
public:
	class UPrimitiveComponent*                    Mesh_in;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Affect_pos_in;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Up_vec_in;                                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC5[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetFacetApparitionMaterial");
static_assert(sizeof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial) == 0x000060, "Wrong size on BP_PsychicComponentMain_C_SetFacetApparitionMaterial");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, Mesh_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::Mesh_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, Affect_pos_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::Affect_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, Up_vec_in) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::Up_vec_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, Temp_int_Variable) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_GetNumMaterials_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x00003C, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFacetApparitionMaterial, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x00004C, "Member 'BP_PsychicComponentMain_C_SetFacetApparitionMaterial::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetBrainAppear
// 0x0014 (0x0014 - 0x0000)
struct BP_PsychicComponentMain_C_SetBrainAppear final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetBrainAppear) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetBrainAppear");
static_assert(sizeof(BP_PsychicComponentMain_C_SetBrainAppear) == 0x000014, "Wrong size on BP_PsychicComponentMain_C_SetBrainAppear");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainAppear, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetBrainAppear::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainAppear, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetBrainAppear::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainAppear, CallFunc_SetVisibilityPsyObj_return) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetBrainAppear::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainAppear, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000011, "Member 'BP_PsychicComponentMain_C_SetBrainAppear::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateBrainAppear
// 0x01A8 (0x01A8 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateBrainAppear final
{
public:
	struct FVector                                DstPos;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosTarget;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AxisSlope;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecFront;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotMove;                                           // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                VecMove;                                           // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC7[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC8[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC9[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcMoveVector_move_vector;               // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcMoveVector_bBounce;                   // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcMoveVector_bFinish;                   // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCA[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateBrainAppear) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateBrainAppear");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateBrainAppear) == 0x0001A8, "Wrong size on BP_PsychicComponentMain_C_UpdateBrainAppear");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, DstPos) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::DstPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, PosTarget) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::PosTarget' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, AxisSlope) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::AxisSlope' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, VecFront) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::VecFront' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, RotMove) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::RotMove' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, VecMove) == 0x00003C, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::VecMove' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x00006C, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_ComposeRotators_ReturnValue) == 0x000078, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_FClamp_ReturnValue) == 0x000084, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_GetOwner_ReturnValue_1) == 0x000088, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_Cross_VectorVector_ReturnValue) == 0x000094, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_BreakVector_X) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_BreakVector_Y) == 0x0000A4, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_BreakVector_Z) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x0000AC, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_MakeVector_ReturnValue) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_ComposeRotators_ReturnValue_1) == 0x0000C4, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_GetOwner_ReturnValue_2) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000D8, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000160, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_Add_FloatFloat_ReturnValue) == 0x000164, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_GetOwner_ReturnValue_3) == 0x000168, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000170, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_CalcMoveVector_move_vector) == 0x00017C, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_CalcMoveVector_move_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_CalcMoveVector_bBounce) == 0x000188, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_CalcMoveVector_bBounce' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_CalcMoveVector_bFinish) == 0x000189, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_CalcMoveVector_bFinish' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00018C, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainAppear, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000198, "Member 'BP_PsychicComponentMain_C_UpdateBrainAppear::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetBrainAppearPosOld
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetBrainAppearPosOld final
{
public:
	class ARsBattleHero_C*                        Player;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetBrainAppearPosOld) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetBrainAppearPosOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetBrainAppearPosOld) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetBrainAppearPosOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainAppearPosOld, Player) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetBrainAppearPosOld::Player' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterFadeOut
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterFadeOut final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterFadeOut) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterFadeOut");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterFadeOut) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterFadeOut");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterFadeOut, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterFadeOut::Value_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterFadeOut, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetMIParameterFadeOut::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterAura
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterAura final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         L_Mesh;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCC[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterAura) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterAura");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterAura) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterAura");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::Value_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, L_Mesh) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::L_Mesh' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, Temp_int_Loop_Num_Variable) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterAura, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetMIParameterAura::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterEmission
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterEmission final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterEmission) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterEmission");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterEmission) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterEmission");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterEmission, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterEmission::Value_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterDeformFlag
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterDeformFlag final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterDeformFlag) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterDeformFlag");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterDeformFlag) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterDeformFlag");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterDeformFlag, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterDeformFlag::Value_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterDeformFlag, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetMIParameterDeformFlag::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterImpactPos
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterImpactPos final
{
public:
	struct FVector                                Impact_pos_in;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterImpactPos) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterImpactPos");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterImpactPos) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterImpactPos");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterImpactPos, Impact_pos_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterImpactPos::Impact_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterImpactPos, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetMIParameterImpactPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetBrainFieldAttack
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetBrainFieldAttack final
{
public:
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wait_time_in;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetBrainFieldAttack) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetBrainFieldAttack");
static_assert(sizeof(BP_PsychicComponentMain_C_SetBrainFieldAttack) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetBrainFieldAttack");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainFieldAttack, Grab_owner_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetBrainFieldAttack::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainFieldAttack, Wait_time_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetBrainFieldAttack::Wait_time_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateBrainFieldAttack
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateBrainFieldAttack final
{
public:
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateBrainFieldAttack) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateBrainFieldAttack");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateBrainFieldAttack) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_UpdateBrainFieldAttack");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainFieldAttack, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateBrainFieldAttack::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateBrainFieldAttack, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateBrainFieldAttack::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isBrainCapture
// 0x0005 (0x0005 - 0x0000)
struct BP_PsychicComponentMain_C_IsBrainCapture final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsBrainCapture) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsBrainCapture");
static_assert(sizeof(BP_PsychicComponentMain_C_IsBrainCapture) == 0x000005, "Wrong size on BP_PsychicComponentMain_C_IsBrainCapture");
static_assert(offsetof(BP_PsychicComponentMain_C_IsBrainCapture, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsBrainCapture::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsBrainCapture, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsBrainCapture::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsBrainCapture, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000002, "Member 'BP_PsychicComponentMain_C_IsBrainCapture::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsBrainCapture, CallFunc_BooleanOR_ReturnValue_1) == 0x000003, "Member 'BP_PsychicComponentMain_C_IsBrainCapture::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsBrainCapture, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_IsBrainCapture::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetFade
// 0x000C (0x000C - 0x0000)
struct BP_PsychicComponentMain_C_SetFade final
{
public:
	bool                                          Fade_out_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fade_time_in;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetFade) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetFade");
static_assert(sizeof(BP_PsychicComponentMain_C_SetFade) == 0x00000C, "Wrong size on BP_PsychicComponentMain_C_SetFade");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFade, Fade_out_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetFade::Fade_out_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFade, Fade_time_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetFade::Fade_time_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetFade, CallFunc_Less_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetFade::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateEffectFade
// 0x0024 (0x0024 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateEffectFade final
{
public:
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isFadeFinish_return;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD0[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateEffectFade) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateEffectFade");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateEffectFade) == 0x000024, "Wrong size on BP_PsychicComponentMain_C_UpdateEffectFade");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_isFadeFinish_return) == 0x000001, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_isFadeFinish_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000011, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_FMax_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectFade, CallFunc_FMin_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateEffectFade::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isFadeFinish
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_IsFadeFinish final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsFadeFinish) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsFadeFinish");
static_assert(sizeof(BP_PsychicComponentMain_C_IsFadeFinish) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_IsFadeFinish");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeFinish, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsFadeFinish::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeFinish, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsFadeFinish::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeFinish, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000002, "Member 'BP_PsychicComponentMain_C_IsFadeFinish::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isFadeProcessing
// 0x0007 (0x0007 - 0x0000)
struct BP_PsychicComponentMain_C_IsFadeProcessing final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsFadeProcessing) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsFadeProcessing");
static_assert(sizeof(BP_PsychicComponentMain_C_IsFadeProcessing) == 0x000007, "Wrong size on BP_PsychicComponentMain_C_IsFadeProcessing");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, Flag) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::Flag' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, CallFunc_Less_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000002, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000003, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000004, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsFadeProcessing, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'BP_PsychicComponentMain_C_IsFadeProcessing::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetCollisionResponse
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetCollisionResponse final
{
public:
	ECollisionResponse                            Response_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetCollisionResponse) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetCollisionResponse");
static_assert(sizeof(BP_PsychicComponentMain_C_SetCollisionResponse) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetCollisionResponse");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionResponse, Response_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetCollisionResponse::Response_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEffectPsychicGaugeOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEffectPsychicGaugeOld::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetRegNo
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetRegNo final
{
public:
	int32                                         Reg_no_in;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetRegNo) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetRegNo");
static_assert(sizeof(BP_PsychicComponentMain_C_SetRegNo) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetRegNo");
static_assert(offsetof(BP_PsychicComponentMain_C_SetRegNo, Reg_no_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetRegNo::Reg_no_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetRegNo, Return) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetRegNo::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetRegNo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'BP_PsychicComponentMain_C_SetRegNo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetRegNo
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_GetRegNo final
{
public:
	int32                                         Reg_no_out;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetRegNo) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_GetRegNo");
static_assert(sizeof(BP_PsychicComponentMain_C_GetRegNo) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_GetRegNo");
static_assert(offsetof(BP_PsychicComponentMain_C_GetRegNo, Reg_no_out) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetRegNo::Reg_no_out' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsyObjPosRot
// 0x0188 (0x0188 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsyObjPosRot final
{
public:
	struct FVector                                Pos_in;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot_in;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Root_pos;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Root_rot;                                          // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Sweep;                                             // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Teleport;                                          // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               WorkRot;                                           // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                WorkPos;                                           // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVectorToCentre_vector;                 // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD1[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsyObjPosRot) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetPsyObjPosRot");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsyObjPosRot) == 0x000188, "Wrong size on BP_PsychicComponentMain_C_SetPsyObjPosRot");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, Pos_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::Pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, Rot_in) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::Rot_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, Root_pos) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::Root_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, Root_rot) == 0x000019, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::Root_rot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, Sweep) == 0x00001A, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::Sweep' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, Teleport) == 0x00001B, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::Teleport' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, WorkRot) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::WorkRot' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, WorkPos) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::WorkPos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000034, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_NegateRotator_ReturnValue) == 0x0000BC, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_ComposeRotators_ReturnValue) == 0x0000C8, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_GetVectorToCentre_vector) == 0x0000D4, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_GetVectorToCentre_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_GetOwner_ReturnValue) == 0x0000F0, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000F8, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsyObjPosRot, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000180, "Member 'BP_PsychicComponentMain_C_SetPsyObjPosRot::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.TerminateSound
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_TerminateSound final
{
public:
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UnregisterCueSheet_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_TerminateSound) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_TerminateSound");
static_assert(sizeof(BP_PsychicComponentMain_C_TerminateSound) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_TerminateSound");
static_assert(offsetof(BP_PsychicComponentMain_C_TerminateSound, CallFunc_GetSoundManager_SoundManager) == 0x000000, "Member 'BP_PsychicComponentMain_C_TerminateSound::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_TerminateSound, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_TerminateSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_TerminateSound, CallFunc_UnregisterCueSheet_ReturnValue) == 0x000009, "Member 'BP_PsychicComponentMain_C_TerminateSound::CallFunc_UnregisterCueSheet_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetNoReuse
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetNoReuse final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetNoReuse) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetNoReuse");
static_assert(sizeof(BP_PsychicComponentMain_C_SetNoReuse) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetNoReuse");
static_assert(offsetof(BP_PsychicComponentMain_C_SetNoReuse, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetNoReuse::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isRequest
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_IsRequest final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsRequest) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsRequest");
static_assert(sizeof(BP_PsychicComponentMain_C_IsRequest) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_IsRequest");
static_assert(offsetof(BP_PsychicComponentMain_C_IsRequest, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsRequest::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsRequest, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsRequest::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitAreaChange
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicComponentMain_C_InitAreaChange final
{
public:
	int32                                         Grab_index_in;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Grab_pos_in;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Sas_kind_in;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD2[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attack_count_in;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    L_playerManager;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitAreaChange) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_InitAreaChange");
static_assert(sizeof(BP_PsychicComponentMain_C_InitAreaChange) == 0x000020, "Wrong size on BP_PsychicComponentMain_C_InitAreaChange");
static_assert(offsetof(BP_PsychicComponentMain_C_InitAreaChange, Grab_index_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitAreaChange::Grab_index_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitAreaChange, Grab_pos_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_InitAreaChange::Grab_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitAreaChange, Sas_kind_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_InitAreaChange::Sas_kind_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitAreaChange, Attack_count_in) == 0x000014, "Member 'BP_PsychicComponentMain_C_InitAreaChange::Attack_count_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitAreaChange, L_playerManager) == 0x000018, "Member 'BP_PsychicComponentMain_C_InitAreaChange::L_playerManager' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayIndex
// 0x00E0 (0x00E0 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayIndex final
{
public:
	class FString                                 Str_in;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Str_out;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayIndex) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayIndex");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayIndex) == 0x0000E0, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayIndex");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, Str_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::Str_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, Str_out) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::Str_out' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000090, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayIndex, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_DebugDisplayIndex::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetActivePsyObj
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_SetActivePsyObj final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetActivePsyObj) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetActivePsyObj");
static_assert(sizeof(BP_PsychicComponentMain_C_SetActivePsyObj) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_SetActivePsyObj");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActivePsyObj, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetActivePsyObj::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActivePsyObj, Return) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetActivePsyObj::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActivePsyObj, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetActivePsyObj::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetActivePsyObj, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetActivePsyObj::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isPsychicActive
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsPsychicActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsPsychicActive) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsPsychicActive");
static_assert(sizeof(BP_PsychicComponentMain_C_IsPsychicActive) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsPsychicActive");
static_assert(offsetof(BP_PsychicComponentMain_C_IsPsychicActive, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsPsychicActive::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetGrabSource
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetGrabSource final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetGrabSource) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetGrabSource");
static_assert(sizeof(BP_PsychicComponentMain_C_SetGrabSource) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetGrabSource");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabSource, Flag) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetGrabSource::Flag' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetBrainFloatSwing
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetBrainFloatSwing final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetBrainFloatSwing) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetBrainFloatSwing");
static_assert(sizeof(BP_PsychicComponentMain_C_SetBrainFloatSwing) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetBrainFloatSwing");
static_assert(offsetof(BP_PsychicComponentMain_C_SetBrainFloatSwing, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetBrainFloatSwing::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CheckAttackType
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_CheckAttackType final
{
public:
	PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CheckAttackType) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_CheckAttackType");
static_assert(sizeof(BP_PsychicComponentMain_C_CheckAttackType) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_CheckAttackType");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackType, Attack_type_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_CheckAttackType::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackType, Return) == 0x000001, "Member 'BP_PsychicComponentMain_C_CheckAttackType::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckAttackType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_PsychicComponentMain_C_CheckAttackType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.PrintErrorString
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_PrintErrorString final
{
public:
	class FString                                 Err_str_in;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_PrintErrorString) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_PrintErrorString");
static_assert(sizeof(BP_PsychicComponentMain_C_PrintErrorString) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_PrintErrorString");
static_assert(offsetof(BP_PsychicComponentMain_C_PrintErrorString, Err_str_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_PrintErrorString::Err_str_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetGrabMesh
// 0x00F0 (0x00F0 - 0x0000)
struct BP_PsychicComponentMain_C_SetGrabMesh final
{
public:
	bool                                          No_adjust_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD4[0xE];                                     // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0064(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetGrabMesh) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_SetGrabMesh");
static_assert(sizeof(BP_PsychicComponentMain_C_SetGrabMesh) == 0x0000F0, "Wrong size on BP_PsychicComponentMain_C_SetGrabMesh");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, No_adjust_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::No_adjust_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, CallFunc_BreakTransform_Location) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetGrabMesh, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000064, "Member 'BP_PsychicComponentMain_C_SetGrabMesh::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetVisibilityPsyObj
// 0x0078 (0x0078 - 0x0000)
struct BP_PsychicComponentMain_C_SetVisibilityPsyObj final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Mesh_only;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD5[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        L_psyObj;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD6[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD7[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD8[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD9[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetVisibilityPsyObj) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetVisibilityPsyObj");
static_assert(sizeof(BP_PsychicComponentMain_C_SetVisibilityPsyObj) == 0x000078, "Wrong size on BP_PsychicComponentMain_C_SetVisibilityPsyObj");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, Mesh_only) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::Mesh_only' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, Return) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, L_psyObj) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::L_psyObj' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_GetObjectName_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_GetObjectName_ReturnValue_1) == 0x000038, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000048, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_GetChildrenComponents_Children) == 0x000050, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetVisibilityPsyObj, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_SetVisibilityPsyObj::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetCollisionPsyObj
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetCollisionPsyObj final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_capsule;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             L_collisionType;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetCollisionPsyObj) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetCollisionPsyObj");
static_assert(sizeof(BP_PsychicComponentMain_C_SetCollisionPsyObj) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetCollisionPsyObj");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, Is_capsule) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::Is_capsule' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, Return) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, L_collisionType) == 0x000003, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::L_collisionType' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, Temp_bool_Variable) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, Temp_byte_Variable) == 0x000005, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, Temp_byte_Variable_1) == 0x000006, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionPsyObj, K2Node_Select_Default) == 0x000007, "Member 'BP_PsychicComponentMain_C_SetCollisionPsyObj::K2Node_Select_Default' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetSasTeleport
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetSasTeleport final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time_in;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetSasTeleport) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetSasTeleport");
static_assert(sizeof(BP_PsychicComponentMain_C_SetSasTeleport) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetSasTeleport");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasTeleport, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetSasTeleport::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasTeleport, Time_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetSasTeleport::Time_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateEffectTeleport
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateEffectTeleport final
{
public:
	float                                         L_rate;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateEffectTeleport) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateEffectTeleport");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateEffectTeleport) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_UpdateEffectTeleport");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectTeleport, L_rate) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateEffectTeleport::L_rate' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterTeleport
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterTeleport final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorkValue;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterTeleport) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterTeleport");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterTeleport) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterTeleport");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterTeleport, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterTeleport::Value_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterTeleport, WorkValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetMIParameterTeleport::WorkValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterTeleport, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetMIParameterTeleport::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterTeleport, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetMIParameterTeleport::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitializePsychicComponent
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_InitializePsychicComponent final
{
public:
	bool                                          L_SwingComp;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_dropComp;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitializePsychicComponent) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_InitializePsychicComponent");
static_assert(sizeof(BP_PsychicComponentMain_C_InitializePsychicComponent) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_InitializePsychicComponent");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializePsychicComponent, L_SwingComp) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitializePsychicComponent::L_SwingComp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializePsychicComponent, L_dropComp) == 0x000001, "Member 'BP_PsychicComponentMain_C_InitializePsychicComponent::L_dropComp' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitializePsychicComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_PsychicComponentMain_C_InitializePsychicComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsychicAction
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsychicAction final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Psychic_combo_in;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Rwmove;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanThrow_return;                          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsychicAction) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetPsychicAction");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsychicAction) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetPsychicAction");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicAction, Target_actor_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsychicAction::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicAction, Psychic_combo_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetPsychicAction::Psychic_combo_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicAction, Rwmove) == 0x000009, "Member 'BP_PsychicComponentMain_C_SetPsychicAction::Rwmove' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicAction, Ret) == 0x00000A, "Member 'BP_PsychicComponentMain_C_SetPsychicAction::Ret' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicAction, CallFunc_CanThrow_return) == 0x00000B, "Member 'BP_PsychicComponentMain_C_SetPsychicAction::CallFunc_CanThrow_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicAction, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetPsychicAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetAttackDirection
// 0x0014 (0x0014 - 0x0000)
struct BP_PsychicComponentMain_C_GetAttackDirection final
{
public:
	bool                                          Is_swing_direction;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Attack_direction;                                  // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetAttackDirection) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_GetAttackDirection");
static_assert(sizeof(BP_PsychicComponentMain_C_GetAttackDirection) == 0x000014, "Wrong size on BP_PsychicComponentMain_C_GetAttackDirection");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackDirection, Is_swing_direction) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetAttackDirection::Is_swing_direction' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackDirection, Return) == 0x000001, "Member 'BP_PsychicComponentMain_C_GetAttackDirection::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackDirection, Attack_direction) == 0x000004, "Member 'BP_PsychicComponentMain_C_GetAttackDirection::Attack_direction' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackDirection, CallFunc_BooleanOR_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_GetAttackDirection::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackDirection, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_PsychicComponentMain_C_GetAttackDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetHit
// 0x01D8 (0x01D8 - 0x0000)
struct BP_PsychicComponentMain_C_SetHit final
{
public:
	bool                                          Hit_enemy_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hit_background_in;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDC[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHCHitResult                           Result_in;                                         // 0x0008(0x01C0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FVector                                Eft_pos_in;                                        // 0x01C8(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x01D4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetHit) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetHit");
static_assert(sizeof(BP_PsychicComponentMain_C_SetHit) == 0x0001D8, "Wrong size on BP_PsychicComponentMain_C_SetHit");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHit, Hit_enemy_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetHit::Hit_enemy_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHit, Hit_background_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetHit::Hit_background_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHit, Result_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetHit::Result_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHit, Eft_pos_in) == 0x0001C8, "Member 'BP_PsychicComponentMain_C_SetHit::Eft_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHit, Return) == 0x0001D4, "Member 'BP_PsychicComponentMain_C_SetHit::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetHitEffect
// 0x0014 (0x0014 - 0x0000)
struct BP_PsychicComponentMain_C_SetHitEffect final
{
public:
	bool                                          Hit_enemy_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hit_background_in;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDD[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Eft_pos_in;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetHitEffect) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetHitEffect");
static_assert(sizeof(BP_PsychicComponentMain_C_SetHitEffect) == 0x000014, "Wrong size on BP_PsychicComponentMain_C_SetHitEffect");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitEffect, Hit_enemy_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetHitEffect::Hit_enemy_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitEffect, Hit_background_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetHitEffect::Hit_background_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitEffect, Eft_pos_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetHitEffect::Eft_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitEffect, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetHitEffect::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitEffect, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_PsychicComponentMain_C_SetHitEffect::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetAttackCollision
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_GetAttackCollision final
{
public:
	bool                                          Throw_in;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Attack_collision;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetAttackCollision) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetAttackCollision");
static_assert(sizeof(BP_PsychicComponentMain_C_GetAttackCollision) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_GetAttackCollision");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackCollision, Throw_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetAttackCollision::Throw_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackCollision, Attack_collision) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetAttackCollision::Attack_collision' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.RequestPsychicCombo
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_RequestPsychicCombo final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_RequestPsychicCombo) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_RequestPsychicCombo");
static_assert(sizeof(BP_PsychicComponentMain_C_RequestPsychicCombo) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_RequestPsychicCombo");
static_assert(offsetof(BP_PsychicComponentMain_C_RequestPsychicCombo, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_RequestPsychicCombo::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetAnimationLength
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_GetAnimationLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetAnimationLength) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_GetAnimationLength");
static_assert(sizeof(BP_PsychicComponentMain_C_GetAnimationLength) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_GetAnimationLength");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAnimationLength, Length) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetAnimationLength::Length' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsychicSimulatePhysics
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsychicSimulatePhysics final
{
public:
	ECollisionEnabled                             Mesh_collision_in;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Gravity_in;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsychicSimulatePhysics) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetPsychicSimulatePhysics");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsychicSimulatePhysics) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_SetPsychicSimulatePhysics");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicSimulatePhysics, Mesh_collision_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsychicSimulatePhysics::Mesh_collision_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicSimulatePhysics, Simulate_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetPsychicSimulatePhysics::Simulate_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicSimulatePhysics, Gravity_in) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetPsychicSimulatePhysics::Gravity_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetSasCopy
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetSasCopy final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetSasCopy) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetSasCopy");
static_assert(sizeof(BP_PsychicComponentMain_C_SetSasCopy) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetSasCopy");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasCopy, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetSasCopy::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackInfo
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackInfo final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Psychic_combo_in;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Psychic_ex_in;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Set_time_limit_in;                                 // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackInfo) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackInfo");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackInfo) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetAttackInfo");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackInfo, Target_actor_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackInfo::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackInfo, Psychic_combo_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackInfo::Psychic_combo_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackInfo, Psychic_ex_in) == 0x000009, "Member 'BP_PsychicComponentMain_C_SetAttackInfo::Psychic_ex_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackInfo, Set_time_limit_in) == 0x00000A, "Member 'BP_PsychicComponentMain_C_SetAttackInfo::Set_time_limit_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAdjust
// 0x0070 (0x0070 - 0x0000)
struct BP_PsychicComponentMain_C_SetAdjust final
{
public:
	float                                         Time_in;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDF[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAdjust) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_SetAdjust");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAdjust) == 0x000070, "Wrong size on BP_PsychicComponentMain_C_SetAdjust");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAdjust, Time_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAdjust::Time_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAdjust, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetAdjust::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAdjust, CallFunc_BreakTransform_Location) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetAdjust::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAdjust, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'BP_PsychicComponentMain_C_SetAdjust::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAdjust, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'BP_PsychicComponentMain_C_SetAdjust::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateAdjust
// 0x0120 (0x0120 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateAdjust final
{
public:
	float                                         AdjustRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE1[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x008C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE2[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateAdjust) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_UpdateAdjust");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateAdjust) == 0x000120, "Wrong size on BP_PsychicComponentMain_C_UpdateAdjust");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, AdjustRate) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::AdjustRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_RLerp_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_VLerp_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x00008C, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_Less_FloatFloat_ReturnValue) == 0x000114, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAdjust, CallFunc_Add_FloatFloat_ReturnValue) == 0x000118, "Member 'BP_PsychicComponentMain_C_UpdateAdjust::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAnimNotifyEnablePsychic
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAnimNotifyEnablePsychic::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackCollision
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackCollision final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Skeletal_mesh_in;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetAttackCollision_attack_collision;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackCollision) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackCollision");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackCollision) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_SetAttackCollision");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollision, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackCollision::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollision, Skeletal_mesh_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackCollision::Skeletal_mesh_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollision, CallFunc_GetAttackCollision_attack_collision) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetAttackCollision::CallFunc_GetAttackCollision_attack_collision' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackCollisionParam
// 0x0420 (0x0420 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackCollisionParam final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Attack_prim_in;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               Psy_obj_in;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionCommonInfo                 L_commonInfo;                                      // 0x0018(0x0070)(Edit, BlueprintVisible)
	struct FHCHitEffectInfo                       L_effectInfo;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, NoDestructor)
	struct FHCSkillCommonInfo                     L_skillInfo;                                       // 0x0090(0x00F0)(Edit, BlueprintVisible)
	class AActor*                                 L_attacker;                                        // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE5[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCCollisionCommonInfo                 CallFunc_GetAttackParameter_common_info;           // 0x0198(0x0070)()
	struct FHCSkillCommonInfo                     CallFunc_GetAttackParameter_skill_info;            // 0x0208(0x00F0)()
	class AActor*                                 K2Node_Select_Default;                             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHCSkillCommonInfo                     CallFunc_SetAttackSkillInfo_return;                // 0x0308(0x00F0)()
	class URSGameInstance*                        K2Node_DynamicCast_AsRSGame_Instance;              // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE6[0x7];                                     // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetHitManager_ReturnValue;                // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHitCheckComponent*                     CallFunc_GetHitCheckComponentFromActor_ReturnValue; // 0x0410(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x041A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x041B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackCollisionParam) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackCollisionParam");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackCollisionParam) == 0x000420, "Wrong size on BP_PsychicComponentMain_C_SetAttackCollisionParam");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, Attack_prim_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::Attack_prim_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, Psy_obj_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::Psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, L_commonInfo) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::L_commonInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, L_effectInfo) == 0x000088, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::L_effectInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, L_skillInfo) == 0x000090, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::L_skillInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, L_attacker) == 0x000180, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::L_attacker' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, Temp_bool_Variable) == 0x000188, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000190, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_GetAttackParameter_common_info) == 0x000198, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_GetAttackParameter_common_info' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_GetAttackParameter_skill_info) == 0x000208, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_GetAttackParameter_skill_info' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, K2Node_Select_Default) == 0x0002F8, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_GetGameInstance_ReturnValue) == 0x000300, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_SetAttackSkillInfo_return) == 0x000308, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_SetAttackSkillInfo_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, K2Node_DynamicCast_AsRSGame_Instance) == 0x0003F8, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::K2Node_DynamicCast_AsRSGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, K2Node_DynamicCast_bSuccess) == 0x000400, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_GetHitManager_ReturnValue) == 0x000408, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_GetHitManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_GetHitCheckComponentFromActor_ReturnValue) == 0x000410, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_GetHitCheckComponentFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_IsValid_ReturnValue) == 0x000418, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_IsValid_ReturnValue_1) == 0x000419, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_IsValid_ReturnValue_2) == 0x00041A, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionParam, CallFunc_IsValid_ReturnValue_3) == 0x00041B, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionParam::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetDispose
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_SetDispose final
{
public:
	bool                                          Is_Unique_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_brain_in;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDestroyMain_return;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetDispose) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetDispose");
static_assert(sizeof(BP_PsychicComponentMain_C_SetDispose) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_SetDispose");
static_assert(offsetof(BP_PsychicComponentMain_C_SetDispose, Is_Unique_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetDispose::Is_Unique_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetDispose, Is_brain_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetDispose::Is_brain_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetDispose, CallFunc_SetDestroyMain_return) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetDispose::CallFunc_SetDestroyMain_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetHitSEOld
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_SetHitSEOld final
{
public:
	bool                                          Hit_enemy_in;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hit_background_in;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetHitSEOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetHitSEOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetHitSEOld) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_SetHitSEOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitSEOld, Hit_enemy_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetHitSEOld::Hit_enemy_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitSEOld, Hit_background_in) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetHitSEOld::Hit_background_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitSEOld, Return) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetHitSEOld::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsychicActionNew
// 0x0048 (0x0048 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsychicActionNew final
{
public:
	PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target_actor_in;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Psychic_combo_in;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Psychic_ex_in;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Remove;                                            // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE8[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkTestPatternNo;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRemove;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FEA[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FEB[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPsyAction_return;                      // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsychicActionNew) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetPsychicActionNew");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsychicActionNew) == 0x000048, "Wrong size on BP_PsychicComponentMain_C_SetPsychicActionNew");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, Attack_type_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, Target_actor_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, Psychic_combo_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::Psychic_combo_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, Psychic_ex_in) == 0x000011, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::Psychic_ex_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, Remove) == 0x000012, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::Remove' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, WorkTestPatternNo) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::WorkTestPatternNo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, bRemove) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::bRemove' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_GetDebuggingManager_Manager) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_Multiply_IntInt_ReturnValue) == 0x000034, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_Add_IntInt_ReturnValue_2) == 0x000040, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, K2Node_SwitchEnum_CmpSuccess) == 0x000044, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, K2Node_SwitchEnum_CmpSuccess_1) == 0x000045, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionNew, CallFunc_CanPsyAction_return) == 0x000046, "Member 'BP_PsychicComponentMain_C_SetPsychicActionNew::CallFunc_CanPsyAction_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.isAllAttackEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsAllAttackEnable final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsAllAttackEnable) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsAllAttackEnable");
static_assert(sizeof(BP_PsychicComponentMain_C_IsAllAttackEnable) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsAllAttackEnable");
static_assert(offsetof(BP_PsychicComponentMain_C_IsAllAttackEnable, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsAllAttackEnable::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDisplayCollision
// 0x0108 (0x0108 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDisplayCollision final
{
public:
	float                                         L_radius;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FEC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   L_colorList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            L_primList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FED[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FEE[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       K2Node_DynamicCast_AsSphere_Collision;             // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FEF[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF0[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF1[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDisplayCollision) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDisplayCollision");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDisplayCollision) == 0x000108, "Wrong size on BP_PsychicComponentMain_C_DebugDisplayCollision");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, L_radius) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::L_radius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, L_colorList) == 0x000008, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::L_colorList' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, L_primList) == 0x000018, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::L_primList' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_GetDebuggingManager_Manager) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Conv_FloatToString_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, Temp_int_Loop_Counter_Variable) == 0x00008C, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_MakeColor_ReturnValue) == 0x000098, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Array_Add_ReturnValue_1) == 0x0000AC, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, K2Node_DynamicCast_AsSphere_Collision) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::K2Node_DynamicCast_AsSphere_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Array_Add_ReturnValue_2) == 0x0000BC, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, K2Node_DynamicCast_AsCapsule_Collision) == 0x0000D0, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000DC, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x0000E8, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000EC, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0000F0, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Array_Add_ReturnValue_3) == 0x0000FC, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDisplayCollision, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'BP_PsychicComponentMain_C_DebugDisplayCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugDrawPrimitive
// 0x0078 (0x0078 - 0x0000)
struct BP_PsychicComponentMain_C_DebugDrawPrimitive final
{
public:
	class UPrimitiveComponent*                    Prim_comp_in;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Segment_in;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_in;                                          // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration_in;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Thickness_in;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF2[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF3[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       K2Node_DynamicCast_AsSphere_Collision;             // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF4[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledSphereRadius_ReturnValue;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugDrawPrimitive) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugDrawPrimitive");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugDrawPrimitive) == 0x000078, "Wrong size on BP_PsychicComponentMain_C_DebugDrawPrimitive");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, Prim_comp_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::Prim_comp_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, Segment_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::Segment_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, Color_in) == 0x00000C, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::Color_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, Duration_in) == 0x00001C, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::Duration_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, Thickness_in) == 0x000020, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::Thickness_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, K2Node_DynamicCast_AsCapsule_Collision) == 0x000028, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, K2Node_DynamicCast_AsSphere_Collision) == 0x000038, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::K2Node_DynamicCast_AsSphere_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000044, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_GetScaledSphereRadius_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_GetScaledSphereRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000064, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000068, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugDrawPrimitive, CallFunc_IsValid_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_DebugDrawPrimitive::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackCollisionSize
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackCollisionSize final
{
public:
	class USphereComponent*                       AttackSphere;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class USphereComponent*                       K2Node_DynamicCast_AsSphere_Collision;             // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackCollisionSize) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackCollisionSize");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackCollisionSize) == 0x0000B0, "Wrong size on BP_PsychicComponentMain_C_SetAttackCollisionSize");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, AttackSphere) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::AttackSphere' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, K2Node_DynamicCast_AsSphere_Collision) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::K2Node_DynamicCast_AsSphere_Collision' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCollisionSize, CallFunc_IsValid_ReturnValue) == 0x0000A9, "Member 'BP_PsychicComponentMain_C_SetAttackCollisionSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetSas
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_SetSas final
{
public:
	E_SASKind                                     Sas_kind_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     L_workSasKind;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetSas) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetSas");
static_assert(sizeof(BP_PsychicComponentMain_C_SetSas) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_SetSas");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSas, Sas_kind_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetSas::Sas_kind_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSas, L_workSasKind) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetSas::L_workSasKind' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetSasStealth
// 0x000C (0x000C - 0x0000)
struct BP_PsychicComponentMain_C_SetSasStealth final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time_in;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetSasStealth) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetSasStealth");
static_assert(sizeof(BP_PsychicComponentMain_C_SetSasStealth) == 0x00000C, "Wrong size on BP_PsychicComponentMain_C_SetSasStealth");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasStealth, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetSasStealth::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasStealth, Time_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetSasStealth::Time_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSasStealth, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetSasStealth::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateEffectStealth
// 0x0014 (0x0014 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateEffectStealth final
{
public:
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateEffectStealth) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateEffectStealth");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateEffectStealth) == 0x000014, "Wrong size on BP_PsychicComponentMain_C_UpdateEffectStealth");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectStealth, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateEffectStealth::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectStealth, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateEffectStealth::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectStealth, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateEffectStealth::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectStealth, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateEffectStealth::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectStealth, CallFunc_FMin_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateEffectStealth::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterStealth
// 0x000C (0x000C - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterStealth final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorkValue;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterStealth) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterStealth");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterStealth) == 0x00000C, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterStealth");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterStealth, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterStealth::Value_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterStealth, WorkValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetMIParameterStealth::WorkValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterStealth, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetMIParameterStealth::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateSystem
// 0x0040 (0x0040 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateSystem final
{
public:
	float                                         Delta_second_in;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FF8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFixParamater_C*               CallFunc_GetPlayerFixParam_Param;                  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FF9[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FFA[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateSystem) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateSystem");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateSystem) == 0x000040, "Wrong size on BP_PsychicComponentMain_C_UpdateSystem");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, Delta_second_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateSystem::Delta_second_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_GetPlayerFixParam_Param) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_GetPlayerFixParam_Param' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00001C, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateSystem, CallFunc_IsValid_ReturnValue_2) == 0x000038, "Member 'BP_PsychicComponentMain_C_UpdateSystem::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetObjectSize
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_GetObjectSize final
{
public:
	EPsychicObjectSizeType                        Object_Size;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetObjectSize) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_GetObjectSize");
static_assert(sizeof(BP_PsychicComponentMain_C_GetObjectSize) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_GetObjectSize");
static_assert(offsetof(BP_PsychicComponentMain_C_GetObjectSize, Object_Size) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetObjectSize::Object_Size' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackType
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackType final
{
public:
	PsychicObjectAttackType::EPsychicObjectAttackType Action_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackType) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackType");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackType) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetAttackType");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackType, Action_type_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackType::Action_type_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetAttackAction
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_GetAttackAction final
{
public:
	PsychicObjectAttackType::EPsychicObjectAttackType Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetAttackAction) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_GetAttackAction");
static_assert(sizeof(BP_PsychicComponentMain_C_GetAttackAction) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_GetAttackAction");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackAction, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetAttackAction::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetAttackAction, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_PsychicComponentMain_C_GetAttackAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitCopyObj
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_InitCopyObj final
{
public:
	class ABP_PsychicObjectBasic_C*               Src_psy_obj_in;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitCopyObj) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_InitCopyObj");
static_assert(sizeof(BP_PsychicComponentMain_C_InitCopyObj) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_InitCopyObj");
static_assert(offsetof(BP_PsychicComponentMain_C_InitCopyObj, Src_psy_obj_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitCopyObj::Src_psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitCopyObj, CallFunc_SetVisibilityPsyObj_return) == 0x000008, "Member 'BP_PsychicComponentMain_C_InitCopyObj::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitCopyObj, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000009, "Member 'BP_PsychicComponentMain_C_InitCopyObj::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitCopyObj, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_PsychicComponentMain_C_InitCopyObj::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateCopyObj
// 0x0170 (0x0170 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateCopyObj final
{
public:
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FFB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FFC[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFD[0x8];                                     // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateCopyObj) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_UpdateCopyObj");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateCopyObj) == 0x000170, "Wrong size on BP_PsychicComponentMain_C_UpdateCopyObj");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_SelectFloat_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_Ease_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_GetCameraRotation_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_BreakTransform_Location) == 0x000054, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_BreakTransform_Rotation) == 0x000060, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_BreakTransform_Scale) == 0x00006C, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000078, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000084, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_Add_VectorVector_ReturnValue) == 0x000090, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_VLerp_ReturnValue) == 0x00009C, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_MakeTransform_ReturnValue) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000E0, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateCopyObj, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000168, "Member 'BP_PsychicComponentMain_C_UpdateCopyObj::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.IsTickOn
// 0x0003 (0x0003 - 0x0000)
struct BP_PsychicComponentMain_C_IsTickOn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsTickOn) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsTickOn");
static_assert(sizeof(BP_PsychicComponentMain_C_IsTickOn) == 0x000003, "Wrong size on BP_PsychicComponentMain_C_IsTickOn");
static_assert(offsetof(BP_PsychicComponentMain_C_IsTickOn, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsTickOn::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsTickOn, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_PsychicComponentMain_C_IsTickOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_IsTickOn, CallFunc_BooleanOR_ReturnValue_1) == 0x000002, "Member 'BP_PsychicComponentMain_C_IsTickOn::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.IsAttackDelay
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsAttackDelay final
{
public:
	bool                                          Delay;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsAttackDelay) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsAttackDelay");
static_assert(sizeof(BP_PsychicComponentMain_C_IsAttackDelay) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsAttackDelay");
static_assert(offsetof(BP_PsychicComponentMain_C_IsAttackDelay, Delay) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsAttackDelay::Delay' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackDelay
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackDelay final
{
public:
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay_time_in;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackDelay) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackDelay");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackDelay) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetAttackDelay");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackDelay, Grab_owner_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackDelay::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackDelay, Delay_time_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackDelay::Delay_time_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateAttackDelay
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateAttackDelay final
{
public:
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateAttackDelay) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_UpdateAttackDelay");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateAttackDelay) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_UpdateAttackDelay");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateAttackDelay, CallFunc_IsOver_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateAttackDelay::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitTransferObject
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_InitTransferObject final
{
public:
	bool                                          CallFunc_SetCollisionPsyObj_return;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitTransferObject) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_InitTransferObject");
static_assert(sizeof(BP_PsychicComponentMain_C_InitTransferObject) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_InitTransferObject");
static_assert(offsetof(BP_PsychicComponentMain_C_InitTransferObject, CallFunc_SetCollisionPsyObj_return) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitTransferObject::CallFunc_SetCollisionPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitTransferObject, CallFunc_SetVisibilityPsyObj_return) == 0x000001, "Member 'BP_PsychicComponentMain_C_InitTransferObject::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetTransferObjectAppear
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetTransferObjectAppear final
{
public:
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetTransferObjectAppear) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetTransferObjectAppear");
static_assert(sizeof(BP_PsychicComponentMain_C_SetTransferObjectAppear) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetTransferObjectAppear");
static_assert(offsetof(BP_PsychicComponentMain_C_SetTransferObjectAppear, CallFunc_SetVisibilityPsyObj_return) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetTransferObjectAppear::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateEffectTransfer
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateEffectTransfer final
{
public:
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FFE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateEffectTransfer) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateEffectTransfer");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateEffectTransfer) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_UpdateEffectTransfer");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectTransfer, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateEffectTransfer::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectTransfer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateEffectTransfer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectTransfer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateEffectTransfer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectTransfer, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateEffectTransfer::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetCopyObject
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetCopyObject final
{
public:
	class ABP_PsychicObjectBasic_C*               Copy_obj_in;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetCopyObject) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetCopyObject");
static_assert(sizeof(BP_PsychicComponentMain_C_SetCopyObject) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetCopyObject");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCopyObject, Copy_obj_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetCopyObject::Copy_obj_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsychicActionEnemy
// 0x0040 (0x0040 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsychicActionEnemy final
{
public:
	PsychicObjectAttackType::EPsychicObjectAttackType Attack_type_in;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FFF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target_actor_in;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     Temp_byte_Variable_2;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     Temp_byte_Variable_3;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     Temp_byte_Variable_4;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     Temp_byte_Variable_5;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6000[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6001[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	PsychicObjectAttackType::EPsychicObjectAttackType Temp_byte_Variable_6;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	BattlePrototype::EPsychicObjectAttackType     K2Node_Select_Default;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerActionForEnemyReaction_Dummy;       // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsychicActionEnemy) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetPsychicActionEnemy");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsychicActionEnemy) == 0x000040, "Wrong size on BP_PsychicComponentMain_C_SetPsychicActionEnemy");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Attack_type_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Attack_type_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Target_actor_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable_1) == 0x000011, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable_2) == 0x000012, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable_3) == 0x000013, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable_4) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable_5) == 0x000015, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, CallFunc_GetEnemyManager_Manager) == 0x000018, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000039, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, Temp_byte_Variable_6) == 0x00003B, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, K2Node_Select_Default) == 0x00003C, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionEnemy, CallFunc_PlayerActionForEnemyReaction_Dummy) == 0x00003D, "Member 'BP_PsychicComponentMain_C_SetPsychicActionEnemy::CallFunc_PlayerActionForEnemyReaction_Dummy' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsychicActionCopy
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsychicActionCopy final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsychicActionCopy) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetPsychicActionCopy");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsychicActionCopy) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetPsychicActionCopy");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActionCopy, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsychicActionCopy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetHitBarrier
// 0x0006 (0x0006 - 0x0000)
struct BP_PsychicComponentMain_C_SetHitBarrier final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAttackType_return;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHit_return;                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetHitBarrier) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetHitBarrier");
static_assert(sizeof(BP_PsychicComponentMain_C_SetHitBarrier) == 0x000006, "Wrong size on BP_PsychicComponentMain_C_SetHitBarrier");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitBarrier, Temp_bool_Variable) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetHitBarrier::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitBarrier, Temp_bool_Variable_1) == 0x000001, "Member 'BP_PsychicComponentMain_C_SetHitBarrier::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitBarrier, Temp_bool_Variable_2) == 0x000002, "Member 'BP_PsychicComponentMain_C_SetHitBarrier::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitBarrier, CallFunc_CheckAttackType_return) == 0x000003, "Member 'BP_PsychicComponentMain_C_SetHitBarrier::CallFunc_CheckAttackType_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitBarrier, K2Node_Select_Default) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetHitBarrier::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetHitBarrier, CallFunc_SetHit_return) == 0x000005, "Member 'BP_PsychicComponentMain_C_SetHitBarrier::CallFunc_SetHit_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.IsCheckBackground
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsCheckBackground final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsCheckBackground) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsCheckBackground");
static_assert(sizeof(BP_PsychicComponentMain_C_IsCheckBackground) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsCheckBackground");
static_assert(offsetof(BP_PsychicComponentMain_C_IsCheckBackground, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsCheckBackground::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetPsychicObjectPosInfo
// 0x0024 (0x0024 - 0x0000)
struct BP_PsychicComponentMain_C_GetPsychicObjectPosInfo final
{
public:
	struct FVector                                PosPrev;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PosNow;                                            // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetPsychicObjectPosInfo) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_GetPsychicObjectPosInfo");
static_assert(sizeof(BP_PsychicComponentMain_C_GetPsychicObjectPosInfo) == 0x000024, "Wrong size on BP_PsychicComponentMain_C_GetPsychicObjectPosInfo");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicObjectPosInfo, PosPrev) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetPsychicObjectPosInfo::PosPrev' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicObjectPosInfo, PosNow) == 0x00000C, "Member 'BP_PsychicComponentMain_C_GetPsychicObjectPosInfo::PosNow' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicObjectPosInfo, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetPsychicObjectPosInfo::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetCollisionProfileOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetCollisionProfileOld final
{
public:
	bool                                          bCaptured;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetCollisionProfileOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetCollisionProfileOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetCollisionProfileOld) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetCollisionProfileOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCollisionProfileOld, bCaptured) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetCollisionProfileOld::bCaptured' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.setEffectCopy
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetEffectCopy final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEffectCopy) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetEffectCopy");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEffectCopy) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetEffectCopy");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEffectCopy, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEffectCopy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMIParameterCopy
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_SetMIParameterCopy final
{
public:
	float                                         Value_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMIParameterCopy) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetMIParameterCopy");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMIParameterCopy) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_SetMIParameterCopy");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterCopy, Value_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMIParameterCopy::Value_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMIParameterCopy, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetMIParameterCopy::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitPsychicCluster
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_InitPsychicCluster final
{
public:
	class ABP_PsychicObjectBasic_C*               Core_psy_obj_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_in;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitPsychicCluster) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_InitPsychicCluster");
static_assert(sizeof(BP_PsychicComponentMain_C_InitPsychicCluster) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_InitPsychicCluster");
static_assert(offsetof(BP_PsychicComponentMain_C_InitPsychicCluster, Core_psy_obj_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitPsychicCluster::Core_psy_obj_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitPsychicCluster, Index_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_InitPsychicCluster::Index_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.IsNewAttach
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsNewAttach final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsNewAttach) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsNewAttach");
static_assert(sizeof(BP_PsychicComponentMain_C_IsNewAttach) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsNewAttach");
static_assert(offsetof(BP_PsychicComponentMain_C_IsNewAttach, Return) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsNewAttach::Return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitEnemyPsychicObjectMain
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain final
{
public:
	class ARSBattleCharacter_C*                   Owner_in;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain");
static_assert(sizeof(BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain");
static_assert(offsetof(BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain, Owner_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain::Owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain, CallFunc_SetVisibilityPsyObj_return) == 0x000008, "Member 'BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_PsychicComponentMain_C_InitEnemyPsychicObjectMain::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.IsEnemyPsychicObjectOccupiedMain
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain final
{
public:
	bool                                          Occupied;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain");
static_assert(sizeof(BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain");
static_assert(offsetof(BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain, Occupied) == 0x000000, "Member 'BP_PsychicComponentMain_C_IsEnemyPsychicObjectOccupiedMain::Occupied' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEnemyPsychicObjectActiveMain
// 0x01A0 (0x01A0 - 0x0000)
struct BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain final
{
public:
	bool                                          Active_in;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6002[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Obj_pos_in;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_posObj;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorToCentre_vector;                 // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6003[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6004[0xC];                                     // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6005[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x010C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain) == 0x000010, "Wrong alignment on BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain) == 0x0001A0, "Wrong size on BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, Active_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::Active_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, Obj_pos_in) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::Obj_pos_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, L_posObj) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::L_posObj' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_GetVectorToCentre_vector) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_GetVectorToCentre_vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000034, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000080, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_SetVisibilityPsyObj_return) == 0x000108, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00010C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000194, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectActiveMain::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEnemyPsychicObjectThrowMain
// 0x0078 (0x0078 - 0x0000)
struct BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain final
{
public:
	class AActor*                                 Target_actor_in;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Throw_speed_in;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6006[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetDestroyMain_return;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6007[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain) == 0x000078, "Wrong size on BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, Target_actor_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, Throw_speed_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::Throw_speed_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_GetComponentBounds_Origin) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_GetComponentBounds_BoxExtent) == 0x00001C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_GetComponentBounds_SphereRadius) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_SetDestroyMain_return) == 0x00002C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_SetDestroyMain_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00003C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000060, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain, CallFunc_Normal_ReturnValue) == 0x00006C, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectThrowMain::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InterceptAttack
// 0x0098 (0x0098 - 0x0000)
struct BP_PsychicComponentMain_C_InterceptAttack final
{
public:
	class ARSBattleCharacter_C*                   Intercepter_in;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   New_target_in;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6008[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InterceptAttack) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_InterceptAttack");
static_assert(sizeof(BP_PsychicComponentMain_C_InterceptAttack) == 0x000098, "Wrong size on BP_PsychicComponentMain_C_InterceptAttack");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, Intercepter_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_InterceptAttack::Intercepter_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, New_target_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_InterceptAttack::New_target_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_GetComponentBounds_Origin) == 0x000010, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_GetComponentBounds_BoxExtent) == 0x00001C, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_GetComponentBounds_SphereRadius) == 0x000028, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000044, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000050, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000064, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_Normal_ReturnValue) == 0x000074, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000088, "Member 'BP_PsychicComponentMain_C_InterceptAttack::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'BP_PsychicComponentMain_C_InterceptAttack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptAttack, CallFunc_IsValid_ReturnValue_1) == 0x000091, "Member 'BP_PsychicComponentMain_C_InterceptAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetCameraShakeData
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_GetCameraShakeData final
{
public:
	class UClass*                                 Camera_shake;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetCameraShakeData) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetCameraShakeData");
static_assert(sizeof(BP_PsychicComponentMain_C_GetCameraShakeData) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_GetCameraShakeData");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCameraShakeData, Camera_shake) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetCameraShakeData::Camera_shake' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCameraShakeData, Scale) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetCameraShakeData::Scale' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetCameraShakeData, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_PsychicComponentMain_C_GetCameraShakeData::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetDisplayName
// 0x0038 (0x0038 - 0x0000)
struct BP_PsychicComponentMain_C_GetDisplayName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetEnumeratorName_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_RightChop_ReturnValue;                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetDisplayName) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetDisplayName");
static_assert(sizeof(BP_PsychicComponentMain_C_GetDisplayName) == 0x000038, "Wrong size on BP_PsychicComponentMain_C_GetDisplayName");
static_assert(offsetof(BP_PsychicComponentMain_C_GetDisplayName, Param_Name) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetDisplayName::Param_Name' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetDisplayName, CallFunc_GetEnumeratorName_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_GetDisplayName::CallFunc_GetEnumeratorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetDisplayName, CallFunc_Conv_NameToString_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_GetDisplayName::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetDisplayName, CallFunc_RightChop_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_GetDisplayName::CallFunc_RightChop_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetSwingType
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetSwingType final
{
public:
	EPsychicObjectAttackSwingType                 Swing_type_in;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetSwingType) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetSwingType");
static_assert(sizeof(BP_PsychicComponentMain_C_SetSwingType) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetSwingType");
static_assert(offsetof(BP_PsychicComponentMain_C_SetSwingType, Swing_type_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetSwingType::Swing_type_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackCount
// 0x0004 (0x0004 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackCount final
{
public:
	int32                                         Attack_count_in;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackCount) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackCount");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackCount) == 0x000004, "Wrong size on BP_PsychicComponentMain_C_SetAttackCount");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackCount, Attack_count_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackCount::Attack_count_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetCopyObjUpdate
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetCopyObjUpdate final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetCopyObjUpdate) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetCopyObjUpdate");
static_assert(sizeof(BP_PsychicComponentMain_C_SetCopyObjUpdate) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetCopyObjUpdate");
static_assert(offsetof(BP_PsychicComponentMain_C_SetCopyObjUpdate, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetCopyObjUpdate::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.CheckPsychicObjectID
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_CheckPsychicObjectID final
{
public:
	TArray<BattlePrototype::EPsychicObjectID>     Check_list_in;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6009[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_600A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_CheckPsychicObjectID) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_CheckPsychicObjectID");
static_assert(sizeof(BP_PsychicComponentMain_C_CheckPsychicObjectID) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_CheckPsychicObjectID");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, Check_list_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::Check_list_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, Return) == 0x000010, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::Return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_CheckPsychicObjectID, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_CheckPsychicObjectID::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetPsychicObjectID
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_GetPsychicObjectID final
{
public:
	BattlePrototype::EPsychicObjectID             Psychic_object_id;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetPsychicObjectID) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_GetPsychicObjectID");
static_assert(sizeof(BP_PsychicComponentMain_C_GetPsychicObjectID) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_GetPsychicObjectID");
static_assert(offsetof(BP_PsychicComponentMain_C_GetPsychicObjectID, Psychic_object_id) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetPsychicObjectID::Psychic_object_id' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InitPsychicBulletOld
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_InitPsychicBulletOld final
{
public:
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InitPsychicBulletOld) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_InitPsychicBulletOld");
static_assert(sizeof(BP_PsychicComponentMain_C_InitPsychicBulletOld) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_InitPsychicBulletOld");
static_assert(offsetof(BP_PsychicComponentMain_C_InitPsychicBulletOld, CallFunc_SetVisibilityPsyObj_return) == 0x000000, "Member 'BP_PsychicComponentMain_C_InitPsychicBulletOld::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackPsychicBulletOld
// 0x0058 (0x0058 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackPsychicBulletOld final
{
public:
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target_actor_in;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spread_angle_in;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_axis;                                            // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackPsychicBulletOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld) == 0x000058, "Wrong size on BP_PsychicComponentMain_C_SetAttackPsychicBulletOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, Grab_owner_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, Target_actor_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, Spread_angle_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::Spread_angle_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, L_axis) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::L_axis' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_RandomFloatInRange_ReturnValue) == 0x000024, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00002C, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_RotateAngleAxis_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x00003C, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_Cross_VectorVector_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackPsychicBulletOld, CallFunc_Less_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_SetAttackPsychicBulletOld::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateEffectSasOld
// 0x0008 (0x0008 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateEffectSasOld final
{
public:
	class UMeshComponent*                         L_Mesh;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateEffectSasOld) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_UpdateEffectSasOld");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateEffectSasOld) == 0x000008, "Wrong size on BP_PsychicComponentMain_C_UpdateEffectSasOld");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateEffectSasOld, L_Mesh) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateEffectSasOld::L_Mesh' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.LoadMaterialCurve
// 0x00C8 (0x00C8 - 0x0000)
struct BP_PsychicComponentMain_C_LoadMaterialCurve final
{
public:
	struct FSPsychicCaptureMaterial               SPsychicCaptureMaterial;                           // 0x0000(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UCurveVector*                           AsCurve_Vector;                                    // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_600B[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           K2Node_DynamicCast_AsCurve_Vector;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_LoadMaterialCurve) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_LoadMaterialCurve");
static_assert(sizeof(BP_PsychicComponentMain_C_LoadMaterialCurve) == 0x0000C8, "Wrong size on BP_PsychicComponentMain_C_LoadMaterialCurve");
static_assert(offsetof(BP_PsychicComponentMain_C_LoadMaterialCurve, SPsychicCaptureMaterial) == 0x000000, "Member 'BP_PsychicComponentMain_C_LoadMaterialCurve::SPsychicCaptureMaterial' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_LoadMaterialCurve, AsCurve_Vector) == 0x0000A0, "Member 'BP_PsychicComponentMain_C_LoadMaterialCurve::AsCurve_Vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_LoadMaterialCurve, CallFunc_LoadSoftObject_ReturnValue) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_LoadMaterialCurve::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_LoadMaterialCurve, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0000B0, "Member 'BP_PsychicComponentMain_C_LoadMaterialCurve::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_LoadMaterialCurve, K2Node_DynamicCast_AsCurve_Vector) == 0x0000B8, "Member 'BP_PsychicComponentMain_C_LoadMaterialCurve::K2Node_DynamicCast_AsCurve_Vector' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_LoadMaterialCurve, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_PsychicComponentMain_C_LoadMaterialCurve::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetMaterialParam
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PsychicComponentMain_C_GetMaterialParam final
{
public:
	E_SASKind                                     Sas_kind_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSPsychicCaptureMaterial               Material_param;                                    // 0x0008(0x00A0)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetMaterialParam) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetMaterialParam");
static_assert(sizeof(BP_PsychicComponentMain_C_GetMaterialParam) == 0x0000B0, "Wrong size on BP_PsychicComponentMain_C_GetMaterialParam");
static_assert(offsetof(BP_PsychicComponentMain_C_GetMaterialParam, Sas_kind_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetMaterialParam::Sas_kind_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetMaterialParam, Material_param) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetMaterialParam::Material_param' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetMaterialParam, K2Node_SwitchEnum_CmpSuccess) == 0x0000A8, "Member 'BP_PsychicComponentMain_C_GetMaterialParam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.GetMaterialCurve
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_GetMaterialCurve final
{
public:
	E_SASKind                                     Sas_kind_in;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_600D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Material_curve;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_GetMaterialCurve) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_GetMaterialCurve");
static_assert(sizeof(BP_PsychicComponentMain_C_GetMaterialCurve) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_GetMaterialCurve");
static_assert(offsetof(BP_PsychicComponentMain_C_GetMaterialCurve, Sas_kind_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_GetMaterialCurve::Sas_kind_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetMaterialCurve, Material_curve) == 0x000008, "Member 'BP_PsychicComponentMain_C_GetMaterialCurve::Material_curve' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_GetMaterialCurve, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_PsychicComponentMain_C_GetMaterialCurve::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetPsychicActive
// 0x0001 (0x0001 - 0x0000)
struct BP_PsychicComponentMain_C_SetPsychicActive final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetPsychicActive) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_SetPsychicActive");
static_assert(sizeof(BP_PsychicComponentMain_C_SetPsychicActive) == 0x000001, "Wrong size on BP_PsychicComponentMain_C_SetPsychicActive");
static_assert(offsetof(BP_PsychicComponentMain_C_SetPsychicActive, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetPsychicActive::Flag_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackThrowDirect
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackThrowDirect final
{
public:
	class ARsBattleHero_C*                        Grab_owner_in;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target_actor_in;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isPsychicActive_return;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackThrowDirect) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackThrowDirect");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackThrowDirect) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_SetAttackThrowDirect");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowDirect, Grab_owner_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackThrowDirect::Grab_owner_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowDirect, Target_actor_in) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetAttackThrowDirect::Target_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowDirect, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetAttackThrowDirect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowDirect, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_PsychicComponentMain_C_SetAttackThrowDirect::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowDirect, CallFunc_isPsychicActive_return) == 0x000012, "Member 'BP_PsychicComponentMain_C_SetAttackThrowDirect::CallFunc_isPsychicActive_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackThrowDirect, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'BP_PsychicComponentMain_C_SetAttackThrowDirect::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetLiftUpDirect
// 0x003C (0x003C - 0x0000)
struct BP_PsychicComponentMain_C_SetLiftUpDirect final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_600E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetLiftUpDirect) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_SetLiftUpDirect");
static_assert(sizeof(BP_PsychicComponentMain_C_SetLiftUpDirect) == 0x00003C, "Wrong size on BP_PsychicComponentMain_C_SetLiftUpDirect");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_BreakVector_X) == 0x000004, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_BreakVector_Y) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_BreakVector_Z) == 0x00000C, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000014, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00002C, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetLiftUpDirect, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000038, "Member 'BP_PsychicComponentMain_C_SetLiftUpDirect::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.UpdateLiftUpDirect
// 0x0064 (0x0064 - 0x0000)
struct BP_PsychicComponentMain_C_UpdateLiftUpDirect final
{
public:
	float                                         L_rotRate;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_posRate;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_timeRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRate_ReturnValue;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetAttackPos_attack_pos;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOver_ReturnValue;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_UpdateLiftUpDirect) == 0x000004, "Wrong alignment on BP_PsychicComponentMain_C_UpdateLiftUpDirect");
static_assert(sizeof(BP_PsychicComponentMain_C_UpdateLiftUpDirect) == 0x000064, "Wrong size on BP_PsychicComponentMain_C_UpdateLiftUpDirect");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, L_rotRate) == 0x000000, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::L_rotRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, L_posRate) == 0x000004, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::L_posRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, L_timeRate) == 0x000008, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::L_timeRate' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_Ease_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_GetRate_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_GetRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_Ease_ReturnValue_1) == 0x000014, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_RLerp_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_GetAttackPos_attack_pos) == 0x000024, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_GetAttackPos_attack_pos' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_VLerp_ReturnValue) == 0x000030, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_Normal_ReturnValue) == 0x000048, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_MakeRotFromX_ReturnValue) == 0x000054, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_UpdateLiftUpDirect, CallFunc_IsOver_ReturnValue) == 0x000060, "Member 'BP_PsychicComponentMain_C_UpdateLiftUpDirect::CallFunc_IsOver_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetAttackSkillInfoExtraType
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType final
{
public:
	TArray<EHCSkillExtraType>                     Extra_type_list_in;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType");
static_assert(sizeof(BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType");
static_assert(offsetof(BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType, Extra_type_list_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetAttackSkillInfoExtraType::Extra_type_list_in' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetMaterialCaptureStartOld
// 0x0010 (0x0010 - 0x0000)
struct BP_PsychicComponentMain_C_SetMaterialCaptureStartOld final
{
public:
	bool                                          Flag_in;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_600F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         L_Mesh;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetMaterialCaptureStartOld) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetMaterialCaptureStartOld");
static_assert(sizeof(BP_PsychicComponentMain_C_SetMaterialCaptureStartOld) == 0x000010, "Wrong size on BP_PsychicComponentMain_C_SetMaterialCaptureStartOld");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMaterialCaptureStartOld, Flag_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetMaterialCaptureStartOld::Flag_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetMaterialCaptureStartOld, L_Mesh) == 0x000008, "Member 'BP_PsychicComponentMain_C_SetMaterialCaptureStartOld::L_Mesh' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.AddCaptureMeshList
// 0x0018 (0x0018 - 0x0000)
struct BP_PsychicComponentMain_C_AddCaptureMeshList final
{
public:
	class UMeshComponent*                         Mesh_in;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_AddCaptureMeshList) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_AddCaptureMeshList");
static_assert(sizeof(BP_PsychicComponentMain_C_AddCaptureMeshList) == 0x000018, "Wrong size on BP_PsychicComponentMain_C_AddCaptureMeshList");
static_assert(offsetof(BP_PsychicComponentMain_C_AddCaptureMeshList, Mesh_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_AddCaptureMeshList::Mesh_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_AddCaptureMeshList, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_PsychicComponentMain_C_AddCaptureMeshList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_AddCaptureMeshList, CallFunc_Array_Find_ReturnValue) == 0x00000C, "Member 'BP_PsychicComponentMain_C_AddCaptureMeshList::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_AddCaptureMeshList, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_AddCaptureMeshList::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.SetEnemyPsychicObjectInfoMain
// 0x0160 (0x0160 - 0x0000)
struct BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain final
{
public:
	struct FHCCollisionCommonInfo                 InCommonInfo;                                      // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FHCSkillCommonInfo                     InSkillInfo;                                       // 0x0070(0x00F0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain");
static_assert(sizeof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain) == 0x000160, "Wrong size on BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain, InCommonInfo) == 0x000000, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain::InCommonInfo' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain, InSkillInfo) == 0x000070, "Member 'BP_PsychicComponentMain_C_SetEnemyPsychicObjectInfoMain::InSkillInfo' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.InterceptCancel
// 0x0002 (0x0002 - 0x0000)
struct BP_PsychicComponentMain_C_InterceptCancel final
{
public:
	bool                                          CallFunc_SetDestroyMain_return;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_InterceptCancel) == 0x000001, "Wrong alignment on BP_PsychicComponentMain_C_InterceptCancel");
static_assert(sizeof(BP_PsychicComponentMain_C_InterceptCancel) == 0x000002, "Wrong size on BP_PsychicComponentMain_C_InterceptCancel");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptCancel, CallFunc_SetDestroyMain_return) == 0x000000, "Member 'BP_PsychicComponentMain_C_InterceptCancel::CallFunc_SetDestroyMain_return' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_InterceptCancel, CallFunc_SetVisibilityPsyObj_return) == 0x000001, "Member 'BP_PsychicComponentMain_C_InterceptCancel::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugPrintAbolishString
// 0x0020 (0x0020 - 0x0000)
struct BP_PsychicComponentMain_C_DebugPrintAbolishString final
{
public:
	class FString                                 Func_name_in;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugPrintAbolishString) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugPrintAbolishString");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugPrintAbolishString) == 0x000020, "Wrong size on BP_PsychicComponentMain_C_DebugPrintAbolishString");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugPrintAbolishString, Func_name_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugPrintAbolishString::Func_name_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugPrintAbolishString, CallFunc_Concat_StrStr_ReturnValue) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugPrintAbolishString::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_PsychicComponentMain.BP_PsychicComponentMain_C.DebugPrintCheckSimulate
// 0x0030 (0x0030 - 0x0000)
struct BP_PsychicComponentMain_C_DebugPrintCheckSimulate final
{
public:
	class FString                                 Str_in;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Skip_screen_in;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6010[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PsychicComponentMain_C_DebugPrintCheckSimulate) == 0x000008, "Wrong alignment on BP_PsychicComponentMain_C_DebugPrintCheckSimulate");
static_assert(sizeof(BP_PsychicComponentMain_C_DebugPrintCheckSimulate) == 0x000030, "Wrong size on BP_PsychicComponentMain_C_DebugPrintCheckSimulate");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugPrintCheckSimulate, Str_in) == 0x000000, "Member 'BP_PsychicComponentMain_C_DebugPrintCheckSimulate::Str_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugPrintCheckSimulate, Skip_screen_in) == 0x000010, "Member 'BP_PsychicComponentMain_C_DebugPrintCheckSimulate::Skip_screen_in' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugPrintCheckSimulate, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_PsychicComponentMain_C_DebugPrintCheckSimulate::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PsychicComponentMain_C_DebugPrintCheckSimulate, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'BP_PsychicComponentMain_C_DebugPrintCheckSimulate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

