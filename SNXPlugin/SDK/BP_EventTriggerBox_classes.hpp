#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventTriggerBox

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "Engine_structs.hpp"
#include "FScenarioFlagCheckData_structs.hpp"
#include "BP_TriggerBoxBase_classes.hpp"
#include "ETriggerEventType_structs.hpp"
#include "EEventEnableCheckType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventTriggerBox.BP_EventTriggerBox_C
// 0x00A0 (0x0300 - 0x0260)
#pragma pack(push, 0x1)
class alignas(0x08) ABP_EventTriggerBox_C : public ABP_TriggerBoxBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EventTriggerBox_C;               // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          WallCollision;                                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UREDLuaScriptComponent*                 REDLuaScript;                                      // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         SetProgressID;                                     // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBPEvent;                                         // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5797[0x3];                                     // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MakeEventActor;                                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEventEnableCheckType                         CheckType;                                         // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5798[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFScenarioFlagCheckData>        CheckScenarioFlagList;                             // 0x0290(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         ProgressId;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETriggerEventType                             TriggerEventType;                                  // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5799[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BrainTalkID;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                DebuggingManager;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SetScenarioFlagName;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpperLimitProgressID;                              // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverlappingCheck;                                // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_579A[0x3];                                     // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 EndBrainTalkBPEvent;                               // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     HeroID;                                            // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     PartnerId;                                         // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_579B[0x6];                                     // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LoadBPEventPath;                                   // 0x02D8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FString                                 StartPathBPEventPath;                              // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsOverlappingPlayedEvent;                          // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRushEventTrigger;                                // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EventTriggerBox(int32 EntryPoint);
	void OnBondsProgressEvent(EPlayerID TargetID, float bondsProgress);
	void SetReturnMoveMainChara(class AActor* DestroyedActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void OnEvent(class AActor* OtherActor, bool* Played);
	void CheckEnableEvent(bool* Enable);
	void CheckWallCollisionEnabled();
	void CheckEnableEventBase(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventTriggerBox_C">();
	}
	static class ABP_EventTriggerBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventTriggerBox_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_EventTriggerBox_C) == 0x000008, "Wrong alignment on ABP_EventTriggerBox_C");
static_assert(sizeof(ABP_EventTriggerBox_C) == 0x000300, "Wrong size on ABP_EventTriggerBox_C");
static_assert(offsetof(ABP_EventTriggerBox_C, UberGraphFrame_BP_EventTriggerBox_C) == 0x000260, "Member 'ABP_EventTriggerBox_C::UberGraphFrame_BP_EventTriggerBox_C' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, WallCollision) == 0x000268, "Member 'ABP_EventTriggerBox_C::WallCollision' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, REDLuaScript) == 0x000270, "Member 'ABP_EventTriggerBox_C::REDLuaScript' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, SetProgressID) == 0x000278, "Member 'ABP_EventTriggerBox_C::SetProgressID' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, IsBPEvent) == 0x00027C, "Member 'ABP_EventTriggerBox_C::IsBPEvent' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, MakeEventActor) == 0x000280, "Member 'ABP_EventTriggerBox_C::MakeEventActor' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, CheckType) == 0x000288, "Member 'ABP_EventTriggerBox_C::CheckType' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, CheckScenarioFlagList) == 0x000290, "Member 'ABP_EventTriggerBox_C::CheckScenarioFlagList' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, ProgressId) == 0x0002A0, "Member 'ABP_EventTriggerBox_C::ProgressId' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, TriggerEventType) == 0x0002A4, "Member 'ABP_EventTriggerBox_C::TriggerEventType' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, BrainTalkID) == 0x0002A8, "Member 'ABP_EventTriggerBox_C::BrainTalkID' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, DebuggingManager) == 0x0002B0, "Member 'ABP_EventTriggerBox_C::DebuggingManager' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, SetScenarioFlagName) == 0x0002B8, "Member 'ABP_EventTriggerBox_C::SetScenarioFlagName' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, UpperLimitProgressID) == 0x0002C0, "Member 'ABP_EventTriggerBox_C::UpperLimitProgressID' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, IsOverlappingCheck) == 0x0002C4, "Member 'ABP_EventTriggerBox_C::IsOverlappingCheck' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, EndBrainTalkBPEvent) == 0x0002C8, "Member 'ABP_EventTriggerBox_C::EndBrainTalkBPEvent' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, HeroID) == 0x0002D0, "Member 'ABP_EventTriggerBox_C::HeroID' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, PartnerId) == 0x0002D1, "Member 'ABP_EventTriggerBox_C::PartnerId' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, LoadBPEventPath) == 0x0002D8, "Member 'ABP_EventTriggerBox_C::LoadBPEventPath' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, StartPathBPEventPath) == 0x0002E8, "Member 'ABP_EventTriggerBox_C::StartPathBPEventPath' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, IsOverlappingPlayedEvent) == 0x0002F8, "Member 'ABP_EventTriggerBox_C::IsOverlappingPlayedEvent' has a wrong offset!");
static_assert(offsetof(ABP_EventTriggerBox_C, IsRushEventTrigger) == 0x0002F9, "Member 'ABP_EventTriggerBox_C::IsRushEventTrigger' has a wrong offset!");

}

