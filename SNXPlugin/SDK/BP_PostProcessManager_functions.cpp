#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PostProcessManager

#include "Basic.hpp"

#include "BP_PostProcessManager_classes.hpp"
#include "BP_PostProcessManager_parameters.hpp"


namespace SDK
{

// Function BP_PostProcessManager.BP_PostProcessManager_C.ExecuteUbergraph_BP_PostProcessManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ExecuteUbergraph_BP_PostProcessManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ExecuteUbergraph_BP_PostProcessManager");

	Params::BP_PostProcessManager_C_ExecuteUbergraph_BP_PostProcessManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearPool
// (BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::ClearPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.DelayBeginPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::DelayBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "DelayBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ImmediateExposure
// (BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::ImmediateExposure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ImmediateExposure");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ReceiveEndPlay");

	Params::BP_PostProcessManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ReceiveTick");

	Params::BP_PostProcessManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PostProcessManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.StartPostProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPostProcessSettings             Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   TimeSeconds                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Handle                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::StartPostProcess(const struct FPostProcessSettings& Settings, float TimeSeconds, int32* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "StartPostProcess");

	Params::BP_PostProcessManager_C_StartPostProcess Parms{};

	Parms.Settings = std::move(Settings);
	Parms.TimeSeconds = TimeSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.GetUnusedComponent
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::GetUnusedComponent(int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "GetUnusedComponent");

	Params::BP_PostProcessManager_C_GetUnusedComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.Update
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "Update");

	Params::BP_PostProcessManager_C_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.EndPostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TimeSeconds                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::EndPostProcess(int32 Handle, float TimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "EndPostProcess");

	Params::BP_PostProcessManager_C_EndPostProcess Parms{};

	Parms.Handle = Handle;
	Parms.TimeSeconds = TimeSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ResetSequencerPostProcess
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::ResetSequencerPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ResetSequencerPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetSequencerPostProcessSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPostProcessSettings             Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   BlendWeight                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetSequencerPostProcessSetting(const struct FPostProcessSettings& Settings, float BlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetSequencerPostProcessSetting");

	Params::BP_PostProcessManager_C_SetSequencerPostProcessSetting Parms{};

	Parms.Settings = std::move(Settings);
	Parms.BlendWeight = BlendWeight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.GetPerformPostProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPostProcessComponent*            PostProcess                                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::GetPerformPostProcess(class UPostProcessComponent** PostProcess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "GetPerformPostProcess");

	Params::BP_PostProcessManager_C_GetPerformPostProcess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PostProcess != nullptr)
		*PostProcess = Parms.PostProcess;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupDamagePostProcess
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupDamagePostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupDamagePostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetDamagePostProcessPower
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetDamagePostProcessPower(float Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetDamagePostProcessPower");

	Params::BP_PostProcessManager_C_SetDamagePostProcessPower Parms{};

	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetDamagePostProcessPowerFlash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetDamagePostProcessPowerFlash(float Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetDamagePostProcessPowerFlash");

	Params::BP_PostProcessManager_C_SetDamagePostProcessPowerFlash Parms{};

	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupOutlinePriorityDefault
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupOutlinePriorityDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupOutlinePriorityDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupOutlinePriorityFront
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupOutlinePriorityFront()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupOutlinePriorityFront");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupAcceleratorPP
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupAcceleratorPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupAcceleratorPP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.IsActiveDamagePostProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::IsActiveDamagePostProcess(bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "IsActiveDamagePostProcess");

	Params::BP_PostProcessManager_C_IsActiveDamagePostProcess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.EnableDamagePostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::EnableDamagePostProcess(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "EnableDamagePostProcess");

	Params::BP_PostProcessManager_C_EnableDamagePostProcess Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.LoadAsset
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "LoadAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateInitializePerformPostProcess
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::PrivateInitializePerformPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateInitializePerformPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupSeeThroughPP
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupSeeThroughPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupSeeThroughPP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetSeeThroughRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetSeeThroughRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetSeeThroughRate");

	Params::BP_PostProcessManager_C_SetSeeThroughRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetAcceleratorRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetAcceleratorRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetAcceleratorRate");

	Params::BP_PostProcessManager_C_SetAcceleratorRate Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetAcceleratorParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RedBlurColorMul                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RedBlurPower                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NoRedBlurRadius                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PPTime                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetAcceleratorParameter(float RedBlurColorMul, float RedBlurPower, float NoRedBlurRadius, float PPTime, const struct FLinearColor& BlurCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetAcceleratorParameter");

	Params::BP_PostProcessManager_C_SetAcceleratorParameter Parms{};

	Parms.RedBlurColorMul = RedBlurColorMul;
	Parms.RedBlurPower = RedBlurPower;
	Parms.NoRedBlurRadius = NoRedBlurRadius;
	Parms.PPTime = PPTime;
	Parms.BlurCenter = std::move(BlurCenter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupMenu
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetupMenuPP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            PostProcess                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FWeightedBlendable>       RestoreWork                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateSetupMenuPP(class UPostProcessComponent* PostProcess, TArray<struct FWeightedBlendable>& RestoreWork)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetupMenuPP");

	Params::BP_PostProcessManager_C_PrivateSetupMenuPP Parms{};

	Parms.PostProcess = PostProcess;
	Parms.RestoreWork = std::move(RestoreWork);

	UObject::ProcessEvent(Func, &Parms);

	RestoreWork = std::move(Parms.RestoreWork);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.RestoreScene
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::RestoreScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "RestoreScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateRestoreScenePP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPostProcessComponent*            PostProcess                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FWeightedBlendable>       RestoreWork                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateRestoreScenePP(class UPostProcessComponent* PostProcess, TArray<struct FWeightedBlendable>& RestoreWork)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateRestoreScenePP");

	Params::BP_PostProcessManager_C_PrivateRestoreScenePP Parms{};

	Parms.PostProcess = PostProcess;
	Parms.RestoreWork = std::move(RestoreWork);

	UObject::ProcessEvent(Func, &Parms);

	RestoreWork = std::move(Parms.RestoreWork);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupVisionFogPP
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupVisionFogPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupVisionFogPP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetVisionFogRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetVisionFogRate(EVisionFogID VisionFogID, float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetVisionFogRate");

	Params::BP_PostProcessManager_C_SetVisionFogRate Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.GetVisionFogRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::GetVisionFogRate(EVisionFogID VisionFogID, float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "GetVisionFogRate");

	Params::BP_PostProcessManager_C_GetVisionFogRate Parms{};

	Parms.VisionFogID = VisionFogID;

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.IsActiveVisionFog
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::IsActiveVisionFog(bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "IsActiveVisionFog");

	Params::BP_PostProcessManager_C_IsActiveVisionFog Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetupVisionFogMaterial
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateSetupVisionFogMaterial(EVisionFogID VisionFogID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetupVisionFogMaterial");

	Params::BP_PostProcessManager_C_PrivateSetupVisionFogMaterial Parms{};

	Parms.VisionFogID = VisionFogID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.UpdateVisionFog
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::UpdateVisionFog(float DeltaSeconds, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "UpdateVisionFog");

	Params::BP_PostProcessManager_C_UpdateVisionFog Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupLocalVIsionFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogNear                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogFar                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetupLocalVIsionFog(class UMaterialInstanceDynamic* PPMaterial, float Rate, float FogNear, float FogFar, const struct FVector& CenterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupLocalVIsionFog");

	Params::BP_PostProcessManager_C_SetupLocalVIsionFog Parms{};

	Parms.PPMaterial = PPMaterial;
	Parms.Rate = Rate;
	Parms.FogNear = FogNear;
	Parms.FogFar = FogFar;
	Parms.CenterLocation = std::move(CenterLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearLocalVIsionFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ClearLocalVIsionFog(class UMaterialInstanceDynamic* PPMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearLocalVIsionFog");

	Params::BP_PostProcessManager_C_ClearLocalVIsionFog Parms{};

	Parms.PPMaterial = PPMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupLocalSeeThrough
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetupLocalSeeThrough(class UMaterialInstanceDynamic* PPMaterial, float Rate, float BlurPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupLocalSeeThrough");

	Params::BP_PostProcessManager_C_SetupLocalSeeThrough Parms{};

	Parms.PPMaterial = PPMaterial;
	Parms.Rate = Rate;
	Parms.BlurPower = BlurPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearLocalSeeThrough
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ClearLocalSeeThrough(class UMaterialInstanceDynamic* PPMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearLocalSeeThrough");

	Params::BP_PostProcessManager_C_ClearLocalSeeThrough Parms{};

	Parms.PPMaterial = PPMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupLocalAccelerator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetupLocalAccelerator(class UMaterialInstanceDynamic* PPMaterial, float Rate, const struct FVector& BlurCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupLocalAccelerator");

	Params::BP_PostProcessManager_C_SetupLocalAccelerator Parms{};

	Parms.PPMaterial = PPMaterial;
	Parms.Rate = Rate;
	Parms.BlurCenter = std::move(BlurCenter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearLocalAccelerator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ClearLocalAccelerator(class UMaterialInstanceDynamic* PPMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearLocalAccelerator");

	Params::BP_PostProcessManager_C_ClearLocalAccelerator Parms{};

	Parms.PPMaterial = PPMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupLocalRadialBlur
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetupLocalRadialBlur(class UMaterialInstanceDynamic* PPMaterial, float Rate, float BlurSize, const struct FVector& BlurCenter, const struct FVector& BlurColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupLocalRadialBlur");

	Params::BP_PostProcessManager_C_SetupLocalRadialBlur Parms{};

	Parms.PPMaterial = PPMaterial;
	Parms.Rate = Rate;
	Parms.BlurSize = BlurSize;
	Parms.BlurCenter = std::move(BlurCenter);
	Parms.BlurColor = std::move(BlurColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearLocalRadialBlur
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         PPMaterial                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::ClearLocalRadialBlur(class UMaterialInstanceDynamic* PPMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearLocalRadialBlur");

	Params::BP_PostProcessManager_C_ClearLocalRadialBlur Parms{};

	Parms.PPMaterial = PPMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetAcceleratorParameterFromRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetAcceleratorParameterFromRate(float Rate, const struct FLinearColor& BlurCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetAcceleratorParameterFromRate");

	Params::BP_PostProcessManager_C_SetAcceleratorParameterFromRate Parms{};

	Parms.Rate = Rate;
	Parms.BlurCenter = std::move(BlurCenter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRadialBlur
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurCenter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BlurColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRadialBlur(float Rate, float BlurSize, const struct FVector& BlurCenter, const struct FVector& BlurColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRadialBlur");

	Params::BP_PostProcessManager_C_SetRadialBlur Parms{};

	Parms.Rate = Rate;
	Parms.BlurSize = BlurSize;
	Parms.BlurCenter = std::move(BlurCenter);
	Parms.BlurColor = std::move(BlurColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupCinematicVisionFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogNear                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FogFar                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetupCinematicVisionFog(EVisionFogID VisionFogID, float Rate, float FogNear, float FogFar, const struct FVector& CenterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupCinematicVisionFog");

	Params::BP_PostProcessManager_C_SetupCinematicVisionFog Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Rate = Rate;
	Parms.FogNear = FogNear;
	Parms.FogFar = FogFar;
	Parms.CenterLocation = std::move(CenterLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearCinematicVisionFog
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::ClearCinematicVisionFog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearCinematicVisionFog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupCinematicSeeThrough
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetupCinematicSeeThrough(float Rate, float BlurPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupCinematicSeeThrough");

	Params::BP_PostProcessManager_C_SetupCinematicSeeThrough Parms{};

	Parms.Rate = Rate;
	Parms.BlurPower = BlurPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearCinematicSeeThrough
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::ClearCinematicSeeThrough()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearCinematicSeeThrough");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateGetVisionFogMaterial
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateGetVisionFogMaterial(EVisionFogID VisionFogID, class UMaterialInstanceDynamic** Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateGetVisionFogMaterial");

	Params::BP_PostProcessManager_C_PrivateGetVisionFogMaterial Parms{};

	Parms.VisionFogID = VisionFogID;

	UObject::ProcessEvent(Func, &Parms);

	if (Mid != nullptr)
		*Mid = Parms.Mid;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateGetVisionFogRate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateGetVisionFogRate(EVisionFogID VisionFogID, float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateGetVisionFogRate");

	Params::BP_PostProcessManager_C_PrivateGetVisionFogRate Parms{};

	Parms.VisionFogID = VisionFogID;

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetVisionFogRate
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateSetVisionFogRate(EVisionFogID VisionFogID, float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetVisionFogRate");

	Params::BP_PostProcessManager_C_PrivateSetVisionFogRate Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetupPicturizeQuality
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::PrivateSetupPicturizeQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetupPicturizeQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.IsOutlinePriorityFront
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsFront                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::IsOutlinePriorityFront(bool* IsFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "IsOutlinePriorityFront");

	Params::BP_PostProcessManager_C_IsOutlinePriorityFront Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFront != nullptr)
		*IsFront = Parms.IsFront;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetSimpleFade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetSimpleFade(float Rate, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetSimpleFade");

	Params::BP_PostProcessManager_C_SetSimpleFade Parms{};

	Parms.Rate = Rate;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupSimpleFade
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupSimpleFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupSimpleFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateInitializePerformShotPostProcess
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::PrivateInitializePerformShotPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateInitializePerformShotPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.StartPerformShot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPerformShotType                        ShotType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OneTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::StartPerformShot(EPerformShotType ShotType, bool OneTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "StartPerformShot");

	Params::BP_PostProcessManager_C_StartPerformShot Parms{};

	Parms.ShotType = ShotType;
	Parms.OneTime = OneTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.EndPerformShot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPerformShotType                        ShotType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OneTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::EndPerformShot(EPerformShotType ShotType, bool OneTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "EndPerformShot");

	Params::BP_PostProcessManager_C_EndPerformShot Parms{};

	Parms.ShotType = ShotType;
	Parms.OneTime = OneTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.UpdatePerformShot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::UpdatePerformShot(float DeltaSeconds, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "UpdatePerformShot");

	Params::BP_PostProcessManager_C_UpdatePerformShot Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetupPerformShotRate
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateSetupPerformShotRate(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetupPerformShotRate");

	Params::BP_PostProcessManager_C_PrivateSetupPerformShotRate Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateGetPerformShotFinishTime
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartFinishTime                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LoopTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndFinishTime                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateGetPerformShotFinishTime(int32 Param_Index, float* StartFinishTime, float* LoopTime, float* EndFinishTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateGetPerformShotFinishTime");

	Params::BP_PostProcessManager_C_PrivateGetPerformShotFinishTime Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (StartFinishTime != nullptr)
		*StartFinishTime = Parms.StartFinishTime;

	if (LoopTime != nullptr)
		*LoopTime = Parms.LoopTime;

	if (EndFinishTime != nullptr)
		*EndFinishTime = Parms.EndFinishTime;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetupPerformShotRateValues
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Weight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseBlur                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseFov                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FPerformShotData                 ShotData                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PostProcessManager_C::PrivateSetupPerformShotRateValues(int32 Param_Index, float Weight, bool UseBlur, bool UseFov, const struct FPerformShotData& ShotData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetupPerformShotRateValues");

	Params::BP_PostProcessManager_C_PrivateSetupPerformShotRateValues Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Weight = Weight;
	Parms.UseBlur = UseBlur;
	Parms.UseFov = UseFov;
	Parms.ShotData = std::move(ShotData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateInitializePerformShotPostProcessReload
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::PrivateInitializePerformShotPostProcessReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateInitializePerformShotPostProcessReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupScreenLight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupScreenLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupScreenLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetScreenLight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetScreenLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetScreenLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupLevelup
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupLevelup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupLevelup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.UpdateLevelup
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::UpdateLevelup(float DeltaSeconds, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "UpdateLevelup");

	Params::BP_PostProcessManager_C_UpdateLevelup Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.StartLevelup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      PartyKind                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::StartLevelup(ERSPartyPlayerKind PartyKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "StartLevelup");

	Params::BP_PostProcessManager_C_StartLevelup Parms{};

	Parms.PartyKind = PartyKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.DebugReloadPerformTable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::DebugReloadPerformTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "DebugReloadPerformTable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.GetSeeThroughInterpolateTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartSeconds                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndSeconds                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::GetSeeThroughInterpolateTime(float* StartSeconds, float* EndSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "GetSeeThroughInterpolateTime");

	Params::BP_PostProcessManager_C_GetSeeThroughInterpolateTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartSeconds != nullptr)
		*StartSeconds = Parms.StartSeconds;

	if (EndSeconds != nullptr)
		*EndSeconds = Parms.EndSeconds;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.GetAcceleratorInterpolateTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartSeconds                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndSeconds                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::GetAcceleratorInterpolateTime(float* StartSeconds, float* EndSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "GetAcceleratorInterpolateTime");

	Params::BP_PostProcessManager_C_GetAcceleratorInterpolateTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartSeconds != nullptr)
		*StartSeconds = Parms.StartSeconds;

	if (EndSeconds != nullptr)
		*EndSeconds = Parms.EndSeconds;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupFishEye
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupFishEye()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupFishEye");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateGetVisionFogMaterialParameter
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<float>                           Mid                                                    (Parm, OutParm, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateGetVisionFogMaterialParameter(EVisionFogID VisionFogID, TArray<float>* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateGetVisionFogMaterialParameter");

	Params::BP_PostProcessManager_C_PrivateGetVisionFogMaterialParameter Parms{};

	Parms.VisionFogID = VisionFogID;

	UObject::ProcessEvent(Func, &Parms);

	if (Mid != nullptr)
		*Mid = std::move(Parms.Mid);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.StartRecoverNPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      PlayerKind                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::StartRecoverNPC(ERSPartyPlayerKind PlayerKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "StartRecoverNPC");

	Params::BP_PostProcessManager_C_StartRecoverNPC Parms{};

	Parms.PlayerKind = PlayerKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.UpdateRecoverNPC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::UpdateRecoverNPC(float DeltaSeconds, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "UpdateRecoverNPC");

	Params::BP_PostProcessManager_C_UpdateRecoverNPC Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupKarenMemory
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetupKarenMemory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupKarenMemory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetEventCommandVisionFogRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            FogID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetEventCommandVisionFogRate(EVisionFogID FogID, float Rate, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetEventCommandVisionFogRate");

	Params::BP_PostProcessManager_C_SetEventCommandVisionFogRate Parms{};

	Parms.FogID = FogID;
	Parms.Rate = Rate;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.UpdateAlways
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::UpdateAlways()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "UpdateAlways");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.Setup Outline PPM
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::Setup_Outline_PPM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "Setup Outline PPM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetPerformShotFov
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPerformShotType                        ShotType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OneShot                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::PrivateSetPerformShotFov(EPerformShotType ShotType, bool Enable, bool OneShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetPerformShotFov");

	Params::BP_PostProcessManager_C_PrivateSetPerformShotFov Parms{};

	Parms.ShotType = ShotType;
	Parms.Enable = Enable;
	Parms.OneShot = OneShot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsALLDefault
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetRenderingSettingsALLDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsALLDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsALLDynamicEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::SetRenderingSettingsALLDynamicEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsALLDynamicEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsTranslucency
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERenderingSettingsType                  RenderingSettingType                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRenderingSettingsTranslucency(ERenderingSettingsType RenderingSettingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsTranslucency");

	Params::BP_PostProcessManager_C_SetRenderingSettingsTranslucency Parms{};

	Parms.RenderingSettingType = RenderingSettingType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsMergeInternal
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRenderingSettings               BaseSettings                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class FName                             OverrideParamName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRenderingSettings               MergeSettings                                          (Parm, OutParm, NoDestructor)

void ABP_PostProcessManager_C::SetRenderingSettingsMergeInternal(const struct FRenderingSettings& BaseSettings, class FName OverrideParamName, struct FRenderingSettings* MergeSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsMergeInternal");

	Params::BP_PostProcessManager_C_SetRenderingSettingsMergeInternal Parms{};

	Parms.BaseSettings = std::move(BaseSettings);
	Parms.OverrideParamName = OverrideParamName;

	UObject::ProcessEvent(Func, &Parms);

	if (MergeSettings != nullptr)
		*MergeSettings = std::move(Parms.MergeSettings);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsTranslucencyInternal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRenderingSettings               BaseSettings                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class FName                             OverrideParamName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRenderingSettingsTranslucencyInternal(const struct FRenderingSettings& BaseSettings, class FName OverrideParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsTranslucencyInternal");

	Params::BP_PostProcessManager_C_SetRenderingSettingsTranslucencyInternal Parms{};

	Parms.BaseSettings = std::move(BaseSettings);
	Parms.OverrideParamName = OverrideParamName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsSSRResolution
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERenderingSettingsType                  RenderingSettingType                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRenderingSettingsSSRResolution(ERenderingSettingsType RenderingSettingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsSSRResolution");

	Params::BP_PostProcessManager_C_SetRenderingSettingsSSRResolution Parms{};

	Parms.RenderingSettingType = RenderingSettingType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsTest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRenderingSettingsTest(class FName NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsTest");

	Params::BP_PostProcessManager_C_SetRenderingSettingsTest Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetupOutlineOptimizeNoCustomDepth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::SetupOutlineOptimizeNoCustomDepth(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetupOutlineOptimizeNoCustomDepth");

	Params::BP_PostProcessManager_C_SetupOutlineOptimizeNoCustomDepth Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetOutlineENPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BrainField                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetOutlineENPC(bool BrainField, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetOutlineENPC");

	Params::BP_PostProcessManager_C_SetOutlineENPC Parms{};

	Parms.BrainField = BrainField;
	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetOutlineOFF
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Off                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::SetOutlineOFF(bool Off)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetOutlineOFF");

	Params::BP_PostProcessManager_C_SetOutlineOFF Parms{};

	Parms.Off = Off;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsSSRResolutionInternal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRenderingSettings               BaseSettings                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class FName                             OverrideParamName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRenderingSettingsSSRResolutionInternal(const struct FRenderingSettings& BaseSettings, class FName OverrideParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsSSRResolutionInternal");

	Params::BP_PostProcessManager_C_SetRenderingSettingsSSRResolutionInternal Parms{};

	Parms.BaseSettings = std::move(BaseSettings);
	Parms.OverrideParamName = OverrideParamName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetRenderingSettingsLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocationId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetRenderingSettingsLocation(int32 LocationId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetRenderingSettingsLocation");

	Params::BP_PostProcessManager_C_SetRenderingSettingsLocation Parms{};

	Parms.LocationId = LocationId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.ClearRenderingSettingsLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PostProcessManager_C::ClearRenderingSettingsLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "ClearRenderingSettingsLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateOnChangeArea
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChangeAreaStatus                       Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::PrivateOnChangeArea(EChangeAreaStatus Status, bool IsChangeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateOnChangeArea");

	Params::BP_PostProcessManager_C_PrivateOnChangeArea Parms{};

	Parms.Status = Status;
	Parms.IsChangeLocation = IsChangeLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.IsNeedFrameWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PostProcessManager_C::IsNeedFrameWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "IsNeedFrameWait");

	Params::BP_PostProcessManager_C_IsNeedFrameWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.IsActivePerformShot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPerformShotType                        ShotType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::IsActivePerformShot(EPerformShotType ShotType, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "IsActivePerformShot");

	Params::BP_PostProcessManager_C_IsActivePerformShot Parms{};

	Parms.ShotType = ShotType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetSASPPMCancelCelLook
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PostProcessManager_C::SetSASPPMCancelCelLook(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetSASPPMCancelCelLook");

	Params::BP_PostProcessManager_C_SetSASPPMCancelCelLook Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetVisionFogNear
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Near                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetVisionFogNear(EVisionFogID VisionFogID, float Near)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetVisionFogNear");

	Params::BP_PostProcessManager_C_SetVisionFogNear Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Near = Near;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.SetVisionFogFar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Far                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::SetVisionFogFar(EVisionFogID VisionFogID, float Far)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "SetVisionFogFar");

	Params::BP_PostProcessManager_C_SetVisionFogFar Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Far = Far;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetVisionFogNear
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Near                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateSetVisionFogNear(EVisionFogID VisionFogID, float Near)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetVisionFogNear");

	Params::BP_PostProcessManager_C_PrivateSetVisionFogNear Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Near = Near;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.PrivateSetVisionFogFar
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVisionFogID                            VisionFogID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Far                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::PrivateSetVisionFogFar(EVisionFogID VisionFogID, float Far)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "PrivateSetVisionFogFar");

	Params::BP_PostProcessManager_C_PrivateSetVisionFogFar Parms{};

	Parms.VisionFogID = VisionFogID;
	Parms.Far = Far;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PostProcessManager.BP_PostProcessManager_C.GetOutlineEnpcAlpha
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PostProcessManager_C::GetOutlineEnpcAlpha(float* Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PostProcessManager_C", "GetOutlineEnpcAlpha");

	Params::BP_PostProcessManager_C_GetOutlineEnpcAlpha Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;
}

}

