#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMaterialAccessorComponent

#include "Basic.hpp"

#include "FPlayerCableMaterialParameter_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "S_HandLightMaterialParam_structs.hpp"
#include "S_LightHandSpiralMaterialParam_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerMaterialAccessorComponent.BP_PlayerMaterialAccessorComponent_C
// 0x0CF8 (0x1058 - 0x0360)
class UBP_PlayerMaterialAccessorComponent_C final : public UPlayerMaterialAccessorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         BodySlotHandle;                                    // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkinSlotHandle;                                    // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaskSlotHandle;                                    // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HairSlotHandle;                                    // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HoodTakeOnSlotHandle;                              // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpiralSlotHandle;                                  // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutlineSlotHandle;                                 // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6244[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PsychicFieldMaterial;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_HandLightMaterialParam              LeftHandParam;                                     // 0x0390(0x0018)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LightHandSpiralMaterialParam        LeftHandSpiralParam;                               // 0x03A8(0x0018)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     LastLeftHandEmissionType;                          // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6245[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestoreFaceDamageEmissionColor;                    // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          RestoreShadowOffset;                               // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6246[0x6];                                     // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatLeftHandEmission;                               // 0x03D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_SASKind                                     MatLeftHandEmissionType;                           // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EMaterialAccessorSetupID                      MatLeftHandEmissionOverride;                       // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6247[0x6];                                     // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableVector                     MatLeftHandEmissionExtraColor;                     // 0x0408(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatLeftHandEmissionExtraColorOverride;             // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6248[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatRimLightEmission;                               // 0x0448(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableVector                     MatRimLightEmissionColor;                          // 0x0470(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatRimLightEmissionOverride;                       // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6249[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatFaceDamageVisible;                              // 0x04B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatFaceDamageVisibleOverride;                      // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624A[0x7];                                     // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatFaceDamagePattern2;                             // 0x04E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatFaceDamagePattern2Override;                     // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624B[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatFaceDamageEmissionPower;                        // 0x0510(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatFaceDamageEmissionPowerOverride;                // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624C[0x7];                                     // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableVector                     MatFaceDamageEmissionColor;                        // 0x0540(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatFaceDamageEmissionColorOverride;                // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624D[0x7];                                     // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatEyeEmission;                                    // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatEyeEmissionOverride;                            // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624E[0x7];                                     // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatHoodVisible;                                    // 0x05B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatHoodVisibleOverride;                            // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624F[0x7];                                     // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatHoodOutlineTakeOff;                             // 0x05E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatHoodOutlineTakeOffOverride;                     // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6250[0x7];                                     // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatHoodOutlineTakeOn;                              // 0x0610(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatHoodOutlineTakeOnOverride;                      // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6251[0x7];                                     // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatMaskLine;                                       // 0x0640(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatMaskLineOverride;                               // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6252[0x7];                                     // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatMaskVisible;                                    // 0x0670(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatMaskVisibleOverride;                            // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6253[0x7];                                     // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWetEffectPower;                                 // 0x06A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWetEffectPowerOverride;                         // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6254[0x7];                                     // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatWetWaterToOil;                                  // 0x06D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatWetWaterToOilOverride;                          // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6255[0x7];                                     // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatOutlineEmissionPsychic;                         // 0x0700(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatOutlineEmissionAccelarator;                     // 0x0728(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatOutlineEmissionBrainField;                      // 0x0750(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatOutlineEmissionBrainFieldWeak;                  // 0x0778(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatOutlineEmissionYakumo;                          // 0x07A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatOutlineEmissionOverride;                        // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6256[0x7];                                     // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatPsychicFieldSize;                               // 0x07D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatPsychicFieldAlpha;                              // 0x07F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatPsychicFieldMaxColorRate;                       // 0x0820(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatPsychicFieldOverride;                           // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6257[0x7];                                     // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatInHoodFace;                                     // 0x0850(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatInHoodFaceHood;                                 // 0x0878(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatInHoodFaceOverride;                             // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6258[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSkinShadeSmoothness;                            // 0x08A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSkinShadeSmoothnessOverride;                    // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6259[0x7];                                     // 0x08D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      PrivateShadowOffsetMapID;                          // 0x08D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialShadowOffsetID                       MatShadowOffsetMapID;                              // 0x0900(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EMaterialAccessorSetupID                      MatShadowOffsetMapIDOverride;                      // 0x0901(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625A[0x6];                                     // 0x0902(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatCableDitherRate;                                // 0x0908(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatCableDitherOverride;                            // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EMaterialAccessorSetupID                      MatCableDitherMultiOverride;                       // 0x0931(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625B[0x6];                                     // 0x0932(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFPlayerCableMaterialParameter> SASCableParameterArray;                            // 0x0938(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FFPlayerCableMaterialParameter> BrainCableParameterArray;                          // 0x0948(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMACVariableVector                     MatEmissiveColor;                                  // 0x0958(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatEmissiveColorOverride;                          // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625C[0x7];                                     // 0x0991(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatEmissivePower;                                  // 0x0998(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatEmissivePowerOverride;                          // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625D[0x7];                                     // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASTelepoRate;                                  // 0x09C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASTelepoRateOverride;                          // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625E[0x7];                                     // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASTelepoUVScale;                               // 0x09F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASTelepoUVScaleOverride;                       // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625F[0x7];                                     // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASStealthRate;                                 // 0x0A28(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASStealthRateOverride;                         // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6260[0x7];                                     // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASMetalRate;                                   // 0x0A58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASMetalRateOverride;                           // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6261[0x7];                                     // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASMetalHitRate;                                // 0x0A88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASMetalHitOverride;                            // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6262[0x7];                                     // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableVector                     MatSASMetalHitLocation;                            // 0x0AB8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSASMetalHitRadius;                              // 0x0AF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSASCopyRate;                                    // 0x0B18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASCopyRateOverride;                            // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6263[0x7];                                     // 0x0B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASCopyInstance;                                // 0x0B48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASCopyInstanceOverride;                        // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6264[0x7];                                     // 0x0B71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASSeeThroughPPMCancel;                         // 0x0B78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASSeeThroughPPMCancelOverride;                 // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6265[0x3];                                     // 0x0BA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutlineEmissionNo;                                 // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutlineEmissionParamName;                          // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 DefaultAssignSlots;                                // 0x0BB0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          AssignOnlyBody;                                    // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AssignOnlySkin;                                    // 0x0BC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AssignOnlyMask;                                    // 0x0BC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AssignOnlyHair;                                    // 0x0BC3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AssignOnlyHood;                                    // 0x0BC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AssignOnlyOutline;                                 // 0x0BC5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AssignOnlySheath;                                  // 0x0BC6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6266[0x1];                                     // 0x0BC7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SheathSlotHandle;                                  // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6267[0x4];                                     // 0x0BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatRimLightEmissionFresnelIntensity;               // 0x0BD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatRimLightEmissionFresnelOffset;                  // 0x0BF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatRimLightEmissionNormalMapIntensity;             // 0x0C20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatRimLightEmissionNormalMapOffset;                // 0x0C48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatRimLightEmissionSmooth;                         // 0x0C70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSASMetalHandRate;                               // 0x0C98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatShadowOffsetAdd;                                // 0x0CC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatShadowOffsetAddOverride;                        // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          bPreviousSwitchMaterial;                           // 0x0CE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6268[0x2];                                     // 0x0CEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaterialSwitchHandle;                              // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialSwitchCache                   SwitchCache;                                       // 0x0CF0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FMACVariableFloat                      MatSASSeeThroughRate;                              // 0x0D00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASSeeThroughRateOverride;                      // 0x0D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestRestoreStealthSwitch;                       // 0x0D29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceRestoreSASParameter;                          // 0x0D2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6269[0x5];                                     // 0x0D2B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableVector                     MatRimlightColor;                                  // 0x0D30(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatRimlightColorOverride;                          // 0x0D68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626A[0x7];                                     // 0x0D69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatRimlightOffsetSunny;                            // 0x0D70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatRimlightOffsetSunnyOverride;                    // 0x0D98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626B[0x7];                                     // 0x0D99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatRimlightOffsetAmbient;                          // 0x0DA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatRimlightOffsetAmbientOverride;                  // 0x0DC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626C[0x7];                                     // 0x0DC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatRimlightPowerSunny;                             // 0x0DD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatRimlightPowerSunnyOverride;                     // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626D[0x7];                                     // 0x0DF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatRimlightPowerAmbient;                           // 0x0E00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatRimlightPowerAmbientOverride;                   // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626E[0x7];                                     // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSkinColorBaseToAmb;                             // 0x0E30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSkinColorBaseToAmbOverride;                     // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626F[0x7];                                     // 0x0E59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSkinColorAmbToBase;                             // 0x0E60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSkinColorAmbToBaseOverride;                     // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          SetOutlineEmission;                                // 0x0E89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6270[0x6];                                     // 0x0E8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatEm8000RibbonRate;                               // 0x0E90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatEm8000RibbonRateOverride;                       // 0x0EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6271[0x3];                                     // 0x0EB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hologram1SlotHandle;                               // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMACVariableFloat                      MatFaceDamageIntensity;                            // 0x0EC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatFaceDamageIntensityOverride;                    // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6272[0x7];                                     // 0x0EE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSeeThroughStealthRate;                          // 0x0EF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSeeThroughStealthOverride;                      // 0x0F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6273[0x7];                                     // 0x0F19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatSASHologramErase;                               // 0x0F20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSASHologramEraseOverride;                       // 0x0F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6274[0x7];                                     // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatCableRootEmissionBrain;                         // 0x0F50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMACVariableFloat                      MatCableRootEmissionSAS;                           // 0x0F78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatCableRootEmisionOverride;                       // 0x0FA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          StealthDofON;                                      // 0x0FA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_6275[0x6];                                     // 0x0FA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_OptimizeSwitchMaterial_C*          OptimizeSwitcher;                                  // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestoreOptimizeSwitcher;                           // 0x0FB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6276[0x7];                                     // 0x0FB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RestoreOptimizeSwitcherParameterNames;             // 0x0FB8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMACVariableFloat                      MatSkinHeightGradation1Add;                        // 0x0FC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatSkinHeightGradation1AddOverride;                // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6277[0x7];                                     // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RestoreExcludeParams;                              // 0x0FF8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          NPCMode;                                           // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6278[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMACVariableFloat                      MatAmbientLightStageRate;                          // 0x1010(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	EMaterialAccessorSetupID                      MatAmbientLightStageRateOverride;                  // 0x1038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          InitializeAmbinetLight;                            // 0x1039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6279[0x2];                                     // 0x103A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartOptimizeNo;                                   // 0x103C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndPlayPushDisableOptimize;                        // 0x1040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OptimizeSwitcherChildRef;                          // 0x1041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_627A[0x2];                                     // 0x1042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           RestoreOutlineEmissionColor;                       // 0x1044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstUpdateFinish;                                 // 0x1054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstUpdateOnly;                                   // 0x1055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreMaterialReset;                              // 0x1056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RestoreMaterialAllSkip;                            // 0x1057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerMaterialAccessorComponent(int32 EntryPoint);
	void OnCutinVibration(int32 No);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetPlayerMesh(class USkeletalMeshComponent* PlayerMesh);
	void UpdateMateiral();
	void SetupDefaultParameter(class ACharacter* Param_Player);
	void SetCable(class AActor* Param_Player);
	void RestoreParameter();
	void SearchPsychicFieldMaterial(class AActor* Target, class UMaterialInstanceDynamic** Mid);
	void UpdateLeftHandTable();
	void PrivateSetupPlayerMesh();
	void PrivateSetupDefaultParameter(class AActor* Param_Player);
	void UpdateLeftHand();
	void UpdateHood();
	void UpdateMask();
	void UpdateOutlineEmission();
	void UpdatePsychicField();
	void SetupShadowOffsetMapID(EMaterialShadowOffsetID ShadowOffsetID, bool IsRestore);
	void PrivateRestoreDefaultParameter();
	void SetShadowOffsetTexture(class UTexture2D* ShadowOffsetTexture);
	void UpdateCables();
	void UpdateCablesOnce(struct FFPlayerCableMaterialParameter& CableRef);
	void CreateCableParameter(TArray<class ABP_CableBase_C*>& CableArray, TArray<struct FFPlayerCableMaterialParameter>& CableParameterArray);
	void SetupCableDefaultParameter(TArray<struct FFPlayerCableMaterialParameter>& CableParameterArray);
	void PrivateSetupCable(class AActor* Param_Player);
	void PrivateInitialize();
	void PrivateUpdateMaterial();
	void UpdateSeeThroughPPMCancel();
	void SetOutlineEmissionNo(int32 No);
	void SetupDefaultSlots(bool Assign, int32 SlotNo);
	void UpdateStealth();
	void SetStealthRate(float Rate);
	void PrivateCheckSwitchMaterial();
	void PrivateSetupRestoreExcludeParams();
	void PrivateSetupRestoreExcludeParamsInternal(EMaterialAccessorSetupID ParamOverride, const TArray<class FName>& ExcludeNames, const TArray<class FName>& OutParameterNames);
	void CopyMaterialParameter(class UBP_PlayerMaterialAccessorComponent_C* SourceComponent);
	void PrivateResetOutlineEmission();
	void UpdateHologram1();
	void UpdatePlayerOptimize();
	void UpdatePlayerOptimizeOnce(EMaterialAccessorSetupID Override, struct FMACVariableFloat& ScalarParameter, TArray<class FName>& ParameterNames, TArray<float>& ParameterValues);
	void SetOptimizeSwitcher(class UBPC_OptimizeSwitchMaterial_C* InOptimizeSwitcher, bool ChildRef);
	void PrivateRestoreOptimzieSwitcher();
	void UpdateHeightGradation();
	void AddRestoreExcludeParams(TArray<class FName>& Params_0);
	void UpdateNPC();
	void SetNPCMode(bool Enable);
	void UpdateAmbientLight();
	void PreEndPlay(EEndPlayReason EndPlayReason);
	void SetFirstUpdateOnly(bool FirstOnly);
	void SetupRestoreType(bool InRestoreOverrideParameter, bool InForceRestoreSASParameter, bool InRestoreMaterialReset, bool InRestoreMaterialAllSkip);
	void UpdateCopy();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerMaterialAccessorComponent_C">();
	}
	static class UBP_PlayerMaterialAccessorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerMaterialAccessorComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerMaterialAccessorComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerMaterialAccessorComponent_C");
static_assert(sizeof(UBP_PlayerMaterialAccessorComponent_C) == 0x001058, "Wrong size on UBP_PlayerMaterialAccessorComponent_C");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, UberGraphFrame) == 0x000360, "Member 'UBP_PlayerMaterialAccessorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, BodySlotHandle) == 0x000368, "Member 'UBP_PlayerMaterialAccessorComponent_C::BodySlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, SkinSlotHandle) == 0x00036C, "Member 'UBP_PlayerMaterialAccessorComponent_C::SkinSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MaskSlotHandle) == 0x000370, "Member 'UBP_PlayerMaterialAccessorComponent_C::MaskSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, HairSlotHandle) == 0x000374, "Member 'UBP_PlayerMaterialAccessorComponent_C::HairSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, HoodTakeOnSlotHandle) == 0x000378, "Member 'UBP_PlayerMaterialAccessorComponent_C::HoodTakeOnSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, SpiralSlotHandle) == 0x00037C, "Member 'UBP_PlayerMaterialAccessorComponent_C::SpiralSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, OutlineSlotHandle) == 0x000380, "Member 'UBP_PlayerMaterialAccessorComponent_C::OutlineSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, PsychicFieldMaterial) == 0x000388, "Member 'UBP_PlayerMaterialAccessorComponent_C::PsychicFieldMaterial' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, LeftHandParam) == 0x000390, "Member 'UBP_PlayerMaterialAccessorComponent_C::LeftHandParam' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, LeftHandSpiralParam) == 0x0003A8, "Member 'UBP_PlayerMaterialAccessorComponent_C::LeftHandSpiralParam' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, LastLeftHandEmissionType) == 0x0003C0, "Member 'UBP_PlayerMaterialAccessorComponent_C::LastLeftHandEmissionType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, Player) == 0x0003C8, "Member 'UBP_PlayerMaterialAccessorComponent_C::Player' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreFaceDamageEmissionColor) == 0x0003D0, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreFaceDamageEmissionColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreShadowOffset) == 0x0003D1, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreShadowOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatLeftHandEmission) == 0x0003D8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatLeftHandEmission' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatLeftHandEmissionType) == 0x000400, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatLeftHandEmissionType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatLeftHandEmissionOverride) == 0x000401, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatLeftHandEmissionOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatLeftHandEmissionExtraColor) == 0x000408, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatLeftHandEmissionExtraColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatLeftHandEmissionExtraColorOverride) == 0x000440, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatLeftHandEmissionExtraColorOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmission) == 0x000448, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmission' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionColor) == 0x000470, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionOverride) == 0x0004A8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageVisible) == 0x0004B0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageVisible' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageVisibleOverride) == 0x0004D8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageVisibleOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamagePattern2) == 0x0004E0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamagePattern2' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamagePattern2Override) == 0x000508, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamagePattern2Override' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageEmissionPower) == 0x000510, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageEmissionPower' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageEmissionPowerOverride) == 0x000538, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageEmissionPowerOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageEmissionColor) == 0x000540, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageEmissionColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageEmissionColorOverride) == 0x000578, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageEmissionColorOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEyeEmission) == 0x000580, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEyeEmission' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEyeEmissionOverride) == 0x0005A8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEyeEmissionOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatHoodVisible) == 0x0005B0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatHoodVisible' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatHoodVisibleOverride) == 0x0005D8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatHoodVisibleOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatHoodOutlineTakeOff) == 0x0005E0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatHoodOutlineTakeOff' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatHoodOutlineTakeOffOverride) == 0x000608, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatHoodOutlineTakeOffOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatHoodOutlineTakeOn) == 0x000610, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatHoodOutlineTakeOn' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatHoodOutlineTakeOnOverride) == 0x000638, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatHoodOutlineTakeOnOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatMaskLine) == 0x000640, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatMaskLine' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatMaskLineOverride) == 0x000668, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatMaskLineOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatMaskVisible) == 0x000670, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatMaskVisible' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatMaskVisibleOverride) == 0x000698, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatMaskVisibleOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatWetEffectPower) == 0x0006A0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatWetEffectPower' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatWetEffectPowerOverride) == 0x0006C8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatWetEffectPowerOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatWetWaterToOil) == 0x0006D0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatWetWaterToOil' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatWetWaterToOilOverride) == 0x0006F8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatWetWaterToOilOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatOutlineEmissionPsychic) == 0x000700, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatOutlineEmissionPsychic' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatOutlineEmissionAccelarator) == 0x000728, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatOutlineEmissionAccelarator' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatOutlineEmissionBrainField) == 0x000750, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatOutlineEmissionBrainField' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatOutlineEmissionBrainFieldWeak) == 0x000778, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatOutlineEmissionBrainFieldWeak' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatOutlineEmissionYakumo) == 0x0007A0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatOutlineEmissionYakumo' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatOutlineEmissionOverride) == 0x0007C8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatOutlineEmissionOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatPsychicFieldSize) == 0x0007D0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatPsychicFieldSize' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatPsychicFieldAlpha) == 0x0007F8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatPsychicFieldAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatPsychicFieldMaxColorRate) == 0x000820, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatPsychicFieldMaxColorRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatPsychicFieldOverride) == 0x000848, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatPsychicFieldOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatInHoodFace) == 0x000850, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatInHoodFace' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatInHoodFaceHood) == 0x000878, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatInHoodFaceHood' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatInHoodFaceOverride) == 0x0008A0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatInHoodFaceOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinShadeSmoothness) == 0x0008A8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinShadeSmoothness' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinShadeSmoothnessOverride) == 0x0008D0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinShadeSmoothnessOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, PrivateShadowOffsetMapID) == 0x0008D8, "Member 'UBP_PlayerMaterialAccessorComponent_C::PrivateShadowOffsetMapID' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatShadowOffsetMapID) == 0x000900, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatShadowOffsetMapID' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatShadowOffsetMapIDOverride) == 0x000901, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatShadowOffsetMapIDOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatCableDitherRate) == 0x000908, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatCableDitherRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatCableDitherOverride) == 0x000930, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatCableDitherOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatCableDitherMultiOverride) == 0x000931, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatCableDitherMultiOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, SASCableParameterArray) == 0x000938, "Member 'UBP_PlayerMaterialAccessorComponent_C::SASCableParameterArray' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, BrainCableParameterArray) == 0x000948, "Member 'UBP_PlayerMaterialAccessorComponent_C::BrainCableParameterArray' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEmissiveColor) == 0x000958, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEmissiveColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEmissiveColorOverride) == 0x000990, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEmissiveColorOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEmissivePower) == 0x000998, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEmissivePower' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEmissivePowerOverride) == 0x0009C0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEmissivePowerOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASTelepoRate) == 0x0009C8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASTelepoRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASTelepoRateOverride) == 0x0009F0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASTelepoRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASTelepoUVScale) == 0x0009F8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASTelepoUVScale' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASTelepoUVScaleOverride) == 0x000A20, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASTelepoUVScaleOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASStealthRate) == 0x000A28, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASStealthRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASStealthRateOverride) == 0x000A50, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASStealthRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalRate) == 0x000A58, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalRateOverride) == 0x000A80, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalHitRate) == 0x000A88, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalHitRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalHitOverride) == 0x000AB0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalHitOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalHitLocation) == 0x000AB8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalHitLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalHitRadius) == 0x000AF0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalHitRadius' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASCopyRate) == 0x000B18, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASCopyRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASCopyRateOverride) == 0x000B40, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASCopyRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASCopyInstance) == 0x000B48, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASCopyInstance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASCopyInstanceOverride) == 0x000B70, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASCopyInstanceOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASSeeThroughPPMCancel) == 0x000B78, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASSeeThroughPPMCancel' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASSeeThroughPPMCancelOverride) == 0x000BA0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASSeeThroughPPMCancelOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, OutlineEmissionNo) == 0x000BA4, "Member 'UBP_PlayerMaterialAccessorComponent_C::OutlineEmissionNo' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, OutlineEmissionParamName) == 0x000BA8, "Member 'UBP_PlayerMaterialAccessorComponent_C::OutlineEmissionParamName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, DefaultAssignSlots) == 0x000BB0, "Member 'UBP_PlayerMaterialAccessorComponent_C::DefaultAssignSlots' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlyBody) == 0x000BC0, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlyBody' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlySkin) == 0x000BC1, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlySkin' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlyMask) == 0x000BC2, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlyMask' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlyHair) == 0x000BC3, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlyHair' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlyHood) == 0x000BC4, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlyHood' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlyOutline) == 0x000BC5, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlyOutline' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, AssignOnlySheath) == 0x000BC6, "Member 'UBP_PlayerMaterialAccessorComponent_C::AssignOnlySheath' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, SheathSlotHandle) == 0x000BC8, "Member 'UBP_PlayerMaterialAccessorComponent_C::SheathSlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionFresnelIntensity) == 0x000BD0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionFresnelIntensity' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionFresnelOffset) == 0x000BF8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionFresnelOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionNormalMapIntensity) == 0x000C20, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionNormalMapIntensity' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionNormalMapOffset) == 0x000C48, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionNormalMapOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimLightEmissionSmooth) == 0x000C70, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimLightEmissionSmooth' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASMetalHandRate) == 0x000C98, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASMetalHandRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatShadowOffsetAdd) == 0x000CC0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatShadowOffsetAdd' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatShadowOffsetAddOverride) == 0x000CE8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatShadowOffsetAddOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, bPreviousSwitchMaterial) == 0x000CE9, "Member 'UBP_PlayerMaterialAccessorComponent_C::bPreviousSwitchMaterial' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MaterialSwitchHandle) == 0x000CEC, "Member 'UBP_PlayerMaterialAccessorComponent_C::MaterialSwitchHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, SwitchCache) == 0x000CF0, "Member 'UBP_PlayerMaterialAccessorComponent_C::SwitchCache' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASSeeThroughRate) == 0x000D00, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASSeeThroughRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASSeeThroughRateOverride) == 0x000D28, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASSeeThroughRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RequestRestoreStealthSwitch) == 0x000D29, "Member 'UBP_PlayerMaterialAccessorComponent_C::RequestRestoreStealthSwitch' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, ForceRestoreSASParameter) == 0x000D2A, "Member 'UBP_PlayerMaterialAccessorComponent_C::ForceRestoreSASParameter' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightColor) == 0x000D30, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightColorOverride) == 0x000D68, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightColorOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightOffsetSunny) == 0x000D70, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightOffsetSunny' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightOffsetSunnyOverride) == 0x000D98, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightOffsetSunnyOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightOffsetAmbient) == 0x000DA0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightOffsetAmbient' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightOffsetAmbientOverride) == 0x000DC8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightOffsetAmbientOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightPowerSunny) == 0x000DD0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightPowerSunny' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightPowerSunnyOverride) == 0x000DF8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightPowerSunnyOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightPowerAmbient) == 0x000E00, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightPowerAmbient' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatRimlightPowerAmbientOverride) == 0x000E28, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatRimlightPowerAmbientOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinColorBaseToAmb) == 0x000E30, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinColorBaseToAmb' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinColorBaseToAmbOverride) == 0x000E58, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinColorBaseToAmbOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinColorAmbToBase) == 0x000E60, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinColorAmbToBase' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinColorAmbToBaseOverride) == 0x000E88, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinColorAmbToBaseOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, SetOutlineEmission) == 0x000E89, "Member 'UBP_PlayerMaterialAccessorComponent_C::SetOutlineEmission' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEm8000RibbonRate) == 0x000E90, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEm8000RibbonRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatEm8000RibbonRateOverride) == 0x000EB8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatEm8000RibbonRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, Hologram1SlotHandle) == 0x000EBC, "Member 'UBP_PlayerMaterialAccessorComponent_C::Hologram1SlotHandle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageIntensity) == 0x000EC0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageIntensity' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatFaceDamageIntensityOverride) == 0x000EE8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatFaceDamageIntensityOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSeeThroughStealthRate) == 0x000EF0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSeeThroughStealthRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSeeThroughStealthOverride) == 0x000F18, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSeeThroughStealthOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASHologramErase) == 0x000F20, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASHologramErase' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSASHologramEraseOverride) == 0x000F48, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSASHologramEraseOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatCableRootEmissionBrain) == 0x000F50, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatCableRootEmissionBrain' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatCableRootEmissionSAS) == 0x000F78, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatCableRootEmissionSAS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatCableRootEmisionOverride) == 0x000FA0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatCableRootEmisionOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, StealthDofON) == 0x000FA1, "Member 'UBP_PlayerMaterialAccessorComponent_C::StealthDofON' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, OptimizeSwitcher) == 0x000FA8, "Member 'UBP_PlayerMaterialAccessorComponent_C::OptimizeSwitcher' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreOptimizeSwitcher) == 0x000FB0, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreOptimizeSwitcher' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreOptimizeSwitcherParameterNames) == 0x000FB8, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreOptimizeSwitcherParameterNames' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinHeightGradation1Add) == 0x000FC8, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinHeightGradation1Add' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatSkinHeightGradation1AddOverride) == 0x000FF0, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatSkinHeightGradation1AddOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreExcludeParams) == 0x000FF8, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreExcludeParams' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, NPCMode) == 0x001008, "Member 'UBP_PlayerMaterialAccessorComponent_C::NPCMode' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatAmbientLightStageRate) == 0x001010, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatAmbientLightStageRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, MatAmbientLightStageRateOverride) == 0x001038, "Member 'UBP_PlayerMaterialAccessorComponent_C::MatAmbientLightStageRateOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, InitializeAmbinetLight) == 0x001039, "Member 'UBP_PlayerMaterialAccessorComponent_C::InitializeAmbinetLight' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, StartOptimizeNo) == 0x00103C, "Member 'UBP_PlayerMaterialAccessorComponent_C::StartOptimizeNo' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, EndPlayPushDisableOptimize) == 0x001040, "Member 'UBP_PlayerMaterialAccessorComponent_C::EndPlayPushDisableOptimize' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, OptimizeSwitcherChildRef) == 0x001041, "Member 'UBP_PlayerMaterialAccessorComponent_C::OptimizeSwitcherChildRef' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreOutlineEmissionColor) == 0x001044, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreOutlineEmissionColor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, FirstUpdateFinish) == 0x001054, "Member 'UBP_PlayerMaterialAccessorComponent_C::FirstUpdateFinish' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, FirstUpdateOnly) == 0x001055, "Member 'UBP_PlayerMaterialAccessorComponent_C::FirstUpdateOnly' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreMaterialReset) == 0x001056, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreMaterialReset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMaterialAccessorComponent_C, RestoreMaterialAllSkip) == 0x001057, "Member 'UBP_PlayerMaterialAccessorComponent_C::RestoreMaterialAllSkip' has a wrong offset!");

}

