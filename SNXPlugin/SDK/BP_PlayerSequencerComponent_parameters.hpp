#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerSequencerComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "EPlayerSequencerIndex_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.ExecuteUbergraph_BP_PlayerSequencerComponent
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8455[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent) == 0x000008, "Wrong alignment on BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent");
static_assert(sizeof(BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent) == 0x000020, "Wrong size on BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent");
static_assert(offsetof(BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent, K2Node_DynamicCast_AsRSBattle_Player) == 0x000010, "Member 'BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerSequencerComponent_C_ExecuteUbergraph_BP_PlayerSequencerComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.Initialize
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerSequencerComponent_C_Initialize final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Initialize_dummy;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_Initialize) == 0x000001, "Wrong alignment on BP_PlayerSequencerComponent_C_Initialize");
static_assert(sizeof(BP_PlayerSequencerComponent_C_Initialize) == 0x000002, "Wrong size on BP_PlayerSequencerComponent_C_Initialize");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Initialize, Dummy) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_Initialize::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Initialize, CallFunc_Initialize_dummy) == 0x000001, "Member 'BP_PlayerSequencerComponent_C_Initialize::CallFunc_Initialize_dummy' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.Update
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerSequencerComponent_C_Update final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8456[0xE];                                     // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Update_Dummy;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_Update) == 0x000010, "Wrong alignment on BP_PlayerSequencerComponent_C_Update");
static_assert(sizeof(BP_PlayerSequencerComponent_C_Update) == 0x000050, "Wrong size on BP_PlayerSequencerComponent_C_Update");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Update, Dummy) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_Update::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Update, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_PlayerSequencerComponent_C_Update::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Update, CallFunc_GetSocketTransform_ReturnValue) == 0x000010, "Member 'BP_PlayerSequencerComponent_C_Update::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Update, CallFunc_Update_Dummy) == 0x000040, "Member 'BP_PlayerSequencerComponent_C_Update::CallFunc_Update_Dummy' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.Finalize
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerSequencerComponent_C_Finalize final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Finalize_dummy;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_Finalize) == 0x000001, "Wrong alignment on BP_PlayerSequencerComponent_C_Finalize");
static_assert(sizeof(BP_PlayerSequencerComponent_C_Finalize) == 0x000002, "Wrong size on BP_PlayerSequencerComponent_C_Finalize");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Finalize, Dummy) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_Finalize::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_Finalize, CallFunc_Finalize_dummy) == 0x000001, "Member 'BP_PlayerSequencerComponent_C_Finalize::CallFunc_Finalize_dummy' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.StartSequnecer
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerSequencerComponent_C_StartSequnecer final
{
public:
	int32                                         Index_in;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartSequnecer_dummy;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_StartSequnecer) == 0x000004, "Wrong alignment on BP_PlayerSequencerComponent_C_StartSequnecer");
static_assert(sizeof(BP_PlayerSequencerComponent_C_StartSequnecer) == 0x000008, "Wrong size on BP_PlayerSequencerComponent_C_StartSequnecer");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequnecer, Index_in) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_StartSequnecer::Index_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequnecer, Dummy) == 0x000004, "Member 'BP_PlayerSequencerComponent_C_StartSequnecer::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequnecer, CallFunc_StartSequnecer_dummy) == 0x000005, "Member 'BP_PlayerSequencerComponent_C_StartSequnecer::CallFunc_StartSequnecer_dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequnecer, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'BP_PlayerSequencerComponent_C_StartSequnecer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.EndSequencer
// 0x00F0 (0x00F0 - 0x0000)
struct BP_PlayerSequencerComponent_C_EndSequencer final
{
public:
	int32                                         Param_SequencerIndex;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerSequencerIndex                         LEndSequencer;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndSequencer_dummy;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8457[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGlobalCustomTimeDilation_Success;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8458[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalcFinalTransform_ReturnValue;           // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8459[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_845A[0x2];                                     // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_EndSequencer) == 0x000010, "Wrong alignment on BP_PlayerSequencerComponent_C_EndSequencer");
static_assert(sizeof(BP_PlayerSequencerComponent_C_EndSequencer) == 0x0000F0, "Wrong size on BP_PlayerSequencerComponent_C_EndSequencer");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, Param_SequencerIndex) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::Param_SequencerIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, Dummy) == 0x000004, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, LEndSequencer) == 0x000005, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::LEndSequencer' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_EndSequencer_dummy) == 0x000006, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_EndSequencer_dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_GetGameSystemManager_Manager) == 0x000008, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_RemoveGlobalCustomTimeDilation_Success) == 0x000010, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_RemoveGlobalCustomTimeDilation_Success' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_CalcFinalTransform_ReturnValue) == 0x000020, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_CalcFinalTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, K2Node_SwitchEnum_CmpSuccess) == 0x000050, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000054, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000DC, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_SetInvalidDamage_Dummy) == 0x0000DD, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_EndSequencer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000E0, "Member 'BP_PlayerSequencerComponent_C_EndSequencer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.StartSequencerIntercept
// 0x0068 (0x0068 - 0x0000)
struct BP_PlayerSequencerComponent_C_StartSequencerIntercept final
{
public:
	class AActor*                                 Psy_obj_actor_in;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPsychicObjectInterface> K2Node_DynamicCast_AsPsychic_Object_Interface;     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPsychicObjectActiveC_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_845B[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameSystemManager_C*                CallFunc_GetGameSystemManager_Manager;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartSequnecer_dummy;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_845C[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_845D[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_StartSequencerIntercept) == 0x000008, "Wrong alignment on BP_PlayerSequencerComponent_C_StartSequencerIntercept");
static_assert(sizeof(BP_PlayerSequencerComponent_C_StartSequencerIntercept) == 0x000068, "Wrong size on BP_PlayerSequencerComponent_C_StartSequencerIntercept");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, Psy_obj_actor_in) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::Psy_obj_actor_in' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, K2Node_DynamicCast_AsPsychic_Object_Interface) == 0x000008, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::K2Node_DynamicCast_AsPsychic_Object_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_SetPsychicObjectActiveC_ReturnValue) == 0x000019, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_SetPsychicObjectActiveC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_GetGameSystemManager_Manager) == 0x000020, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_GetGameSystemManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation) == 0x00002C, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_SetGlobalCustomTimeDilation_CurrentCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000030, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_StartSequnecer_dummy) == 0x000034, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_StartSequnecer_dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_SetInvalidDamage_Dummy) == 0x000035, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, K2Node_MakeArray_Array) == 0x000040, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000050, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000058, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_StartSequencerIntercept, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_PlayerSequencerComponent_C_StartSequencerIntercept::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.GetRootActorBindingID
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerSequencerComponent_C_GetRootActorBindingID final
{
public:
	struct FMovieSceneObjectBindingID             binding_id;                                        // 0x0000(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_GetRootActorBindingID) == 0x000004, "Wrong alignment on BP_PlayerSequencerComponent_C_GetRootActorBindingID");
static_assert(sizeof(BP_PlayerSequencerComponent_C_GetRootActorBindingID) == 0x000018, "Wrong size on BP_PlayerSequencerComponent_C_GetRootActorBindingID");
static_assert(offsetof(BP_PlayerSequencerComponent_C_GetRootActorBindingID, binding_id) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_GetRootActorBindingID::binding_id' has a wrong offset!");

// Function BP_PlayerSequencerComponent.BP_PlayerSequencerComponent_C.CalcFinalTransform
// 0x01C0 (0x01C0 - 0x0000)
struct BP_PlayerSequencerComponent_C_CalcFinalTransform final
{
public:
	struct FTransform                             InMotaionTransform;                                // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_InvertTransform_ReturnValue;              // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_845E[0xC];                                     // 0x0114(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0190(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerSequencerComponent_C_CalcFinalTransform) == 0x000010, "Wrong alignment on BP_PlayerSequencerComponent_C_CalcFinalTransform");
static_assert(sizeof(BP_PlayerSequencerComponent_C_CalcFinalTransform) == 0x0001C0, "Wrong size on BP_PlayerSequencerComponent_C_CalcFinalTransform");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, InMotaionTransform) == 0x000000, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::InMotaionTransform' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, ReturnValue) == 0x000030, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Location) == 0x000060, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000090, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_InvertTransform_ReturnValue) == 0x0000C0, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_InvertTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Location_1) == 0x0000F0, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Rotation_1) == 0x0000FC, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Scale_1) == 0x000108, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_ComposeTransforms_ReturnValue) == 0x000120, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakRotator_Roll_1) == 0x000150, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakRotator_Pitch_1) == 0x000154, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakRotator_Yaw_1) == 0x000158, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Location_2) == 0x00015C, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Rotation_2) == 0x000168, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_BreakTransform_Scale_2) == 0x000174, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000180, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_MakeRotator_ReturnValue) == 0x000184, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerSequencerComponent_C_CalcFinalTransform, CallFunc_MakeTransform_ReturnValue) == 0x000190, "Member 'BP_PlayerSequencerComponent_C_CalcFinalTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

}

