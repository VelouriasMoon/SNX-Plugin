#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AimComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AimComponent.BP_AimComponent_C.ExecuteUbergraph_BP_AimComponent
// 0x0030 (0x0030 - 0x0000)
struct BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerHologram_C*                   K2Node_DynamicCast_AsBP_Player_Hologram;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E8F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent) == 0x000008, "Wrong alignment on BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent");
static_assert(sizeof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent) == 0x000030, "Wrong size on BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, EntryPoint) == 0x000000, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, K2Node_DynamicCast_AsBP_Player_Hologram) == 0x000010, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::K2Node_DynamicCast_AsBP_Player_Hologram' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, K2Node_DynamicCast_AsRSBattle_Player) == 0x000020, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_AimComponent_C_ExecuteUbergraph_BP_AimComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AimComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AimComponent_C_ReceiveTick");
static_assert(sizeof(BP_AimComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_AimComponent_C_ReceiveTick");
static_assert(offsetof(BP_AimComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AimComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.AimStart
// 0x000C (0x000C - 0x0000)
struct BP_AimComponent_C_AimStart final
{
public:
	bool                                          Param_bAimWeak;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E90[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_LimitAngle;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimComponent_C_AimStart) == 0x000004, "Wrong alignment on BP_AimComponent_C_AimStart");
static_assert(sizeof(BP_AimComponent_C_AimStart) == 0x00000C, "Wrong size on BP_AimComponent_C_AimStart");
static_assert(offsetof(BP_AimComponent_C_AimStart, Param_bAimWeak) == 0x000000, "Member 'BP_AimComponent_C_AimStart::Param_bAimWeak' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_AimStart, Param_LimitAngle) == 0x000004, "Member 'BP_AimComponent_C_AimStart::Param_LimitAngle' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_AimStart, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'BP_AimComponent_C_AimStart::CallFunc_Abs_ReturnValue' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.AimEnd
// 0x0001 (0x0001 - 0x0000)
struct BP_AimComponent_C_AimEnd final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AimComponent_C_AimEnd) == 0x000001, "Wrong alignment on BP_AimComponent_C_AimEnd");
static_assert(sizeof(BP_AimComponent_C_AimEnd) == 0x000001, "Wrong size on BP_AimComponent_C_AimEnd");
static_assert(offsetof(BP_AimComponent_C_AimEnd, bForce) == 0x000000, "Member 'BP_AimComponent_C_AimEnd::bForce' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.UpdateAim
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AimComponent_C_UpdateAim final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LCalcRotate;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                LBaseLocation;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LAimLocation;                                      // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LTargetActor;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_getTargetActor_targetActor;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAimBaseLocation_Location;              // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E91[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E92[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_getTargetActor_targetActor_1;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AimComponent_C_UpdateAim) == 0x000008, "Wrong alignment on BP_AimComponent_C_UpdateAim");
static_assert(sizeof(BP_AimComponent_C_UpdateAim) == 0x0000A0, "Wrong size on BP_AimComponent_C_UpdateAim");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, DeltaSeconds) == 0x000000, "Member 'BP_AimComponent_C_UpdateAim::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, LCalcRotate) == 0x000004, "Member 'BP_AimComponent_C_UpdateAim::LCalcRotate' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, LBaseLocation) == 0x000010, "Member 'BP_AimComponent_C_UpdateAim::LBaseLocation' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, LAimLocation) == 0x00001C, "Member 'BP_AimComponent_C_UpdateAim::LAimLocation' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, LTargetActor) == 0x000028, "Member 'BP_AimComponent_C_UpdateAim::LTargetActor' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_getTargetActor_targetActor) == 0x000030, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_getTargetActor_targetActor' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_GetAimBaseLocation_Location) == 0x00003C, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_GetAimBaseLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_FindLookAtRotation_ReturnValue) == 0x000048, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_BreakRotator_Roll) == 0x000054, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_BreakRotator_Pitch) == 0x000058, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_BreakRotator_Yaw) == 0x00005C, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_getTargetActor_targetActor_1) == 0x000070, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_getTargetActor_targetActor_1' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_MakeRotator_ReturnValue) == 0x000078, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000084, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateAim, CallFunc_RInterpTo_ReturnValue) == 0x000090, "Member 'BP_AimComponent_C_UpdateAim::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.UpdateEnd
// 0x0014 (0x0014 - 0x0000)
struct BP_AimComponent_C_UpdateEnd final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E93[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AimComponent_C_UpdateEnd) == 0x000004, "Wrong alignment on BP_AimComponent_C_UpdateEnd");
static_assert(sizeof(BP_AimComponent_C_UpdateEnd) == 0x000014, "Wrong size on BP_AimComponent_C_UpdateEnd");
static_assert(offsetof(BP_AimComponent_C_UpdateEnd, DeltaSeconds) == 0x000000, "Member 'BP_AimComponent_C_UpdateEnd::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateEnd, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000004, "Member 'BP_AimComponent_C_UpdateEnd::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_UpdateEnd, CallFunc_RInterpTo_ReturnValue) == 0x000008, "Member 'BP_AimComponent_C_UpdateEnd::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.getTargetActor
// 0x0018 (0x0018 - 0x0000)
struct BP_AimComponent_C_GetTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetCurrentTargetActor_TargetActor_1;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimComponent_C_GetTargetActor) == 0x000008, "Wrong alignment on BP_AimComponent_C_GetTargetActor");
static_assert(sizeof(BP_AimComponent_C_GetTargetActor) == 0x000018, "Wrong size on BP_AimComponent_C_GetTargetActor");
static_assert(offsetof(BP_AimComponent_C_GetTargetActor, TargetActor) == 0x000000, "Member 'BP_AimComponent_C_GetTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetTargetActor, CallFunc_GetCurrentTargetActor_TargetActor) == 0x000008, "Member 'BP_AimComponent_C_GetTargetActor::CallFunc_GetCurrentTargetActor_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetTargetActor, CallFunc_GetCurrentTargetActor_TargetActor_1) == 0x000010, "Member 'BP_AimComponent_C_GetTargetActor::CallFunc_GetCurrentTargetActor_TargetActor_1' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.GetAimBaseLocation
// 0x0024 (0x0024 - 0x0000)
struct BP_AimComponent_C_GetAimBaseLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_location;               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimComponent_C_GetAimBaseLocation) == 0x000004, "Wrong alignment on BP_AimComponent_C_GetAimBaseLocation");
static_assert(sizeof(BP_AimComponent_C_GetAimBaseLocation) == 0x000024, "Wrong size on BP_AimComponent_C_GetAimBaseLocation");
static_assert(offsetof(BP_AimComponent_C_GetAimBaseLocation, Location) == 0x000000, "Member 'BP_AimComponent_C_GetAimBaseLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetAimBaseLocation, CallFunc_GetSocketLocation_location) == 0x00000C, "Member 'BP_AimComponent_C_GetAimBaseLocation::CallFunc_GetSocketLocation_location' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetAimBaseLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'BP_AimComponent_C_GetAimBaseLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.GetAimPitch
// 0x0010 (0x0010 - 0x0000)
struct BP_AimComponent_C_GetAimPitch final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AimComponent_C_GetAimPitch) == 0x000004, "Wrong alignment on BP_AimComponent_C_GetAimPitch");
static_assert(sizeof(BP_AimComponent_C_GetAimPitch) == 0x000010, "Wrong size on BP_AimComponent_C_GetAimPitch");
static_assert(offsetof(BP_AimComponent_C_GetAimPitch, Pitch) == 0x000000, "Member 'BP_AimComponent_C_GetAimPitch::Pitch' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetAimPitch, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'BP_AimComponent_C_GetAimPitch::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetAimPitch, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'BP_AimComponent_C_GetAimPitch::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_GetAimPitch, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'BP_AimComponent_C_GetAimPitch::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.IsAim
// 0x0002 (0x0002 - 0x0000)
struct BP_AimComponent_C_IsAim final
{
public:
	bool                                          bAim;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AimComponent_C_IsAim) == 0x000001, "Wrong alignment on BP_AimComponent_C_IsAim");
static_assert(sizeof(BP_AimComponent_C_IsAim) == 0x000002, "Wrong size on BP_AimComponent_C_IsAim");
static_assert(offsetof(BP_AimComponent_C_IsAim, bAim) == 0x000000, "Member 'BP_AimComponent_C_IsAim::bAim' has a wrong offset!");
static_assert(offsetof(BP_AimComponent_C_IsAim, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x000001, "Member 'BP_AimComponent_C_IsAim::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");

// Function BP_AimComponent.BP_AimComponent_C.GetAimRotator
// 0x000C (0x000C - 0x0000)
struct BP_AimComponent_C_GetAimRotator final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AimComponent_C_GetAimRotator) == 0x000004, "Wrong alignment on BP_AimComponent_C_GetAimRotator");
static_assert(sizeof(BP_AimComponent_C_GetAimRotator) == 0x00000C, "Wrong size on BP_AimComponent_C_GetAimRotator");
static_assert(offsetof(BP_AimComponent_C_GetAimRotator, Rotator) == 0x000000, "Member 'BP_AimComponent_C_GetAimRotator::Rotator' has a wrong offset!");

}

