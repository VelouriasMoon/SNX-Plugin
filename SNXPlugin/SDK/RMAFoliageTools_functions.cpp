#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RMAFoliageTools

#include "Basic.hpp"

#include "RMAFoliageTools_classes.hpp"
#include "RMAFoliageTools_parameters.hpp"


namespace SDK
{

// Function RMAFoliageTools.RMAFoliageToolsBlueprintFunctionLibrary.GetInstancedFoliageActor_Fc
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AInstancedFoliageActor*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AInstancedFoliageActor* URMAFoliageToolsBlueprintFunctionLibrary::GetInstancedFoliageActor_Fc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAFoliageToolsBlueprintFunctionLibrary", "GetInstancedFoliageActor_Fc");

	Params::RMAFoliageToolsBlueprintFunctionLibrary_GetInstancedFoliageActor_Fc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAFoliageTools.RMAFoliageToolsBlueprintFunctionLibrary.GetVersion_Fc
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URMAFoliageToolsBlueprintFunctionLibrary::GetVersion_Fc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAFoliageToolsBlueprintFunctionLibrary", "GetVersion_Fc");

	Params::RMAFoliageToolsBlueprintFunctionLibrary_GetVersion_Fc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

