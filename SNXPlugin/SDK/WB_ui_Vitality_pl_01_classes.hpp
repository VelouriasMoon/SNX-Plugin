#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ui_Vitality_pl_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePrototype_structs.hpp"
#include "BattlePrototype_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ui_Vitality_pl_01.WB_ui_Vitality_pl_01_C
// 0x00A8 (0x0510 - 0x0468)
class UWB_ui_Vitality_pl_01_C final : public UUIVitalityPL01
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0468(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Out;                                               // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       In;                                                // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_none;                                      // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default;                                           // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Gauge_Bar_damage;                                  // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_Bar_nomal;                                   // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge_Bar_nomal_add;                               // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         PassedTime;                                        // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoopTimeInterval;                                  // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WavePowerCenter;                                   // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WavePowerLeft;                                     // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WavePowerRight;                                    // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WavePowerCenter_Now;                               // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WavePowerLeft_Now;                                 // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WavePowerRight_Now;                                // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GaugeMaterial;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HP_Offset;                                         // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SingleWavePercent;                                 // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoubleWavePercent;                                 // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TripleWavePercent;                                 // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaveNum;                                           // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WavePosition;                                      // 0x04E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOccurrence;                                      // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_665C[0x3];                                     // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddWaveTime;                                       // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OccurrenceTime;                                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDeleteTimeCenter;                              // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDeleteTimeLeft;                                // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDeleteTimeRight;                               // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_ui_Vitality_pl_01(int32 EntryPoint);
	void SetIcon2(class UImage* Icon, int32 Param_Index);
	void SetIcon1(class UImage* Icon, int32 Param_Index);
	void UpdateState(int32 State, int32 SubState, float DeltaSeconds);
	void Construct();
	void GetWavePower(float PowerAddTime, int32 WavePowerMax, int32* NewParam);
	bool CreateDynamicGaugeMaterial();
	bool IsUnlockPlayerChara(EPlayerID CharaID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ui_Vitality_pl_01_C">();
	}
	static class UWB_ui_Vitality_pl_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ui_Vitality_pl_01_C>();
	}
};
static_assert(alignof(UWB_ui_Vitality_pl_01_C) == 0x000008, "Wrong alignment on UWB_ui_Vitality_pl_01_C");
static_assert(sizeof(UWB_ui_Vitality_pl_01_C) == 0x000510, "Wrong size on UWB_ui_Vitality_pl_01_C");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, UberGraphFrame) == 0x000468, "Member 'UWB_ui_Vitality_pl_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, Out) == 0x000470, "Member 'UWB_ui_Vitality_pl_01_C::Out' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, In) == 0x000478, "Member 'UWB_ui_Vitality_pl_01_C::In' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, Default_none) == 0x000480, "Member 'UWB_ui_Vitality_pl_01_C::Default_none' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, Default) == 0x000488, "Member 'UWB_ui_Vitality_pl_01_C::Default' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, Gauge_Bar_damage) == 0x000490, "Member 'UWB_ui_Vitality_pl_01_C::Gauge_Bar_damage' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, Gauge_Bar_nomal) == 0x000498, "Member 'UWB_ui_Vitality_pl_01_C::Gauge_Bar_nomal' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, Gauge_Bar_nomal_add) == 0x0004A0, "Member 'UWB_ui_Vitality_pl_01_C::Gauge_Bar_nomal_add' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, PassedTime) == 0x0004A8, "Member 'UWB_ui_Vitality_pl_01_C::PassedTime' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, LoopTimeInterval) == 0x0004AC, "Member 'UWB_ui_Vitality_pl_01_C::LoopTimeInterval' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePowerCenter) == 0x0004B0, "Member 'UWB_ui_Vitality_pl_01_C::WavePowerCenter' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePowerLeft) == 0x0004B4, "Member 'UWB_ui_Vitality_pl_01_C::WavePowerLeft' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePowerRight) == 0x0004B8, "Member 'UWB_ui_Vitality_pl_01_C::WavePowerRight' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePowerCenter_Now) == 0x0004BC, "Member 'UWB_ui_Vitality_pl_01_C::WavePowerCenter_Now' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePowerLeft_Now) == 0x0004C0, "Member 'UWB_ui_Vitality_pl_01_C::WavePowerLeft_Now' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePowerRight_Now) == 0x0004C4, "Member 'UWB_ui_Vitality_pl_01_C::WavePowerRight_Now' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, GaugeMaterial) == 0x0004C8, "Member 'UWB_ui_Vitality_pl_01_C::GaugeMaterial' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, HP_Offset) == 0x0004D0, "Member 'UWB_ui_Vitality_pl_01_C::HP_Offset' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, SingleWavePercent) == 0x0004D4, "Member 'UWB_ui_Vitality_pl_01_C::SingleWavePercent' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, DoubleWavePercent) == 0x0004D8, "Member 'UWB_ui_Vitality_pl_01_C::DoubleWavePercent' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, TripleWavePercent) == 0x0004DC, "Member 'UWB_ui_Vitality_pl_01_C::TripleWavePercent' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WaveNum) == 0x0004E0, "Member 'UWB_ui_Vitality_pl_01_C::WaveNum' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WavePosition) == 0x0004E4, "Member 'UWB_ui_Vitality_pl_01_C::WavePosition' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, IsOccurrence) == 0x0004F4, "Member 'UWB_ui_Vitality_pl_01_C::IsOccurrence' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, AddWaveTime) == 0x0004F8, "Member 'UWB_ui_Vitality_pl_01_C::AddWaveTime' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, OccurrenceTime) == 0x0004FC, "Member 'UWB_ui_Vitality_pl_01_C::OccurrenceTime' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WaveDeleteTimeCenter) == 0x000500, "Member 'UWB_ui_Vitality_pl_01_C::WaveDeleteTimeCenter' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WaveDeleteTimeLeft) == 0x000504, "Member 'UWB_ui_Vitality_pl_01_C::WaveDeleteTimeLeft' has a wrong offset!");
static_assert(offsetof(UWB_ui_Vitality_pl_01_C, WaveDeleteTimeRight) == 0x000508, "Member 'UWB_ui_Vitality_pl_01_C::WaveDeleteTimeRight' has a wrong offset!");

}

