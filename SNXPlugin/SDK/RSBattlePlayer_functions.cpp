#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RSBattlePlayer

#include "Basic.hpp"

#include "RSBattlePlayer_classes.hpp"
#include "RSBattlePlayer_parameters.hpp"


namespace SDK
{

// Function RSBattlePlayer.RSBattlePlayer_C.OnMovementCollisionLand__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnMovementCollisionLand__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnMovementCollisionLand__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjShow__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPsychicGrabButtonType                  Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangePsychicObjShow__DelegateSignature(EPsychicGrabButtonType Button, bool bShow, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjShow__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjShow__DelegateSignature Parms{};

	Parms.Button = Button;
	Parms.bShow = bShow;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjEnable__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPsychicGrabButtonType                  Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangePsychicObjEnable__DelegateSignature(EPsychicGrabButtonType Button, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjEnable__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjEnable__DelegateSignature Parms{};

	Parms.Button = Button;
	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjUse__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPsychicGrabButtonType                  Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangePsychicObjUse__DelegateSignature(EPsychicGrabButtonType Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjUse__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjUse__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjCount__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPsychicGrabButtonType                  Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangePsychicObjCount__DelegateSignature(EPsychicGrabButtonType Button, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjCount__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjCount__DelegateSignature Parms{};

	Parms.Button = Button;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjShow2__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Unique                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Obj_count                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangePsychicObjShow2__DelegateSignature(bool Unique, bool Show, int32 Obj_count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjShow2__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjShow2__DelegateSignature Parms{};

	Parms.Unique = Unique;
	Parms.Show = Show;
	Parms.Obj_count = Obj_count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjEnable2__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Unique                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangePsychicObjEnable2__DelegateSignature(bool Unique, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjEnable2__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjEnable2__DelegateSignature Parms{};

	Parms.Unique = Unique;
	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjUse2__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Unique                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangePsychicObjUse2__DelegateSignature(bool Unique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjUse2__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjUse2__DelegateSignature Parms{};

	Parms.Unique = Unique;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangePsychicObjCount2__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Unique                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangePsychicObjCount2__DelegateSignature(bool Unique, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangePsychicObjCount2__DelegateSignature");

	Params::RSBattlePlayer_C_OnChangePsychicObjCount2__DelegateSignature Parms{};

	Parms.Unique = Unique;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DispatchMontageBlendingOut__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DispatchMontageBlendingOut__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DispatchMontageBlendingOut__DelegateSignature");

	Params::RSBattlePlayer_C_DispatchMontageBlendingOut__DelegateSignature Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoDodgeBegin__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTelepoDodgeBegin__DelegateSignature(class ARSBattlePlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTelepoDodgeBegin__DelegateSignature");

	Params::RSBattlePlayer_C_OnTelepoDodgeBegin__DelegateSignature Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoDodgeEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTelepoDodgeEnd__DelegateSignature(class ARSBattlePlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTelepoDodgeEnd__DelegateSignature");

	Params::RSBattlePlayer_C_OnTelepoDodgeEnd__DelegateSignature Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DispatchChangeWalkRunStateKind__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerWalkRunStateKind                 Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::DispatchChangeWalkRunStateKind__DelegateSignature(EPlayerWalkRunStateKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DispatchChangeWalkRunStateKind__DelegateSignature");

	Params::RSBattlePlayer_C_DispatchChangeWalkRunStateKind__DelegateSignature Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DispatchMontageEnded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInterrupted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DispatchMontageEnded__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DispatchMontageEnded__DelegateSignature");

	Params::RSBattlePlayer_C_DispatchMontageEnded__DelegateSignature Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DispatchAttackActorHit__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattlePlayer_C::DispatchAttackActorHit__DelegateSignature(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DispatchAttackActorHit__DelegateSignature");

	Params::RSBattlePlayer_C_DispatchAttackActorHit__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DispatchTimerPause__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPause                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DispatchTimerPause__DelegateSignature(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DispatchTimerPause__DelegateSignature");

	Params::RSBattlePlayer_C_DispatchTimerPause__DelegateSignature Parms{};

	Parms.bPause = bPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DispatchTalkTurn__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LookAtAngle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::DispatchTalkTurn__DelegateSignature(float LookAtAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DispatchTalkTurn__DelegateSignature");

	Params::RSBattlePlayer_C_DispatchTalkTurn__DelegateSignature Parms{};

	Parms.LookAtAngle = LookAtAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_Jump__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_Jump__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_Jump__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_Psychic__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_Psychic__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_Psychic__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_Lockon__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_Lockon__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_Lockon__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_Attack__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_Attack__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_Attack__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_Dodge__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_Dodge__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_Dodge__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_ChangeLockon__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_ChangeLockon__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_ChangeLockon__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_LaunchAttack__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_LaunchAttack__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_LaunchAttack__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_Dash__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_Dash__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_Dash__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_StepInAttack__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_StepInAttack__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_StepInAttack__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_PsychicCombo__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_PsychicCombo__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_PsychicCombo__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Dispatch_AreaChange__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::Dispatch_AreaChange__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Dispatch_AreaChange__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TutorialSuccess_AttackSub__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TutorialSuccess_AttackSub__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TutorialSuccess_AttackSub__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Dispatch_ItemApply__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::Dispatch_ItemApply__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Dispatch_ItemApply__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ExecuteUbergraph_RSBattlePlayer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ExecuteUbergraph_RSBattlePlayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ExecuteUbergraph_RSBattlePlayer");

	Params::RSBattlePlayer_C_ExecuteUbergraph_RSBattlePlayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindRecoverAfterInvalidDamage
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindRecoverAfterInvalidDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindRecoverAfterInvalidDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindRecoverAfterInvalidDamage
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindRecoverAfterInvalidDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindRecoverAfterInvalidDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindBadStatusCablePlayVoiceTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindBadStatusCablePlayVoiceTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindBadStatusCablePlayVoiceTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindBadStatusCablePlayVoiceTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindBadStatusCablePlayVoiceTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindBadStatusCablePlayVoiceTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FVector                          ImpactLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature(const struct FVector& ImpactLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_6_PlayerStuckDelegate__DelegateSignature Parms{};

	Parms.ImpactLocation = std::move(ImpactLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindMainMenuClose
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindMainMenuClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindMainMenuClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLockOn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLostTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature(class ARSCharacterBase* Target, bool bLockOn, bool bLostTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_TargetSearchComponent_K2Node_ComponentBoundEvent_5_ChangeTargetDelegate__DelegateSignature Parms{};

	Parms.Target = Target;
	Parms.bLockOn = bLockOn;
	Parms.bLostTarget = bLostTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateNpcWarpDither
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UpdateNpcWarpDither(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateNpcWarpDither");

	Params::RSBattlePlayer_C_UpdateNpcWarpDither Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindNpcWarpDither
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindNpcWarpDither()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindNpcWarpDither");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindNpcWarpDither
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindNpcWarpDither()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindNpcWarpDither");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveUnpossessed");

	Params::RSBattlePlayer_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceivePossessed");

	Params::RSBattlePlayer_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindDeactivateBattleParticleTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindDeactivateBattleParticleTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindDeactivateBattleParticleTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindDeactivateBattleParticleTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindDeactivateBattleParticleTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindDeactivateBattleParticleTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   RegenerateHP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature(int32 RegenerateHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__PlayerScript_K2Node_ComponentBoundEvent_0_PlayerRegenerateDelegate__DelegateSignature Parms{};

	Parms.RegenerateHP = RegenerateHP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeDisableBattleActionFlag
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangeDisableBattleActionFlag(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeDisableBattleActionFlag");

	Params::RSBattlePlayer_C_OnChangeDisableBattleActionFlag Parms{};

	Parms.bDisable = bDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// ERSAttackInputKind                      AttackInputKind                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature(ERSAttackInputKind AttackInputKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__AttackInput_K2Node_ComponentBoundEvent_0_ComboInputEndDelegate__DelegateSignature Parms{};

	Parms.AttackInputKind = AttackInputKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveEndPlay");

	Params::RSBattlePlayer_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Psychic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InputAI_Psychic(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Psychic");

	Params::RSBattlePlayer_C_InputAI_Psychic Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnFellOutOfWorld
// (Event, Public, BlueprintEvent)

void ARSBattlePlayer_C::OnFellOutOfWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnFellOutOfWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveChangeWalkRunStateKind
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerWalkRunStateKind                 Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReceiveChangeWalkRunStateKind(EPlayerWalkRunStateKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveChangeWalkRunStateKind");

	Params::RSBattlePlayer_C_ReceiveChangeWalkRunStateKind Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BrainCrashAccessOffDelegate__DelegateSignature
// (BlueprintEvent)

void ARSBattlePlayer_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BrainCrashAccessOffDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BrainCrashAccessOffDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BrainCrashAccessOnDelegate__DelegateSignature
// (BlueprintEvent)

void ARSBattlePlayer_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BrainCrashAccessOnDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BrainCrashAccessOnDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindBrainFieldBattleEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BindBrainFieldBattleEnd(EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindBrainFieldBattleEnd");

	Params::RSBattlePlayer_C_BindBrainFieldBattleEnd Parms{};

	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindBrainFieldBattleStart
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindBrainFieldBattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindBrainFieldBattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_UseItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InputAI_UseItem(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_UseItem");

	Params::RSBattlePlayer_C_InputAI_UseItem Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EventPhysicsIdling
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   IdlingSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   IdleRestoreDelay                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EventPhysicsIdling(float IdlingSec, float IdleRestoreDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EventPhysicsIdling");

	Params::RSBattlePlayer_C_EventPhysicsIdling Parms{};

	Parms.IdlingSec = IdlingSec;
	Parms.IdleRestoreDelay = IdleRestoreDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Jump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InputAI_Jump(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Jump");

	Params::RSBattlePlayer_C_InputAI_Jump Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReachNavLinkPoint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Destination                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReachNavLinkPoint(const struct FVector& Destination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReachNavLinkPoint");

	Params::RSBattlePlayer_C_OnReachNavLinkPoint Parms{};

	Parms.Destination = std::move(Destination);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Dodge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InputAI_Dodge(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Dodge");

	Params::RSBattlePlayer_C_InputAI_Dodge Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_LeftStick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::InputAI_LeftStick(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_LeftStick");

	Params::RSBattlePlayer_C_InputAI_LeftStick Parms{};

	Parms.X = X;
	Parms.Y = Y;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EHCBadState                             bad_state                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature(EHCBadState bad_state)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_1_BadStateOffDelegate__DelegateSignature Parms{};

	Parms.bad_state = bad_state;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EHCBadState                             bad_state                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature(EHCBadState bad_state, class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__CharactersParameter_K2Node_ComponentBoundEvent_0_BadStateOnDelegate__DelegateSignature Parms{};

	Parms.bad_state = bad_state;
	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Attack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InputAI_Attack(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Attack");

	Params::RSBattlePlayer_C_InputAI_Attack Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveMontageEnded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Interrupted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ReceiveMontageEnded(class UAnimMontage* Montage, bool Interrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveMontageEnded");

	Params::RSBattlePlayer_C_ReceiveMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.Interrupted = Interrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveMontageBlendingOut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Interrupted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ReceiveMontageBlendingOut(class UAnimMontage* Montage, bool Interrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveMontageBlendingOut");

	Params::RSBattlePlayer_C_ReceiveMontageBlendingOut Parms{};

	Parms.Montage = Montage;
	Parms.Interrupted = Interrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveChangeAnimKind
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAnimKind                         NewKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAnimKind                         OldKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReceiveChangeAnimKind(EPlayerAnimKind NewKind, EPlayerAnimKind OldKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveChangeAnimKind");

	Params::RSBattlePlayer_C_ReceiveChangeAnimKind Parms{};

	Parms.NewKind = NewKind;
	Parms.OldKind = OldKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveTick");

	Params::RSBattlePlayer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ARSBattlePlayer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBonusGhostOneShot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AliveTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBonusGhostOneShot(float AliveTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBonusGhostOneShot");

	Params::RSBattlePlayer_C_OnBonusGhostOneShot Parms{};

	Parms.AliveTime = AliveTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBonusGhostFromDT
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBonusGhostType                         Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBonusGhostFromDT(EBonusGhostType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBonusGhostFromDT");

	Params::RSBattlePlayer_C_OnBonusGhostFromDT Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBonusGhost
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBonusGhost(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBonusGhost");

	Params::RSBattlePlayer_C_OnBonusGhost Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             CommandName                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ArgName                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature(const class FName& CommandName, const class FName& ArgName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__CheatCommandListener_K2Node_ComponentBoundEvent_0_CheatCommandListenerDelegate__DelegateSignature Parms{};

	Parms.CommandName = CommandName;
	Parms.ArgName = ArgName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBattleSimulatorEndTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBattleSimulatorEndTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBattleSimulatorEndTick");

	Params::RSBattlePlayer_C_OnBattleSimulatorEndTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindBattleSimulatorEndTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindBattleSimulatorEndTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindBattleSimulatorEndTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindBattleSimulatorEndTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindBattleSimulatorEndTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindBattleSimulatorEndTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBattleSimulatorMissionEnd
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMissionCancel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBattleSimulatorMissionEnd(bool bMissionCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBattleSimulatorMissionEnd");

	Params::RSBattlePlayer_C_OnBattleSimulatorMissionEnd Parms{};

	Parms.bMissionCancel = bMissionCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EquipCostume
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CostumeId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EquipCostume(int32 CostumeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EquipCostume");

	Params::RSBattlePlayer_C_EquipCostume Parms{};

	Parms.CostumeId = CostumeId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckHologramAttack
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESASHologramAttackTiming                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSCharacterBase*                 RequestCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CheckHologramAttack(ESASHologramAttackTiming Timing, class ARSCharacterBase* RequestCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckHologramAttack");

	Params::RSBattlePlayer_C_CheckHologramAttack Parms{};

	Parms.Timing = Timing;
	Parms.RequestCharacter = RequestCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EquipAttachment
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAttachment                       Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AttachmentId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EquipAttachment(EPlayerAttachment Param_Index, int32 AttachmentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EquipAttachment");

	Params::RSBattlePlayer_C_EquipAttachment Parms{};

	Parms.Param_Index = Param_Index;
	Parms.AttachmentId = AttachmentId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEyeControlParameter
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Horizontal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Vertical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetEyeControlParameter(float Horizontal, float Vertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEyeControlParameter");

	Params::RSBattlePlayer_C_SetEyeControlParameter Parms{};

	Parms.Horizontal = Horizontal;
	Parms.Vertical = Vertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEyeControlEnable
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetEyeControlEnable(bool bEnable, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEyeControlEnable");

	Params::RSBattlePlayer_C_SetEyeControlEnable Parms{};

	Parms.bEnable = bEnable;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateParameter
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharactersParameterTable        Table                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void ARSBattlePlayer_C::UpdateParameter(const struct FCharactersParameterTable& Table)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateParameter");

	Params::RSBattlePlayer_C_UpdateParameter Parms{};

	Parms.Table = std::move(Table);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EquipAccessory
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAccessory                        Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AccessoryId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EquipAccessory(EPlayerAccessory Param_Index, int32 AccessoryId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EquipAccessory");

	Params::RSBattlePlayer_C_EquipAccessory Parms{};

	Parms.Param_Index = Param_Index;
	Parms.AccessoryId = AccessoryId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EquipWeapon
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WeaponId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkinID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EquipWeapon(int32 WeaponId, int32 SkinID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EquipWeapon");

	Params::RSBattlePlayer_C_EquipWeapon Parms{};

	Parms.WeaponId = WeaponId;
	Parms.SkinID = SkinID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAIOrder
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIOrder                          Plan                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetAIOrder(EPlayerAIOrder Plan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAIOrder");

	Params::RSBattlePlayer_C_SetAIOrder Parms{};

	Parms.Plan = Plan;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindBrainCrashHeal
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindBrainCrashHeal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindBrainCrashHeal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindBrainCrashHeal
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindBrainCrashHeal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindBrainCrashHeal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature(int32 NewState, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__RSStateManage_Upper_K2Node_ComponentBoundEvent_1_EnterStateDelegade__DelegateSignature Parms{};

	Parms.NewState = NewState;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature(int32 NewState, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__RSStateManage_K2Node_ComponentBoundEvent_0_EnterStateDelegade__DelegateSignature Parms{};

	Parms.NewState = NewState;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashDead
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnBrainCrashDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainCrashDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnBrainCrashDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainCrashDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeginActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     PlayerEndMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBrainCrashEnd(bool bBeginActor, class UAnimMontage* PlayerEndMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainCrashEnd");

	Params::RSBattlePlayer_C_OnBrainCrashEnd Parms{};

	Parms.bBeginActor = bBeginActor;
	Parms.PlayerEndMontage = PlayerEndMontage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeginActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainCrashStart(bool bBeginActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainCrashStart");

	Params::RSBattlePlayer_C_OnBrainCrashStart Parms{};

	Parms.bBeginActor = bBeginActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEventBackbodyAttachmentDither
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnEventBackbodyAttachmentDither(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEventBackbodyAttachmentDither");

	Params::RSBattlePlayer_C_OnEventBackbodyAttachmentDither Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindEventBackbodyAttachmentDitherTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindEventBackbodyAttachmentDitherTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindEventBackbodyAttachmentDitherTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindEventBackbodyAttachmentDitherTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindEventBackbodyAttachmentDitherTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindEventBackbodyAttachmentDitherTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EPlayerMaterialManageType               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature(EPlayerMaterialManageType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerMaterialManageComponent_K2Node_ComponentBoundEvent_0_OnCompletedMaterialSetting__DelegateSignature Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyParameterMax__DelegateSignature
// (BlueprintEvent)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyParameterMax__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyParameterMax__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   StockNum                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bItemUse                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNoEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature(int32 StockNum, bool bItemUse, bool bNoEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveNotifyBrainFieldStock__DelegateSignature Parms{};

	Parms.StockNum = StockNum;
	Parms.bItemUse = bItemUse;
	Parms.bNoEffect = bNoEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// ENotifyDriveEvent                       Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature(ENotifyDriveEvent Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_6_DriveGaugeMaxDelegate__DelegateSignature Parms{};

	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature(class AActor* User, bool bPlayStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_5_ED_PlayStart__DelegateSignature Parms{};

	Parms.User = User;
	Parms.bPlayStart = bPlayStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature(class AActor* User, bool bPlayStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_ED_PlayFinish__DelegateSignature Parms{};

	Parms.User = User;
	Parms.bPlayStart = bPlayStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DM_SetMaterial
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DM_SetMaterial(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DM_SetMaterial");

	Params::RSBattlePlayer_C_DM_SetMaterial Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DM_PlayerOpenSwitch
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DM_PlayerOpenSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DM_PlayerOpenSwitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DM_SetVisibleUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DM_SetVisibleUI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DM_SetVisibleUI");

	Params::RSBattlePlayer_C_DM_SetVisibleUI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DM_DamageEnemy
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DM_DamageEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DM_DamageEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DM_StartInputPlayer
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DM_StartInputPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DM_StartInputPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   GaugeRate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature(float GaugeRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveSetDriveGaugeDelegate__DelegateSignature Parms{};

	Parms.GaugeRate = GaugeRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   RegenerateHP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature(float RegenerateHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_2_DriveRegenerateDelegate__DelegateSignature Parms{};

	Parms.RegenerateHP = RegenerateHP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bInterruption                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLocationChange                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature(bool bInterruption, bool bLocationChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature");

	Params::RSBattlePlayer_C_BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_1_DriveEndDelegate__DelegateSignature Parms{};

	Parms.bInterruption = bInterruption;
	Parms.bLocationChange = bLocationChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveBeginDelegate__DelegateSignature
// (BlueprintEvent)

void ARSBattlePlayer_C::BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveBeginDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BndEvt__BP_PlayerDriveComponent_K2Node_ComponentBoundEvent_0_DriveBeginDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldOpenStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BrainFieldOpenStart(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainFieldOpenStart");

	Params::RSBattlePlayer_C_BrainFieldOpenStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldMoveNormalField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainFieldMoveNormalField(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainFieldMoveNormalField");

	Params::RSBattlePlayer_C_BrainFieldMoveNormalField Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldCloseStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainFieldCloseStart(class AActor* BrainFieldUser, bool IsAttacker, EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainFieldCloseStart");

	Params::RSBattlePlayer_C_BrainFieldCloseStart Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;
	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldOpenEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BrainFieldOpenEnd(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainFieldOpenEnd");

	Params::RSBattlePlayer_C_BrainFieldOpenEnd Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainFieldMoveBrainField
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BrainFieldUser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BrainFieldMoveBrainField(class AActor* BrainFieldUser, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainFieldMoveBrainField");

	Params::RSBattlePlayer_C_BrainFieldMoveBrainField Parms{};

	Parms.BrainFieldUser = BrainFieldUser;
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AfterTelepoTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AfterTelepoTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AfterTelepoTick");

	Params::RSBattlePlayer_C_AfterTelepoTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindTickAfterTelepo
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindTickAfterTelepo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindTickAfterTelepo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindTickAfterTelepo
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindTickAfterTelepo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindTickAfterTelepo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseWorldMap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseWorldMap(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseWorldMap");

	Params::RSBattlePlayer_C_OnReleaseWorldMap Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerWorldMap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerWorldMap(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerWorldMap");

	Params::RSBattlePlayer_C_OnTriggerWorldMap Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseAssaultVision
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseAssaultVision(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseAssaultVision");

	Params::RSBattlePlayer_C_OnReleaseAssaultVision Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerAssaultVision
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerAssaultVision(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerAssaultVision");

	Params::RSBattlePlayer_C_OnTriggerAssaultVision Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseCVRight(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseCVRight");

	Params::RSBattlePlayer_C_OnReleaseCVRight Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerCVRight(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerCVRight");

	Params::RSBattlePlayer_C_OnTriggerCVRight Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVLeft
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseCVLeft(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseCVLeft");

	Params::RSBattlePlayer_C_OnReleaseCVLeft Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVLeft
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerCVLeft(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerCVLeft");

	Params::RSBattlePlayer_C_OnTriggerCVLeft Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSVDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSVDown(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSVDown");

	Params::RSBattlePlayer_C_OnReleaseSVDown Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerCVDown(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerCVDown");

	Params::RSBattlePlayer_C_OnTriggerCVDown Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVUP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseCVUP(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseCVUP");

	Params::RSBattlePlayer_C_OnReleaseCVUP Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OntriggerCVUP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OntriggerCVUP(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OntriggerCVUP");

	Params::RSBattlePlayer_C_OntriggerCVUP Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCVMENUCOPEN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseCVMENUCOPEN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseCVMENUCOPEN");

	Params::RSBattlePlayer_C_OnReleaseCVMENUCOPEN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerCVMENUOPEN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerCVMENUOPEN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerCVMENUOPEN");

	Params::RSBattlePlayer_C_OnTriggerCVMENUOPEN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseweaponAttackSub
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseweaponAttackSub(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseweaponAttackSub");

	Params::RSBattlePlayer_C_OnReleaseweaponAttackSub Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTriggerWeaponAttackSub
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTriggerWeaponAttackSub(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTriggerWeaponAttackSub");

	Params::RSBattlePlayer_C_OnTriggerWeaponAttackSub Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseMoveRight(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseMoveRight");

	Params::RSBattlePlayer_C_OnReleaseMoveRight Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgMoveRight(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgMoveRight");

	Params::RSBattlePlayer_C_OnTrgMoveRight Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveLeft
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseMoveLeft(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseMoveLeft");

	Params::RSBattlePlayer_C_OnReleaseMoveLeft Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveLeft
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgMoveLeft(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgMoveLeft");

	Params::RSBattlePlayer_C_OnTrgMoveLeft Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveBackward
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseMoveBackward(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseMoveBackward");

	Params::RSBattlePlayer_C_OnReleaseMoveBackward Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveBackward
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgMoveBackward(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgMoveBackward");

	Params::RSBattlePlayer_C_OnTrgMoveBackward Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseMoveForward
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseMoveForward(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseMoveForward");

	Params::RSBattlePlayer_C_OnReleaseMoveForward Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgMoveForward
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgMoveForward(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgMoveForward");

	Params::RSBattlePlayer_C_OnTrgMoveForward Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseDPADEMU_DOWN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseDPADEMU_DOWN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseDPADEMU_DOWN");

	Params::RSBattlePlayer_C_OnReleaseDPADEMU_DOWN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgDPADEMU_DOWN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgDPADEMU_DOWN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgDPADEMU_DOWN");

	Params::RSBattlePlayer_C_OnTrgDPADEMU_DOWN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseItemUse
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseItemUse(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseItemUse");

	Params::RSBattlePlayer_C_OnReleaseItemUse Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgItemUse
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgItemUse(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgItemUse");

	Params::RSBattlePlayer_C_OnTrgItemUse Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseItemSelectR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseItemSelectR(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseItemSelectR");

	Params::RSBattlePlayer_C_OnReleaseItemSelectR Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgItemSelectR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgItemSelectR(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgItemSelectR");

	Params::RSBattlePlayer_C_OnTrgItemSelectR Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseItemSelectL
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseItemSelectL(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseItemSelectL");

	Params::RSBattlePlayer_C_OnReleaseItemSelectL Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgItemSelectL
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgItemSelectL(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgItemSelectL");

	Params::RSBattlePlayer_C_OnTrgItemSelectL Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLockSwitchR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLockSwitchR(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLockSwitchR");

	Params::RSBattlePlayer_C_OnReleaseLockSwitchR Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLockSwitchR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLockSwitchR(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLockSwitchR");

	Params::RSBattlePlayer_C_OnTrgLockSwitchR Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLockSwitchL
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLockSwitchL(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLockSwitchL");

	Params::RSBattlePlayer_C_OnReleaseLockSwitchL Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLockSwitchL
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLockSwitchL(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLockSwitchL");

	Params::RSBattlePlayer_C_OnTrgLockSwitchL Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLockOn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLockOn(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLockOn");

	Params::RSBattlePlayer_C_OnReleaseLockOn Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLockOn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLockOn(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLockOn");

	Params::RSBattlePlayer_C_OnTrgLockOn Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseCameraReset
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseCameraReset(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseCameraReset");

	Params::RSBattlePlayer_C_OnReleaseCameraReset Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgCameraReset
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgCameraReset(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgCameraReset");

	Params::RSBattlePlayer_C_OnTrgCameraReset Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleasePsychicField
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleasePsychicField(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleasePsychicField");

	Params::RSBattlePlayer_C_OnReleasePsychicField Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgPsychicField
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgPsychicField(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgPsychicField");

	Params::RSBattlePlayer_C_OnTrgPsychicField Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseBrainField
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseBrainField(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseBrainField");

	Params::RSBattlePlayer_C_OnReleaseBrainField Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgBrainField
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgBrainField(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgBrainField");

	Params::RSBattlePlayer_C_OnTrgBrainField Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleasePsychicSpecial
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleasePsychicSpecial(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleasePsychicSpecial");

	Params::RSBattlePlayer_C_OnReleasePsychicSpecial Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgPsychicSpecial
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgPsychicSpecial(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgPsychicSpecial");

	Params::RSBattlePlayer_C_OnTrgPsychicSpecial Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnRelasePsychic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnRelasePsychic(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnRelasePsychic");

	Params::RSBattlePlayer_C_OnRelasePsychic Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgPsychic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgPsychic(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgPsychic");

	Params::RSBattlePlayer_C_OnTrgPsychic Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseJump
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseJump(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseJump");

	Params::RSBattlePlayer_C_OnReleaseJump Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgJump
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgJump(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgJump");

	Params::RSBattlePlayer_C_OnTrgJump Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseAttack(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseAttack");

	Params::RSBattlePlayer_C_OnReleaseAttack Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgAttack(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgAttack");

	Params::RSBattlePlayer_C_OnTrgAttack Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseDodge
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseDodge(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseDodge");

	Params::RSBattlePlayer_C_OnReleaseDodge Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgDodge
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgDodge(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgDodge");

	Params::RSBattlePlayer_C_OnTrgDodge Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseAction(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseAction");

	Params::RSBattlePlayer_C_OnReleaseAction Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgAction(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgAction");

	Params::RSBattlePlayer_C_OnTrgAction Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasPage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasPage(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasPage");

	Params::RSBattlePlayer_C_OnReleaseSasPage Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasPage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasPage(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasPage");

	Params::RSBattlePlayer_C_OnTrgSasPage Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasStop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasStop(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasStop");

	Params::RSBattlePlayer_C_OnReleaseSasStop Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasStop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasStop(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasStop");

	Params::RSBattlePlayer_C_OnTrgSasStop Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasR(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasR");

	Params::RSBattlePlayer_C_OnReleaseSasR Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasR(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasR");

	Params::RSBattlePlayer_C_OnTrgSasR Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasL
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasL(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasL");

	Params::RSBattlePlayer_C_OnReleaseSasL Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasL
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasL(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasL");

	Params::RSBattlePlayer_C_OnTrgSasL Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasD(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasD");

	Params::RSBattlePlayer_C_OnReleaseSasD Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasD(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasD");

	Params::RSBattlePlayer_C_OnTrgSasD Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasU
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasU(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasU");

	Params::RSBattlePlayer_C_OnReleaseSasU Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasU
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasU(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasU");

	Params::RSBattlePlayer_C_OnTrgSasU Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseSasMenuOpenClose
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseSasMenuOpenClose(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseSasMenuOpenClose");

	Params::RSBattlePlayer_C_OnReleaseSasMenuOpenClose Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgSasMenuOpenClose
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgSasMenuOpenClose(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgSasMenuOpenClose");

	Params::RSBattlePlayer_C_OnTrgSasMenuOpenClose Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.onReleaseL3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseL3(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "onReleaseL3");

	Params::RSBattlePlayer_C_OnReleaseL3 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgL3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgL3(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgL3");

	Params::RSBattlePlayer_C_OnTrgL3 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseL2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseL2(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseL2");

	Params::RSBattlePlayer_C_OnReleaseL2 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgL2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgL2(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgL2");

	Params::RSBattlePlayer_C_OnTrgL2 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseL1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseL1(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseL1");

	Params::RSBattlePlayer_C_OnReleaseL1 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgL1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgL1(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgL1");

	Params::RSBattlePlayer_C_OnTrgL1 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseR3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseR3(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseR3");

	Params::RSBattlePlayer_C_OnReleaseR3 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgR3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgR3(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgR3");

	Params::RSBattlePlayer_C_OnTrgR3 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseR2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseR2(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseR2");

	Params::RSBattlePlayer_C_OnReleaseR2 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgR2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgR2(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgR2");

	Params::RSBattlePlayer_C_OnTrgR2 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseR1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseR1(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseR1");

	Params::RSBattlePlayer_C_OnReleaseR1 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgR1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgR1(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgR1");

	Params::RSBattlePlayer_C_OnTrgR1 Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRRIGHT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseRRIGHT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseRRIGHT");

	Params::RSBattlePlayer_C_OnReleaseRRIGHT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRRIGHT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgRRIGHT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgRRIGHT");

	Params::RSBattlePlayer_C_OnTrgRRIGHT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRLEFT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseRLEFT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseRLEFT");

	Params::RSBattlePlayer_C_OnReleaseRLEFT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRLEFT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgRLEFT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgRLEFT");

	Params::RSBattlePlayer_C_OnTrgRLEFT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRDOWN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseRDOWN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseRDOWN");

	Params::RSBattlePlayer_C_OnReleaseRDOWN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRDOWN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgRDOWN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgRDOWN");

	Params::RSBattlePlayer_C_OnTrgRDOWN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseRUP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseRUP(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseRUP");

	Params::RSBattlePlayer_C_OnReleaseRUP Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgRUP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgRUP(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgRUP");

	Params::RSBattlePlayer_C_OnTrgRUP Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLRIGHT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLRIGHT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLRIGHT");

	Params::RSBattlePlayer_C_OnReleaseLRIGHT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLRIGHT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLRIGHT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLRIGHT");

	Params::RSBattlePlayer_C_OnTrgLRIGHT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLLEFT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLLEFT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLLEFT");

	Params::RSBattlePlayer_C_OnReleaseLLEFT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLLEFT
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLLEFT(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLLEFT");

	Params::RSBattlePlayer_C_OnTrgLLEFT Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLDOWN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLDOWN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLDOWN");

	Params::RSBattlePlayer_C_OnReleaseLDOWN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLDOWN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLDOWN(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLDOWN");

	Params::RSBattlePlayer_C_OnTrgLDOWN Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnReleaseLUP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnReleaseLUP(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnReleaseLUP");

	Params::RSBattlePlayer_C_OnReleaseLUP Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTrgLUP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSGamepadLayoutType                    Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSGamepadInputName                     Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTrgLUP(ERSGamepadLayoutType Layout, ERSGamepadInputName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTrgLUP");

	Params::RSBattlePlayer_C_OnTrgLUP Parms{};

	Parms.Layout = Layout;
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindInputManager
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindInputManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindInputManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindAccessoryInvalidDamageTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindAccessoryInvalidDamageTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindAccessoryInvalidDamageTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindAccessoryInvalidDamageTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindAccessoryInvalidDamageTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindAccessoryInvalidDamageTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_FirstAttack
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_FirstAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_FirstAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_SameSAS
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         SasEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Num                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainTalk_SameSAS(E_SASKindNative SasEffect, const int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_SameSAS");

	Params::RSBattlePlayer_C_BrainTalk_SameSAS Parms{};

	Parms.SasEffect = SasEffect;
	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_FallHigh
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_FallHigh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_FallHigh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_ManyDied
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_ManyDied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_ManyDied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BondsSpecialAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               HologramPlayerID                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainTalk_BondsSpecialAttack(const EPlayerID HologramPlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_BondsSpecialAttack");

	Params::RSBattlePlayer_C_BrainTalk_BondsSpecialAttack Parms{};

	Parms.HologramPlayerID = HologramPlayerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_PsychicCombo
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_PsychicCombo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_PsychicCombo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_CoverDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               TakeOverCharacter                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainTalk_CoverDamage(const EPlayerID TakeOverCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_CoverDamage");

	Params::RSBattlePlayer_C_BrainTalk_CoverDamage Parms{};

	Parms.TakeOverCharacter = TakeOverCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BeginBrainField
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_BeginBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_BeginBrainField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_Drive
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_Drive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_Drive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_Revive
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               Param_RevivePlayer                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainTalk_Revive(EPlayerID Param_RevivePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_Revive");

	Params::RSBattlePlayer_C_BrainTalk_Revive Parms{};

	Parms.Param_RevivePlayer = Param_RevivePlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_ItemRecovery
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               TargetPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainTalk_ItemRecovery(EPlayerID TargetPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_ItemRecovery");

	Params::RSBattlePlayer_C_BrainTalk_ItemRecovery Parms{};

	Parms.TargetPlayer = TargetPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BadStatus
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCBadState                             BadStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainTalk_BadStatus(EHCBadState BadStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_BadStatus");

	Params::RSBattlePlayer_C_BrainTalk_BadStatus Parms{};

	Parms.BadStatus = BadStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_FriendDead
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_FriendDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_FriendDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_FriendDying
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_FriendDying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_FriendDying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BrainCrashChance
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_BrainCrashChance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_BrainCrashChance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainTalk_BrainCrashDefeated
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainTalk_BrainCrashDefeated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainTalk_BrainCrashDefeated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindPsychicComboResetTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindPsychicComboResetTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindPsychicComboResetTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindPsychicComboResetTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindPsychicComboResetTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindPsychicComboResetTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnbindJustDodgeSlowTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UnbindJustDodgeSlowTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnbindJustDodgeSlowTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindJustDodgeSlowTick
// (BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindJustDodgeSlowTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindJustDodgeSlowTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnablePlaySpTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::IsEnablePlaySpTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnablePlaySpTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPsychicEmissionInterface
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetPsychicEmissionInterface(bool bON, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPsychicEmissionInterface");

	Params::RSBattlePlayer_C_SetPsychicEmissionInterface Parms{};

	Parms.bON = bON;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyInputPsychic
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnAnimNotifyInputPsychic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAnimNotifyInputPsychic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetStealth
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag_in                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetStealth(bool Flag_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetStealth");

	Params::RSBattlePlayer_C_SetStealth Parms{};

	Parms.Flag_in = Flag_in;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnPsychicEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASPsychicParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnPsychicEnd(const struct FFSASPsychicParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnPsychicEnd");

	Params::RSBattlePlayer_C_OnPsychicEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnPsychicStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASPsychicParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnPsychicStart(const struct FFSASPsychicParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnPsychicStart");

	Params::RSBattlePlayer_C_OnPsychicStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnCutInEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnCutInEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnCutInEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnCutInStart
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnCutInStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnCutInStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnCopyEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCopyParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnCopyEnd(const struct FFSASCopyParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnCopyEnd");

	Params::RSBattlePlayer_C_OnCopyEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnCopyStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCopyParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnCopyStart(const struct FFSASCopyParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnCopyStart");

	Params::RSBattlePlayer_C_OnCopyStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStealthEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASStealthParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnStealthEnd(const struct FFSASStealthParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStealthEnd");

	Params::RSBattlePlayer_C_OnStealthEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStealthStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASStealthParam                Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnStealthStart(const struct FFSASStealthParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStealthStart");

	Params::RSBattlePlayer_C_OnStealthStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASTelepoParam                 Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTelepoEnd(const struct FFSASTelepoParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTelepoEnd");

	Params::RSBattlePlayer_C_OnTelepoEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTelepoStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASTelepoParam                 Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnTelepoStart(const struct FFSASTelepoParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTelepoStart");

	Params::RSBattlePlayer_C_OnTelepoStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSeeThroughEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASSeeThroughParam             Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnSeeThroughEnd(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSeeThroughEnd");

	Params::RSBattlePlayer_C_OnSeeThroughEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSeeThroughStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASSeeThroughParam             Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnSeeThroughStart(const struct FFSASSeeThroughParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSeeThroughStart");

	Params::RSBattlePlayer_C_OnSeeThroughStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnMetalEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASMetalParam                  Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnMetalEnd(const struct FFSASMetalParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnMetalEnd");

	Params::RSBattlePlayer_C_OnMetalEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnMetalStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASMetalParam                  Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnMetalStart(const struct FFSASMetalParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnMetalStart");

	Params::RSBattlePlayer_C_OnMetalStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnFireEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASFireParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnFireEnd(const struct FFSASFireParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnFireEnd");

	Params::RSBattlePlayer_C_OnFireEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnFireStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASFireParam                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnFireStart(const struct FFSASFireParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnFireStart");

	Params::RSBattlePlayer_C_OnFireStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnElectricEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASElectricParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnElectricEnd(const struct FFSASElectricParam& Param, class AActor* Param_Owner, float RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnElectricEnd");

	Params::RSBattlePlayer_C_OnElectricEnd Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnElectricStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASElectricParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnElectricStart(const struct FFSASElectricParam& Param, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnElectricStart");

	Params::RSBattlePlayer_C_OnElectricStart Parms{};

	Parms.Param = std::move(Param);
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAcceleratorEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAcceleratorParam                Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHologram                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAcceleratorEnd(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, float RemainTime, bool bHologram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAcceleratorEnd");

	Params::RSBattlePlayer_C_OnAcceleratorEnd Parms{};

	Parms.Parameter = std::move(Parameter);
	Parms.Param_Owner = Param_Owner;
	Parms.RemainTime = RemainTime;
	Parms.bHologram = bHologram;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAcceleratorStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAcceleratorParam                Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHologram                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAcceleratorStart(const struct FAcceleratorParam& Parameter, class AActor* Param_Owner, bool bHologram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAcceleratorStart");

	Params::RSBattlePlayer_C_OnAcceleratorStart Parms{};

	Parms.Parameter = std::move(Parameter);
	Parms.Param_Owner = Param_Owner;
	Parms.bHologram = bHologram;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStartSequencer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnStartSequencer(int32 IndexIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStartSequencer");

	Params::RSBattlePlayer_C_OnStartSequencer Parms{};

	Parms.IndexIn = IndexIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UpdateMoveAssultAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewParam1                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewParam2                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8200_UpdateMoveAssultAttack(int32 NewParam, int32 NewParam1, int32 NewParam2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_UpdateMoveAssultAttack");

	Params::RSBattlePlayer_C_Em8200_UpdateMoveAssultAttack Parms{};

	Parms.NewParam = NewParam;
	Parms.NewParam1 = NewParam1;
	Parms.NewParam2 = NewParam2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnUnDiscovery
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnUnDiscovery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnUnDiscovery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDiscovery
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnDiscovery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDiscovery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.setEmPosDiscover
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          DiscoverPos                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetEmPosDiscover(const struct FVector& DiscoverPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "setEmPosDiscover");

	Params::RSBattlePlayer_C_SetEmPosDiscover Parms{};

	Parms.DiscoverPos = std::move(DiscoverPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateOutRangeFade_Native
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ToTargetLenge                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceDisp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::UpdateOutRangeFade_Native(float ToTargetLenge, bool ForceDisp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateOutRangeFade_Native");

	Params::RSBattlePlayer_C_UpdateOutRangeFade_Native Parms{};

	Parms.ToTargetLenge = ToTargetLenge;
	Parms.ForceDisp = ForceDisp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnHitCrashVisionAttack
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnHitCrashVisionAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnHitCrashVisionAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMoveInputTriger
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateMoveInputTriger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateMoveInputTriger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeAnimKind
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAnimKind                         NewAnimKind                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAnimKind                         OldKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangeAnimKind(EPlayerAnimKind NewAnimKind, EPlayerAnimKind OldKind, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeAnimKind");

	Params::RSBattlePlayer_C_OnChangeAnimKind Parms{};

	Parms.NewAnimKind = NewAnimKind;
	Parms.OldKind = OldKind;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ProcessDirectionControll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ProcessDirectionControll(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ProcessDirectionControll");

	Params::RSBattlePlayer_C_ProcessDirectionControll Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetupAnimController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetupAnimController(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetupAnimController");

	Params::RSBattlePlayer_C_SetupAnimController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTheWaterSurface
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnTheWaterSurface(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTheWaterSurface");

	Params::RSBattlePlayer_C_OnTheWaterSurface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnTheGroundSurface
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnTheGroundSurface(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnTheGroundSurface");

	Params::RSBattlePlayer_C_OnTheGroundSurface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializePlayer_DEPRECATED
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           RenderSettingsClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::InitializePlayer_DEPRECATED(class UClass* RenderSettingsClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializePlayer_DEPRECATED");

	Params::RSBattlePlayer_C_InitializePlayer_DEPRECATED Parms{};

	Parms.RenderSettingsClass = RenderSettingsClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDamageingForPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnDamageingForPlayer(const struct FHCHitResult& HitResult, float DamageValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDamageingForPlayer");

	Params::RSBattlePlayer_C_OnDamageingForPlayer Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DamageValue = DamageValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDeadPlayerCore
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnDeadPlayerCore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDeadPlayerCore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartDamageAnimFunc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// int32                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDown                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartDamageAnimFunc(const struct FHCHitResult& HitResult, int32 DamageValue, bool IsDown, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartDamageAnimFunc");

	Params::RSBattlePlayer_C_StartDamageAnimFunc Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DamageValue = DamageValue;
	Parms.IsDown = IsDown;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ProcessLanded
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ProcessLanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ProcessLanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ProcessLandCheck
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ProcessLandCheck(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ProcessLandCheck");

	Params::RSBattlePlayer_C_ProcessLandCheck Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetHeadLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetHeadLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetHeadLocation");

	Params::RSBattlePlayer_C_GetHeadLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDamaging
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnDamaging(const struct FHCHitResult& HitResult, float DamageValue, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDamaging");

	Params::RSBattlePlayer_C_OnDamaging Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DamageValue = DamageValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnDead(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDead");

	Params::RSBattlePlayer_C_OnDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBattling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattling                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetBattling(bool bBattling, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBattling");

	Params::RSBattlePlayer_C_SetBattling Parms{};

	Parms.bBattling = bBattling;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheatCommand_SetBattlePlayerAIMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AIMode                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CheatCommand_SetBattlePlayerAIMode(class FName AIMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheatCommand_SetBattlePlayerAIMode");

	Params::RSBattlePlayer_C_CheatCommand_SetBattlePlayerAIMode Parms{};

	Parms.AIMode = AIMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ResetSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ResetCamera(float ResetSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetCamera");

	Params::RSBattlePlayer_C_ResetCamera Parms{};

	Parms.ResetSec = ResetSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSAttackInputKind                      InputKind                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPress                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InputAttack(ERSAttackInputKind InputKind, bool bPress, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAttack");

	Params::RSBattlePlayer_C_InputAttack Parms{};

	Parms.InputKind = InputKind;
	Parms.bPress = bPress;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeStateManager
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeStateManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeStateManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateStateManager
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateStateManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateStateManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddPlayerStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCommonStatus                     PlayerStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AddPlayerStatus(EPlayerCommonStatus PlayerStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddPlayerStatus");

	Params::RSBattlePlayer_C_AddPlayerStatus Parms{};

	Parms.PlayerStatus = PlayerStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearPlayerStatus
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ClearPlayerStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearPlayerStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SubPlayerStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCommonStatus                     PlayerStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SubPlayerStatus(EPlayerCommonStatus PlayerStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SubPlayerStatus");

	Params::RSBattlePlayer_C_SubPlayerStatus Parms{};

	Parms.PlayerStatus = PlayerStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddActionStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionStatus                     ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AddActionStatus(EPlayerActionStatus ActionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddActionStatus");

	Params::RSBattlePlayer_C_AddActionStatus Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearActionStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ClearActionStatus(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearActionStatus");

	Params::RSBattlePlayer_C_ClearActionStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckInput(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckInput");

	Params::RSBattlePlayer_C_CheckInput Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckInputPsychic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckInputPsychic(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckInputPsychic");

	Params::RSBattlePlayer_C_CheckInputPsychic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateCameraRotate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UpdateCameraRotate(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateCameraRotate");

	Params::RSBattlePlayer_C_UpdateCameraRotate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetActionState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionKind                       Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetActionState(EPlayerActionKind Kind, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetActionState");

	Params::RSBattlePlayer_C_SetActionState Parms{};

	Parms.Kind = Kind;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetUpperActionState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerUpperActionKind                  Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetUpperActionState(EPlayerUpperActionKind Kind, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetUpperActionState");

	Params::RSBattlePlayer_C_SetUpperActionState Parms{};

	Parms.Kind = Kind;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PreTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PreTick(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PreTick");

	Params::RSBattlePlayer_C_PreTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.MainTick
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::MainTick(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "MainTick");

	Params::RSBattlePlayer_C_MainTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PostTick
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PostTick(float DeltaSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PostTick");

	Params::RSBattlePlayer_C_PostTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckDamageReaction
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::CheckDamageReaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckDamageReaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAttackActorHit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAttackActorHit(const struct FHCHitResult& HitResult, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAttackActorHit");

	Params::RSBattlePlayer_C_OnAttackActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SubActionStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionStatus                     ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SubActionStatus(EPlayerActionStatus ActionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SubActionStatus");

	Params::RSBattlePlayer_C_SubActionStatus Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeAttackComponent
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeAttackComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeAttackComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ItemApply
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRevive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ItemApply(bool bRevive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ItemApply");

	Params::RSBattlePlayer_C_ItemApply Parms{};

	Parms.bRevive = bRevive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetItemIdFromName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetItemIdFromName(class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetItemIdFromName");

	Params::RSBattlePlayer_C_SetItemIdFromName Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializePlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::InitializePlayer(EPlayerID ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializePlayer");

	Params::RSBattlePlayer_C_InitializePlayer Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.RegisterCombo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerComboPattern                     Pattern                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::RegisterCombo(EPlayerComboPattern Pattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RegisterCombo");

	Params::RSBattlePlayer_C_RegisterCombo Parms{};

	Parms.Pattern = Pattern;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnregisterCombo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerComboPattern                     Pattern                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UnregisterCombo(EPlayerComboPattern Pattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnregisterCombo");

	Params::RSBattlePlayer_C_UnregisterCombo Parms{};

	Parms.Pattern = Pattern;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ComboSetting
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerComboPattern                     First                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerComboPattern                     Second                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ComboSetting(EPlayerComboPattern First, EPlayerComboPattern Second, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ComboSetting");

	Params::RSBattlePlayer_C_ComboSetting Parms{};

	Parms.First = First;
	Parms.Second = Second;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndCurrentAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSAttackInputKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EndCurrentAttack(ERSAttackInputKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndCurrentAttack");

	Params::RSBattlePlayer_C_EndCurrentAttack Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetActionStatusFull
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetActionStatusFull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetActionStatusFull");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddUpperActionStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerUpperActionStatus                ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AddUpperActionStatus(EPlayerUpperActionStatus ActionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddUpperActionStatus");

	Params::RSBattlePlayer_C_AddUpperActionStatus Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SubUpperActionStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerUpperActionStatus                ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SubUpperActionStatus(EPlayerUpperActionStatus ActionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SubUpperActionStatus");

	Params::RSBattlePlayer_C_SubUpperActionStatus Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearUpperActionStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ClearUpperActionStatus(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearUpperActionStatus");

	Params::RSBattlePlayer_C_ClearUpperActionStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeSAS
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::InitializeSAS(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeSAS");

	Params::RSBattlePlayer_C_InitializeSAS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Initialize
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnRevive
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnRevive(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnRevive");

	Params::RSBattlePlayer_C_OnRevive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCharacterVisibility
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisibility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCharacterVisibility(bool bVisibility, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCharacterVisibility");

	Params::RSBattlePlayer_C_SetCharacterVisibility Parms{};

	Parms.bVisibility = bVisibility;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ThrowWeapon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponThrowType                        ThrowType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TargetSearchAngle                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dir                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ThrowWeapon(EWeaponThrowType ThrowType, float Speed, float Range, float TargetSearchAngle, const struct FVector& Dir, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ThrowWeapon");

	Params::RSBattlePlayer_C_ThrowWeapon Parms{};

	Parms.ThrowType = ThrowType;
	Parms.Speed = Speed;
	Parms.Range = Range;
	Parms.TargetSearchAngle = TargetSearchAngle;
	Parms.Dir = std::move(Dir);

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.TakeBackWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::TakeBackWeapon(float Time, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TakeBackWeapon");

	Params::RSBattlePlayer_C_TakeBackWeapon Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginConnectEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  ParticleSystem                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEffectConnectPoint                     SourceConnectPoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SourceSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEffectConnectPoint                     TargetConnectPoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TargetSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    PlaySound                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBeginConnectEffect(class UParticleSystem* ParticleSystem, class FName ObjectName, EEffectConnectPoint SourceConnectPoint, class FName SourceSocketName, EEffectConnectPoint TargetConnectPoint, class FName TargetSocketName, class USoundAtomCue* PlaySound, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBeginConnectEffect");

	Params::RSBattlePlayer_C_OnBeginConnectEffect Parms{};

	Parms.ParticleSystem = ParticleSystem;
	Parms.ObjectName = ObjectName;
	Parms.SourceConnectPoint = SourceConnectPoint;
	Parms.SourceSocketName = SourceSocketName;
	Parms.TargetConnectPoint = TargetConnectPoint;
	Parms.TargetSocketName = TargetSocketName;
	Parms.PlaySound = PlaySound;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEndConnectEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEndConnectEffect(class FName ObjectName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEndConnectEffect");

	Params::RSBattlePlayer_C_OnEndConnectEffect Parms{};

	Parms.ObjectName = ObjectName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateConnectEffect
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateConnectEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateConnectEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateDisableAction
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateDisableAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateDisableAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PrepareThrowWeapon
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WeaponIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponThrowType                        ThrowType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TargetSearchAngle                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_WeaponBase_C*                 Weapon                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::PrepareThrowWeapon(int32 WeaponIndex, EWeaponThrowType ThrowType, float Range, float TargetSearchAngle, bool* bOK, class ABP_WeaponBase_C** Weapon, class AActor** Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PrepareThrowWeapon");

	Params::RSBattlePlayer_C_PrepareThrowWeapon Parms{};

	Parms.WeaponIndex = WeaponIndex;
	Parms.ThrowType = ThrowType;
	Parms.Range = Range;
	Parms.TargetSearchAngle = TargetSearchAngle;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;

	if (Weapon != nullptr)
		*Weapon = Parms.Weapon;

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateChangeBattle
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateChangeBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateChangeBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bReady                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetBattleReady(bool bReady, bool bForce, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBattleReady");

	Params::RSBattlePlayer_C_SetBattleReady Parms{};

	Parms.bReady = bReady;
	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeBattleReady
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangeBattleReady(bool bBattle, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeBattleReady");

	Params::RSBattlePlayer_C_OnChangeBattleReady Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInitialize
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ForceWarp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   IdleRestoreDelay                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ForceWarp(const struct FTransform& Transform, float IdleRestoreDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ForceWarp");

	Params::RSBattlePlayer_C_ForceWarp Parms{};

	Parms.Transform = std::move(Transform);
	Parms.IdleRestoreDelay = IdleRestoreDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ThrowWeaponEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ThrowWeaponEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ThrowWeaponEnd");

	Params::RSBattlePlayer_C_ThrowWeaponEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnOil
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectOnOil(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectOnOil");

	Params::RSBattlePlayer_C_BadStateEffectOnOil Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOffOil
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectOffOil(bool bNoMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectOffOil");

	Params::RSBattlePlayer_C_BadStateEffectOffOil Parms{};

	Parms.bNoMaterial = bNoMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnFlooded
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectOnFlooded(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectOnFlooded");

	Params::RSBattlePlayer_C_BadStateEffectOnFlooded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOffFlooded
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectOffFlooded(bool bNoMaterial, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectOffFlooded");

	Params::RSBattlePlayer_C_BadStateEffectOffFlooded Parms{};

	Parms.bNoMaterial = bNoMaterial;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetHoodVisible
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetHoodVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetHoodVisible");

	Params::RSBattlePlayer_C_SetHoodVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetFootIKEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetFootIKEnable(bool Enable, float BlendTime, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetFootIKEnable");

	Params::RSBattlePlayer_C_SetFootIKEnable Parms{};

	Parms.Enable = Enable;
	Parms.BlendTime = BlendTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnUpdateHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnUpdateHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayBlendAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     UpperAnimMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     LowerAnimMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::PlayBlendAnimMontage(class UAnimMontage* UpperAnimMontage, class UAnimMontage* LowerAnimMontage, float PlayRate, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayBlendAnimMontage");

	Params::RSBattlePlayer_C_PlayBlendAnimMontage Parms{};

	Parms.UpperAnimMontage = UpperAnimMontage;
	Parms.LowerAnimMontage = LowerAnimMontage;
	Parms.PlayRate = PlayRate;
	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.StopBlendAnimMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Upper                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Lower                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StopBlendAnimMontage(bool Upper, bool Lower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StopBlendAnimMontage");

	Params::RSBattlePlayer_C_StopBlendAnimMontage Parms{};

	Parms.Upper = Upper;
	Parms.Lower = Lower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetActionStatusUpper
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetActionStatusUpper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetActionStatusUpper");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAnimMontageFromSet
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPlayerAnimMontage                      AnimType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetAnimMontageFromSet(EPlayerAnimMontage AnimType, class UAnimMontage** Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAnimMontageFromSet");

	Params::RSBattlePlayer_C_GetAnimMontageFromSet Parms{};

	Parms.AnimType = AnimType;

	UObject::ProcessEvent(Func, &Parms);

	if (Montage != nullptr)
		*Montage = Parms.Montage;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventVisible
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetEventVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventVisible");

	Params::RSBattlePlayer_C_SetEventVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAttackWeakHit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAttackWeakHit(const struct FHCHitResult& HitResult, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAttackWeakHit");

	Params::RSBattlePlayer_C_OnAttackWeakHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDestroy
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnDestroy(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDestroy");

	Params::RSBattlePlayer_C_OnDestroy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckExistActorToMoveDir
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::CheckExistActorToMoveDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckExistActorToMoveDir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.WarpToTargetActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<float>                           WarpCandidateAngle                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    bCheckGround                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::WarpToTargetActor(class AActor* TargetActor, float Distance, TArray<float>& WarpCandidateAngle, bool bCheckGround, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "WarpToTargetActor");

	Params::RSBattlePlayer_C_WarpToTargetActor Parms{};

	Parms.TargetActor = TargetActor;
	Parms.Distance = Distance;
	Parms.WarpCandidateAngle = std::move(WarpCandidateAngle);
	Parms.bCheckGround = bCheckGround;

	UObject::ProcessEvent(Func, &Parms);

	WarpCandidateAngle = std::move(Parms.WarpCandidateAngle);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.WarpToLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCheckGround                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::WarpToLocation(const struct FVector& Location, bool bCheckGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "WarpToLocation");

	Params::RSBattlePlayer_C_WarpToLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.bCheckGround = bCheckGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginSAS_Telepo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLocationTelepo                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TargetDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DisappearTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  DisappearParticle                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  DisappearParticleSecond                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketNameSecond                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  TelepoParticle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketNameTelepo                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOnlyWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNoCollision                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLocationTargetHeight                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bBegin                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginSAS_Telepo(bool bLocationTelepo, float TargetDistance, float DisappearTime, class UParticleSystem* DisappearParticle, class FName SocketName, class UParticleSystem* DisappearParticleSecond, class FName SocketNameSecond, class UParticleSystem* TelepoParticle, class FName SocketNameTelepo, bool bOnlyWeapon, bool bNoCollision, bool bLocationTargetHeight, bool* bBegin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginSAS_Telepo");

	Params::RSBattlePlayer_C_BeginSAS_Telepo Parms{};

	Parms.bLocationTelepo = bLocationTelepo;
	Parms.TargetDistance = TargetDistance;
	Parms.DisappearTime = DisappearTime;
	Parms.DisappearParticle = DisappearParticle;
	Parms.SocketName = SocketName;
	Parms.DisappearParticleSecond = DisappearParticleSecond;
	Parms.SocketNameSecond = SocketNameSecond;
	Parms.TelepoParticle = TelepoParticle;
	Parms.SocketNameTelepo = SocketNameTelepo;
	Parms.bOnlyWeapon = bOnlyWeapon;
	Parms.bNoCollision = bNoCollision;
	Parms.bLocationTargetHeight = bLocationTargetHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (bBegin != nullptr)
		*bBegin = Parms.bBegin;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndSAS_Telepo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AppearTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  AppearParticle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  AppearParticleSecond                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketNameSecond                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNoDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UParticleSystem*                  TelepoParticle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketNameTelepo                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndSAS_Telepo(float AppearTime, class UParticleSystem* AppearParticle, class FName SocketName, class UParticleSystem* AppearParticleSecond, class FName SocketNameSecond, bool bNoDirection, class UParticleSystem* TelepoParticle, class FName SocketNameTelepo, bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndSAS_Telepo");

	Params::RSBattlePlayer_C_EndSAS_Telepo Parms{};

	Parms.AppearTime = AppearTime;
	Parms.AppearParticle = AppearParticle;
	Parms.SocketName = SocketName;
	Parms.AppearParticleSecond = AppearParticleSecond;
	Parms.SocketNameSecond = SocketNameSecond;
	Parms.bNoDirection = bNoDirection;
	Parms.TelepoParticle = TelepoParticle;
	Parms.SocketNameTelepo = SocketNameTelepo;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetShadowEnable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOnlyWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetShadowEnable(bool bEnable, bool bOnlyWeapon, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetShadowEnable");

	Params::RSBattlePlayer_C_SetShadowEnable Parms{};

	Parms.bEnable = bEnable;
	Parms.bOnlyWeapon = bOnlyWeapon;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetHp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetHp(int32 HP, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetHp");

	Params::RSBattlePlayer_C_SetHp Parms{};

	Parms.HP = HP;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerHidden
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bHidden                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWeaponOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPlayerHidden(bool Param_bHidden, bool bWeaponOnly, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerHidden");

	Params::RSBattlePlayer_C_SetPlayerHidden Parms{};

	Parms.Param_bHidden = Param_bHidden;
	Parms.bWeaponOnly = bWeaponOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcAccumulationByDefence
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefWince                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefKnockback                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefDown                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefLaunch                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlame                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectric                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlooded                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefOil                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefConfusion                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashCapCheckRate                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CalcAccumulationByDefence(float& RefWince, float& RefKnockback, float& RefDown, float& RefLaunch, float& RefFlame, float& RefElectric, float& RefFlooded, float& RefOil, float& RefConfusion, float& RefCrashScale, float& RefCrashCapCheckRate, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcAccumulationByDefence");

	Params::RSBattlePlayer_C_CalcAccumulationByDefence Parms{};

	Parms.RefWince = RefWince;
	Parms.RefKnockback = RefKnockback;
	Parms.RefDown = RefDown;
	Parms.RefLaunch = RefLaunch;
	Parms.RefFlame = RefFlame;
	Parms.RefElectric = RefElectric;
	Parms.RefFlooded = RefFlooded;
	Parms.RefOil = RefOil;
	Parms.RefConfusion = RefConfusion;
	Parms.RefCrashScale = RefCrashScale;
	Parms.RefCrashCapCheckRate = RefCrashCapCheckRate;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);

	RefWince = Parms.RefWince;
	RefKnockback = Parms.RefKnockback;
	RefDown = Parms.RefDown;
	RefLaunch = Parms.RefLaunch;
	RefFlame = Parms.RefFlame;
	RefElectric = Parms.RefElectric;
	RefFlooded = Parms.RefFlooded;
	RefOil = Parms.RefOil;
	RefConfusion = Parms.RefConfusion;
	RefCrashScale = Parms.RefCrashScale;
	RefCrashCapCheckRate = Parms.RefCrashCapCheckRate;

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcCritical
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Critical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAssassinAttack                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::CalcCritical(float Critical, class AActor* DefenseActor, bool bAssassinAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcCritical");

	Params::RSBattlePlayer_C_CalcCritical Parms{};

	Parms.Critical = Critical;
	Parms.DefenseActor = DefenseActor;
	Parms.bAssassinAttack = bAssassinAttack;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcFinalDamageByAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHCSkillCommonInfo               SkillInfo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::CalcFinalDamageByAttack(float Damage, class AActor* DefenseActor, const struct FHCSkillCommonInfo& SkillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcFinalDamageByAttack");

	Params::RSBattlePlayer_C_CalcFinalDamageByAttack Parms{};

	Parms.Damage = Damage;
	Parms.DefenseActor = DefenseActor;
	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcFinalDamageByDefence
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::CalcFinalDamageByDefence(float Damage, class AActor* AttackActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcFinalDamageByDefence");

	Params::RSBattlePlayer_C_CalcFinalDamageByDefence Parms{};

	Parms.Damage = Damage;
	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OverwriteAttackCollisionInfo
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCCollisionCommonInfo           RefCommonInfo                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FHCSkillCommonInfo               RefSkill                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OverwriteAttackCollisionInfo(struct FHCCollisionCommonInfo& RefCommonInfo, struct FHCSkillCommonInfo& RefSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OverwriteAttackCollisionInfo");

	Params::RSBattlePlayer_C_OverwriteAttackCollisionInfo Parms{};

	Parms.RefCommonInfo = std::move(RefCommonInfo);
	Parms.RefSkill = std::move(RefSkill);

	UObject::ProcessEvent(Func, &Parms);

	RefCommonInfo = std::move(Parms.RefCommonInfo);
	RefSkill = std::move(Parms.RefSkill);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckFriendlyFire
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsCheckFriendlyFire(class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCheckFriendlyFire");

	Params::RSBattlePlayer_C_IsCheckFriendlyFire Parms{};

	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnPlayerAssetLoad
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnPlayerAssetLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnPlayerAssetLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddCopyPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_SASCopyPlayerActor_C*         CopyPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AddCopyPlayer(class ABP_SASCopyPlayerActor_C* CopyPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddCopyPlayer");

	Params::RSBattlePlayer_C_AddCopyPlayer Parms{};

	Parms.CopyPlayer = CopyPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyWeaponOn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CopyWeaponOn(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyWeaponOn");

	Params::RSBattlePlayer_C_CopyWeaponOn Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyWeaponOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CopyWeaponOff(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyWeaponOff");

	Params::RSBattlePlayer_C_CopyWeaponOff Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMaterial_CopyWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateMaterial_CopyWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateMaterial_CopyWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCopyWeaponMaterialValue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetCopyWeaponMaterialValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCopyWeaponMaterialValue");

	Params::RSBattlePlayer_C_SetCopyWeaponMaterialValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BulletFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBulletType                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttackCollisionInfoBP           CollisionInfo                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName                             SkillName_CopyBullet                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BulletFire(EBulletType Type, const struct FAttackCollisionInfoBP& CollisionInfo, class FName SkillName_CopyBullet, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BulletFire");

	Params::RSBattlePlayer_C_BulletFire Parms{};

	Parms.Type = Type;
	Parms.CollisionInfo = std::move(CollisionInfo);
	Parms.SkillName_CopyBullet = SkillName_CopyBullet;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOnIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AppearTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAttachOriginal                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWithSubWeapon                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CopyPlayerOnIndex(int32 Param_Index, float AppearTime, bool bAttachOriginal, class UAnimMontage* Montage, bool bWithSubWeapon, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyPlayerOnIndex");

	Params::RSBattlePlayer_C_CopyPlayerOnIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.AppearTime = AppearTime;
	Parms.bAttachOriginal = bAttachOriginal;
	Parms.Montage = Montage;
	Parms.bWithSubWeapon = bWithSubWeapon;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOffIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DisappearTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CopyPlayerOffIndex(int32 Param_Index, float DisappearTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyPlayerOffIndex");

	Params::RSBattlePlayer_C_CopyPlayerOffIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.DisappearTime = DisappearTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AppearTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CopyPlayerOn(float AppearTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyPlayerOn");

	Params::RSBattlePlayer_C_CopyPlayerOn Parms{};

	Parms.AppearTime = AppearTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayerOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DisappearTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CopyPlayerOff(float DisappearTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyPlayerOff");

	Params::RSBattlePlayer_C_CopyPlayerOff Parms{};

	Parms.DisappearTime = DisappearTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndBulletFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBulletType                             BulletType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndBulletFire(EBulletType BulletType, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndBulletFire");

	Params::RSBattlePlayer_C_EndBulletFire Parms{};

	Parms.BulletType = BulletType;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearActionStatus_Common
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ClearActionStatus_Common(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearActionStatus_Common");

	Params::RSBattlePlayer_C_ClearActionStatus_Common Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSasStealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stealth_on_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Hero_order_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Check_delay                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Check_ignore                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    No_sas_cancel_in                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    From_event_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetSasStealth(bool Stealth_on_in, bool Hero_order_in, bool Check_delay, bool Check_ignore, bool No_sas_cancel_in, bool From_event_in, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSasStealth");

	Params::RSBattlePlayer_C_SetSasStealth Parms{};

	Parms.Stealth_on_in = Stealth_on_in;
	Parms.Hero_order_in = Hero_order_in;
	Parms.Check_delay = Check_delay;
	Parms.Check_ignore = Check_ignore;
	Parms.No_sas_cancel_in = No_sas_cancel_in;
	Parms.From_event_in = From_event_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDamageActorHit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnDamageActorHit(struct FHCHitResult& HitResult, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDamageActorHit");

	Params::RSBattlePlayer_C_OnDamageActorHit Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetHideSASOutline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHide                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetHideSASOutline(bool bHide, class FName ClaimantName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetHideSASOutline");

	Params::RSBattlePlayer_C_SetHideSASOutline Parms{};

	Parms.bHide = bHide;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RevivePlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerReviveKind                       Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::RevivePlayer(EPlayerReviveKind Kind, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RevivePlayer");

	Params::RSBattlePlayer_C_RevivePlayer Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyPlayerBattle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bUseBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyPlayerBattle(bool bBattle, bool bUseBrainField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyPlayerBattle");

	Params::RSBattlePlayer_C_SetEnemyPlayerBattle Parms{};

	Parms.bBattle = bBattle;
	Parms.bUseBrainField = bUseBrainField;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetItemID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConsumeItemID                          ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHelpPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetItemID(EConsumeItemID ItemId, bool bHelpPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetItemID");

	Params::RSBattlePlayer_C_SetItemID Parms{};

	Parms.ItemId = ItemId;
	Parms.bHelpPlayer = bHelpPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReserveUpdateHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ReserveUpdateHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReserveUpdateHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyPlayMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CopyPlayMontage(class UAnimMontage* Montage, float PlayRate, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyPlayMontage");

	Params::RSBattlePlayer_C_CopyPlayMontage Parms{};

	Parms.Montage = Montage;
	Parms.PlayRate = PlayRate;
	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CopyStopMontage
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::CopyStopMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CopyStopMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DamageReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DamageReaction(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DamageReaction");

	Params::RSBattlePlayer_C_DamageReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableButtonInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetDisableButtonInput(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDisableButtonInput");

	Params::RSBattlePlayer_C_SetDisableButtonInput Parms{};

	Parms.bDisable = bDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEventFadeOutCompleted
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnEventFadeOutCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEventFadeOutCompleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateOn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCBadState                             BadState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BadStateOn(EHCBadState BadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateOn");

	Params::RSBattlePlayer_C_BadStateOn Parms{};

	Parms.BadState = BadState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHCBadState                             BadState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BadStateOff(EHCBadState BadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateOff");

	Params::RSBattlePlayer_C_BadStateOff Parms{};

	Parms.BadState = BadState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InterruptSAS_Telepo
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InterruptSAS_Telepo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InterruptSAS_Telepo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveComboSetting
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetReserveComboSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetReserveComboSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionCounter(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionCounter");

	Params::RSBattlePlayer_C_IsEnableActionCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableCounterAnim
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetEnableCounterAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnableCounterAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableCounterAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableCounterAnim(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableCounterAnim");

	Params::RSBattlePlayer_C_IsEnableCounterAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CreateWeapon
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CreateWeapon(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CreateWeapon");

	Params::RSBattlePlayer_C_CreateWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ENpcDead
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ENpcDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ENpcDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCharactersParameterTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FCharactersParameter             Param                                                  (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCharactersParameterTable(struct FCharactersParameter* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCharactersParameterTable");

	Params::RSBattlePlayer_C_GetCharactersParameterTable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = std::move(Parms.Param);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentUpperActionState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerUpperActionKind                  Kind                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentUpperActionState(EPlayerUpperActionKind* Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentUpperActionState");

	Params::RSBattlePlayer_C_GetCurrentUpperActionState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Kind != nullptr)
		*Kind = Parms.Kind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckHardenRestriction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionKind                       Action_kind_in                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckHardenRestriction(EPlayerActionKind Action_kind_in, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckHardenRestriction");

	Params::RSBattlePlayer_C_CheckHardenRestriction Parms{};

	Parms.Action_kind_in = Action_kind_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInitializeDebug
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInitializeDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInitializeDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldBattleStart
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnBrainFieldBattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldBattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldBattleEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBrainFieldBattleEnd(EBrainFieldEndType EndType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldBattleEnd");

	Params::RSBattlePlayer_C_OnBrainFieldBattleEnd Parms{};

	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OpenBrainFieldSetting
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OpenBrainFieldSetting(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OpenBrainFieldSetting");

	Params::RSBattlePlayer_C_OpenBrainFieldSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CloseBrainFieldSetting
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBrainFieldEndType                      EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CloseBrainFieldSetting(EBrainFieldEndType EndType, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CloseBrainFieldSetting");

	Params::RSBattlePlayer_C_CloseBrainFieldSetting Parms{};

	Parms.EndType = EndType;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashAccessOn
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnBrainCrashAccessOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainCrashAccessOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainCrashAccessOff
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnBrainCrashAccessOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainCrashAccessOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveChangeCombo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Reserve                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetReserveChangeCombo(bool Reserve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetReserveChangeCombo");

	Params::RSBattlePlayer_C_SetReserveChangeCombo Parms{};

	Parms.Reserve = Reserve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.isEnableActionRecovery
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionRecovery(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "isEnableActionRecovery");

	Params::RSBattlePlayer_C_IsEnableActionRecovery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateAccessoryEffect
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateAccessoryEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateAccessoryEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerDodge
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttack
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseAttack
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerItemUse
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerItemUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerItemUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerTargetLock
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerTargetLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerTargetLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindInputEvent
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindInputEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindInputEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerTargetLockChange
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLeft                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnInputTriggerTargetLockChange(bool bLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerTargetLockChange");

	Params::RSBattlePlayer_C_OnInputTriggerTargetLockChange Parms{};

	Parms.bLeft = bLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerResetCamera
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerResetCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerResetCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBrainCrash
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerBrainCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerBrainCrash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCapture
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseCapture
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerSASReady
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerSASReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerSASReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseSASReady
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseSASReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseSASReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerLeftSAS
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerLeftSAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerLeftSAS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerRightSAS
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerRightSAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerRightSAS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerUpSAS
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerUpSAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerUpSAS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerDownSAS
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerDownSAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerDownSAS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBrainField
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerBrainField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerPsychic
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerPsychic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerPsychic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleasePsychic
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleasePsychic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleasePsychic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerPsychicSpecial
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerPsychicSpecial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerPsychicSpecial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleasePsychicSpecial
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleasePsychicSpecial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleasePsychicSpecial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerIntercept
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerIntercept()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerIntercept");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearEarlyInput
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ClearEarlyInput(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearEarlyInput");

	Params::RSBattlePlayer_C_ClearEarlyInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableCameraControlTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetDisableCameraControlTimer(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDisableCameraControlTimer");

	Params::RSBattlePlayer_C_SetDisableCameraControlTimer Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainCrashEventStart
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BrainCrashEventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainCrashEventStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainCrashEventEnd
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BrainCrashEventEnd(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainCrashEventEnd");

	Params::RSBattlePlayer_C_BrainCrashEventEnd Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerLaunchAttack
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerLaunchAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerLaunchAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseLaunchAttack
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseLaunchAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseLaunchAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerMapGimmick
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerMapGimmick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerMapGimmick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseMapGimmick
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseMapGimmick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseMapGimmick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetLockOnTargetInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetLockOnTargetInterface(class AActor** TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetLockOnTargetInterface");

	Params::RSBattlePlayer_C_GetLockOnTargetInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawMotionInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugDrawMotionInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawMotionInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAttackMotionPlayRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetAttackMotionPlayRate(float* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAttackMotionPlayRate");

	Params::RSBattlePlayer_C_GetAttackMotionPlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDriveRegenerate
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RegenerateHPRate                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnDriveRegenerate(float RegenerateHPRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDriveRegenerate");

	Params::RSBattlePlayer_C_OnDriveRegenerate Parms{};

	Parms.RegenerateHPRate = RegenerateHPRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginDrive
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBeginDrive(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBeginDrive");

	Params::RSBattlePlayer_C_OnBeginDrive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEndDrive
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInterruption                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLocationChange                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEndDrive(bool bInterruption, bool bLocationChange, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEndDrive");

	Params::RSBattlePlayer_C_OnEndDrive Parms{};

	Parms.bInterruption = bInterruption;
	Parms.bLocationChange = bLocationChange;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawDriveInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugDrawDriveInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawDriveInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetPsychicCombo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoRushAttack                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetPsychicCombo(bool bNoRushAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetPsychicCombo");

	Params::RSBattlePlayer_C_ResetPsychicCombo Parms{};

	Parms.bNoRushAttack = bNoRushAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerChangeSASSet
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerChangeSASSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerChangeSASSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBrainFieldPsychicUp
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerBrainFieldPsychicUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerBrainFieldPsychicUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBrainFieldPsychicLeft
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerBrainFieldPsychicLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerBrainFieldPsychicLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBrainFieldPsychicRight
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerBrainFieldPsychicRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerBrainFieldPsychicRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseBrainFieldPsychicRight
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseBrainFieldPsychicRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseBrainFieldPsychicRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetObstructPsychic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSAS                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPsychic                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAttack                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDrive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bBrainCrash                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     ObstructAnimation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequence*                   Param_ObstructSequencer                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetObstructPsychic(bool bSAS, bool bPsychic, bool bAttack, bool bDrive, bool bBrainCrash, class UAnimMontage* ObstructAnimation, class ULevelSequence* Param_ObstructSequencer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetObstructPsychic");

	Params::RSBattlePlayer_C_SetObstructPsychic Parms{};

	Parms.bSAS = bSAS;
	Parms.bPsychic = bPsychic;
	Parms.bAttack = bAttack;
	Parms.bDrive = bDrive;
	Parms.bBrainCrash = bBrainCrash;
	Parms.ObstructAnimation = ObstructAnimation;
	Parms.Param_ObstructSequencer = Param_ObstructSequencer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearObstructPsychic
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ClearObstructPsychic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearObstructPsychic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetActionStateObstructPsychic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetActionStateObstructPsychic(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetActionStateObstructPsychic");

	Params::RSBattlePlayer_C_SetActionStateObstructPsychic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerJump
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearPrecedeInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ClearPrecedeInput(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearPrecedeInput");

	Params::RSBattlePlayer_C_ClearPrecedeInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCoverDamagePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               InPlayerID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCoverDamagePlayer(EPlayerID InPlayerID, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCoverDamagePlayer");

	Params::RSBattlePlayer_C_SetCoverDamagePlayer Parms{};

	Parms.InPlayerID = InPlayerID;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetCoverDamagePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ResetCoverDamagePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetCoverDamagePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ProcFellOutOfWorld
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ProcFellOutOfWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ProcFellOutOfWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerRessurect
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerRessurect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerRessurect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseRessurect
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseRessurect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseRessurect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCameraMode                       Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCameraMode(EPlayerCameraMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCameraMode");

	Params::RSBattlePlayer_C_SetPlayerCameraMode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCameraMode                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPlayerCameraMode ARSBattlePlayer_C::GetPlayerCameraMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerCameraMode");

	Params::RSBattlePlayer_C_GetPlayerCameraMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraViewTarget
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCameraViewTarget(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCameraViewTarget");

	Params::RSBattlePlayer_C_SetPlayerCameraViewTarget Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraFieldOfView
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCameraFieldOfView(float FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCameraFieldOfView");

	Params::RSBattlePlayer_C_SetPlayerCameraFieldOfView Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraFieldOfView
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetPlayerCameraFieldOfView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerCameraFieldOfView");

	Params::RSBattlePlayer_C_GetPlayerCameraFieldOfView Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCameraLocation(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCameraLocation");

	Params::RSBattlePlayer_C_SetPlayerCameraLocation Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattlePlayer_C::GetPlayerCameraLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerCameraLocation");

	Params::RSBattlePlayer_C_GetPlayerCameraLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraRotation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rot                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCameraRotation(const struct FRotator& Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCameraRotation");

	Params::RSBattlePlayer_C_SetPlayerCameraRotation Parms{};

	Parms.Rot = std::move(Rot);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraRotation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ARSBattlePlayer_C::GetPlayerCameraRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerCameraRotation");

	Params::RSBattlePlayer_C_GetPlayerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCameraDirection
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCameraDirection(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCameraDirection");

	Params::RSBattlePlayer_C_SetPlayerCameraDirection Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerCameraDirection
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattlePlayer_C::GetPlayerCameraDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerCameraDirection");

	Params::RSBattlePlayer_C_GetPlayerCameraDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMeshFitGroundCheckLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckHeight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetMeshFitGroundCheckLocation(struct FVector* Location, float* CheckHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMeshFitGroundCheckLocation");

	Params::RSBattlePlayer_C_GetMeshFitGroundCheckLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (CheckHeight != nullptr)
		*CheckHeight = Parms.CheckHeight;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttackLongPress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInAerial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnInputTriggerAttackLongPress(bool bInAerial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerAttackLongPress");

	Params::RSBattlePlayer_C_OnInputTriggerAttackLongPress Parms{};

	Parms.bInAerial = bInAerial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateDriveHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnUpdateDriveHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnUpdateDriveHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerBackStepAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerBackStepAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerBackStepAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseBackStepAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseBackStepAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseBackStepAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DamageBefore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IgnoreAutoSasMetal                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DamageBefore(bool IgnoreAutoSasMetal, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DamageBefore");

	Params::RSBattlePlayer_C_DamageBefore Parms{};

	Parms.IgnoreAutoSasMetal = IgnoreAutoSasMetal;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SubHardenTime
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SubTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SubHardenTime(float SubTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SubHardenTime");

	Params::RSBattlePlayer_C_SubHardenTime Parms{};

	Parms.SubTime = SubTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetHardenParameter
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RateMin                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RateMax                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SubTimeMin                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SubTimeMax                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetHardenParameter(float* RateMin, float* RateMax, float* SubTimeMin, float* SubTimeMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetHardenParameter");

	Params::RSBattlePlayer_C_GetHardenParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RateMin != nullptr)
		*RateMin = Parms.RateMin;

	if (RateMax != nullptr)
		*RateMax = Parms.RateMax;

	if (SubTimeMin != nullptr)
		*SubTimeMin = Parms.SubTimeMin;

	if (SubTimeMax != nullptr)
		*SubTimeMax = Parms.SubTimeMax;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAutoStealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckAutoStealth(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAutoStealth");

	Params::RSBattlePlayer_C_CheckAutoStealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugDrawStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TraceLandCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CheckHeight                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLand                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LandHeight                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::TraceLandCheck(float CheckHeight, bool* bLand, float* LandHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TraceLandCheck");

	Params::RSBattlePlayer_C_TraceLandCheck Parms{};

	Parms.CheckHeight = CheckHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (bLand != nullptr)
		*bLand = Parms.bLand;

	if (LandHeight != nullptr)
		*LandHeight = Parms.LandHeight;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugGetObjectAnimationName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             AnimationName                                          (Parm, OutParm)

void ARSBattlePlayer_C::DebugGetObjectAnimationName(class FText* AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugGetObjectAnimationName");

	Params::RSBattlePlayer_C_DebugGetObjectAnimationName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimationName != nullptr)
		*AnimationName = std::move(Parms.AnimationName);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerSASHologramAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerSASHologramAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerSASHologramAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.RegisterCurrentAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAttackComponentBaseBP_C*         AttackComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::RegisterCurrentAttack(class UAttackComponentBaseBP_C* AttackComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RegisterCurrentAttack");

	Params::RSBattlePlayer_C_RegisterCurrentAttack Parms{};

	Parms.AttackComp = AttackComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnregisterCurrentAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAttackComponentBaseBP_C*         AttackComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UnregisterCurrentAttack(class UAttackComponentBaseBP_C* AttackComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnregisterCurrentAttack");

	Params::RSBattlePlayer_C_UnregisterCurrentAttack Parms{};

	Parms.AttackComp = AttackComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetWeakNumber
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ARSBattlePlayer_C::GetWeakNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetWeakNumber");

	Params::RSBattlePlayer_C_GetWeakNumber Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoEventStart");

	Params::RSBattlePlayer_C_DoEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoEventEnd");

	Params::RSBattlePlayer_C_DoEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoStaticEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoStaticEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoStaticEventStart");

	Params::RSBattlePlayer_C_DoStaticEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoStaticEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoStaticEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoStaticEventEnd");

	Params::RSBattlePlayer_C_DoStaticEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoDynamicEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoDynamicEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoDynamicEventStart");

	Params::RSBattlePlayer_C_DoDynamicEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoDynamicEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoDynamicEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoDynamicEventEnd");

	Params::RSBattlePlayer_C_DoDynamicEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ApplySkill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ApplySkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ApplySkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoApplySkill
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoApplySkill(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoApplySkill");

	Params::RSBattlePlayer_C_DoApplySkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveBrainField
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldMoveBrainField(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldMoveBrainField");

	Params::RSBattlePlayer_C_OnBrainFieldMoveBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveNormalField
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldMoveNormalField(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldMoveNormalField");

	Params::RSBattlePlayer_C_OnBrainFieldMoveNormalField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldOpenEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldOpenEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldOpenEnd");

	Params::RSBattlePlayer_C_OnBrainFieldOpenEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldCloseStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldCloseStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldCloseStart");

	Params::RSBattlePlayer_C_OnBrainFieldCloseStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawENPCMotionInfo
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugDrawENPCMotionInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawENPCMotionInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawMotionInfoCore
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugDrawMotionInfoCore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawMotionInfoCore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawPosition
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugDrawPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoBattleSequencerStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSetEnemyEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoBattleSequencerStart(bool bSetEnemyEvent, bool bDriveSequence, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoBattleSequencerStart");

	Params::RSBattlePlayer_C_DoBattleSequencerStart Parms{};

	Parms.bSetEnemyEvent = bSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoBattleSequencerEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSetEnemyEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoBattleSequencerEnd(bool bSetEnemyEvent, bool bDriveSequence, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoBattleSequencerEnd");

	Params::RSBattlePlayer_C_DoBattleSequencerEnd Parms{};

	Parms.bSetEnemyEvent = bSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateCameraDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_UseDither                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CameraDither                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UpdateCameraDither(float DeltaSeconds, bool Param_UseDither, float* CameraDither)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateCameraDither");

	Params::RSBattlePlayer_C_UpdateCameraDither Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Param_UseDither = Param_UseDither;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraDither != nullptr)
		*CameraDither = Parms.CameraDither;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCameraDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SetDitherValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCameraDither(float SetDitherValue, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCameraDither");

	Params::RSBattlePlayer_C_SetCameraDither Parms{};

	Parms.SetDitherValue = SetDitherValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindDispathers
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindDispathers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindDispathers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeAreaLoadStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChangeAreaStatus                       Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsChangeLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangeAreaLoadStatus(EChangeAreaStatus Status, bool bIsChangeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeAreaLoadStatus");

	Params::RSBattlePlayer_C_OnChangeAreaLoadStatus Parms{};

	Parms.Status = Status;
	Parms.bIsChangeLocation = bIsChangeLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AreaChangeBegin
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AreaChangeBegin(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AreaChangeBegin");

	Params::RSBattlePlayer_C_AreaChangeBegin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AreaChangeEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AreaChangeEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AreaChangeEnd");

	Params::RSBattlePlayer_C_AreaChangeEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTimerPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPause                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetTimerPause(bool bPause, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTimerPause");

	Params::RSBattlePlayer_C_SetTimerPause Parms{};

	Parms.bPause = bPause;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoTimerPause
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPause                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoTimerPause(bool bPause, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoTimerPause");

	Params::RSBattlePlayer_C_DoTimerPause Parms{};

	Parms.bPause = bPause;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnterActionState
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionKind                       NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnterActionState(EPlayerActionKind NewState, int32 Param, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnterActionState");

	Params::RSBattlePlayer_C_OnEnterActionState Parms{};

	Parms.NewState = NewState;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnterUpperActionState
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerUpperActionKind                  NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnterUpperActionState(EPlayerUpperActionKind NewState, int32 Param, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnterUpperActionState");

	Params::RSBattlePlayer_C_OnEnterUpperActionState Parms{};

	Parms.NewState = NewState;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginPsychicDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginPsychicDither(class FName ParameterName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginPsychicDither");

	Params::RSBattlePlayer_C_BeginPsychicDither Parms{};

	Parms.ParameterName = ParameterName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndPsychicDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoInterp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndPsychicDither(bool bNoInterp, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndPsychicDither");

	Params::RSBattlePlayer_C_EndPsychicDither Parms{};

	Parms.bNoInterp = bNoInterp;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdatePsychicDither
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::UpdatePsychicDither(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdatePsychicDither");

	Params::RSBattlePlayer_C_UpdatePsychicDither Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginDriveSequence
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginDriveSequence(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginDriveSequence");

	Params::RSBattlePlayer_C_BeginDriveSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndDriveSequence
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndDriveSequence(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndDriveSequence");

	Params::RSBattlePlayer_C_EndDriveSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangedBondsLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               TargetID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewLevel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangedBondsLevel(EPlayerID TargetID, int32 NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangedBondsLevel");

	Params::RSBattlePlayer_C_OnChangedBondsLevel Parms{};

	Parms.TargetID = TargetID;
	Parms.NewLevel = NewLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSeeThroughSetting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetSeeThroughSetting(bool bEnable, class FName ClaimantName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSeeThroughSetting");

	Params::RSBattlePlayer_C_SetSeeThroughSetting Parms{};

	Parms.bEnable = bEnable;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerSASAllOff
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerSASAllOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerSASAllOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoHPEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewHP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PrevHP                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoHPEvent(int32 NewHP, int32 PrevHP, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoHPEvent");

	Params::RSBattlePlayer_C_DoHPEvent Parms{};

	Parms.NewHP = NewHP;
	Parms.PrevHP = PrevHP;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEquipSAS
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASButton                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SASKindNative                         Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnEquipSAS(E_SASButton Button, E_SASKindNative Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEquipSAS");

	Params::RSBattlePlayer_C_OnEquipSAS Parms{};

	Parms.Button = Button;
	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SASCancelAll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCancelCost                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SASCancelAll(bool bCancelCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SASCancelAll");

	Params::RSBattlePlayer_C_SASCancelAll Parms{};

	Parms.bCancelCost = bCancelCost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDriveGaugeMax
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENotifyDriveEvent                       Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnDriveGaugeMax(ENotifyDriveEvent Reason, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDriveGaugeMax");

	Params::RSBattlePlayer_C_OnDriveGaugeMax Parms{};

	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RegisterInVisionFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::RegisterInVisionFog(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RegisterInVisionFog");

	Params::RSBattlePlayer_C_RegisterInVisionFog Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UnregisterInVisionFog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UnregisterInVisionFog(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UnregisterInVisionFog");

	Params::RSBattlePlayer_C_UnregisterInVisionFog Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeWireNeon
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeWireNeon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeWireNeon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetWireNeon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWireNeonPlayerState                    NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetWireNeon(EWireNeonPlayerState NewState, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetWireNeon");

	Params::RSBattlePlayer_C_SetWireNeon Parms{};

	Parms.NewState = NewState;
	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeBattleParticle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeBattleParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeBattleParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleParticleColor
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFPlayerBattleParticleData       Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetBattleParticleColor(struct FFPlayerBattleParticleData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBattleParticleColor");

	Params::RSBattlePlayer_C_SetBattleParticleColor Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAnimNotifyCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ConditionNo                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetAnimNotifyCondition(int32 ConditionNo, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAnimNotifyCondition");

	Params::RSBattlePlayer_C_GetAnimNotifyCondition Parms{};

	Parms.ConditionNo = ConditionNo;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SpawnForceBrainTalkModeParticle
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SpawnForceBrainTalkModeParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SpawnForceBrainTalkModeParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DestroyForceBrainTalkModeParticle
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DestroyForceBrainTalkModeParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DestroyForceBrainTalkModeParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCapsuleSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCapsuleSize                      Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetPlayerCapsuleSize(EPlayerCapsuleSize Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCapsuleSize");

	Params::RSBattlePlayer_C_SetPlayerCapsuleSize Parms{};

	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DeactivateBattleParticle
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DeactivateBattleParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DeactivateBattleParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DelayDeactivateBattleParticle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::DelayDeactivateBattleParticle(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DelayDeactivateBattleParticle");

	Params::RSBattlePlayer_C_DelayDeactivateBattleParticle Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeDriveParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeDriveParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeDriveParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoTalkEventEnd
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoTalkEventEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoTalkEventEnd");

	Params::RSBattlePlayer_C_DoTalkEventEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldOpenStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldOpenStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldOpenStart");

	Params::RSBattlePlayer_C_OnBrainFieldOpenStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputTriggerAssassinAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InputTriggerAssassinAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputTriggerAssassinAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetActiveSASNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Num                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetActiveSASNum(int32* Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetActiveSASNum");

	Params::RSBattlePlayer_C_GetActiveSASNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Num != nullptr)
		*Num = Parms.Num;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnDriveNotifyBrainFieldStock
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InNum                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bItemUse                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNoEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnDriveNotifyBrainFieldStock(int32 InNum, bool bItemUse, bool bNoEffect, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnDriveNotifyBrainFieldStock");

	Params::RSBattlePlayer_C_OnDriveNotifyBrainFieldStock Parms{};

	Parms.InNum = InNum;
	Parms.bItemUse = bItemUse;
	Parms.bNoEffect = bNoEffect;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventSprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEventSprint(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventSprint");

	Params::RSBattlePlayer_C_SetEventSprint Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerItemSelect
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnInputTriggerItemSelect(bool bRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerItemSelect");

	Params::RSBattlePlayer_C_OnInputTriggerItemSelect Parms{};

	Parms.bRight = bRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerItemSelectLeft
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerItemSelectLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerItemSelectLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerItemSelectRight
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerItemSelectRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerItemSelectRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerPsychicField
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerPsychicField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerPsychicField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleasePsychicField
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleasePsychicField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleasePsychicField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnPossesController
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Param_Controller                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnPossesController(class AController* Param_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnPossesController");

	Params::RSBattlePlayer_C_OnPossesController Parms{};

	Parms.Param_Controller = Param_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnUnpossesController
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Param_Controller                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnUnpossesController(class AController* Param_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnUnpossesController");

	Params::RSBattlePlayer_C_OnUnpossesController Parms{};

	Parms.Param_Controller = Param_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAreaChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bChangeLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAreaChange(bool bChangeLocation, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAreaChange");

	Params::RSBattlePlayer_C_OnAreaChange Parms{};

	Parms.bChangeLocation = bChangeLocation;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeDataTable
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeDataTable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCapsuleCollisionPreset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNpc                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCapsuleCollisionPreset(bool bNpc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCapsuleCollisionPreset");

	Params::RSBattlePlayer_C_SetCapsuleCollisionPreset Parms{};

	Parms.bNpc = bNpc;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveBrainFieldOther
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFriendField                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldMoveBrainFieldOther(bool bFriendField, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldMoveBrainFieldOther");

	Params::RSBattlePlayer_C_OnBrainFieldMoveBrainFieldOther Parms{};

	Parms.bFriendField = bFriendField;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBrainFieldMoveNormalFieldOther
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFriendField                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBrainFieldMoveNormalFieldOther(bool bFriendField, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBrainFieldMoveNormalFieldOther");

	Params::RSBattlePlayer_C_OnBrainFieldMoveNormalFieldOther Parms{};

	Parms.bFriendField = bFriendField;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAsyncParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetAsyncParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAsyncParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBrainCrashDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetBrainCrashDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBrainCrashDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateAttachment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateAttachment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateAttachment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EventRevivePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::EventRevivePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EventRevivePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AfterInitialize
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::AfterInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AfterInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveBegin_RotateTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEasingFunc                             EaseType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EaseBlendExp                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AttackMoveBegin_RotateTarget(float Distance, float Time, EEasingFunc EaseType, float EaseBlendExp, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttackMoveBegin_RotateTarget");

	Params::RSBattlePlayer_C_AttackMoveBegin_RotateTarget Parms{};

	Parms.Distance = Distance;
	Parms.Time = Time;
	Parms.EaseType = EaseType;
	Parms.EaseBlendExp = EaseBlendExp;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveUpdate_RotateCircle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AttackMoveUpdate_RotateCircle(float DeltaSeconds, bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttackMoveUpdate_RotateCircle");

	Params::RSBattlePlayer_C_AttackMoveUpdate_RotateCircle Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateIconOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBadStateAddParticleData         Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystemComponent*         Handle                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BadStateIconOn(const struct FBadStateAddParticleData& Data, class UParticleSystemComponent** Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateIconOn");

	Params::RSBattlePlayer_C_BadStateIconOn Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSetStealthMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStealth                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnSetStealthMode(bool bStealth, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSetStealthMode");

	Params::RSBattlePlayer_C_OnSetStealthMode Parms{};

	Parms.bStealth = bStealth;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnFlame
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectOnFlame(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectOnFlame");

	Params::RSBattlePlayer_C_BadStateEffectOnFlame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectOnElec
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectOnElec(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectOnElec");

	Params::RSBattlePlayer_C_BadStateEffectOnElec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAreaChangeFadeOut
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bChangeLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAreaChangeFadeOut(bool bChangeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAreaChangeFadeOut");

	Params::RSBattlePlayer_C_OnAreaChangeFadeOut Parms{};

	Parms.bChangeLocation = bChangeLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindSASStartEventForENPC
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BindSASStartEventForENPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindSASStartEventForENPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartENPCSAS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               SAS_PlayerID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::StartENPCSAS(EPlayerID SAS_PlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartENPCSAS");

	Params::RSBattlePlayer_C_StartENPCSAS Parms{};

	Parms.SAS_PlayerID = SAS_PlayerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ChangeWeaponMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WeaponId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkinID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ChangeWeaponMesh(int32 WeaponId, int32 SkinID, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ChangeWeaponMesh");

	Params::RSBattlePlayer_C_ChangeWeaponMesh Parms{};

	Parms.WeaponId = WeaponId;
	Parms.SkinID = SkinID;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeContentsOpen
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeContentsOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeContentsOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnContentsOpen
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EContentsOpening                        Contents                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOpen                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnContentsOpen(EContentsOpening Contents, bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnContentsOpen");

	Params::RSBattlePlayer_C_OnContentsOpen Parms{};

	Parms.Contents = Contents;
	Parms.bOpen = bOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetPlayerActionState
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ResetPlayerActionState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetPlayerActionState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveBegin_ToTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MoveTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           MoveTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AttackMoveBegin_ToTarget(float MoveTime, class AActor* MoveTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttackMoveBegin_ToTarget");

	Params::RSBattlePlayer_C_AttackMoveBegin_ToTarget Parms{};

	Parms.MoveTime = MoveTime;
	Parms.MoveTarget = MoveTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttackMoveUpdate_ToTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAerial                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AttackMoveUpdate_ToTarget(float DeltaSeconds, bool bAerial, bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttackMoveUpdate_ToTarget");

	Params::RSBattlePlayer_C_AttackMoveUpdate_ToTarget Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.bAerial = bAerial;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearAttackMoveParam
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ClearAttackMoveParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearAttackMoveParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCheckChargeTelepo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCheck                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCheckChargeTelepo(bool bCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCheckChargeTelepo");

	Params::RSBattlePlayer_C_SetCheckChargeTelepo Parms{};

	Parms.bCheck = bCheck;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerSuperArmor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetPlayerSuperArmor(bool bON, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerSuperArmor");

	Params::RSBattlePlayer_C_SetPlayerSuperArmor Parms{};

	Parms.bON = bON;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDummyTest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetDummyTest(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDummyTest");

	Params::RSBattlePlayer_C_GetDummyTest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Is Unique Effective Sas
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AttackActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEffectiveSas                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   WinceRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   KnockBackRate                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DownRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CrashRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Is_Unique_Effective_Sas(class AActor* AttackActor, bool* IsEffectiveSas, float* WinceRate, float* KnockBackRate, float* DownRate, float* CrashRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Is Unique Effective Sas");

	Params::RSBattlePlayer_C_Is_Unique_Effective_Sas Parms{};

	Parms.AttackActor = AttackActor;

	UObject::ProcessEvent(Func, &Parms);

	if (IsEffectiveSas != nullptr)
		*IsEffectiveSas = Parms.IsEffectiveSas;

	if (WinceRate != nullptr)
		*WinceRate = Parms.WinceRate;

	if (KnockBackRate != nullptr)
		*KnockBackRate = Parms.KnockBackRate;

	if (DownRate != nullptr)
		*DownRate = Parms.DownRate;

	if (CrashRate != nullptr)
		*CrashRate = Parms.CrashRate;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangedInputDevice
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSInputDeviceType                      Device                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangedInputDevice(ERSInputDeviceType Device)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangedInputDevice");

	Params::RSBattlePlayer_C_OnChangedInputDevice Parms{};

	Parms.Device = Device;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndDriveMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInterruption                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLocationChange                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndDriveMode(bool bInterruption, bool bLocationChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndDriveMode");

	Params::RSBattlePlayer_C_EndDriveMode Parms{};

	Parms.bInterruption = bInterruption;
	Parms.bLocationChange = bLocationChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckTelepoDodge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTelepo                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckTelepoDodge(bool* bTelepo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckTelepoDodge");

	Params::RSBattlePlayer_C_CheckTelepoDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTelepo != nullptr)
		*bTelepo = Parms.bTelepo;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBodyMaterialScalarParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ParameterValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetBodyMaterialScalarParameter(class FName ParameterName, float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBodyMaterialScalarParameter");

	Params::RSBattlePlayer_C_SetBodyMaterialScalarParameter Parms{};

	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBrainCrashReceive
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetBrainCrashReceive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBrainCrashReceive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ParameterApplyDrive
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ParameterApplyDrive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ParameterApplyDrive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAccessoryInvincibleDamageAfter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetAccessoryInvincibleDamageAfter(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAccessoryInvincibleDamageAfter");

	Params::RSBattlePlayer_C_SetAccessoryInvincibleDamageAfter Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateAccessoryInvalidDamageAfter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UpdateAccessoryInvalidDamageAfter(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateAccessoryInvalidDamageAfter");

	Params::RSBattlePlayer_C_UpdateAccessoryInvalidDamageAfter Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeParameterFromPlayerInfo
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeParameterFromPlayerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeParameterFromPlayerInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckEmphasisCrashGauge
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckEmphasisCrashGauge(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckEmphasisCrashGauge");

	Params::RSBattlePlayer_C_CheckEmphasisCrashGauge Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AjitoSetting
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInAjito                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AjitoSetting(bool bInAjito)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AjitoSetting");

	Params::RSBattlePlayer_C_AjitoSetting Parms{};

	Parms.bInAjito = bInAjito;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugBattleParticleClaimantListOutput
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::DebugBattleParticleClaimantListOutput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugBattleParticleClaimantListOutput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetExecNpcRevive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bExec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetExecNpcRevive(bool bExec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetExecNpcRevive");

	Params::RSBattlePlayer_C_SetExecNpcRevive Parms{};

	Parms.bExec = bExec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetInvalidKeepOut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInvalid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetInvalidKeepOut(bool IsInvalid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetInvalidKeepOut");

	Params::RSBattlePlayer_C_SetInvalidKeepOut Parms{};

	Parms.IsInvalid = IsInvalid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlaySoundBattleVoice
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerBattleVoiceType                  Voice                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::PlaySoundBattleVoice(EPlayerBattleVoiceType Voice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlaySoundBattleVoice");

	Params::RSBattlePlayer_C_PlaySoundBattleVoice Parms{};

	Parms.Voice = Voice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayBattleStartVoice
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::PlayBattleStartVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayBattleStartVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainTalkAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTalk                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBrainTalkAble(bool* bTalk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainTalkAble");

	Params::RSBattlePlayer_C_IsBrainTalkAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTalk != nullptr)
		*bTalk = Parms.bTalk;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoDynamicEventBeforeBindCharacter
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoDynamicEventBeforeBindCharacter(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoDynamicEventBeforeBindCharacter");

	Params::RSBattlePlayer_C_DoDynamicEventBeforeBindCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequencerStart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSetEnemyEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::BattleSequencerStart(bool IsSetEnemyEvent, bool bDriveSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BattleSequencerStart");

	Params::RSBattlePlayer_C_BattleSequencerStart Parms{};

	Parms.IsSetEnemyEvent = IsSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DoTalkEventStart
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DoTalkEventStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DoTalkEventStart");

	Params::RSBattlePlayer_C_DoTalkEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayPsychicComboCaptureSE
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PlayPsychicComboCaptureSE(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayPsychicComboCaptureSE");

	Params::RSBattlePlayer_C_PlayPsychicComboCaptureSE Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StopPsychicComboCaptureSE
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StopPsychicComboCaptureSE(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StopPsychicComboCaptureSE");

	Params::RSBattlePlayer_C_StopPsychicComboCaptureSE Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ChangeCostumeMesh
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CostumeItemID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ChangeCostumeMesh(int32 CostumeItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ChangeCostumeMesh");

	Params::RSBattlePlayer_C_ChangeCostumeMesh Parms{};

	Parms.CostumeItemID = CostumeItemID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Is Accumulating Attacks
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Is_Accumulating_Attacks(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Is Accumulating Attacks");

	Params::RSBattlePlayer_C_Is_Accumulating_Attacks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAsyncCopyParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCheckCopy                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Right                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Left                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetAsyncCopyParameter(bool* bCheckCopy, struct FVector* Right, struct FVector* Left)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAsyncCopyParameter");

	Params::RSBattlePlayer_C_GetAsyncCopyParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCheckCopy != nullptr)
		*bCheckCopy = Parms.bCheckCopy;

	if (Right != nullptr)
		*Right = std::move(Parms.Right);

	if (Left != nullptr)
		*Left = std::move(Parms.Left);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDelayDeath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetDelayDeath(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDelayDeath");

	Params::RSBattlePlayer_C_SetDelayDeath Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDamageCollisionInvincible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInvincible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetDamageCollisionInvincible(bool bInvincible, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDamageCollisionInvincible");

	Params::RSBattlePlayer_C_SetDamageCollisionInvincible Parms{};

	Parms.bInvincible = bInvincible;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeSasSeeThroughCutIn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeSasSeeThroughCutIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeSasSeeThroughCutIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetGameOverVoiceData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VoiceNo                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    VoiceData                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetGameOverVoiceData(int32 VoiceNo, class USoundAtomCue** VoiceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetGameOverVoiceData");

	Params::RSBattlePlayer_C_GetGameOverVoiceData Parms{};

	Parms.VoiceNo = VoiceNo;

	UObject::ProcessEvent(Func, &Parms);

	if (VoiceData != nullptr)
		*VoiceData = Parms.VoiceData;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnpcDyingEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::EnpcDyingEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnpcDyingEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.FallInsureProc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::FallInsureProc(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FallInsureProc");

	Params::RSBattlePlayer_C_FallInsureProc Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PreTickInput
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::PreTickInput(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PreTickInput");

	Params::RSBattlePlayer_C_PreTickInput Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttackMove_AerialTargetLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MoveLocation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::AttackMove_AerialTargetLocation(struct FVector* MoveLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttackMove_AerialTargetLocation");

	Params::RSBattlePlayer_C_AttackMove_AerialTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MoveLocation != nullptr)
		*MoveLocation = std::move(Parms.MoveLocation);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeSasEquipStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESASEquipStatus                         Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnChangeSasEquipStatus(E_SASKindNative Kind, ESASEquipStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeSasEquipStatus");

	Params::RSBattlePlayer_C_OnChangeSasEquipStatus Parms{};

	Parms.Kind = Kind;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ApplySASEffectPassive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ApplySASEffectPassive(E_SASKindNative Kind, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ApplySASEffectPassive");

	Params::RSBattlePlayer_C_ApplySASEffectPassive Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ApplySASEffectPassiveAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLinkAbleOnly                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ApplySASEffectPassiveAll(bool bLinkAbleOnly, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ApplySASEffectPassiveAll");

	Params::RSBattlePlayer_C_ApplySASEffectPassiveAll Parms{};

	Parms.bLinkAbleOnly = bLinkAbleOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ApplySASEffectActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bActivate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ApplySASEffectActive(E_SASKindNative Kind, bool bActivate, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ApplySASEffectActive");

	Params::RSBattlePlayer_C_ApplySASEffectActive Parms{};

	Parms.Kind = Kind;
	Parms.bActivate = bActivate;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializePreAssetLoad
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializePreAssetLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializePreAssetLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginBattleField
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnBeginBattleField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBeginBattleField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PsychicComboResetTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::PsychicComboResetTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PsychicComboResetTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TickPsychicComboResetTimer
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::TickPsychicComboResetTimer(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TickPsychicComboResetTimer");

	Params::RSBattlePlayer_C_TickPsychicComboResetTimer Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyPlayerBattle
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bUseBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnemyPlayerBattle(bool bBattle, bool bUseBrainField, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnemyPlayerBattle");

	Params::RSBattlePlayer_C_OnEnemyPlayerBattle Parms{};

	Parms.bBattle = bBattle;
	Parms.bUseBrainField = bUseBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTutorialMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTutorial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetTutorialMode(bool bTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTutorialMode");

	Params::RSBattlePlayer_C_SetTutorialMode Parms{};

	Parms.bTutorial = bTutorial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTutorialRestictPsychic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRestrict                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetTutorialRestictPsychic(bool bRestrict)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTutorialRestictPsychic");

	Params::RSBattlePlayer_C_SetTutorialRestictPsychic Parms{};

	Parms.bRestrict = bRestrict;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTutorialRestictAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRestrict                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetTutorialRestictAttack(bool bRestrict)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTutorialRestictAttack");

	Params::RSBattlePlayer_C_SetTutorialRestictAttack Parms{};

	Parms.bRestrict = bRestrict;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.WaitLastKarenEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWait                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::WaitLastKarenEvent(bool bWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "WaitLastKarenEvent");

	Params::RSBattlePlayer_C_WaitLastKarenEvent Parms{};

	Parms.bWait = bWait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableLastKarenEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableLastKarenEvent(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableLastKarenEvent");

	Params::RSBattlePlayer_C_IsEnableLastKarenEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerLockChangeLeft
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerLockChangeLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerLockChangeLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerLockChangeRight
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerLockChangeRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerLockChangeRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequenceBadStatusEffectOff
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BattleSequenceBadStatusEffectOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BattleSequenceBadStatusEffectOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequenceEndBadStatusEffectOn
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BattleSequenceEndBadStatusEffectOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BattleSequenceEndBadStatusEffectOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UniqueAttackHitEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::UniqueAttackHitEffect(struct FHCHitResult& HitResult, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UniqueAttackHitEffect");

	Params::RSBattlePlayer_C_UniqueAttackHitEffect Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	HitResult = std::move(Parms.HitResult);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateParameter
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharactersParameterTable        Table                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ARSBattlePlayer_C::OnUpdateParameter(struct FCharactersParameterTable& Table)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnUpdateParameter");

	Params::RSBattlePlayer_C_OnUpdateParameter Parms{};

	Parms.Table = std::move(Table);

	UObject::ProcessEvent(Func, &Parms);

	Table = std::move(Parms.Table);
}


// Function RSBattlePlayer.RSBattlePlayer_C.MeshFitGround
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AngleLimit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEndFit                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::MeshFitGround(float InterpSpeed, float AngleLimit, bool bEndFit, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "MeshFitGround");

	Params::RSBattlePlayer_C_MeshFitGround Parms{};

	Parms.InterpSpeed = InterpSpeed;
	Parms.AngleLimit = AngleLimit;
	Parms.bEndFit = bEndFit;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CancelMeshFitGround
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CancelMeshFitGround(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CancelMeshFitGround");

	Params::RSBattlePlayer_C_CancelMeshFitGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.TickJustDodgeAttackSlow
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::TickJustDodgeAttackSlow(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TickJustDodgeAttackSlow");

	Params::RSBattlePlayer_C_TickJustDodgeAttackSlow Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginJustDodgeAttackSlow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWeaponAttack                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCutIn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SlowTimeDilation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SlowTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BeginJustDodgeAttackSlow(bool bWeaponAttack, bool bCutIn, float SlowTimeDilation, float SlowTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginJustDodgeAttackSlow");

	Params::RSBattlePlayer_C_BeginJustDodgeAttackSlow Parms{};

	Parms.bWeaponAttack = bWeaponAttack;
	Parms.bCutIn = bCutIn;
	Parms.SlowTimeDilation = SlowTimeDilation;
	Parms.SlowTime = SlowTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndJustDodgeAttackSlow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::EndJustDodgeAttackSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndJustDodgeAttackSlow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.JustDodgeAttackSlowWeaponAttackSetting
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::JustDodgeAttackSlowWeaponAttackSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "JustDodgeAttackSlowWeaponAttackSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetActorAllTickEnabled
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetActorAllTickEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetActorAllTickEnabled");

	Params::RSBattlePlayer_C_SetActorAllTickEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.FinishBattleStartTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::FinishBattleStartTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FinishBattleStartTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetNoCollisionAndStopAiFade
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoColAndStopAi                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetNoCollisionAndStopAiFade(bool bNoColAndStopAi, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetNoCollisionAndStopAiFade");

	Params::RSBattlePlayer_C_SetNoCollisionAndStopAiFade Parms{};

	Parms.bNoColAndStopAi = bNoColAndStopAi;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcAccumulationByAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RefWince                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefKnockback                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefDown                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefLaunch                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlame                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefElectric                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefFlooded                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefOil                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefConfusion                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashScale                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RefCrashCapCheckRate                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DefenseActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EHCSkillAttackType                      AttackType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCopyActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHCSkillCommonInfo               SkillInfo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CalcAccumulationByAttack(float& RefWince, float& RefKnockback, float& RefDown, float& RefLaunch, float& RefFlame, float& RefElectric, float& RefFlooded, float& RefOil, float& RefConfusion, float& RefCrashScale, float& RefCrashCapCheckRate, class AActor* DefenseActor, EHCSkillAttackType AttackType, bool bCopyActor, const struct FHCSkillCommonInfo& SkillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcAccumulationByAttack");

	Params::RSBattlePlayer_C_CalcAccumulationByAttack Parms{};

	Parms.RefWince = RefWince;
	Parms.RefKnockback = RefKnockback;
	Parms.RefDown = RefDown;
	Parms.RefLaunch = RefLaunch;
	Parms.RefFlame = RefFlame;
	Parms.RefElectric = RefElectric;
	Parms.RefFlooded = RefFlooded;
	Parms.RefOil = RefOil;
	Parms.RefConfusion = RefConfusion;
	Parms.RefCrashScale = RefCrashScale;
	Parms.RefCrashCapCheckRate = RefCrashCapCheckRate;
	Parms.DefenseActor = DefenseActor;
	Parms.AttackType = AttackType;
	Parms.bCopyActor = bCopyActor;
	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	RefWince = Parms.RefWince;
	RefKnockback = Parms.RefKnockback;
	RefDown = Parms.RefDown;
	RefLaunch = Parms.RefLaunch;
	RefFlame = Parms.RefFlame;
	RefElectric = Parms.RefElectric;
	RefFlooded = Parms.RefFlooded;
	RefOil = Parms.RefOil;
	RefConfusion = Parms.RefConfusion;
	RefCrashScale = Parms.RefCrashScale;
	RefCrashCapCheckRate = Parms.RefCrashCapCheckRate;

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.FrameDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Sec                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::FrameDamage(float Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FrameDamage");

	Params::RSBattlePlayer_C_FrameDamage Parms{};

	Parms.Sec = Sec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayVibrationByDamageReaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerDamageKind                       DamageKind                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::PlayVibrationByDamageReaction(EPlayerDamageKind DamageKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayVibrationByDamageReaction");

	Params::RSBattlePlayer_C_PlayVibrationByDamageReaction Parms{};

	Parms.DamageKind = DamageKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCharacterMovementPerchRadiusThreshold
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetCharacterMovementPerchRadiusThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCharacterMovementPerchRadiusThreshold");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckNeedItemUse
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConsumeItemID                          ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckNeedItemUse(EConsumeItemID ItemId, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckNeedItemUse");

	Params::RSBattlePlayer_C_CheckNeedItemUse Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerHitEffectPriority
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetPlayerHitEffectPriority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerHitEffectPriority");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBeginUseItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConsumeItemID                          ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsNpc                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnBeginUseItem(EConsumeItemID ItemId, bool bIsNpc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBeginUseItem");

	Params::RSBattlePlayer_C_OnBeginUseItem Parms{};

	Parms.ItemId = ItemId;
	Parms.bIsNpc = bIsNpc;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleDamage3D
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHUDMainGame_C*                   HUD                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Position3D                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCritical                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSasCritical                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBrainCrashCritical                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHeal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWeak                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNoDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARSBattleCharacter_C*             CrushTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CrushBonus                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetBattleDamage3D(class AHUDMainGame_C* HUD, int32 Damage, const struct FVector& Position3D, bool Param_IsPlayer, bool IsCritical, bool IsSasCritical, bool IsBrainCrashCritical, bool IsHeal, bool IsWeak, bool IsNoDamage, class ARSBattleCharacter_C* CrushTarget, int32 CrushBonus, const struct FVector2D& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBattleDamage3D");

	Params::RSBattlePlayer_C_SetBattleDamage3D Parms{};

	Parms.HUD = HUD;
	Parms.Damage = Damage;
	Parms.Position3D = std::move(Position3D);
	Parms.Param_IsPlayer = Param_IsPlayer;
	Parms.IsCritical = IsCritical;
	Parms.IsSasCritical = IsSasCritical;
	Parms.IsBrainCrashCritical = IsBrainCrashCritical;
	Parms.IsHeal = IsHeal;
	Parms.IsWeak = IsWeak;
	Parms.IsNoDamage = IsNoDamage;
	Parms.CrushTarget = CrushTarget;
	Parms.CrushBonus = CrushBonus;
	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ApplyNpcDrive
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ApplyNpcDrive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ApplyNpcDrive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEndDamageCalcArray
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnEndDamageCalcArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEndDamageCalcArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputSasReady
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerInputSASReadyType                ReadyType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnInputSasReady(EPlayerInputSASReadyType ReadyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputSasReady");

	Params::RSBattlePlayer_C_OnInputSasReady Parms{};

	Parms.ReadyType = ReadyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionLeft
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerCombinationVisionLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerCombinationVisionLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionRight
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerCombinationVisionRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerCombinationVisionRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionUp
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerCombinationVisionUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerCombinationVisionUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerCombinationVisionDown
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerCombinationVisionDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerCombinationVisionDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputCombinationVision
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::InputCombinationVision(E_SASKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputCombinationVision");

	Params::RSBattlePlayer_C_InputCombinationVision Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckExecuteNotifyKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharaExecuteNotifyKind                 ExecuteKind                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExecute                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckExecuteNotifyKind(class AActor* Param_Owner, ECharaExecuteNotifyKind ExecuteKind, bool* IsExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckExecuteNotifyKind");

	Params::RSBattlePlayer_C_CheckExecuteNotifyKind Parms{};

	Parms.Param_Owner = Param_Owner;
	Parms.ExecuteKind = ExecuteKind;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExecute != nullptr)
		*IsExecute = Parms.IsExecute;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckCombinationVisionCost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckCombinationVisionCost(E_SASKind Kind, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckCombinationVisionCost");

	Params::RSBattlePlayer_C_CheckCombinationVisionCost Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCombinationVisionCost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Cost                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCombinationVisionCost(E_SASKind Kind, float* Cost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCombinationVisionCost");

	Params::RSBattlePlayer_C_GetCombinationVisionCost Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (Cost != nullptr)
		*Cost = Parms.Cost;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAttractSelf
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckAttractSelf(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAttractSelf");

	Params::RSBattlePlayer_C_CheckAttractSelf Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetNeonNotifyActionFailed
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::SetNeonNotifyActionFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetNeonNotifyActionFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SubCombinationVisionCost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               HologramPlayerID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SubCombinationVisionCost(EPlayerID HologramPlayerID, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SubCombinationVisionCost");

	Params::RSBattlePlayer_C_SubCombinationVisionCost Parms{};

	Parms.HologramPlayerID = HologramPlayerID;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableDispNoDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnableDispNoDamage(bool bEnable, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnableDispNoDamage");

	Params::RSBattlePlayer_C_SetEnableDispNoDamage Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitializeSasStealth
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitializeSasStealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitializeSasStealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestartFootIK
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::RestartFootIK(float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestartFootIK");

	Params::RSBattlePlayer_C_RestartFootIK Parms{};

	Parms.BlendTime = BlendTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDirectAttackWpPrimitive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              OutPrimitive                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetDirectAttackWpPrimitive(class UPrimitiveComponent** OutPrimitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDirectAttackWpPrimitive");

	Params::RSBattlePlayer_C_GetDirectAttackWpPrimitive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutPrimitive != nullptr)
		*OutPrimitive = Parms.OutPrimitive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetHiddenCharacterAttachment
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewHidden                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetHiddenCharacterAttachment(bool NewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetHiddenCharacterAttachment");

	Params::RSBattlePlayer_C_SetHiddenCharacterAttachment Parms{};

	Parms.NewHidden = NewHidden;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableBehaviorTreeByClaimantName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetDisableBehaviorTreeByClaimantName(class FName ClaimantName, bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDisableBehaviorTreeByClaimantName");

	Params::RSBattlePlayer_C_SetDisableBehaviorTreeByClaimantName Parms{};

	Parms.ClaimantName = ClaimantName;
	Parms.bDisable = bDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.StopBehaviorTree
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTickDisable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::StopBehaviorTree(bool bTickDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StopBehaviorTree");

	Params::RSBattlePlayer_C_StopBehaviorTree Parms{};

	Parms.bTickDisable = bTickDisable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestartBehaviorTree
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTickEnable                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::RestartBehaviorTree(bool bTickEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestartBehaviorTree");

	Params::RSBattlePlayer_C_RestartBehaviorTree Parms{};

	Parms.bTickEnable = bTickEnable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttackSub
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerAttackSub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerAttackSub");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerAttackLongPressSub
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInAerial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnInputTriggerAttackLongPressSub(bool bInAerial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerAttackLongPressSub");

	Params::RSBattlePlayer_C_OnInputTriggerAttackLongPressSub Parms{};

	Parms.bInAerial = bInAerial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputReleaseAttackSub
// (Protected, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputReleaseAttackSub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputReleaseAttackSub");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckNoDamagePopUpFromAttacker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoPopUp                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckNoDamagePopUpFromAttacker(bool* bNoPopUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckNoDamagePopUpFromAttacker");

	Params::RSBattlePlayer_C_CheckNoDamagePopUpFromAttacker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNoPopUp != nullptr)
		*bNoPopUp = Parms.bNoPopUp;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearLockTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ClearLockTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearLockTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckLockTargetOutOfBattleField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLockReleased                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckLockTargetOutOfBattleField(bool* bLockReleased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckLockTargetOutOfBattleField");

	Params::RSBattlePlayer_C_CheckLockTargetOutOfBattleField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLockReleased != nullptr)
		*bLockReleased = Parms.bLockReleased;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckNpcDrive_EnpcDamageReaction
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::CheckNpcDrive_EnpcDamageReaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckNpcDrive_EnpcDamageReaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetUseDirectionControlForAI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUse                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetUseDirectionControlForAI(bool bUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetUseDirectionControlForAI");

	Params::RSBattlePlayer_C_SetUseDirectionControlForAI Parms{};

	Parms.bUse = bUse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginManageCheckFall
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BeginManageCheckFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginManageCheckFall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndManageCheckFall
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::EndManageCheckFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndManageCheckFall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateWeaponVisibilityForEventEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateWeaponVisibilityForEventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateWeaponVisibilityForEventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EventManagerEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestoreEnableTick                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RestoreVisibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EventManagerEnd(bool RestoreEnableTick, bool RestoreVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EventManagerEnd");

	Params::RSBattlePlayer_C_EventManagerEnd Parms{};

	Parms.RestoreEnableTick = RestoreEnableTick;
	Parms.RestoreVisibility = RestoreVisibility;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPsychicFieldDamageRateToBoss
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPsychicFieldDamageRateToBoss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPsychicFieldDamageRateToBoss");

	Params::RSBattlePlayer_C_IsPsychicFieldDamageRateToBoss Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ChargeSASRemainTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ChargeRate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ChargeSASRemainTime(float ChargeRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ChargeSASRemainTime");

	Params::RSBattlePlayer_C_ChargeSASRemainTime Parms{};

	Parms.ChargeRate = ChargeRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetStopEndDriveMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FlagIn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetStopEndDriveMode(bool FlagIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetStopEndDriveMode");

	Params::RSBattlePlayer_C_SetStopEndDriveMode Parms{};

	Parms.FlagIn = FlagIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInitializeHUD
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnInitializeHUD(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInitializeHUD");

	Params::RSBattlePlayer_C_OnInitializeHUD Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReserveInitializeDriveMode
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ReserveInitializeDriveMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReserveInitializeDriveMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TelepoFadeOut
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TelepoFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TelepoFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TelepoFadeIn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInterrupt                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::TelepoFadeIn(bool bInterrupt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TelepoFadeIn");

	Params::RSBattlePlayer_C_TelepoFadeIn Parms{};

	Parms.bInterrupt = bInterrupt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckTelepoFade
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFade                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsCheckTelepoFade(bool* bFade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCheckTelepoFade");

	Params::RSBattlePlayer_C_IsCheckTelepoFade Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFade != nullptr)
		*bFade = Parms.bFade;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RegisterEventEndParticle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::RegisterEventEndParticle(class URSParticleSystemComponentBase* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RegisterEventEndParticle");

	Params::RSBattlePlayer_C_RegisterEventEndParticle Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.StopEventEndParticle
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::StopEventEndParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StopEventEndParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateBattleParticleForEventEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateBattleParticleForEventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateBattleParticleForEventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetVisibilityBasedAnimTickOption
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ResetVisibilityBasedAnimTickOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetVisibilityBasedAnimTickOption");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateIgnoreCheckFallFlag
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::UpdateIgnoreCheckFallFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateIgnoreCheckFallFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetExecCombinationAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bExecute                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetExecCombinationAttack(bool bExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetExecCombinationAttack");

	Params::RSBattlePlayer_C_SetExecCombinationAttack Parms{};

	Parms.bExecute = bExecute;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetOverwriteSasAttackTelepo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOverwrite                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetOverwriteSasAttackTelepo(bool bOverwrite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetOverwriteSasAttackTelepo");

	Params::RSBattlePlayer_C_SetOverwriteSasAttackTelepo Parms{};

	Parms.bOverwrite = bOverwrite;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCanDrop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCanDrop                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCanDrop(bool IsCanDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCanDrop");

	Params::RSBattlePlayer_C_SetCanDrop Parms{};

	Parms.IsCanDrop = IsCanDrop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTelepoCapsuleCollisionPreset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttack                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetTelepoCapsuleCollisionPreset(bool bAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTelepoCapsuleCollisionPreset");

	Params::RSBattlePlayer_C_SetTelepoCapsuleCollisionPreset Parms{};

	Parms.bAttack = bAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.On Sas Select Slow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSlow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::On_Sas_Select_Slow(bool bSlow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "On Sas Select Slow");

	Params::RSBattlePlayer_C_On_Sas_Select_Slow Parms{};

	Parms.bSlow = bSlow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnCancelSASCutin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnCancelSASCutin(E_SASKind SasKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnCancelSASCutin");

	Params::RSBattlePlayer_C_OnCancelSASCutin Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventDownParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerDownType                         InDownType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetEventDownParam(EPlayerDownType InDownType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventDownParam");

	Params::RSBattlePlayer_C_SetEventDownParam Parms{};

	Parms.InDownType = InDownType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BattleSequencerEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRestoreTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSetEnemyEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDriveSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::BattleSequencerEnd(bool IsRestoreTransform, bool IsSetEnemyEvent, bool bDriveSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BattleSequencerEnd");

	Params::RSBattlePlayer_C_BattleSequencerEnd Parms{};

	Parms.IsRestoreTransform = IsRestoreTransform;
	Parms.IsSetEnemyEvent = IsSetEnemyEvent;
	Parms.bDriveSequence = bDriveSequence;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayingSasSeeThroughCutin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPlaying                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPlayingSasSeeThroughCutin(bool* bPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayingSasSeeThroughCutin");

	Params::RSBattlePlayer_C_IsPlayingSasSeeThroughCutin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPlaying != nullptr)
		*bPlaying = Parms.bPlaying;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPsychicObjectThrowParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Apply                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Directshot_throw_speed                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Directshot_homing_speed                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Combo_throw_speed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Combo_homing_speed                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   brainfield_throw_speed                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   brainfield_homing_speed                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intercept_throw_speed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intercept_homing_speed                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPsychicObjectThrowParameter(bool* Apply, float* Directshot_throw_speed, float* Directshot_homing_speed, float* Combo_throw_speed, float* Combo_homing_speed, float* brainfield_throw_speed, float* brainfield_homing_speed, float* Intercept_throw_speed, float* Intercept_homing_speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPsychicObjectThrowParameter");

	Params::RSBattlePlayer_C_GetPsychicObjectThrowParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Apply != nullptr)
		*Apply = Parms.Apply;

	if (Directshot_throw_speed != nullptr)
		*Directshot_throw_speed = Parms.Directshot_throw_speed;

	if (Directshot_homing_speed != nullptr)
		*Directshot_homing_speed = Parms.Directshot_homing_speed;

	if (Combo_throw_speed != nullptr)
		*Combo_throw_speed = Parms.Combo_throw_speed;

	if (Combo_homing_speed != nullptr)
		*Combo_homing_speed = Parms.Combo_homing_speed;

	if (brainfield_throw_speed != nullptr)
		*brainfield_throw_speed = Parms.brainfield_throw_speed;

	if (brainfield_homing_speed != nullptr)
		*brainfield_homing_speed = Parms.brainfield_homing_speed;

	if (Intercept_throw_speed != nullptr)
		*Intercept_throw_speed = Parms.Intercept_throw_speed;

	if (Intercept_homing_speed != nullptr)
		*Intercept_homing_speed = Parms.Intercept_homing_speed;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetMeshFitGroundFromFoot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUse                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetMeshFitGroundFromFoot(bool bUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetMeshFitGroundFromFoot");

	Params::RSBattlePlayer_C_SetMeshFitGroundFromFoot Parms{};

	Parms.bUse = bUse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcMeshFitGroundVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          UpVector                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CalcMeshFitGroundVector(struct FVector* UpVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcMeshFitGroundVector");

	Params::RSBattlePlayer_C_CalcMeshFitGroundVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UpVector != nullptr)
		*UpVector = std::move(Parms.UpVector);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetFlyingCombo
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ResetFlyingCombo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetFlyingCombo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.InitSpawnEnpc
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::InitSpawnEnpc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InitSpawnEnpc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateSpawnEnpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::UpdateSpawnEnpc(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateSpawnEnpc");

	Params::RSBattlePlayer_C_UpdateSpawnEnpc Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnWaitSpawnStateEnpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOver                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnWaitSpawnStateEnpc(bool bOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnWaitSpawnStateEnpc");

	Params::RSBattlePlayer_C_OnWaitSpawnStateEnpc Parms{};

	Parms.bOver = bOver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStartSpawnStateEnpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOver                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnStartSpawnStateEnpc(bool bOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStartSpawnStateEnpc");

	Params::RSBattlePlayer_C_OnStartSpawnStateEnpc Parms{};

	Parms.bOver = bOver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnUpdateSpawnStateEnpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOver                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnUpdateSpawnStateEnpc(bool bOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnUpdateSpawnStateEnpc");

	Params::RSBattlePlayer_C_OnUpdateSpawnStateEnpc Parms{};

	Parms.bOver = bOver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDeadBeforeHitResultByDirectAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ARSBattlePlayer_C::SetDeadBeforeHitResultByDirectAttack(const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDeadBeforeHitResultByDirectAttack");

	Params::RSBattlePlayer_C_SetDeadBeforeHitResultByDirectAttack Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCastShadowDeadStaging
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InNewCastShadow                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCastShadowDeadStaging(bool InNewCastShadow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCastShadowDeadStaging");

	Params::RSBattlePlayer_C_SetCastShadowDeadStaging Parms{};

	Parms.InNewCastShadow = InNewCastShadow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateDeadStaging
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ParamValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDestroy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::UpdateDeadStaging(float ParamValue, bool bDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateDeadStaging");

	Params::RSBattlePlayer_C_UpdateDeadStaging Parms{};

	Parms.ParamValue = ParamValue;
	Parms.bDestroy = bDestroy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnMainMenuClose
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnMainMenuClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnMainMenuClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.HealHP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HealRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPopupUI                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UParticleSystem*                  Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EffectScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRevive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRandomLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::HealHP(float HealRate, bool bPopupUI, class UParticleSystem* Effect, const struct FVector& EffectScale, class USoundAtomCue* Sound, bool bRevive, bool bRandomLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "HealHP");

	Params::RSBattlePlayer_C_HealHP Parms{};

	Parms.HealRate = HealRate;
	Parms.bPopupUI = bPopupUI;
	Parms.Effect = Effect;
	Parms.EffectScale = std::move(EffectScale);
	Parms.Sound = Sound;
	Parms.bRevive = bRevive;
	Parms.bRandomLocation = bRandomLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReserveBrainCrashHeal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HealRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::ReserveBrainCrashHeal(float HealRate, class UParticleSystem* Effect, class USoundAtomCue* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReserveBrainCrashHeal");

	Params::RSBattlePlayer_C_ReserveBrainCrashHeal Parms{};

	Parms.HealRate = HealRate;
	Parms.Effect = Effect;
	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginBrainCrashHeal
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::BeginBrainCrashHeal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginBrainCrashHeal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TickBrainCrashHeal
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::TickBrainCrashHeal(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TickBrainCrashHeal");

	Params::RSBattlePlayer_C_TickBrainCrashHeal Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.FlushBrainCrashHeal
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::FlushBrainCrashHeal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FlushBrainCrashHeal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMaxDamageRateLimit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetMaxDamageRateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMaxDamageRateLimit");

	Params::RSBattlePlayer_C_GetMaxDamageRateLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMaxCrashScaleLimit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetMaxCrashScaleLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMaxCrashScaleLimit");

	Params::RSBattlePlayer_C_GetMaxCrashScaleLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetNexusDriveHardenSubTimeRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetNexusDriveHardenSubTimeRate(float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetNexusDriveHardenSubTimeRate");

	Params::RSBattlePlayer_C_GetNexusDriveHardenSubTimeRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDirectionControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableDirectionControl(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableDirectionControl");

	Params::RSBattlePlayer_C_IsEnableDirectionControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ApplyOptionParameter
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::ApplyOptionParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ApplyOptionParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnInputTriggerSASHologramAttackManual
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnInputTriggerSASHologramAttackManual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnInputTriggerSASHologramAttackManual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSasCableExColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableSasCableExColor(E_SASKind SasKind, bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSasCableExColor");

	Params::RSBattlePlayer_C_IsEnableSasCableExColor Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetChargeLevelForNexusDrive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ChargeLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetChargeLevelForNexusDrive(int32 ChargeLevel, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetChargeLevelForNexusDrive");

	Params::RSBattlePlayer_C_SetChargeLevelForNexusDrive Parms{};

	Parms.ChargeLevel = ChargeLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSimulatorStartDirectionOpen
// (Public, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::OnSimulatorStartDirectionOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSimulatorStartDirectionOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSimulatorStartDirectionClose
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MoveDelaySec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnSimulatorStartDirectionClose(float MoveDelaySec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSimulatorStartDirectionClose");

	Params::RSBattlePlayer_C_OnSimulatorStartDirectionClose Parms{};

	Parms.MoveDelaySec = MoveDelaySec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.EventInputRestrictNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Restrict                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EventInputRestrictNative(bool Restrict)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EventInputRestrictNative");

	Params::RSBattlePlayer_C_EventInputRestrictNative Parms{};

	Parms.Restrict = Restrict;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnBackGroundStuck
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OnBackGroundStuck(const struct FVector& ImpactLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnBackGroundStuck");

	Params::RSBattlePlayer_C_OnBackGroundStuck Parms{};

	Parms.ImpactLocation = std::move(ImpactLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.TickEventBackbodyAttachmentDither
// (Private, BlueprintCallable, BlueprintEvent)

void ARSBattlePlayer_C::TickEventBackbodyAttachmentDither()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "TickEventBackbodyAttachmentDither");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStatusCablePlayVoiceTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BadStatusCablePlayVoiceTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStatusCablePlayVoiceTick");

	Params::RSBattlePlayer_C_BadStatusCablePlayVoiceTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPhotoModeDitherDataName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName ARSBattlePlayer_C::GetPhotoModeDitherDataName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPhotoModeDitherDataName");

	Params::RSBattlePlayer_C_GetPhotoModeDitherDataName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginPhotoMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::BeginPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginPhotoMode");

	Params::RSBattlePlayer_C_BeginPhotoMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndPhotoMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EndPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndPhotoMode");

	Params::RSBattlePlayer_C_EndPhotoMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPhotoModeHood
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPhotoModeHood(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPhotoModeHood");

	Params::RSBattlePlayer_C_SetPhotoModeHood Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsVisiblePhotoModeHood
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsVisiblePhotoModeHood(bool* bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsVisiblePhotoModeHood");

	Params::RSBattlePlayer_C_IsVisiblePhotoModeHood Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bVisible != nullptr)
		*bVisible = Parms.bVisible;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RecoverAfterInvalidDamageTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::RecoverAfterInvalidDamageTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RecoverAfterInvalidDamageTick");

	Params::RSBattlePlayer_C_RecoverAfterInvalidDamageTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetLookAtEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetLookAtEnable(bool bEnable, bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetLookAtEnable");

	Params::RSBattlePlayer_C_SetLookAtEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventLookAtLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LookAtLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEventLookAtLocation(bool bEnable, const struct FVector& LookAtLocation, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventLookAtLocation");

	Params::RSBattlePlayer_C_SetEventLookAtLocation Parms{};

	Parms.bEnable = bEnable;
	Parms.LookAtLocation = std::move(LookAtLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventLookAtActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           LookAtActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEventLookAtActor(bool bEnable, class AActor* LookAtActor, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventLookAtActor");

	Params::RSBattlePlayer_C_SetEventLookAtActor Parms{};

	Parms.bEnable = bEnable;
	Parms.LookAtActor = LookAtActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnableRigidBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LerpTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnableRigidBody(bool bEnable, float LerpTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnableRigidBody");

	Params::RSBattlePlayer_C_EnableRigidBody Parms{};

	Parms.bEnable = bEnable;
	Parms.LerpTime = LerpTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerActionSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPlayerActionSAS(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerActionSAS");

	Params::RSBattlePlayer_C_SetPlayerActionSAS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPlayerBattle(bool bBattle, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerBattle");

	Params::RSBattlePlayer_C_SetPlayerBattle Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSASCodeVisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetSASCodeVisible(bool bVisible, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSASCodeVisible");

	Params::RSBattlePlayer_C_SetSASCodeVisible Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBrainCodeVisible
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDrive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetBrainCodeVisible(bool bVisible, bool bDrive, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBrainCodeVisible");

	Params::RSBattlePlayer_C_SetBrainCodeVisible Parms{};

	Parms.bVisible = bVisible;
	Parms.bDrive = bDrive;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartSASCode
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartSASCode(E_SASKind SasKind, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartSASCode");

	Params::RSBattlePlayer_C_StartSASCode Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSASCodeParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetSASCodeParam(float Param, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSASCodeParam");

	Params::RSBattlePlayer_C_SetSASCodeParam Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCodeActorList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_CableBase_C*>          CodeList                                               (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBrainCodeActorList(TArray<class ABP_CableBase_C*>* CodeList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainCodeActorList");

	Params::RSBattlePlayer_C_GetBrainCodeActorList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CodeList != nullptr)
		*CodeList = std::move(Parms.CodeList);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASCodeActorList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_CableBase_C*>          CodeList                                               (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSASCodeActorList(TArray<class ABP_CableBase_C*>* CodeList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASCodeActorList");

	Params::RSBattlePlayer_C_GetSASCodeActorList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CodeList != nullptr)
		*CodeList = std::move(Parms.CodeList);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainFieldTimeRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBrainFieldTimeRate(float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainFieldTimeRate");

	Params::RSBattlePlayer_C_GetBrainFieldTimeRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsOpenBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOpen                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsOpenBrainField(bool* bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsOpenBrainField");

	Params::RSBattlePlayer_C_IsOpenBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOpen != nullptr)
		*bOpen = Parms.bOpen;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlaySASCodeDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSCableGravityType                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PlaySASCodeDirection(ERSCableGravityType Type, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlaySASCodeDirection");

	Params::RSBattlePlayer_C_PlaySASCodeDirection Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StopSASCodeDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSCableGravityType                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StopSASCodeDirection(ERSCableGravityType Type, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StopSASCodeDirection");

	Params::RSBattlePlayer_C_StopSASCodeDirection Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetSpecialEffects
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetSpecialEffects(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetSpecialEffects");

	Params::RSBattlePlayer_C_ResetSpecialEffects Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerActionAfterEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EParamAfterEventAction                  Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPlayerActionAfterEvent(EParamAfterEventAction Param, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerActionAfterEvent");

	Params::RSBattlePlayer_C_SetPlayerActionAfterEvent Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSAS_Kind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASButton                             Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SASKind                               Kind                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSAS_Kind(E_SASButton Button, E_SASKind* Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSAS_Kind");

	Params::RSBattlePlayer_C_GetSAS_Kind Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);

	if (Kind != nullptr)
		*Kind = Parms.Kind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayerCameraReset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PlayerCameraReset(float InterpSec, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayerCameraReset");

	Params::RSBattlePlayer_C_PlayerCameraReset Parms{};

	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ForceWarp_Interface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   IdlingSeconds                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ForceWarp_Interface(const struct FTransform& Transform, float IdlingSeconds, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ForceWarp_Interface");

	Params::RSBattlePlayer_C_ForceWarp_Interface Parms{};

	Parms.Transform = std::move(Transform);
	Parms.IdlingSeconds = IdlingSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPsychicObjectEnableRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Brain_Field_in                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Range                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SetPsychicObjectEnableRange(bool Is_Brain_Field_in, float* Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPsychicObjectEnableRange");

	Params::RSBattlePlayer_C_SetPsychicObjectEnableRange Parms{};

	Parms.Is_Brain_Field_in = Is_Brain_Field_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Range != nullptr)
		*Range = Parms.Range;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCanAnimOverrideSASColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetCanAnimOverrideSASColor(bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCanAnimOverrideSASColor");

	Params::RSBattlePlayer_C_GetCanAnimOverrideSASColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetCanAnimOverrideSASColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetCanAnimOverrideSASColor(bool Enable, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetCanAnimOverrideSASColor");

	Params::RSBattlePlayer_C_SetCanAnimOverrideSASColor Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddPsychicFlyObj
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PsychicObjectBasic_C*         FlyObj                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AddPsychicFlyObj(class ABP_PsychicObjectBasic_C* FlyObj, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddPsychicFlyObj");

	Params::RSBattlePlayer_C_AddPsychicFlyObj Parms{};

	Parms.FlyObj = FlyObj;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPsychicFlyObj
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   FlyObj                                                 (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPsychicFlyObj(TArray<class AActor*>* FlyObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPsychicFlyObj");

	Params::RSBattlePlayer_C_GetPsychicFlyObj Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlyObj != nullptr)
		*FlyObj = std::move(Parms.FlyObj);
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddHitPsychicFlyObj
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PsychicObjectBasic_C*         HitFlyObj                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAdd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AddHitPsychicFlyObj(class ABP_PsychicObjectBasic_C* HitFlyObj, bool* IsAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddHitPsychicFlyObj");

	Params::RSBattlePlayer_C_AddHitPsychicFlyObj Parms{};

	Parms.HitFlyObj = HitFlyObj;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAdd != nullptr)
		*IsAdd = Parms.IsAdd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUseFog
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFog                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUseFog(bool* IsFog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUseFog");

	Params::RSBattlePlayer_C_IsUseFog Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFog != nullptr)
		*IsFog = Parms.IsFog;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnpcBarrier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBarrier                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnpcBarrier(bool* IsBarrier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnpcBarrier");

	Params::RSBattlePlayer_C_IsEnpcBarrier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBarrier != nullptr)
		*IsBarrier = Parms.IsBarrier;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CanBattleAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                ThinkType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanAction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CanBattleAction(EPlayerAIBattleThinkType ThinkType, bool* CanAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CanBattleAction");

	Params::RSBattlePlayer_C_CanBattleAction Parms{};

	Parms.ThinkType = ThinkType;

	UObject::ProcessEvent(Func, &Parms);

	if (CanAction != nullptr)
		*CanAction = Parms.CanAction;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetENpcKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENpcKind                                ENpcKind                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetENpcKind(ENpcKind* ENpcKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetENpcKind");

	Params::RSBattlePlayer_C_GetENpcKind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ENpcKind != nullptr)
		*ENpcKind = Parms.ENpcKind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDodgeTargetRot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsDodgeTargetRot                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDodgeTargetRot(bool* Param_IsDodgeTargetRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDodgeTargetRot");

	Params::RSBattlePlayer_C_IsDodgeTargetRot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsDodgeTargetRot != nullptr)
		*Param_IsDodgeTargetRot = Parms.Param_IsDodgeTargetRot;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDodgeScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DodgeScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetDodgeScale(float* DodgeScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDodgeScale");

	Params::RSBattlePlayer_C_GetDodgeScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DodgeScale != nullptr)
		*DodgeScale = Parms.DodgeScale;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSpecialDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSpDown                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SpDownWince                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::IsSpecialDown(bool* IsSpDown, float* SpDownWince)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSpecialDown");

	Params::RSBattlePlayer_C_IsSpecialDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSpDown != nullptr)
		*IsSpDown = Parms.IsSpDown;

	if (SpDownWince != nullptr)
		*SpDownWince = Parms.SpDownWince;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSpecialDownTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SpDownTimer                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSpecialDownTimer(float* SpDownTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSpecialDownTimer");

	Params::RSBattlePlayer_C_GetSpecialDownTimer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpDownTimer != nullptr)
		*SpDownTimer = Parms.SpDownTimer;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ChangeENpcKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENpcKind                                ENpcKind                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ChangeENpcKind(ENpcKind ENpcKind, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ChangeENpcKind");

	Params::RSBattlePlayer_C_ChangeENpcKind Parms{};

	Parms.ENpcKind = ENpcKind;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSkillCoreDropProbability
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Probability                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSkillCoreDropProbability(float* Probability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSkillCoreDropProbability");

	Params::RSBattlePlayer_C_GetSkillCoreDropProbability Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Probability != nullptr)
		*Probability = Parms.Probability;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CanSpecialMoveTrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanDo                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CanSpecialMoveTrigger(bool* CanDo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CanSpecialMoveTrigger");

	Params::RSBattlePlayer_C_CanSpecialMoveTrigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanDo != nullptr)
		*CanDo = Parms.CanDo;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReturnMetamorphosis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARSBattlePlayer_C*                SpecifyPlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ReturnMetamorphosis(const struct FVector& Location, const struct FRotator& Rotation, class ARSBattlePlayer_C* SpecifyPlayer, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReturnMetamorphosis");

	Params::RSBattlePlayer_C_ReturnMetamorphosis Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.SpecifyPlayer = SpecifyPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAttackedEnemyDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharaDeadType                          DeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAttackedEnemyDead(ECharaDeadType DeadType, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAttackedEnemyDead");

	Params::RSBattlePlayer_C_OnAttackedEnemyDead Parms{};

	Parms.DeadType = DeadType;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CanEnpcOpenBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanDo                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CanEnpcOpenBrainField(bool* CanDo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CanEnpcOpenBrainField");

	Params::RSBattlePlayer_C_CanEnpcOpenBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanDo != nullptr)
		*CanDo = Parms.CanDo;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnpcBarrierHitNotify
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Dammy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnpcBarrierHitNotify(const struct FHCHitResult& Result, bool* Dammy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnpcBarrierHitNotify");

	Params::RSBattlePlayer_C_EnpcBarrierHitNotify Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);

	if (Dammy != nullptr)
		*Dammy = Parms.Dammy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CreateRedCode
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CreateRedCode(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CreateRedCode");

	Params::RSBattlePlayer_C_CreateRedCode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DestroyRedCode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DestroyRedCode(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DestroyRedCode");

	Params::RSBattlePlayer_C_DestroyRedCode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckStickInputTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTurn                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckStickInputTurn(bool* bTurn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckStickInputTurn");

	Params::RSBattlePlayer_C_CheckStickInputTurn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTurn != nullptr)
		*bTurn = Parms.bTurn;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnableRigidBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetEnableRigidBody(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnableRigidBody");

	Params::RSBattlePlayer_C_GetEnableRigidBody Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerInputRestriction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerInputRestrictionType             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRestriction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPlayerInputRestriction(EPlayerInputRestrictionType Type, bool bRestriction, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerInputRestriction");

	Params::RSBattlePlayer_C_SetPlayerInputRestriction Parms{};

	Parms.Type = Type;
	Parms.bRestriction = bRestriction;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsJumpAreaAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAble                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsJumpAreaAble(bool* bAble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsJumpAreaAble");

	Params::RSBattlePlayer_C_IsJumpAreaAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAble != nullptr)
		*bAble = Parms.bAble;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableInputPsychicCombo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableInputPsychicCombo(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableInputPsychicCombo");

	Params::RSBattlePlayer_C_IsEnableInputPsychicCombo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsIntense
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIntense                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsIntense(bool* bIntense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsIntense");

	Params::RSBattlePlayer_C_IsIntense Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIntense != nullptr)
		*bIntense = Parms.bIntense;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSeeThrough
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableSeeThrough(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSeeThrough");

	Params::RSBattlePlayer_C_IsEnableSeeThrough Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTalkLookAtTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LookAtLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetTalkLookAtTurn(const struct FVector& LookAtLocation, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTalkLookAtTurn");

	Params::RSBattlePlayer_C_SetTalkLookAtTurn Parms{};

	Parms.LookAtLocation = std::move(LookAtLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndTalkLookAtTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndTalkLookAtTurn(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndTalkLookAtTurn");

	Params::RSBattlePlayer_C_EndTalkLookAtTurn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnableUseSeeThrough
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnableUseSeeThrough(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnableUseSeeThrough");

	Params::RSBattlePlayer_C_EnableUseSeeThrough Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckTargetableCharacterENPC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Chara                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckTargetableCharacterENPC(class ARSCharacterBase* Chara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckTargetableCharacterENPC");

	Params::RSBattlePlayer_C_CheckTargetableCharacterENPC Parms{};

	Parms.Chara = Chara;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RequestBrainFieldHelp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::RequestBrainFieldHelp(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RequestBrainFieldHelp");

	Params::RSBattlePlayer_C_RequestBrainFieldHelp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetNpcBrainFieldDrive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDrive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetNpcBrainFieldDrive(bool bDrive, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetNpcBrainFieldDrive");

	Params::RSBattlePlayer_C_SetNpcBrainFieldDrive Parms{};

	Parms.bDrive = bDrive;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotify_EnpcSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnAnimNotify_EnpcSAS(E_SASKind Kind, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAnimNotify_EnpcSAS");

	Params::RSBattlePlayer_C_OnAnimNotify_EnpcSAS Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnpcSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginEnpcSAS(E_SASKind Kind, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginEnpcSAS");

	Params::RSBattlePlayer_C_BeginEnpcSAS Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAssassinAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAssassinAttackHit                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattleCharacter_C*             DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bArmorBreak                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckAssassinAttack(EAssassinAttackHit Type, class ARSBattleCharacter_C* DamagedActor, bool* bSuccess, bool* bArmorBreak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAssassinAttack");

	Params::RSBattlePlayer_C_CheckAssassinAttack Parms{};

	Parms.Type = Type;
	Parms.DamagedActor = DamagedActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (bArmorBreak != nullptr)
		*bArmorBreak = Parms.bArmorBreak;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetCollisionOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetCollisionOverlap(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetCollisionOverlap");

	Params::RSBattlePlayer_C_ResetCollisionOverlap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayBrainFieldBattleTalk
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PlayBrainFieldBattleTalk(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayBrainFieldBattleTalk");

	Params::RSBattlePlayer_C_PlayBrainFieldBattleTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDriveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDrive                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDriveMode(bool* bDrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDriveMode");

	Params::RSBattlePlayer_C_IsDriveMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDrive != nullptr)
		*bDrive = Parms.bDrive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EventInputRestrict
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRestrict                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EventInputRestrict(bool bRestrict, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EventInputRestrict");

	Params::RSBattlePlayer_C_EventInputRestrict Parms{};

	Parms.bRestrict = bRestrict;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EventInputRestrictAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRestrict                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EventInputRestrictAction(bool bRestrict, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EventInputRestrictAction");

	Params::RSBattlePlayer_C_EventInputRestrictAction Parms{};

	Parms.bRestrict = bRestrict;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SuspendPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuspend                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SuspendPlayer(bool* bSuspend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SuspendPlayer");

	Params::RSBattlePlayer_C_SuspendPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuspend != nullptr)
		*bSuspend = Parms.bSuspend;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResumePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResume                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResumePlayer(bool* bResume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResumePlayer");

	Params::RSBattlePlayer_C_ResumePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResume != nullptr)
		*bResume = Parms.bResume;
}


// Function RSBattlePlayer.RSBattlePlayer_C.FinishMetamorphosisLastAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::FinishMetamorphosisLastAttack(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FinishMetamorphosisLastAttack");

	Params::RSBattlePlayer_C_FinishMetamorphosisLastAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableCreateCopy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableCreateCopy(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableCreateCopy");

	Params::RSBattlePlayer_C_IsEnableCreateCopy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStartReactionChance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnStartReactionChance(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStartReactionChance");

	Params::RSBattlePlayer_C_OnStartReactionChance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStartEnpcDrive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnStartEnpcDrive(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStartEnpcDrive");

	Params::RSBattlePlayer_C_OnStartEnpcDrive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetReactionChanceEndAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                EndAction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetReactionChanceEndAction(EPlayerAIBattleThinkType* EndAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetReactionChanceEndAction");

	Params::RSBattlePlayer_C_GetReactionChanceEndAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EndAction != nullptr)
		*EndAction = Parms.EndAction;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SelectReactionChanceEndAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EPlayerAIBattleThinkType>        InEndAction                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// EPlayerAIBattleThinkType                OutEndAction                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SelectReactionChanceEndAction(const TArray<EPlayerAIBattleThinkType>& InEndAction, EPlayerAIBattleThinkType* OutEndAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SelectReactionChanceEndAction");

	Params::RSBattlePlayer_C_SelectReactionChanceEndAction Parms{};

	Parms.InEndAction = std::move(InEndAction);

	UObject::ProcessEvent(Func, &Parms);

	if (OutEndAction != nullptr)
		*OutEndAction = Parms.OutEndAction;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetNpcWarpDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetNpcWarpDither(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetNpcWarpDither");

	Params::RSBattlePlayer_C_SetNpcWarpDither Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsExecNpcRevive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bExec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsExecNpcRevive(bool* bExec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsExecNpcRevive");

	Params::RSBattlePlayer_C_IsExecNpcRevive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExec != nullptr)
		*bExec = Parms.bExec;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsMainPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMainPlayer                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsMainPlayer(bool* bMainPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsMainPlayer");

	Params::RSBattlePlayer_C_IsMainPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMainPlayer != nullptr)
		*bMainPlayer = Parms.bMainPlayer;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NotifyKillEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattleCharacter_C*             KillActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::NotifyKillEnemy(class ARSBattleCharacter_C* KillActor, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NotifyKillEnemy");

	Params::RSBattlePlayer_C_NotifyKillEnemy Parms{};

	Parms.KillActor = KillActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DisablePlayerFootIK
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DisablePlayerFootIK(bool bDisable, class FName ClaimantName, float BlendTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DisablePlayerFootIK");

	Params::RSBattlePlayer_C_DisablePlayerFootIK Parms{};

	Parms.bDisable = bDisable;
	Parms.ClaimantName = ClaimantName;
	Parms.BlendTime = BlendTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ElevatorSetting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInElevator                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ElevatorSetting(bool bInElevator, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ElevatorSetting");

	Params::RSBattlePlayer_C_ElevatorSetting Parms{};

	Parms.bInElevator = bInElevator;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDrive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableDrive(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableDrive");

	Params::RSBattlePlayer_C_IsEnableDrive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableRegistSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableRegistSAS(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableRegistSAS");

	Params::RSBattlePlayer_C_IsEnableRegistSAS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSasFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActiveEnpcSasFire(bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveEnpcSasFire");

	Params::RSBattlePlayer_C_IsActiveEnpcSasFire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSasElectric
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActiveEnpcSasElectric(bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveEnpcSasElectric");

	Params::RSBattlePlayer_C_IsActiveEnpcSasElectric Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSasTeleport
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActiveEnpcSasTeleport(bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveEnpcSasTeleport");

	Params::RSBattlePlayer_C_IsActiveEnpcSasTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDisableActionBoringIdle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetDisableActionBoringIdle(bool bDisable, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDisableActionBoringIdle");

	Params::RSBattlePlayer_C_SetDisableActionBoringIdle Parms{};

	Parms.bDisable = bDisable;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdatePlayerActionAfterEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EParamAfterEventAction                  EventAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::UpdatePlayerActionAfterEvent(EParamAfterEventAction EventAction, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdatePlayerActionAfterEvent");

	Params::RSBattlePlayer_C_UpdatePlayerActionAfterEvent Parms{};

	Parms.EventAction = EventAction;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnablePlaySpTrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnablePlaySpTrigger(bool bEnable, bool* Return_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnablePlaySpTrigger");

	Params::RSBattlePlayer_C_EnablePlaySpTrigger Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_ != nullptr)
		*Return_ = Parms.Return_;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnpcSasStealthStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnpcSasStealthStart(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnpcSasStealthStart");

	Params::RSBattlePlayer_C_SetEnpcSasStealthStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnpcSasStealthEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnpcSasStealthEnd(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnpcSasStealthEnd");

	Params::RSBattlePlayer_C_SetEnpcSasStealthEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BattleSettingEm1500
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BattleSettingEm1500(bool bBattle, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BattleSettingEm1500");

	Params::RSBattlePlayer_C_BattleSettingEm1500 Parms{};

	Parms.bBattle = bBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAttackHitStop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetAttackHitStop(class AActor* DamagedActor, const struct FHCHitResult& HitResult, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAttackHitStop");

	Params::RSBattlePlayer_C_SetAttackHitStop Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeforeCutSceneEventManagerStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeforeCutSceneEventManagerStart(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeforeCutSceneEventManagerStart");

	Params::RSBattlePlayer_C_BeforeCutSceneEventManagerStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckBattleStartTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckBattleStartTimer(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckBattleStartTimer");

	Params::RSBattlePlayer_C_CheckBattleStartTimer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StoreLockTargetInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StoreLockTargetInterface(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StoreLockTargetInterface");

	Params::RSBattlePlayer_C_StoreLockTargetInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestoreLockTargetInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::RestoreLockTargetInterface(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestoreLockTargetInterface");

	Params::RSBattlePlayer_C_RestoreLockTargetInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ProcEndBrainCrash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CrashTargetNum                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ProcEndBrainCrash(int32 CrashTargetNum, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ProcEndBrainCrash");

	Params::RSBattlePlayer_C_ProcEndBrainCrash Parms{};

	Parms.CrashTargetNum = CrashTargetNum;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AddBattleBonusInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleBonusAddType                     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AddBattleBonusInterface(EBattleBonusAddType Type, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AddBattleBonusInterface");

	Params::RSBattlePlayer_C_AddBattleBonusInterface Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDriveAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableDriveAttack(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableDriveAttack");

	Params::RSBattlePlayer_C_IsEnableDriveAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDriveAttacked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetDriveAttacked(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDriveAttacked");

	Params::RSBattlePlayer_C_SetDriveAttacked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAttackCollisionDelayTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>                           AttackDelayTime                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetAttackCollisionDelayTime(const TArray<float>& AttackDelayTime, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAttackCollisionDelayTime");

	Params::RSBattlePlayer_C_SetAttackCollisionDelayTime Parms{};

	Parms.AttackDelayTime = std::move(AttackDelayTime);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugNextBattleThinkLog
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFPlayerAIBattleThinkTransitionDataInTransitionData                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DebugNextBattleThinkLog(const struct FFPlayerAIBattleThinkTransitionData& InTransitionData, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugNextBattleThinkLog");

	Params::RSBattlePlayer_C_DebugNextBattleThinkLog Parms{};

	Parms.InTransitionData = std::move(InTransitionData);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SASCancelEffectAndSEInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEffect                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSE                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SASCancelEffectAndSEInterface(bool bEffect, bool bSE, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SASCancelEffectAndSEInterface");

	Params::RSBattlePlayer_C_SASCancelEffectAndSEInterface Parms{};

	Parms.bEffect = bEffect;
	Parms.bSE = bSE;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsOverwriteAttackAutoAimSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOverwrite                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::IsOverwriteAttackAutoAimSpeed(bool* bOverwrite, float* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsOverwriteAttackAutoAimSpeed");

	Params::RSBattlePlayer_C_IsOverwriteAttackAutoAimSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOverwrite != nullptr)
		*bOverwrite = Parms.bOverwrite;

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAllSasCodeList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_CableBase_C*>          NormalCode                                             (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetAllSasCodeList(TArray<class ABP_CableBase_C*>* NormalCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAllSasCodeList");

	Params::RSBattlePlayer_C_GetAllSasCodeList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NormalCode != nullptr)
		*NormalCode = std::move(Parms.NormalCode);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsNexusDriveSeeThroughBestJustDodge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBestJustDodge                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsNexusDriveSeeThroughBestJustDodge(bool* bBestJustDodge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsNexusDriveSeeThroughBestJustDodge");

	Params::RSBattlePlayer_C_IsNexusDriveSeeThroughBestJustDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBestJustDodge != nullptr)
		*bBestJustDodge = Parms.bBestJustDodge;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerPhysicsIdlingInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   IdlingSeconds                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRefreshSkin                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetPlayerPhysicsIdlingInterface(float IdlingSeconds, bool bRefreshSkin, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerPhysicsIdlingInterface");

	Params::RSBattlePlayer_C_SetPlayerPhysicsIdlingInterface Parms{};

	Parms.IdlingSeconds = IdlingSeconds;
	Parms.bRefreshSkin = bRefreshSkin;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIMoveMode                       Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetMoveMode(EPlayerAIMoveMode Mode, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetMoveMode");

	Params::RSBattlePlayer_C_SetMoveMode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableInputStick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnableInputStick(bool bEnable, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnableInputStick");

	Params::RSBattlePlayer_C_SetEnableInputStick Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetBattleThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetBattleThink(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetBattleThink");

	Params::RSBattlePlayer_C_ResetBattleThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NextBattleThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::NextBattleThink(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NextBattleThink");

	Params::RSBattlePlayer_C_NextBattleThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeBattleThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                NextThinkType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkType                PrevThinkType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnChangeBattleThink(EPlayerAIBattleThinkType NextThinkType, EPlayerAIBattleThinkType PrevThinkType, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeBattleThink");

	Params::RSBattlePlayer_C_OnChangeBattleThink Parms{};

	Parms.NextThinkType = NextThinkType;
	Parms.PrevThinkType = PrevThinkType;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAIMoveStick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMoveStick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetAIMoveStick(bool bMoveStick, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAIMoveStick");

	Params::RSBattlePlayer_C_SetAIMoveStick Parms{};

	Parms.bMoveStick = bMoveStick;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AimEndAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AimEndAI(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AimEndAI");

	Params::RSBattlePlayer_C_AimEndAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AimStartAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AimStartAI(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AimStartAI");

	Params::RSBattlePlayer_C_AimStartAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUseItemThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUseItemThink(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUseItemThink");

	Params::RSBattlePlayer_C_IsUseItemThink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_UseItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsInputAI_UseItem(bool* bON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_UseItem");

	Params::RSBattlePlayer_C_IsInputAI_UseItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bON != nullptr)
		*bON = Parms.bON;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Pos_list_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           Radius_list_in                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Walk                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAfterWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   MaxMoveTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEventMove(TArray<struct FVector>& Pos_list_in, TArray<float>& Radius_list_in, bool Walk, bool bAfterWait, float MaxMoveTime, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventMove");

	Params::RSBattlePlayer_C_SetEventMove Parms{};

	Parms.Pos_list_in = std::move(Pos_list_in);
	Parms.Radius_list_in = std::move(Radius_list_in);
	Parms.Walk = Walk;
	Parms.bAfterWait = bAfterWait;
	Parms.MaxMoveTime = MaxMoveTime;

	UObject::ProcessEvent(Func, &Parms);

	Pos_list_in = std::move(Parms.Pos_list_in);
	Radius_list_in = std::move(Parms.Radius_list_in);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEventMovePosActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEventMovePosActor(class AActor** Actor, float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEventMovePosActor");

	Params::RSBattlePlayer_C_GetEventMovePosActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckEventMovePos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Goal                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckEventMovePos(bool* Goal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckEventMovePos");

	Params::RSBattlePlayer_C_CheckEventMovePos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Goal != nullptr)
		*Goal = Parms.Goal;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSelfRecovery
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsSelfRecovery(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSelfRecovery");

	Params::RSBattlePlayer_C_IsSelfRecovery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NotifyResetBehaviorTree
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::NotifyResetBehaviorTree(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NotifyResetBehaviorTree");

	Params::RSBattlePlayer_C_NotifyResetBehaviorTree Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SearchAIPsychicObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFiound                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SearchAIPsychicObject(bool* bFiound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SearchAIPsychicObject");

	Params::RSBattlePlayer_C_SearchAIPsychicObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFiound != nullptr)
		*bFiound = Parms.bFiound;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAIPsychicObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCapture                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAttack                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckAIPsychicObject(bool bCapture, bool bAttack, bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAIPsychicObject");

	Params::RSBattlePlayer_C_CheckAIPsychicObject Parms{};

	Parms.bCapture = bCapture;
	Parms.bAttack = bAttack;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Psychic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bON                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsInputAI_Psychic(bool* bON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Psychic");

	Params::RSBattlePlayer_C_IsInputAI_Psychic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bON != nullptr)
		*bON = Parms.bON;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPsychicAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPsychicAble(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPsychicAble");

	Params::RSBattlePlayer_C_IsPsychicAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveStickBack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBack                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetMoveStickBack(bool bBack, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetMoveStickBack");

	Params::RSBattlePlayer_C_SetMoveStickBack Parms{};

	Parms.bBack = bBack;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEventWait(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventWait");

	Params::RSBattlePlayer_C_SetEventWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndEventWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndEventWait(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndEventWait");

	Params::RSBattlePlayer_C_EndEventWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueConditionTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   UniqueNo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUniqueConditionTransition(int32 UniqueNo, bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueConditionTransition");

	Params::RSBattlePlayer_C_IsUniqueConditionTransition Parms{};

	Parms.UniqueNo = UniqueNo;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestartBattleAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::RestartBattleAI(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestartBattleAI");

	Params::RSBattlePlayer_C_RestartBattleAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleActionStartAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStart                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBattleActionStartAI(bool* bStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattleActionStartAI");

	Params::RSBattlePlayer_C_IsBattleActionStartAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bStart != nullptr)
		*bStart = Parms.bStart;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsTargetCanBeAttacked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanDo                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsTargetCanBeAttacked(bool* CanDo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsTargetCanBeAttacked");

	Params::RSBattlePlayer_C_IsTargetCanBeAttacked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanDo != nullptr)
		*CanDo = Parms.CanDo;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CancelUseItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CancelUseItem(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CancelUseItem");

	Params::RSBattlePlayer_C_CancelUseItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BehaviorTreeTaskExit_Attack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             ExitThinkType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BehaviorTreeTaskExit_Attack(EPlayerAIBattleThinkTypeCPP ExitThinkType, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BehaviorTreeTaskExit_Attack");

	Params::RSBattlePlayer_C_BehaviorTreeTaskExit_Attack Parms{};

	Parms.ExitThinkType = ExitThinkType;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentBattleThinkInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             ThinkType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentBattleThinkInterface(EPlayerAIBattleThinkTypeCPP* ThinkType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentBattleThinkInterface");

	Params::RSBattlePlayer_C_GetCurrentBattleThinkInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ThinkType != nullptr)
		*ThinkType = Parms.ThinkType;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetWeaponMaterialColor_PsychicEmission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetWeaponMaterialColor_PsychicEmission(class FName ClaimantName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetWeaponMaterialColor_PsychicEmission");

	Params::RSBattlePlayer_C_ResetWeaponMaterialColor_PsychicEmission Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetWeaponMaterialAlpha_PsychicEmission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetWeaponMaterialAlpha_PsychicEmission(class FName ClaimantName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetWeaponMaterialAlpha_PsychicEmission");

	Params::RSBattlePlayer_C_ResetWeaponMaterialAlpha_PsychicEmission Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponMaterialAlpha_PsychicEmission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetWeaponMaterialAlpha_PsychicEmission(float Alpha, class FName ClaimantName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetWeaponMaterialAlpha_PsychicEmission");

	Params::RSBattlePlayer_C_SetWeaponMaterialAlpha_PsychicEmission Parms{};

	Parms.Alpha = Alpha;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponMaterialColor_PsychicEmission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   G                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetWeaponMaterialColor_PsychicEmission(float R, float G, float B, class FName ClaimantName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetWeaponMaterialColor_PsychicEmission");

	Params::RSBattlePlayer_C_SetWeaponMaterialColor_PsychicEmission Parms{};

	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponEmissive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Emissive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetWeaponEmissive(float Emissive, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetWeaponEmissive");

	Params::RSBattlePlayer_C_SetWeaponEmissive Parms{};

	Parms.Emissive = Emissive;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetWeaponEmissiveColor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetWeaponEmissiveColor(E_SASKind SasKind, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetWeaponEmissiveColor");

	Params::RSBattlePlayer_C_SetWeaponEmissiveColor Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetWeaponEmissiveColor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetWeaponEmissiveColor(E_SASKind SasKind, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetWeaponEmissiveColor");

	Params::RSBattlePlayer_C_ResetWeaponEmissiveColor Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckJumpCount
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckJumpCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckJumpCount");

	Params::RSBattlePlayer_C_CheckJumpCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Telepo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Telepo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Telepo");

	Params::RSBattlePlayer_C_IsActiveSAS_Telepo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Stealth
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Stealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Stealth");

	Params::RSBattlePlayer_C_IsActiveSAS_Stealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_SeeThrough
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_SeeThrough()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_SeeThrough");

	Params::RSBattlePlayer_C_IsActiveSAS_SeeThrough Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Psychic
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Psychic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Psychic");

	Params::RSBattlePlayer_C_IsActiveSAS_Psychic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Metal
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Metal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Metal");

	Params::RSBattlePlayer_C_IsActiveSAS_Metal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Fire
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Fire");

	Params::RSBattlePlayer_C_IsActiveSAS_Fire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Electric
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Electric()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Electric");

	Params::RSBattlePlayer_C_IsActiveSAS_Electric Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Copy
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Copy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Copy");

	Params::RSBattlePlayer_C_IsActiveSAS_Copy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_Accelerator
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActiveSAS_Accelerator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_Accelerator");

	Params::RSBattlePlayer_C_IsActiveSAS_Accelerator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckRareArrangeItemBySAS
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckRareArrangeItemBySAS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckRareArrangeItemBySAS");

	Params::RSBattlePlayer_C_CheckRareArrangeItemBySAS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAIPlayer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsAIPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAIPlayer");

	Params::RSBattlePlayer_C_IsAIPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OpenBrainField
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OpenBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OpenBrainField");

	Params::RSBattlePlayer_C_OpenBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CloseBrainField
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCrash                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CloseBrainField(bool bCrash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CloseBrainField");

	Params::RSBattlePlayer_C_CloseBrainField Parms{};

	Parms.bCrash = bCrash;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputOverwriteENPCBrainField
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInputOverwriteENPCBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputOverwriteENPCBrainField");

	Params::RSBattlePlayer_C_IsInputOverwriteENPCBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAbleOverwriteENPCBrainField
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsAbleOverwriteENPCBrainField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAbleOverwriteENPCBrainField");

	Params::RSBattlePlayer_C_IsAbleOverwriteENPCBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPartyPlayerKind
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSPartyPlayerKind                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ERSPartyPlayerKind ARSBattlePlayer_C::SetPartyPlayerKind(ERSPartyPlayerKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPartyPlayerKind");

	Params::RSBattlePlayer_C_SetPartyPlayerKind Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyEnableAction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnAnimNotifyEnableAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAnimNotifyEnableAction");

	Params::RSBattlePlayer_C_OnAnimNotifyEnableAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndControlPsychicObject
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::EndControlPsychicObject(class AActor** TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndControlPsychicObject");

	Params::RSBattlePlayer_C_EndControlPsychicObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginControlPsychicObject
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::BeginControlPsychicObject(class AActor** TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginControlPsychicObject");

	Params::RSBattlePlayer_C_BeginControlPsychicObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerCamera
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACameraActor*                     PCameraActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPitch                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerCamera(class ACameraActor* PCameraActor, bool bPitch, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerCamera");

	Params::RSBattlePlayer_C_SetPlayerCamera Parms{};

	Parms.PCameraActor = PCameraActor;
	Parms.bPitch = bPitch;
	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckFriendCoverDamage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckFriendCoverDamage(float DamageValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckFriendCoverDamage");

	Params::RSBattlePlayer_C_CheckFriendCoverDamage Parms{};

	Parms.DamageValue = DamageValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeforeTakeDamage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHCHitResult                     HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::BeforeTakeDamage(float DamageValue, const struct FHCHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeforeTakeDamage");

	Params::RSBattlePlayer_C_BeforeTakeDamage Parms{};

	Parms.DamageValue = DamageValue;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentSASGaugeRate
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SASGaugeRate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentSASGaugeRate(E_SASButton SASButton, float* SASGaugeRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentSASGaugeRate");

	Params::RSBattlePlayer_C_GetCurrentSASGaugeRate Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (SASGaugeRate != nullptr)
		*SASGaugeRate = Parms.SASGaugeRate;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASActiveSeconds
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainingSec                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSASActiveSeconds(E_SASButton SASButton, float* RemainingSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASActiveSeconds");

	Params::RSBattlePlayer_C_GetSASActiveSeconds Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingSec != nullptr)
		*RemainingSec = Parms.RemainingSec;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSAS_MaxActiveSeconds
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ActivationSeconds                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSAS_MaxActiveSeconds(E_SASKindNative SasKind, float* ActivationSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSAS_MaxActiveSeconds");

	Params::RSBattlePlayer_C_GetSAS_MaxActiveSeconds Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	if (ActivationSeconds != nullptr)
		*ActivationSeconds = Parms.ActivationSeconds;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventEndDown
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFront                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetEventEndDown(bool bFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventEndDown");

	Params::RSBattlePlayer_C_SetEventEndDown Parms{};

	Parms.bFront = bFront;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASHologramAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESASHologramAttackTiming                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableSASHologramAttack(ESASHologramAttackTiming Timing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSASHologramAttack");

	Params::RSBattlePlayer_C_IsEnableSASHologramAttack Parms{};

	Parms.Timing = Timing;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASEffectHologram
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableSASEffectHologram(EPlayerID PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSASEffectHologram");

	Params::RSBattlePlayer_C_IsEnableSASEffectHologram Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentActionStateInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionKind                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPlayerActionKind ARSBattlePlayer_C::GetCurrentActionStateInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentActionStateInterface");

	Params::RSBattlePlayer_C_GetCurrentActionStateInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ClearBattleParticle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForceClear                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ClearBattleParticle(class FName ClaimantName, bool bForceClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ClearBattleParticle");

	Params::RSBattlePlayer_C_ClearBattleParticle Parms{};

	Parms.ClaimantName = ClaimantName;
	Parms.bForceClear = bForceClear;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SpawnBattleParticle
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SpawnBattleParticle(class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SpawnBattleParticle");

	Params::RSBattlePlayer_C_SpawnBattleParticle Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetBattleParticleType
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerBattleParticleType               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetBattleParticleType(EPlayerBattleParticleType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetBattleParticleType");

	Params::RSBattlePlayer_C_SetBattleParticleType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyEnablePsychic
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnAnimNotifyEnablePsychic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAnimNotifyEnablePsychic");

	Params::RSBattlePlayer_C_OnAnimNotifyEnablePsychic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnAnimNotifyEnableAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnAnimNotifyEnableAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnAnimNotifyEnableAttack");

	Params::RSBattlePlayer_C_OnAnimNotifyEnableAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMenuParameter
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerInfo                      CurrentParameter                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FPlayerInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor)

struct FPlayerInfo ARSBattlePlayer_C::UpdateMenuParameter(const struct FPlayerInfo& CurrentParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateMenuParameter");

	Params::RSBattlePlayer_C_UpdateMenuParameter Parms{};

	Parms.CurrentParameter = std::move(CurrentParameter);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableCheckActionIcon
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableCheckActionIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableCheckActionIcon");

	Params::RSBattlePlayer_C_IsEnableCheckActionIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableBackStepAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableBackStepAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableBackStepAttack");

	Params::RSBattlePlayer_C_IsEnableBackStepAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASCoverDamageFromPlayerID
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               CoverPlayerID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableSASCoverDamageFromPlayerID(EPlayerID CoverPlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSASCoverDamageFromPlayerID");

	Params::RSBattlePlayer_C_IsEnableSASCoverDamageFromPlayerID Parms{};

	Parms.CoverPlayerID = CoverPlayerID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveStickBack_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBack                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetMoveStickBack_CallFromCPP(bool bBack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetMoveStickBack_CallFromCPP");

	Params::RSBattlePlayer_C_SetMoveStickBack_CallFromCPP Parms{};

	Parms.bBack = bBack;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetMoveMode_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIMoveModeCPP                    MoveModeCPP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetMoveMode_CallFromCPP(EPlayerAIMoveModeCPP MoveModeCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetMoveMode_CallFromCPP");

	Params::RSBattlePlayer_C_SetMoveMode_CallFromCPP Parms{};

	Parms.MoveModeCPP = MoveModeCPP;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventWait_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetEventWait_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventWait_CallFromCPP");

	Params::RSBattlePlayer_C_SetEventWait_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnableInputStick_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetEnableInputStick_CallFromCPP(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnableInputStick_CallFromCPP");

	Params::RSBattlePlayer_C_SetEnableInputStick_CallFromCPP Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetAIMoveStick_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMoveStick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetAIMoveStick_CallFromCPP(bool bMoveStick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetAIMoveStick_CallFromCPP");

	Params::RSBattlePlayer_C_SetAIMoveStick_CallFromCPP Parms{};

	Parms.bMoveStick = bMoveStick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SearchAIPsychicObject_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SearchAIPsychicObject_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SearchAIPsychicObject_CallFromCPP");

	Params::RSBattlePlayer_C_SearchAIPsychicObject_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestartBattleAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::RestartBattleAI_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestartBattleAI_CallFromCPP");

	Params::RSBattlePlayer_C_RestartBattleAI_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetBattleThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ResetBattleThink_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetBattleThink_CallFromCPP");

	Params::RSBattlePlayer_C_ResetBattleThink_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OverwriteAttackInputKindAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             Think                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSAttackInputKind                      Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSAttackInputKind                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ERSAttackInputKind ARSBattlePlayer_C::OverwriteAttackInputKindAI_CallFromCPP(EPlayerAIBattleThinkTypeCPP Think, ERSAttackInputKind Kind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OverwriteAttackInputKindAI_CallFromCPP");

	Params::RSBattlePlayer_C_OverwriteAttackInputKindAI_CallFromCPP Parms{};

	Parms.Think = Think;
	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnChangeBattleThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             Next                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerAIBattleThinkTypeCPP             Prev                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnChangeBattleThink_CallFromCPP(EPlayerAIBattleThinkTypeCPP Next, EPlayerAIBattleThinkTypeCPP Prev)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnChangeBattleThink_CallFromCPP");

	Params::RSBattlePlayer_C_OnChangeBattleThink_CallFromCPP Parms{};

	Parms.Next = Next;
	Parms.Prev = Prev;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NotifyResetBehaviorTree_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::NotifyResetBehaviorTree_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NotifyResetBehaviorTree_CallFromCPP");

	Params::RSBattlePlayer_C_NotifyResetBehaviorTree_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NextBattleThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::NextBattleThink_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NextBattleThink_CallFromCPP");

	Params::RSBattlePlayer_C_NextBattleThink_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUseItemThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUseItemThink_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUseItemThink_CallFromCPP");

	Params::RSBattlePlayer_C_IsUseItemThink_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueConditionTransition_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UniqueNo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUniqueConditionTransition_CallFromCPP(int32 UniqueNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueConditionTransition_CallFromCPP");

	Params::RSBattlePlayer_C_IsUniqueConditionTransition_CallFromCPP Parms{};

	Parms.UniqueNo = UniqueNo;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSelfRecovery_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsSelfRecovery_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSelfRecovery_CallFromCPP");

	Params::RSBattlePlayer_C_IsSelfRecovery_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPsychicAble_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPsychicAble_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPsychicAble_CallFromCPP");

	Params::RSBattlePlayer_C_IsPsychicAble_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerStatusAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCommonStatus                     Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPlayerStatusAI_CallFromCPP(EPlayerCommonStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerStatusAI_CallFromCPP");

	Params::RSBattlePlayer_C_IsPlayerStatusAI_CallFromCPP Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_UseItem_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInputAI_UseItem_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_UseItem_CallFromCPP");

	Params::RSBattlePlayer_C_IsInputAI_UseItem_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Psychic_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInputAI_Psychic_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Psychic_CallFromCPP");

	Params::RSBattlePlayer_C_IsInputAI_Psychic_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThinkParam_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkParamCPP            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBattleThinkParam_CallFromCPP(EPlayerAIBattleThinkParamCPP Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattleThinkParam_CallFromCPP");

	Params::RSBattlePlayer_C_IsBattleThinkParam_CallFromCPP Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThink_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBattleThink_CallFromCPP(EPlayerAIBattleThinkTypeCPP Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattleThink_CallFromCPP");

	Params::RSBattlePlayer_C_IsBattleThink_CallFromCPP Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleActionStartAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBattleActionStartAI_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattleActionStartAI_CallFromCPP");

	Params::RSBattlePlayer_C_IsBattleActionStartAI_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAIMoveMode_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIMoveModeCPP                    MoveModeCPP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsAIMoveMode_CallFromCPP(EPlayerAIMoveModeCPP MoveModeCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAIMoveMode_CallFromCPP");

	Params::RSBattlePlayer_C_IsAIMoveMode_CallFromCPP Parms{};

	Parms.MoveModeCPP = MoveModeCPP;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActionStatusAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionStatus                     Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsActionStatusAI_CallFromCPP(EPlayerActionStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActionStatusAI_CallFromCPP");

	Params::RSBattlePlayer_C_IsActionStatusAI_CallFromCPP Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEventMovePosActor_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutRadius                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEventMovePosActor_CallFromCPP(class AActor** OutActor, float* OutRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEventMovePosActor_CallFromCPP");

	Params::RSBattlePlayer_C_GetEventMovePosActor_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;

	if (OutRadius != nullptr)
		*OutRadius = Parms.OutRadius;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBattleTargetActor_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ARSBattlePlayer_C::GetBattleTargetActor_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBattleTargetActor_CallFromCPP");

	Params::RSBattlePlayer_C_GetBattleTargetActor_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndEventWait_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EndEventWait_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndEventWait_CallFromCPP");

	Params::RSBattlePlayer_C_EndEventWait_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckEventMovePos_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckEventMovePos_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckEventMovePos_CallFromCPP");

	Params::RSBattlePlayer_C_CheckEventMovePos_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAIPsychicObject_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bCapture                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAttack                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckAIPsychicObject_CallFromCPP(bool bCapture, bool bAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAIPsychicObject_CallFromCPP");

	Params::RSBattlePlayer_C_CheckAIPsychicObject_CallFromCPP Parms{};

	Parms.bCapture = bCapture;
	Parms.bAttack = bAttack;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AimStartAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::AimStartAI_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AimStartAI_CallFromCPP");

	Params::RSBattlePlayer_C_AimStartAI_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AimEndAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::AimEndAI_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AimEndAI_CallFromCPP");

	Params::RSBattlePlayer_C_AimEndAI_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEventMove_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Pos_list_in                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<float>                           Radius_list_in                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Walk                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAfterWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetEventMove_CallFromCPP(const TArray<struct FVector>& Pos_list_in, const TArray<float>& Radius_list_in, bool Walk, bool bAfterWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEventMove_CallFromCPP");

	Params::RSBattlePlayer_C_SetEventMove_CallFromCPP Parms{};

	Parms.Pos_list_in = std::move(Pos_list_in);
	Parms.Radius_list_in = std::move(Radius_list_in);
	Parms.Walk = Walk;
	Parms.bAfterWait = bAfterWait;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_UseItem_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::InputAI_UseItem_CallFromCPP(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_UseItem_CallFromCPP");

	Params::RSBattlePlayer_C_InputAI_UseItem_CallFromCPP Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Psychic_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::InputAI_Psychic_CallFromCPP(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Psychic_CallFromCPP");

	Params::RSBattlePlayer_C_InputAI_Psychic_CallFromCPP Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_LeftStick_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::InputAI_LeftStick_CallFromCPP(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_LeftStick_CallFromCPP");

	Params::RSBattlePlayer_C_InputAI_LeftStick_CallFromCPP Parms{};

	Parms.X = X;
	Parms.Y = Y;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Jump_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::InputAI_Jump_CallFromCPP(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Jump_CallFromCPP");

	Params::RSBattlePlayer_C_InputAI_Jump_CallFromCPP Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Dodge_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::InputAI_Dodge_CallFromCPP(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Dodge_CallFromCPP");

	Params::RSBattlePlayer_C_InputAI_Dodge_CallFromCPP Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.InputAI_Attack_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::InputAI_Attack_CallFromCPP(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "InputAI_Attack_CallFromCPP");

	Params::RSBattlePlayer_C_InputAI_Attack_CallFromCPP Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetPlayerInputRestriction_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerInputRestrictionType             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRistriction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetPlayerInputRestriction_CallFromCPP(EPlayerInputRestrictionType Type, bool bRistriction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetPlayerInputRestriction_CallFromCPP");

	Params::RSBattlePlayer_C_SetPlayerInputRestriction_CallFromCPP Parms{};

	Parms.Type = Type;
	Parms.bRistriction = bRistriction;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestoreMaxSpeed_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::RestoreMaxSpeed_CallFromCPP(const class FName& ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestoreMaxSpeed_CallFromCPP");

	Params::RSBattlePlayer_C_RestoreMaxSpeed_CallFromCPP Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyPlayer_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemyPlayer_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyPlayer_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnemyPlayer_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionCounter_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableActionCounter_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionCounter_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnableActionCounter_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAutoCounter_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckAutoCounter_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAutoCounter_CallFromCPP");

	Params::RSBattlePlayer_C_CheckAutoCounter_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CanBattleAction_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkTypeCPP             ThinkType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CanBattleAction_CallFromCPP(EPlayerAIBattleThinkTypeCPP ThinkType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CanBattleAction_CallFromCPP");

	Params::RSBattlePlayer_C_CanBattleAction_CallFromCPP Parms{};

	Parms.ThinkType = ThinkType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ScaleMaxSpeed_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ClaimantName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ScaleMaxSpeed_CallFromCPP(float Scale, class FName ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ScaleMaxSpeed_CallFromCPP");

	Params::RSBattlePlayer_C_ScaleMaxSpeed_CallFromCPP Parms{};

	Parms.Scale = Scale;
	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUseAbleSASRecastGauge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUseAbleSASRecastGauge(E_SASKindNative SasKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUseAbleSASRecastGauge");

	Params::RSBattlePlayer_C_IsUseAbleSASRecastGauge Parms{};

	Parms.SasKind = SasKind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASEffectFixParam
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         InKind                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct F_SASParamNative>         OutFixParam                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetSASEffectFixParam(E_SASKindNative InKind, TArray<struct F_SASParamNative>* OutFixParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASEffectFixParam");

	Params::RSBattlePlayer_C_GetSASEffectFixParam Parms{};

	Parms.InKind = InKind;

	UObject::ProcessEvent(Func, &Parms);

	if (OutFixParam != nullptr)
		*OutFixParam = std::move(Parms.OutFixParam);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMaxSpeedScale_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetMaxSpeedScale_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMaxSpeedScale_CallFromCPP");

	Params::RSBattlePlayer_C_GetMaxSpeedScale_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ForceWarp_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   IdleRestoreDelay                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ForceWarp_CallFromCPP(const struct FTransform& Transform, float IdleRestoreDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ForceWarp_CallFromCPP");

	Params::RSBattlePlayer_C_ForceWarp_CallFromCPP Parms{};

	Parms.Transform = std::move(Transform);
	Parms.IdleRestoreDelay = IdleRestoreDelay;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueEffectiveSas_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InAttackActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutWinceRate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutKnockbackRate                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutDownRate                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutCrashRate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUniqueEffectiveSas_CallFromCPP(class AActor* InAttackActor, float* OutWinceRate, float* OutKnockbackRate, float* OutDownRate, float* OutCrashRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueEffectiveSas_CallFromCPP");

	Params::RSBattlePlayer_C_IsUniqueEffectiveSas_CallFromCPP Parms{};

	Parms.InAttackActor = InAttackActor;

	UObject::ProcessEvent(Func, &Parms);

	if (OutWinceRate != nullptr)
		*OutWinceRate = Parms.OutWinceRate;

	if (OutKnockbackRate != nullptr)
		*OutKnockbackRate = Parms.OutKnockbackRate;

	if (OutDownRate != nullptr)
		*OutDownRate = Parms.OutDownRate;

	if (OutCrashRate != nullptr)
		*OutCrashRate = Parms.OutCrashRate;

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsReactionChance_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsReactionChance_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsReactionChance_CallFromCPP");

	Params::RSBattlePlayer_C_IsReactionChance_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSpecialDown_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   OutSpDownWince                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsSpecialDown_CallFromCPP(float* OutSpDownWince)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSpecialDown_CallFromCPP");

	Params::RSBattlePlayer_C_IsSpecialDown_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSpDownWince != nullptr)
		*OutSpDownWince = Parms.OutSpDownWince;

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetStealthReactionInterval_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetStealthReactionInterval_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetStealthReactionInterval_CallFromCPP");

	Params::RSBattlePlayer_C_SetStealthReactionInterval_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSasStealth_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stealth_on_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Hero_order_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Check_delay                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Check_ignore                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    No_sas_cancel_in                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetSasStealth_CallFromCPP(bool Stealth_on_in, bool Hero_order_in, bool Check_delay, bool Check_ignore, bool No_sas_cancel_in)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSasStealth_CallFromCPP");

	Params::RSBattlePlayer_C_SetSasStealth_CallFromCPP Parms{};

	Parms.Stealth_on_in = Stealth_on_in;
	Parms.Hero_order_in = Hero_order_in;
	Parms.Check_delay = Check_delay;
	Parms.Check_ignore = Check_ignore;
	Parms.No_sas_cancel_in = No_sas_cancel_in;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainFieldDangerLV
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerBrainFieldDanger                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPlayerBrainFieldDanger ARSBattlePlayer_C::GetBrainFieldDangerLV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainFieldDangerLV");

	Params::RSBattlePlayer_C_GetBrainFieldDangerLV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveCoverDamage_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flag                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetReserveCoverDamage_CallFromCPP(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetReserveCoverDamage_CallFromCPP");

	Params::RSBattlePlayer_C_SetReserveCoverDamage_CallFromCPP Parms{};

	Parms.Flag = Flag;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetCoverDamagePlayer_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ResetCoverDamagePlayer_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetCoverDamagePlayer_CallFromCPP");

	Params::RSBattlePlayer_C_ResetCoverDamagePlayer_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetMaterialScalarParameterOther
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetMaterialScalarParameterOther(class FName ParamName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetMaterialScalarParameterOther");

	Params::RSBattlePlayer_C_SetMaterialScalarParameterOther Parms{};

	Parms.ParamName = ParamName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASRecastAndActiveGaugeRate
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SASGaugeRate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetSASRecastAndActiveGaugeRate(E_SASButton SASButton, float* SASGaugeRate, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASRecastAndActiveGaugeRate");

	Params::RSBattlePlayer_C_GetSASRecastAndActiveGaugeRate Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (SASGaugeRate != nullptr)
		*SASGaugeRate = Parms.SASGaugeRate;

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsIgnoreStealthVelocity
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsIgnoreStealthVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsIgnoreStealthVelocity");

	Params::RSBattlePlayer_C_IsIgnoreStealthVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUseAbleCombinationVision
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKindNative                         InKind                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUseAbleCombinationVision(E_SASKindNative InKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUseAbleCombinationVision");

	Params::RSBattlePlayer_C_IsUseAbleCombinationVision Parms{};

	Parms.InKind = InKind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetAnimLeftStickPower
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ResetAnimLeftStickPower()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetAnimLeftStickPower");

	Params::RSBattlePlayer_C_ResetAnimLeftStickPower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetForceLockTargetSelf_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetForceLockTargetSelf_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetForceLockTargetSelf_CallFromCPP");

	Params::RSBattlePlayer_C_SetForceLockTargetSelf_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ForceEndSAS_Telepo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ForceEndSAS_Telepo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ForceEndSAS_Telepo");

	Params::RSBattlePlayer_C_ForceEndSAS_Telepo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSasSelectSlow
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableSasSelectSlow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSasSelectSlow");

	Params::RSBattlePlayer_C_IsEnableSasSelectSlow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDriveMode_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDriveMode_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDriveMode_CallFromCPP");

	Params::RSBattlePlayer_C_IsDriveMode_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsManualHologramAttack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsManualHologramAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsManualHologramAttack");

	Params::RSBattlePlayer_C_IsManualHologramAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSasInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableSasInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSasInterface");

	Params::RSBattlePlayer_C_IsEnableSasInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetManualAssaultVisionSasGaugeRate
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetManualAssaultVisionSasGaugeRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetManualAssaultVisionSasGaugeRate");

	Params::RSBattlePlayer_C_GetManualAssaultVisionSasGaugeRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSasStealthVisible_CallFromCPP
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stealth_on_in                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FPlayerStealthDelayParam         DelayParam_in                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FPlayerStealthDelayParam         DelayParam_out                                         (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetSasStealthVisible_CallFromCPP(bool Stealth_on_in, const struct FPlayerStealthDelayParam& DelayParam_in, struct FPlayerStealthDelayParam* DelayParam_out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSasStealthVisible_CallFromCPP");

	Params::RSBattlePlayer_C_SetSasStealthVisible_CallFromCPP Parms{};

	Parms.Stealth_on_in = Stealth_on_in;
	Parms.DelayParam_in = std::move(DelayParam_in);

	UObject::ProcessEvent(Func, &Parms);

	if (DelayParam_out != nullptr)
		*DelayParam_out = std::move(Parms.DelayParam_out);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSasMetalVisible_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Metal_on_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameTimer                       Gametimer_in                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameTimer                       Gametimer_out                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetSasMetalVisible_CallFromCPP(bool Metal_on_in, const struct FGameTimer& Gametimer_in, struct FGameTimer* Gametimer_out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSasMetalVisible_CallFromCPP");

	Params::RSBattlePlayer_C_SetSasMetalVisible_CallFromCPP Parms{};

	Parms.Metal_on_in = Metal_on_in;
	Parms.Gametimer_in = std::move(Gametimer_in);

	UObject::ProcessEvent(Func, &Parms);

	if (Gametimer_out != nullptr)
		*Gametimer_out = std::move(Parms.Gametimer_out);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainCrashParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BrainCrashTimer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BrainCrashMissScale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyBrainCrashParam(float BrainCrashTimer, float BrainCrashMissScale, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyBrainCrashParam");

	Params::RSBattlePlayer_C_SetEnemyBrainCrashParam Parms{};

	Parms.BrainCrashTimer = BrainCrashTimer;
	Parms.BrainCrashMissScale = BrainCrashMissScale;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyStealthSeeEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShadowChange                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyStealthSeeEnable(bool On, bool ShadowChange, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyStealthSeeEnable");

	Params::RSBattlePlayer_C_SetEnemyStealthSeeEnable Parms{};

	Parms.On = On;
	Parms.ShadowChange = ShadowChange;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSwitchVisibleBrainFieldLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Unused                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnSwitchVisibleBrainFieldLevel(bool Visible, bool* Unused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSwitchVisibleBrainFieldLevel");

	Params::RSBattlePlayer_C_OnSwitchVisibleBrainFieldLevel Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	if (Unused != nullptr)
		*Unused = Parms.Unused;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetEnemyWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetEnemyWait(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetEnemyWait");

	Params::RSBattlePlayer_C_ResetEnemyWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyWait(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyWait");

	Params::RSBattlePlayer_C_SetEnemyWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyGroundTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       Return                                                 (Parm, OutParm, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetEnemyGroundTransform(const struct FTransform& Transform, struct FTransform* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemyGroundTransform");

	Params::RSBattlePlayer_C_GetEnemyGroundTransform Parms{};

	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyBrainFieldEnd(bool MoveBrainField, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyBrainFieldEnd");

	Params::RSBattlePlayer_C_SetEnemyBrainFieldEnd Parms{};

	Parms.MoveBrainField = MoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyBrainFieldStart(bool MoveBrainField, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyBrainFieldStart");

	Params::RSBattlePlayer_C_SetEnemyBrainFieldStart Parms{};

	Parms.MoveBrainField = MoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyDamageReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyDamageReaction(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyDamageReaction");

	Params::RSBattlePlayer_C_SetEnemyDamageReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetEnemyTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ResetEnemyTarget(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetEnemyTarget");

	Params::RSBattlePlayer_C_ResetEnemyTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyTarget(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyTarget");

	Params::RSBattlePlayer_C_SetEnemyTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainCrashPerformance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyBrainCrashPerformance(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyBrainCrashPerformance");

	Params::RSBattlePlayer_C_SetEnemyBrainCrashPerformance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyBossActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyBossActive(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyBossActive");

	Params::RSBattlePlayer_C_IsEnemyBossActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyStateAction(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateAction");

	Params::RSBattlePlayer_C_IsEnemyStateAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyStateMove(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateMove");

	Params::RSBattlePlayer_C_IsEnemyStateMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateDamageDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyStateDamageDown(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateDamageDown");

	Params::RSBattlePlayer_C_IsEnemyStateDamageDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyStateDamage(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateDamage");

	Params::RSBattlePlayer_C_IsEnemyStateDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyStateAttack(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateAttack");

	Params::RSBattlePlayer_C_IsEnemyStateAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.isEnemyDamageBlow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyDamageBlow(bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "isEnemyDamageBlow");

	Params::RSBattlePlayer_C_IsEnemyDamageBlow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageknockBack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyDamageknockBack(bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyDamageknockBack");

	Params::RSBattlePlayer_C_IsEnemyDamageknockBack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.isEnemyDamageLaunch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyDamageLaunch(bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "isEnemyDamageLaunch");

	Params::RSBattlePlayer_C_IsEnemyDamageLaunch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EnemyActionAnimKind                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyAction(EnemyActionAnimKind Action, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyAction");

	Params::RSBattlePlayer_C_IsEnemyAction Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnemyAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EnemyActionAnimKind                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginEnemyAction(EnemyActionAnimKind Action, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginEnemyAction");

	Params::RSBattlePlayer_C_BeginEnemyAction Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyDamageDown(bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyDamageDown");

	Params::RSBattlePlayer_C_IsEnemyDamageDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageWince
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyDamageWince(bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyDamageWince");

	Params::RSBattlePlayer_C_IsEnemyDamageWince Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EnemyMoveAnimKind                       Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyMove(EnemyMoveAnimKind Move, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyMove");

	Params::RSBattlePlayer_C_IsEnemyMove Parms{};

	Parms.Move = Move;

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnemyMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EnemyMoveAnimKind                       Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginEnemyMove(EnemyMoveAnimKind Move, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginEnemyMove");

	Params::RSBattlePlayer_C_BeginEnemyMove Parms{};

	Parms.Move = Move;

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EnemyAttackAnimKind                     Attack                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyAttack(EnemyAttackAnimKind Attack, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyAttack");

	Params::RSBattlePlayer_C_IsEnemyAttack Parms{};

	Parms.Attack = Attack;

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BeginEnemyAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EnemyAttackAnimKind                     Attack                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BeginEnemyAttack(EnemyAttackAnimKind Attack, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BeginEnemyAttack");

	Params::RSBattlePlayer_C_BeginEnemyAttack Parms{};

	Parms.Attack = Attack;

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyInterfaceSound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_EnemySound                         Enum                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEnemyInterfaceSound(Enum_EnemySound* Enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemyInterfaceSound");

	Params::RSBattlePlayer_C_GetEnemyInterfaceSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enum != nullptr)
		*Enum = Parms.Enum;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableEnemyMoveRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bReturn                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableEnemyMoveRange(bool* bReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableEnemyMoveRange");

	Params::RSBattlePlayer_C_IsEnableEnemyMoveRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReturn != nullptr)
		*bReturn = Parms.bReturn;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PlayerActionForEnemyReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// BattlePrototype::EPsychicObjectAttackTypePsychicObjectType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PsychicObjLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PlayerActionForEnemyReaction(BattlePrototype::EPsychicObjectAttackType PsychicObjectType, const struct FVector& PsychicObjLocation, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PlayerActionForEnemyReaction");

	Params::RSBattlePlayer_C_PlayerActionForEnemyReaction Parms{};

	Parms.PsychicObjectType = PsychicObjectType;
	Parms.PsychicObjLocation = std::move(PsychicObjLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnemyDataDrop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_SpawnLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SpawnDir                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDrop                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnemyDataDrop(const struct FVector& Param_SpawnLocation, const struct FVector& SpawnDir, bool* IsDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnemyDataDrop");

	Params::RSBattlePlayer_C_EnemyDataDrop Parms{};

	Parms.Param_SpawnLocation = std::move(Param_SpawnLocation);
	Parms.SpawnDir = std::move(SpawnDir);

	UObject::ProcessEvent(Func, &Parms);

	if (IsDrop != nullptr)
		*IsDrop = Parms.IsDrop;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemySpawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Spawn                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemySpawn(bool Spawn, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemySpawn");

	Params::RSBattlePlayer_C_SetEnemySpawn Parms{};

	Parms.Spawn = Spawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SpawnStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SpawnStart(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SpawnStart");

	Params::RSBattlePlayer_C_SpawnStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsHideWeak
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsHideWeak                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsHideWeak(bool* Param_IsHideWeak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsHideWeak");

	Params::RSBattlePlayer_C_IsHideWeak Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsHideWeak != nullptr)
		*Param_IsHideWeak = Parms.Param_IsHideWeak;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReturnStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ReturnStart(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReturnStart");

	Params::RSBattlePlayer_C_ReturnStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAttacking
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAttack                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAttacking(bool* IsAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAttacking");

	Params::RSBattlePlayer_C_IsAttacking Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAttack != nullptr)
		*IsAttack = Parms.IsAttack;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERSPartyPlayerKind                      TargetKind                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetTargetKind(ERSPartyPlayerKind* TargetKind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTargetKind");

	Params::RSBattlePlayer_C_GetTargetKind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetKind != nullptr)
		*TargetKind = Parms.TargetKind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_co2000Base_C*                 CoreObject                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBrainCore(class ABP_co2000Base_C** CoreObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainCore");

	Params::RSBattlePlayer_C_GetBrainCore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CoreObject != nullptr)
		*CoreObject = Parms.CoreObject;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateFloating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFloating                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyStateFloating(bool* IsFloating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateFloating");

	Params::RSBattlePlayer_C_IsEnemyStateFloating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFloating != nullptr)
		*IsFloating = Parms.IsFloating;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CalcCameraShake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           InputShakeClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ShakeLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           OutputShakeClass                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutputScale                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::CalcCameraShake(class UClass* InputShakeClass, float InputScale, const struct FVector& ShakeLocation, class UClass** OutputShakeClass, float* OutputScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CalcCameraShake");

	Params::RSBattlePlayer_C_CalcCameraShake Parms{};

	Parms.InputShakeClass = InputShakeClass;
	Parms.InputScale = InputScale;
	Parms.ShakeLocation = std::move(ShakeLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (OutputShakeClass != nullptr)
		*OutputShakeClass = Parms.OutputShakeClass;

	if (OutputScale != nullptr)
		*OutputScale = Parms.OutputScale;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyPressDownEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dammy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyPressDownEnd(bool* Dammy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyPressDownEnd");

	Params::RSBattlePlayer_C_SetEnemyPressDownEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dammy != nullptr)
		*Dammy = Parms.Dammy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndUniqueObjState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndUniqueObjState(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndUniqueObjState");

	Params::RSBattlePlayer_C_EndUniqueObjState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartUniqueObjState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PsychicObjectBasic_C*         AttackObject                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartUniqueObjState(class ABP_PsychicObjectBasic_C* AttackObject, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartUniqueObjState");

	Params::RSBattlePlayer_C_StartUniqueObjState Parms{};

	Parms.AttackObject = AttackObject;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckUniqueObjState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckUniqueObjState(const struct FHCHitResult& HitResult, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckUniqueObjState");

	Params::RSBattlePlayer_C_CheckUniqueObjState Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueObjState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnState                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUniqueObjState(bool* ReturnState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueObjState");

	Params::RSBattlePlayer_C_IsUniqueObjState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnState != nullptr)
		*ReturnState = Parms.ReturnState;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SwitchDispCore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DisplayOn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SwitchDispCore(bool DisplayOn, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SwitchDispCore");

	Params::RSBattlePlayer_C_SwitchDispCore Parms{};

	Parms.DisplayOn = DisplayOn;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnStartCrashChance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStart                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnStartCrashChance(bool* bStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnStartCrashChance");

	Params::RSBattlePlayer_C_OnStartCrashChance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bStart != nullptr)
		*bStart = Parms.bStart;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEndCrashChance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEndCrashChance(bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEndCrashChance");

	Params::RSBattlePlayer_C_OnEndCrashChance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPossibleTargetAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPossible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPossibleTargetAttack(class AActor* Attacker, bool* bPossible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPossibleTargetAttack");

	Params::RSBattlePlayer_C_IsPossibleTargetAttack Parms{};

	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);

	if (bPossible != nullptr)
		*bPossible = Parms.bPossible;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableLostAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDisableLostAction(bool* bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDisableLostAction");

	Params::RSBattlePlayer_C_IsDisableLostAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisable != nullptr)
		*bDisable = Parms.bDisable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCoreCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDamagePartCollisionComponent*    CoreCollision                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCoreCollision(class UDamagePartCollisionComponent** CoreCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCoreCollision");

	Params::RSBattlePlayer_C_GetCoreCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CoreCollision != nullptr)
		*CoreCollision = Parms.CoreCollision;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSpawnMoveStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnSpawnMoveStart(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSpawnMoveStart");

	Params::RSBattlePlayer_C_OnSpawnMoveStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldResetAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMoveBrainField                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnemyBrainFieldResetAction(bool bMoveBrainField, bool* bReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnemyBrainFieldResetAction");

	Params::RSBattlePlayer_C_OnEnemyBrainFieldResetAction Parms{};

	Parms.bMoveBrainField = bMoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (bReset != nullptr)
		*bReset = Parms.bReset;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldFinishWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMoveBrainField                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnemyBrainFieldFinishWeapon(bool bMoveBrainField, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnemyBrainFieldFinishWeapon");

	Params::RSBattlePlayer_C_OnEnemyBrainFieldFinishWeapon Parms{};

	Parms.bMoveBrainField = bMoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldResetStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMoveBrainField                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnemyBrainFieldResetStatus(bool bMoveBrainField, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnemyBrainFieldResetStatus");

	Params::RSBattlePlayer_C_OnEnemyBrainFieldResetStatus Parms{};

	Parms.bMoveBrainField = bMoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldMoveInner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyBrainFieldMoveInner(bool MoveBrainField, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyBrainFieldMoveInner");

	Params::RSBattlePlayer_C_SetEnemyBrainFieldMoveInner Parms{};

	Parms.MoveBrainField = MoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyBrainFieldMoveNormal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveBrainField                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyBrainFieldMoveNormal(bool MoveBrainField, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyBrainFieldMoveNormal");

	Params::RSBattlePlayer_C_SetEnemyBrainFieldMoveNormal Parms{};

	Parms.MoveBrainField = MoveBrainField;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEnemyBrainFieldCutChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEnemyBrainFieldCutChange(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEnemyBrainFieldCutChange");

	Params::RSBattlePlayer_C_OnEnemyBrainFieldCutChange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ChangeAiType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_EnemyAiType                        Param_ChangeAiType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFailed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ChangeAiType(Enum_EnemyAiType Param_ChangeAiType, bool* bFailed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ChangeAiType");

	Params::RSBattlePlayer_C_ChangeAiType Parms{};

	Parms.Param_ChangeAiType = Param_ChangeAiType;

	UObject::ProcessEvent(Func, &Parms);

	if (bFailed != nullptr)
		*bFailed = Parms.bFailed;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckChangeAiTypeForHpRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Failed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckChangeAiTypeForHpRate(bool* Failed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckChangeAiTypeForHpRate");

	Params::RSBattlePlayer_C_CheckChangeAiTypeForHpRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Failed != nullptr)
		*Failed = Parms.Failed;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsChangeAiTypeAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_EnemyAiType                        InAiType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPossible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsChangeAiTypeAction(Enum_EnemyAiType InAiType, bool* bPossible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsChangeAiTypeAction");

	Params::RSBattlePlayer_C_IsChangeAiTypeAction Parms{};

	Parms.InAiType = InAiType;

	UObject::ProcessEvent(Func, &Parms);

	if (bPossible != nullptr)
		*bPossible = Parms.bPossible;
}


// Function RSBattlePlayer.RSBattlePlayer_C.em1200_ChangePhaseParamSetting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1200_ChangePhaseParamSetting(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "em1200_ChangePhaseParamSetting");

	Params::RSBattlePlayer_C_Em1200_ChangePhaseParamSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.em1210_AddPSychicFlyObj
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PsychicObjectBasic_C*         FlyObj                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1210_AddPSychicFlyObj(class ABP_PsychicObjectBasic_C* FlyObj, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "em1210_AddPSychicFlyObj");

	Params::RSBattlePlayer_C_Em1210_AddPSychicFlyObj Parms{};

	Parms.FlyObj = FlyObj;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartReactionDilation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ReactionKind                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AddDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartReactionDilation(uint8 ReactionKind, bool AddDamage, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartReactionDilation");

	Params::RSBattlePlayer_C_StartReactionDilation Parms{};

	Parms.ReactionKind = ReactionKind;
	Parms.AddDamage = AddDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDiscoveredOnceInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDiscoverd                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyDiscoveredOnceInterface(bool* bDiscoverd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyDiscoveredOnceInterface");

	Params::RSBattlePlayer_C_IsEnemyDiscoveredOnceInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDiscoverd != nullptr)
		*bDiscoverd = Parms.bDiscoverd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em0700_EnableInvalidDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em0700_EnableInvalidDamage(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em0700_EnableInvalidDamage");

	Params::RSBattlePlayer_C_Em0700_EnableInvalidDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_StartDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TotalDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1400_StartDither(float TotalDuration, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em1400_StartDither");

	Params::RSBattlePlayer_C_Em1400_StartDither Parms{};

	Parms.TotalDuration = TotalDuration;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_EndDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1400_EndDither(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em1400_EndDither");

	Params::RSBattlePlayer_C_Em1400_EndDither Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_UpdateDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEasingFunc                             EasingFunc                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1400_UpdateDither(EEasingFunc EasingFunc, float DeltaSec, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em1400_UpdateDither");

	Params::RSBattlePlayer_C_Em1400_UpdateDither Parms{};

	Parms.EasingFunc = EasingFunc;
	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_SetSpawnTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1400_SetSpawnTransform(const struct FTransform& SpawnTransform, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em1400_SetSpawnTransform");

	Params::RSBattlePlayer_C_Em1400_SetSpawnTransform Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em1400_GetSpawnTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1400_GetSpawnTransform(struct FTransform* SpawTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em1400_GetSpawnTransform");

	Params::RSBattlePlayer_C_Em1400_GetSpawnTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawTransform != nullptr)
		*SpawTransform = std::move(Parms.SpawTransform);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainFieldEnemyAlive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnemyAlive                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBrainFieldEnemyAlive(bool* bEnemyAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainFieldEnemyAlive");

	Params::RSBattlePlayer_C_IsBrainFieldEnemyAlive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnemyAlive != nullptr)
		*bEnemyAlive = Parms.bEnemyAlive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSwitchAttackCollisionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSwitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsSwitchAttackCollisionInfo(bool* IsSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSwitchAttackCollisionInfo");

	Params::RSBattlePlayer_C_IsSwitchAttackCollisionInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSwitch != nullptr)
		*IsSwitch = Parms.IsSwitch;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyUpDownWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DownWait                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetEnemyUpDownWait(bool DownWait, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyUpDownWait");

	Params::RSBattlePlayer_C_SetEnemyUpDownWait Parms{};

	Parms.DownWait = DownWait;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyUpDownWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bUpDownWait                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyUpDownWait(bool* bUpDownWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyUpDownWait");

	Params::RSBattlePlayer_C_IsEnemyUpDownWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bUpDownWait != nullptr)
		*bUpDownWait = Parms.bUpDownWait;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartCriticalHitSlow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCHitResult                     InHitResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartCriticalHitSlow(const struct FHCHitResult& InHitResult, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartCriticalHitSlow");

	Params::RSBattlePlayer_C_StartCriticalHitSlow Parms{};

	Parms.InHitResult = std::move(InHitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.em1130_EnableWeak
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em1130_EnableWeak(bool bEnable, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "em1130_EnableWeak");

	Params::RSBattlePlayer_C_Em1130_EnableWeak Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemySpawnConditionCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSpawnOK                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetEnemySpawnConditionCheck(bool* IsSpawnOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemySpawnConditionCheck");

	Params::RSBattlePlayer_C_GetEnemySpawnConditionCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSpawnOK != nullptr)
		*IsSpawnOK = Parms.IsSpawnOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartEnemyCrashVisionHitEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartEnemyCrashVisionHitEffect(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartEnemyCrashVisionHitEffect");

	Params::RSBattlePlayer_C_StartEnemyCrashVisionHitEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartEnemyCrashVisionHitUniqueEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartEnemyCrashVisionHitUniqueEffect(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartEnemyCrashVisionHitUniqueEffect");

	Params::RSBattlePlayer_C_StartEnemyCrashVisionHitUniqueEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BindingCrashVisionEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BindingCrashVisionEnemy(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BindingCrashVisionEnemy");

	Params::RSBattlePlayer_C_BindingCrashVisionEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.em8300_DeadBattleSimulator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8300_DeadBattleSimulator(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "em8300_DeadBattleSimulator");

	Params::RSBattlePlayer_C_Em8300_DeadBattleSimulator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyRepop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Repop                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyRepop(bool* Repop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyRepop");

	Params::RSBattlePlayer_C_IsEnemyRepop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Repop != nullptr)
		*Repop = Parms.Repop;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SAS_CommonEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SASKind                               SAS_Kind                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCancelSASCost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RemainTime                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::SAS_CommonEnd(E_SASKind SAS_Kind, bool bCancelSASCost, bool* bDummy, float* RemainTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SAS_CommonEnd");

	Params::RSBattlePlayer_C_SAS_CommonEnd Parms{};

	Parms.SAS_Kind = SAS_Kind;
	Parms.bCancelSASCost = bCancelSASCost;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;

	if (RemainTime != nullptr)
		*RemainTime = Parms.RemainTime;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SAS_CommonStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFSASCommand                     SAS_Command                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SAS_CommonStart(const struct FFSASCommand& SAS_Command, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SAS_CommonStart");

	Params::RSBattlePlayer_C_SAS_CommonStart Parms{};

	Parms.SAS_Command = std::move(SAS_Command);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBarrierComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EnemyBarrierComponent_C*      Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBarrierComponent(class UBP_EnemyBarrierComponent_C** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBarrierComponent");

	Params::RSBattlePlayer_C_GetBarrierComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ENpcComponent_C*              Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEnpcComponent(class UBP_ENpcComponent_C** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnpcComponent");

	Params::RSBattlePlayer_C_GetEnpcComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcSequencerComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ENPCSequencerComponent_C*     Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEnpcSequencerComponent(class UBP_ENPCSequencerComponent_C** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnpcSequencerComponent");

	Params::RSBattlePlayer_C_GetEnpcSequencerComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetPartner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PartnerActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_GetPartner(class AActor** PartnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_GetPartner");

	Params::RSBattlePlayer_C_Em8000_GetPartner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartnerActor != nullptr)
		*PartnerActor = Parms.PartnerActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_BulletAttackEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBulletType                             BulletType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_BulletAttackEnd(EBulletType BulletType, bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_BulletAttackEnd");

	Params::RSBattlePlayer_C_Em8200_BulletAttackEnd Parms{};

	Parms.BulletType = BulletType;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartTelepoMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StartTelepoMove(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StartTelepoMove");

	Params::RSBattlePlayer_C_Em8200_StartTelepoMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EndTelepoMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EndTelepoMove(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EndTelepoMove");

	Params::RSBattlePlayer_C_Em8200_EndTelepoMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CalcTelepoMoveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETelepoMoveType_em8200                  TelepoType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TelepoMoveLocation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8200_CalcTelepoMoveLocation(ETelepoMoveType_em8200 TelepoType, struct FVector* TelepoMoveLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_CalcTelepoMoveLocation");

	Params::RSBattlePlayer_C_Em8200_CalcTelepoMoveLocation Parms{};

	Parms.TelepoType = TelepoType;

	UObject::ProcessEvent(Func, &Parms);

	if (TelepoMoveLocation != nullptr)
		*TelepoMoveLocation = std::move(Parms.TelepoMoveLocation);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetTelepoMoveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          OutputTelepoMoveLocation                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8200_GetTelepoMoveLocation(struct FVector* OutputTelepoMoveLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_GetTelepoMoveLocation");

	Params::RSBattlePlayer_C_Em8200_GetTelepoMoveLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutputTelepoMoveLocation != nullptr)
		*OutputTelepoMoveLocation = std::move(Parms.OutputTelepoMoveLocation);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetTelepoMoveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InputTelepoMoveLocation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetTelepoMoveLocation(const struct FVector& InputTelepoMoveLocation, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetTelepoMoveLocation");

	Params::RSBattlePlayer_C_Em8200_SetTelepoMoveLocation Parms{};

	Parms.InputTelepoMoveLocation = std::move(InputTelepoMoveLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorPlayMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_CopyActorPlayMontage(int32 Param_Index, class UAnimMontage* Montage, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_CopyActorPlayMontage");

	Params::RSBattlePlayer_C_Em8200_CopyActorPlayMontage Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorUpdate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextState                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_CopyActorUpdate(int32 Param_Index, float DeltaSec, int32* NextState, bool* bEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_CopyActorUpdate");

	Params::RSBattlePlayer_C_Em8200_CopyActorUpdate Parms{};

	Parms.Param_Index = Param_Index;
	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	if (NextState != nullptr)
		*NextState = Parms.NextState;

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_CopyActorActive(bool bActive, int32 Param_Index, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_CopyActorActive");

	Params::RSBattlePlayer_C_Em8200_CopyActorActive Parms{};

	Parms.bActive = bActive;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetCopyActorAssultTotalTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TotalTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8200_GetCopyActorAssultTotalTime(int32 Param_Index, float* TotalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_GetCopyActorAssultTotalTime");

	Params::RSBattlePlayer_C_Em8200_GetCopyActorAssultTotalTime Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (TotalTime != nullptr)
		*TotalTime = Parms.TotalTime;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetCopyActorActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bActive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_GetCopyActorActive(int32 Param_Index, bool* bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_GetCopyActorActive");

	Params::RSBattlePlayer_C_Em8200_GetCopyActorActive Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (bActive != nullptr)
		*bActive = Parms.bActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetCopyActorLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetCopyActorLocation(int32 Param_Index, const struct FVector& NewLocation, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetCopyActorLocation");

	Params::RSBattlePlayer_C_Em8200_SetCopyActorLocation Parms{};

	Parms.Param_Index = Param_Index;
	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetCopyActorRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetCopyActorRotation(int32 Param_Index, const struct FRotator& NewRotation, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetCopyActorRotation");

	Params::RSBattlePlayer_C_Em8200_SetCopyActorRotation Parms{};

	Parms.Param_Index = Param_Index;
	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetTargetableCopyActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSBattleCharacter_C*             RSBattleCharacter                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8200_GetTargetableCopyActor(int32 Param_Index, class ARSBattleCharacter_C** RSBattleCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_GetTargetableCopyActor");

	Params::RSBattlePlayer_C_Em8200_GetTargetableCopyActor Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (RSBattleCharacter != nullptr)
		*RSBattleCharacter = Parms.RSBattleCharacter;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StoreHomingElecStartEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StoreHomingElecStartEnd(const struct FVector& StartLocation, const struct FVector& EndLocation, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StoreHomingElecStartEnd");

	Params::RSBattlePlayer_C_Em8200_StoreHomingElecStartEnd Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartSeeThrough
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StartSeeThrough(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StartSeeThrough");

	Params::RSBattlePlayer_C_Em8200_StartSeeThrough Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSpStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSpStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsSpStart(bool* bSpStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSpStart");

	Params::RSBattlePlayer_C_IsSpStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSpStart != nullptr)
		*bSpStart = Parms.bSpStart;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetSpStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSpStart                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetSpStart(bool bSpStart, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetSpStart");

	Params::RSBattlePlayer_C_SetSpStart Parms{};

	Parms.bSpStart = bSpStart;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_PillarIceExtendTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ExtendTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_PillarIceExtendTime(float ExtendTime, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_PillarIceExtendTime");

	Params::RSBattlePlayer_C_Em8200_PillarIceExtendTime Parms{};

	Parms.ExtendTime = ExtendTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetSpShockWaveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetSpShockWaveLocation(const struct FVector& Location, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetSpShockWaveLocation");

	Params::RSBattlePlayer_C_Em8200_SetSpShockWaveLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_ApplyCommonBranch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8210_ApplyCommonBranch(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8210_ApplyCommonBranch");

	Params::RSBattlePlayer_C_Em8210_ApplyCommonBranch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_IsAttackDriveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_IsAttackDriveMode(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_IsAttackDriveMode");

	Params::RSBattlePlayer_C_Em8000_IsAttackDriveMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_IsAttackBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_IsAttackBrainField(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_IsAttackBrainField");

	Params::RSBattlePlayer_C_Em8000_IsAttackBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_FireBomb
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHard                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_FireBomb(class AActor* Parent, bool bHard, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_FireBomb");

	Params::RSBattlePlayer_C_Em8000_FireBomb Parms{};

	Parms.Parent = Parent;
	Parms.bHard = bHard;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetBattleProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Process                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_SetBattleProcess(int32 Process, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_SetBattleProcess");

	Params::RSBattlePlayer_C_Em8000_SetBattleProcess Parms{};

	Parms.Process = Process;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckAbleInterceptInReactionChance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAbleIntercept                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckAbleInterceptInReactionChance(bool* bAbleIntercept)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckAbleInterceptInReactionChance");

	Params::RSBattlePlayer_C_CheckAbleInterceptInReactionChance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAbleIntercept != nullptr)
		*bAbleIntercept = Parms.bAbleIntercept;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_SetAutoAimRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewRate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_SetAutoAimRate(float NewRate, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_SetAutoAimRate");

	Params::RSBattlePlayer_C_Em8010_SetAutoAimRate Parms{};

	Parms.NewRate = NewRate;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Ch0500_StartSeeThrough
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Ch0500_StartSeeThrough(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Ch0500_StartSeeThrough");

	Params::RSBattlePlayer_C_Ch0500_StartSeeThrough Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetTriggerLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_SetTriggerLocation(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_SetTriggerLocation");

	Params::RSBattlePlayer_C_Em8000_SetTriggerLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetStealthReactionInterval
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::SetStealthReactionInterval(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetStealthReactionInterval");

	Params::RSBattlePlayer_C_SetStealthReactionInterval Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_SelectChakramCombo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ComboType                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Np1100_SelectChakramCombo(class FString* ComboType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_SelectChakramCombo");

	Params::RSBattlePlayer_C_Np1100_SelectChakramCombo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ComboType != nullptr)
		*ComboType = std::move(Parms.ComboType);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_GetChakramComboList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<uint8>                           ChakramComboList                                       (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::Np1100_GetChakramComboList(TArray<uint8>* ChakramComboList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_GetChakramComboList");

	Params::RSBattlePlayer_C_Np1100_GetChakramComboList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChakramComboList != nullptr)
		*ChakramComboList = std::move(Parms.ChakramComboList);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Ch0900_CreateCopy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Ch0900_CreateCopy(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Ch0900_CreateCopy");

	Params::RSBattlePlayer_C_Ch0900_CreateCopy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_StartHidden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_StartHidden(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_StartHidden");

	Params::RSBattlePlayer_C_Np1100_StartHidden Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_EndHidden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_EndHidden(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_EndHidden");

	Params::RSBattlePlayer_C_Np1100_EndHidden Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_SetBattlePhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_SetBattlePhase(int32 Phase, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_SetBattlePhase");

	Params::RSBattlePlayer_C_Np1100_SetBattlePhase Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetChangeEm8010Process
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_SetChangeEm8010Process(int32 Value, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_SetChangeEm8010Process");

	Params::RSBattlePlayer_C_Em8000_SetChangeEm8010Process Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetChangeEm8010Process
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Process                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_GetChangeEm8010Process(int32* Process)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_GetChangeEm8010Process");

	Params::RSBattlePlayer_C_Em8000_GetChangeEm8010Process Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Process != nullptr)
		*Process = Parms.Process;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ExecChangeEm8010
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_ExecChangeEm8010(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_ExecChangeEm8010");

	Params::RSBattlePlayer_C_Em8000_ExecChangeEm8010 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_SetThrowCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAdd                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_SetThrowCount(bool bAdd, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_SetThrowCount");

	Params::RSBattlePlayer_C_Np1100_SetThrowCount Parms{};

	Parms.bAdd = bAdd;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ForceFinishMetamorphosis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBrainFieldCancel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ForceFinishMetamorphosis(bool bBrainFieldCancel, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ForceFinishMetamorphosis");

	Params::RSBattlePlayer_C_ForceFinishMetamorphosis Parms{};

	Parms.bBrainFieldCancel = bBrainFieldCancel;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_UseAttack_BrainTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_UseAttack_BrainTalk(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_UseAttack_BrainTalk");

	Params::RSBattlePlayer_C_Np1100_UseAttack_BrainTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_UseSpTrigger_BrainTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_UseSpTrigger_BrainTalk(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_UseSpTrigger_BrainTalk");

	Params::RSBattlePlayer_C_Np1100_UseSpTrigger_BrainTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UseAttackEnd_BrainTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_UseAttackEnd_BrainTalk(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_UseAttackEnd_BrainTalk");

	Params::RSBattlePlayer_C_Em8200_UseAttackEnd_BrainTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100UseAfterSpAttack_BrainTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100UseAfterSpAttack_BrainTalk(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100UseAfterSpAttack_BrainTalk");

	Params::RSBattlePlayer_C_Np1100UseAfterSpAttack_BrainTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_StartSpTriggerMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_StartSpTriggerMove(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_StartSpTriggerMove");

	Params::RSBattlePlayer_C_Np1100_StartSpTriggerMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_EndSpTriggerMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_EndSpTriggerMove(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_EndSpTriggerMove");

	Params::RSBattlePlayer_C_Np1100_EndSpTriggerMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetBattlePhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattlePhase_em8210                     BattlePhase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetBattlePhase(EBattlePhase_em8210 BattlePhase, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetBattlePhase");

	Params::RSBattlePlayer_C_Em8200_SetBattlePhase Parms{};

	Parms.BattlePhase = BattlePhase;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_GetBattlePhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattlePhase_em8210                     BattlePhase                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8200_GetBattlePhase(EBattlePhase_em8210* BattlePhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_GetBattlePhase");

	Params::RSBattlePlayer_C_Em8200_GetBattlePhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattlePhase != nullptr)
		*BattlePhase = Parms.BattlePhase;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CanPlayExtraSasCutin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESASCutinExtraID                        CutinID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanPlay                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_CanPlayExtraSasCutin(ESASCutinExtraID CutinID, bool* CanPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_CanPlayExtraSasCutin");

	Params::RSBattlePlayer_C_Em8200_CanPlayExtraSasCutin Parms{};

	Parms.CutinID = CutinID;

	UObject::ProcessEvent(Func, &Parms);

	if (CanPlay != nullptr)
		*CanPlay = Parms.CanPlay;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetCanPlayExtraSasCutin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCanPlay                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ESASCutinExtraID                        CutinID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetCanPlayExtraSasCutin(bool bCanPlay, ESASCutinExtraID CutinID, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetCanPlayExtraSasCutin");

	Params::RSBattlePlayer_C_Em8200_SetCanPlayExtraSasCutin Parms{};

	Parms.bCanPlay = bCanPlay;
	Parms.CutinID = CutinID;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PassedStartBrainFieldStartHp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PassedStartBrainFieldStartHp(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PassedStartBrainFieldStartHp");

	Params::RSBattlePlayer_C_PassedStartBrainFieldStartHp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartDodgeMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StartDodgeMove(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StartDodgeMove");

	Params::RSBattlePlayer_C_Em8200_StartDodgeMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_CanStartDodgeMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8210_CanStartDodgeMove(bool* CanStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8210_CanStartDodgeMove");

	Params::RSBattlePlayer_C_Em8210_CanStartDodgeMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanStart != nullptr)
		*CanStart = Parms.CanStart;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_EndDodgeMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8210_EndDodgeMove(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8210_EndDodgeMove");

	Params::RSBattlePlayer_C_Em8210_EndDodgeMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableDodgeJust
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EnableDodgeJust(bool bEnable, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EnableDodgeJust");

	Params::RSBattlePlayer_C_Em8200_EnableDodgeJust Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsEnableDodgeJust
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_IsEnableDodgeJust(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_IsEnableDodgeJust");

	Params::RSBattlePlayer_C_Em8200_IsEnableDodgeJust Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnpcBulletAttackEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnpcBulletAttackEnd(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnpcBulletAttackEnd");

	Params::RSBattlePlayer_C_EnpcBulletAttackEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_SetFakeUniqueName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FakeName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_SetFakeUniqueName(class FName FakeName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_SetFakeUniqueName");

	Params::RSBattlePlayer_C_Em8010_SetFakeUniqueName Parms{};

	Parms.FakeName = FakeName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetFakeUniqueName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FakeName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_SetFakeUniqueName(class FName FakeName, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_SetFakeUniqueName");

	Params::RSBattlePlayer_C_Em8000_SetFakeUniqueName Parms{};

	Parms.FakeName = FakeName;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Is Unique Enpc Type
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUnique                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Is_Unique_Enpc_Type(bool* IsUnique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Is Unique Enpc Type");

	Params::RSBattlePlayer_C_Is_Unique_Enpc_Type Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnique != nullptr)
		*IsUnique = Parms.IsUnique;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_AttachMask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_AttachMask(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_AttachMask");

	Params::RSBattlePlayer_C_Em8200_AttachMask Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetLastPhaseHpRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetLastPhaseHpRate(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetLastPhaseHpRate");

	Params::RSBattlePlayer_C_Em8200_SetLastPhaseHpRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Np1100_StartSpAfterVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Np1100_StartSpAfterVoice(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Np1100_StartSpAfterVoice");

	Params::RSBattlePlayer_C_Np1100_StartSpAfterVoice Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcDyingHpRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EnpcDyingHpRate                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEnpcDyingHpRate(float* EnpcDyingHpRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnpcDyingHpRate");

	Params::RSBattlePlayer_C_GetEnpcDyingHpRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EnpcDyingHpRate != nullptr)
		*EnpcDyingHpRate = Parms.EnpcDyingHpRate;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_PlayBattleVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleVoice_em8200                     EBattleVoiceType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_PlayBattleVoice(EBattleVoice_em8200 EBattleVoiceType, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_PlayBattleVoice");

	Params::RSBattlePlayer_C_Em8200_PlayBattleVoice Parms{};

	Parms.EBattleVoiceType = EBattleVoiceType;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_SetExecRush
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bExec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_SetExecRush(bool bExec, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_SetExecRush");

	Params::RSBattlePlayer_C_Em8010_SetExecRush Parms{};

	Parms.bExec = bExec;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SuicideInformOwner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SuicideInformOwner(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SuicideInformOwner");

	Params::RSBattlePlayer_C_Em8200_SuicideInformOwner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_NotifyDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_NotifyDead(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_NotifyDead");

	Params::RSBattlePlayer_C_Em8000_NotifyDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_HomingElecEnd_BrainTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_HomingElecEnd_BrainTalk(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_HomingElecEnd_BrainTalk");

	Params::RSBattlePlayer_C_Em8200_HomingElecEnd_BrainTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetWaitEventParty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InWait                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetWaitEventParty(bool InWait, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetWaitEventParty");

	Params::RSBattlePlayer_C_Em8200_SetWaitEventParty Parms{};

	Parms.InWait = InWait;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_SetAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAIBattleThinkType                AiType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_SetAction(EPlayerAIBattleThinkType AiType, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_SetAction");

	Params::RSBattlePlayer_C_Em8000_SetAction Parms{};

	Parms.AiType = AiType;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UpdateDodgeJust
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_UpdateDodgeJust(float DeltaSec, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_UpdateDodgeJust");

	Params::RSBattlePlayer_C_Em8200_UpdateDodgeJust Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_StartAppearEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAppear                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8290_StartAppearEffect(bool InAppear, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8290_StartAppearEffect");

	Params::RSBattlePlayer_C_Em8290_StartAppearEffect Parms{};

	Parms.InAppear = InAppear;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_SetSafeDestroy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8290_SetSafeDestroy(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8290_SetSafeDestroy");

	Params::RSBattlePlayer_C_Em8290_SetSafeDestroy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_StartDisappear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8290_StartDisappear(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8290_StartDisappear");

	Params::RSBattlePlayer_C_Em8290_StartDisappear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Ch0900_ForceCopyDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Ch0900_ForceCopyDead(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Ch0900_ForceCopyDead");

	Params::RSBattlePlayer_C_Ch0900_ForceCopyDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartDodgeJustFlash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FlashIntervalTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StartDodgeJustFlash(float FlashIntervalTime, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StartDodgeJustFlash");

	Params::RSBattlePlayer_C_Em8200_StartDodgeJustFlash Parms{};

	Parms.FlashIntervalTime = FlashIntervalTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_UpdateDodgeJustFlash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_UpdateDodgeJustFlash(float DeltaSec, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_UpdateDodgeJustFlash");

	Params::RSBattlePlayer_C_Em8200_UpdateDodgeJustFlash Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EndDodgeJustFlash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EndDodgeJustFlash(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EndDodgeJustFlash");

	Params::RSBattlePlayer_C_Em8200_EndDodgeJustFlash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetMaskVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewVisibility                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetMaskVisibility(bool NewVisibility, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetMaskVisibility");

	Params::RSBattlePlayer_C_Em8200_SetMaskVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableTargetableCopyActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EnableTargetableCopyActor(int32 Param_Index, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EnableTargetableCopyActor");

	Params::RSBattlePlayer_C_Em8200_EnableTargetableCopyActor Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_SetEyeMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_SetEyeMaterial(bool On, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_SetEyeMaterial");

	Params::RSBattlePlayer_C_Em8200_SetEyeMaterial Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_1stAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_1stAttack(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_1stAttack");

	Params::RSBattlePlayer_C_Em8000_1stAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsTemporaryDriveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTempDrive                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsTemporaryDriveMode(bool* IsTempDrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsTemporaryDriveMode");

	Params::RSBattlePlayer_C_IsTemporaryDriveMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTempDrive != nullptr)
		*IsTempDrive = Parms.IsTempDrive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_StartFinishMetamorphosis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_StartFinishMetamorphosis(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_StartFinishMetamorphosis");

	Params::RSBattlePlayer_C_Em8010_StartFinishMetamorphosis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueCondition_OpenBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUniqueCondition_OpenBrainField(bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueCondition_OpenBrainField");

	Params::RSBattlePlayer_C_IsUniqueCondition_OpenBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_EndUniqueNoDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8210_EndUniqueNoDead(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8210_EndUniqueNoDead");

	Params::RSBattlePlayer_C_Em8210_EndUniqueNoDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsRegisterTelepoMoveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRegister                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_IsRegisterTelepoMoveLocation(bool* IsRegister)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_IsRegisterTelepoMoveLocation");

	Params::RSBattlePlayer_C_Em8200_IsRegisterTelepoMoveLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsRegister != nullptr)
		*IsRegister = Parms.IsRegister;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueCondition_Drive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUniqueCondition_Drive(bool* bOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueCondition_Drive");

	Params::RSBattlePlayer_C_IsUniqueCondition_Drive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsAttachMask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttach                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_IsAttachMask(bool* bAttach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_IsAttachMask");

	Params::RSBattlePlayer_C_Em8200_IsAttachMask Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAttach != nullptr)
		*bAttach = Parms.bAttach;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_IsMaskVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_IsMaskVisible(bool* IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_IsMaskVisible");

	Params::RSBattlePlayer_C_Em8200_IsMaskVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsVisible != nullptr)
		*IsVisible = Parms.IsVisible;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_CopyActorWarmUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_CopyActorWarmUp(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_CopyActorWarmUp");

	Params::RSBattlePlayer_C_Em8200_CopyActorWarmUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartSpPsychic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   StartPsychicType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StartSpPsychic(int32 StartPsychicType, bool Shot, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StartSpPsychic");

	Params::RSBattlePlayer_C_Em8200_StartSpPsychic Parms{};

	Parms.StartPsychicType = StartPsychicType;
	Parms.Shot = Shot;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableAimCopyActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EnableAimCopyActor(bool bEnable, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EnableAimCopyActor");

	Params::RSBattlePlayer_C_Em8200_EnableAimCopyActor Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_StartAimCopyActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AimSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxAimAngle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InternalLock                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ToCamera                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_StartAimCopyActor(float AimSpeed, float MaxAimAngle, bool InternalLock, bool ToCamera, class FName SocketName, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_StartAimCopyActor");

	Params::RSBattlePlayer_C_Em8200_StartAimCopyActor Parms{};

	Parms.AimSpeed = AimSpeed;
	Parms.MaxAimAngle = MaxAimAngle;
	Parms.InternalLock = InternalLock;
	Parms.ToCamera = ToCamera;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_TriggerSequenceAfter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAfter                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_TriggerSequenceAfter(bool bAfter, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_TriggerSequenceAfter");

	Params::RSBattlePlayer_C_Em8200_TriggerSequenceAfter Parms{};

	Parms.bAfter = bAfter;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartDamageMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          DamageDir                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DeadMove                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Duumy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartDamageMove(const struct FVector& DamageDir, float Power, bool DeadMove, bool* Duumy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartDamageMove");

	Params::RSBattlePlayer_C_StartDamageMove Parms{};

	Parms.DamageDir = std::move(DamageDir);
	Parms.Power = Power;
	Parms.DeadMove = DeadMove;

	UObject::ProcessEvent(Func, &Parms);

	if (Duumy != nullptr)
		*Duumy = Parms.Duumy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EnableIntenceVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EnableIntenceVoice(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EnableIntenceVoice");

	Params::RSBattlePlayer_C_Em8200_EnableIntenceVoice Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetShockwaveEffectArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class URSParticleSystemComponentBase*>EffectArray                                            (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_GetShockwaveEffectArray(TArray<class URSParticleSystemComponentBase*>* EffectArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_GetShockwaveEffectArray");

	Params::RSBattlePlayer_C_Em8000_GetShockwaveEffectArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EffectArray != nullptr)
		*EffectArray = std::move(Parms.EffectArray);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Clear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_ShockwaveEffect_Clear(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_ShockwaveEffect_Clear");

	Params::RSBattlePlayer_C_Em8000_ShockwaveEffect_Clear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_SetElem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_ShockwaveEffect_SetElem(int32 Param_Index, class URSParticleSystemComponentBase* Particle, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_ShockwaveEffect_SetElem");

	Params::RSBattlePlayer_C_Em8000_ShockwaveEffect_SetElem Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Get
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class URSParticleSystemComponentBase*   Particle                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_ShockwaveEffect_Get(int32 Param_Index, class URSParticleSystemComponentBase** Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_ShockwaveEffect_Get");

	Params::RSBattlePlayer_C_Em8000_ShockwaveEffect_Get Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Particle != nullptr)
		*Particle = Parms.Particle;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Add
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URSParticleSystemComponentBase*   Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_ShockwaveEffect_Add(class URSParticleSystemComponentBase* Particle, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_ShockwaveEffect_Add");

	Params::RSBattlePlayer_C_Em8000_ShockwaveEffect_Add Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_ShockwaveEffect_Deactivate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_ShockwaveEffect_Deactivate(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_ShockwaveEffect_Deactivate");

	Params::RSBattlePlayer_C_Em8000_ShockwaveEffect_Deactivate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_PermitBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8000_PermitBrainField(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_PermitBrainField");

	Params::RSBattlePlayer_C_Em8000_PermitBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_GetMetamorphosisParent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ParentActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8010_GetMetamorphosisParent(class AActor** ParentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_GetMetamorphosisParent");

	Params::RSBattlePlayer_C_Em8010_GetMetamorphosisParent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ParentActor != nullptr)
		*ParentActor = Parms.ParentActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcOutlineAppendMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMeshComponent*>           MeshComps                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEnpcOutlineAppendMesh(TArray<class UMeshComponent*>* MeshComps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnpcOutlineAppendMesh");

	Params::RSBattlePlayer_C_GetEnpcOutlineAppendMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComps != nullptr)
		*MeshComps = std::move(Parms.MeshComps);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8290_ExecAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8290_ExecAttack(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8290_ExecAttack");

	Params::RSBattlePlayer_C_Em8290_ExecAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetBattlePhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattlePhase                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8220_GetBattlePhase(int32* BattlePhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_GetBattlePhase");

	Params::RSBattlePlayer_C_Em8220_GetBattlePhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattlePhase != nullptr)
		*BattlePhase = Parms.BattlePhase;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetBattlePhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattlePhase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_SetBattlePhase(int32 BattlePhase, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_SetBattlePhase");

	Params::RSBattlePlayer_C_Em8220_SetBattlePhase Parms{};

	Parms.BattlePhase = BattlePhase;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BeginDispAttackCable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CableIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BeginTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_BeginDispAttackCable(int32 CableIndex, float BeginTime, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_BeginDispAttackCable");

	Params::RSBattlePlayer_C_Em8220_BeginDispAttackCable Parms{};

	Parms.CableIndex = CableIndex;
	Parms.BeginTime = BeginTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_EndDispAttackCable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CableIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_EndDispAttackCable(int32 CableIndex, float EndTime, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_EndDispAttackCable");

	Params::RSBattlePlayer_C_Em8220_EndDispAttackCable Parms{};

	Parms.CableIndex = CableIndex;
	Parms.EndTime = EndTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_PlayAttackCableAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FST_em8220_CableInfo             CableInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_PlayAttackCableAnim(const struct FST_em8220_CableInfo& CableInfo, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_PlayAttackCableAnim");

	Params::RSBattlePlayer_C_Em8220_PlayAttackCableAnim Parms{};

	Parms.CableInfo = std::move(CableInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_EndAttackCableAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CableIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_EndAttackCableAnim(int32 CableIndex, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_EndAttackCableAnim");

	Params::RSBattlePlayer_C_Em8220_EndAttackCableAnim Parms{};

	Parms.CableIndex = CableIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8200_EndAllAttackCable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   EndTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8200_EndAllAttackCable(bool bForce, float EndTime, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8200_EndAllAttackCable");

	Params::RSBattlePlayer_C_Em8200_EndAllAttackCable Parms{};

	Parms.bForce = bForce;
	Parms.EndTime = EndTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BeginCablePiller
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_BeginCablePiller(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_BeginCablePiller");

	Params::RSBattlePlayer_C_Em8220_BeginCablePiller Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetCablePillerLocationList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           IgnoreActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  LocationList                                           (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8220_GetCablePillerLocationList(class AActor* IgnoreActor, TArray<struct FVector>* LocationList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_GetCablePillerLocationList");

	Params::RSBattlePlayer_C_Em8220_GetCablePillerLocationList Parms{};

	Parms.IgnoreActor = IgnoreActor;

	UObject::ProcessEvent(Func, &Parms);

	if (LocationList != nullptr)
		*LocationList = std::move(Parms.LocationList);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BeginNextCableSpike
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_BeginNextCableSpike(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_BeginNextCableSpike");

	Params::RSBattlePlayer_C_Em8220_BeginNextCableSpike Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_BulletAttackHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBulletType                             BulletType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_BulletAttackHit(EBulletType BulletType, class AActor* HitActor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_BulletAttackHit");

	Params::RSBattlePlayer_C_Em8220_BulletAttackHit Parms{};

	Parms.BulletType = BulletType;
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetCableSpikeStartEffectTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartEffectTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_SetCableSpikeStartEffectTime(float StartEffectTime, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_SetCableSpikeStartEffectTime");

	Params::RSBattlePlayer_C_Em8220_SetCableSpikeStartEffectTime Parms{};

	Parms.StartEffectTime = StartEffectTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetCableSpikeStartEffectTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartEffectTime                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8220_GetCableSpikeStartEffectTime(float* StartEffectTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_GetCableSpikeStartEffectTime");

	Params::RSBattlePlayer_C_Em8220_GetCableSpikeStartEffectTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartEffectTime != nullptr)
		*StartEffectTime = Parms.StartEffectTime;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnterDownEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerDownType                         DownType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EnterDownEnpc(EPlayerDownType DownType, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnterDownEnpc");

	Params::RSBattlePlayer_C_EnterDownEnpc Parms{};

	Parms.DownType = DownType;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EntryBrainCrashAccessEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EntryBrainCrashAccessEnpc(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EntryBrainCrashAccessEnpc");

	Params::RSBattlePlayer_C_EntryBrainCrashAccessEnpc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetHighSpdLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_SetHighSpdLocation(const struct FVector& InLocation, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_SetHighSpdLocation");

	Params::RSBattlePlayer_C_Em8220_SetHighSpdLocation Parms{};

	Parms.InLocation = std::move(InLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetHighSpdLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8220_GetHighSpdLocation(struct FVector* OutLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_GetHighSpdLocation");

	Params::RSBattlePlayer_C_Em8220_GetHighSpdLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetHighSpdDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HighSpdDistance                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_SetHighSpdDistance(float HighSpdDistance, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_SetHighSpdDistance");

	Params::RSBattlePlayer_C_Em8220_SetHighSpdDistance Parms{};

	Parms.HighSpdDistance = HighSpdDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_GetHighSpdDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HighSpdDistance                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8220_GetHighSpdDistance(float* HighSpdDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_GetHighSpdDistance");

	Params::RSBattlePlayer_C_Em8220_GetHighSpdDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HighSpdDistance != nullptr)
		*HighSpdDistance = Parms.HighSpdDistance;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_RegisterShotData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRegisterShotData               RegisterShotData                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_RegisterShotData(const struct FFRegisterShotData& RegisterShotData, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_RegisterShotData");

	Params::RSBattlePlayer_C_Em8220_RegisterShotData Parms{};

	Parms.RegisterShotData = std::move(RegisterShotData);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_UnregisterAllShotData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_UnregisterAllShotData(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_UnregisterAllShotData");

	Params::RSBattlePlayer_C_Em8220_UnregisterAllShotData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_UpdateShotData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_UpdateShotData(float DeltaSec, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_UpdateShotData");

	Params::RSBattlePlayer_C_Em8220_UpdateShotData Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_ChangeAccelerator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bStart                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_ChangeAccelerator(bool bStart, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_ChangeAccelerator");

	Params::RSBattlePlayer_C_Em8220_ChangeAccelerator Parms{};

	Parms.bStart = bStart;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_StartSpCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_StartSpCount(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_StartSpCount");

	Params::RSBattlePlayer_C_Em8220_StartSpCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_StartCopyActorSpTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_StartCopyActorSpTimer(class ARSCharacterBase* InActor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_StartCopyActorSpTimer");

	Params::RSBattlePlayer_C_Em8220_StartCopyActorSpTimer Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_EndCopyActorSpTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_EndCopyActorSpTimer(class ARSCharacterBase* InActor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_EndCopyActorSpTimer");

	Params::RSBattlePlayer_C_Em8220_EndCopyActorSpTimer Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PreStartSequencerEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PreStartSequencerEnpc(int32 IndexIn, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PreStartSequencerEnpc");

	Params::RSBattlePlayer_C_PreStartSequencerEnpc Parms{};

	Parms.IndexIn = IndexIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.FinishedSequencerEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::FinishedSequencerEnpc(int32 IndexIn, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FinishedSequencerEnpc");

	Params::RSBattlePlayer_C_FinishedSequencerEnpc Parms{};

	Parms.IndexIn = IndexIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PostStartSequencerEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PostStartSequencerEnpc(int32 IndexIn, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PostStartSequencerEnpc");

	Params::RSBattlePlayer_C_PostStartSequencerEnpc Parms{};

	Parms.IndexIn = IndexIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSequenceActorEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SequenceActorEnpc                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSequenceActorEnpc(class AActor** SequenceActorEnpc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSequenceActorEnpc");

	Params::RSBattlePlayer_C_GetSequenceActorEnpc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SequenceActorEnpc != nullptr)
		*SequenceActorEnpc = Parms.SequenceActorEnpc;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartSpSequenceEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartSpSequenceEnpc(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartSpSequenceEnpc");

	Params::RSBattlePlayer_C_StartSpSequenceEnpc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_SetVisibleSpTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_SetVisibleSpTimer(bool bVisible, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_SetVisibleSpTimer");

	Params::RSBattlePlayer_C_Em8220_SetVisibleSpTimer Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_CalcAttackCollisionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCAttackCollisionInfo           CollisionInfo                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_CalcAttackCollisionInfo(const struct FHCAttackCollisionInfo& CollisionInfo, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_CalcAttackCollisionInfo");

	Params::RSBattlePlayer_C_Em8220_CalcAttackCollisionInfo Parms{};

	Parms.CollisionInfo = std::move(CollisionInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_StoreCollisionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHCSkillCommonInfo               SkillInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_StoreCollisionInfo(const struct FHCSkillCommonInfo& SkillInfo, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_StoreCollisionInfo");

	Params::RSBattlePlayer_C_Em8220_StoreCollisionInfo Parms{};

	Parms.SkillInfo = std::move(SkillInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_RestoreCollisionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_RestoreCollisionInfo(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_RestoreCollisionInfo");

	Params::RSBattlePlayer_C_Em8220_RestoreCollisionInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.PostFinishedSequencerEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::PostFinishedSequencerEnpc(int32 IndexIn, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "PostFinishedSequencerEnpc");

	Params::RSBattlePlayer_C_PostFinishedSequencerEnpc Parms{};

	Parms.IndexIn = IndexIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnSpawnStartEnpc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnSpawnStartEnpc(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnSpawnStartEnpc");

	Params::RSBattlePlayer_C_OnSpawnStartEnpc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAttachedCharacterMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerID                               EquipPlayerID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EquipMeshIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Param_Mesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetAttachedCharacterMesh(EPlayerID EquipPlayerID, int32 EquipMeshIndex, class USkeletalMeshComponent** Param_Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAttachedCharacterMesh");

	Params::RSBattlePlayer_C_GetAttachedCharacterMesh Parms{};

	Parms.EquipPlayerID = EquipPlayerID;
	Parms.EquipMeshIndex = EquipMeshIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Mesh != nullptr)
		*Param_Mesh = Parms.Param_Mesh;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EquipAttachmentInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerAttachment                       Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AttachmentItemID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               EquipPlayerID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EquipMeshIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EquipAttachmentInterface(EPlayerAttachment Param_Index, int32 AttachmentItemID, EPlayerID EquipPlayerID, int32 EquipMeshIndex, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EquipAttachmentInterface");

	Params::RSBattlePlayer_C_EquipAttachmentInterface Parms{};

	Parms.Param_Index = Param_Index;
	Parms.AttachmentItemID = AttachmentItemID;
	Parms.EquipPlayerID = EquipPlayerID;
	Parms.EquipMeshIndex = EquipMeshIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DestroyAttachmentMeshComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  DestroyMeshComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::DestroyAttachmentMeshComponent(class USceneComponent* DestroyMeshComponent, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DestroyAttachmentMeshComponent");

	Params::RSBattlePlayer_C_DestroyAttachmentMeshComponent Parms{};

	Parms.DestroyMeshComponent = DestroyMeshComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttachmentVisibilityOffOnHead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AttachmentVisibilityOffOnHead(bool bOff, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttachmentVisibilityOffOnHead");

	Params::RSBattlePlayer_C_AttachmentVisibilityOffOnHead Parms{};

	Parms.bOff = bOff;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.AttachmentVisibilityOffOnBackBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisibility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::AttachmentVisibilityOffOnBackBody(bool bVisibility, float FadeTime, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "AttachmentVisibilityOffOnBackBody");

	Params::RSBattlePlayer_C_AttachmentVisibilityOffOnBackBody Parms{};

	Parms.bVisibility = bVisibility;
	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndAim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::EndAim(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndAim");

	Params::RSBattlePlayer_C_EndAim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartAim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LimitAngle                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartAim(float LimitAngle, bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartAim");

	Params::RSBattlePlayer_C_StartAim Parms{};

	Parms.LimitAngle = LimitAngle;

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.getEmPosDiscover
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          DiscoverPos                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEmPosDiscover(struct FVector* DiscoverPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "getEmPosDiscover");

	Params::RSBattlePlayer_C_GetEmPosDiscover Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DiscoverPos != nullptr)
		*DiscoverPos = std::move(Parms.DiscoverPos);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerCopy
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPlayerCopy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerCopy");

	Params::RSBattlePlayer_C_IsPlayerCopy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsExistPlayerCopy
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsExistPlayerCopy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsExistPlayerCopy");

	Params::RSBattlePlayer_C_IsExistPlayerCopy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateFall_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::UpdateFall_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateFall_Native");

	Params::RSBattlePlayer_C_UpdateFall_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateDamageAnim_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DamageEnd                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DamageDownEnd                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::UpdateDamageAnim_Native(bool* DamageEnd, bool* DamageDownEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateDamageAnim_Native");

	Params::RSBattlePlayer_C_UpdateDamageAnim_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageEnd != nullptr)
		*DamageEnd = Parms.DamageEnd;

	if (DamageDownEnd != nullptr)
		*DamageDownEnd = Parms.DamageDownEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SwitchDispCore_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DisplayOn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SwitchDispCore_Native(bool DisplayOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SwitchDispCore_Native");

	Params::RSBattlePlayer_C_SwitchDispCore_Native Parms{};

	Parms.DisplayOn = DisplayOn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StoreWeakState_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::StoreWeakState_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StoreWeakState_Native");

	Params::RSBattlePlayer_C_StoreWeakState_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StopCrashChanceLoopEffect_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::StopCrashChanceLoopEffect_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StopCrashChanceLoopEffect_Native");

	Params::RSBattlePlayer_C_StopCrashChanceLoopEffect_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartVanish_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   VanishSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartVanish                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndVanish                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::StartVanish_Native(float VanishSec, float StartVanish, float EndVanish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartVanish_Native");

	Params::RSBattlePlayer_C_StartVanish_Native Parms{};

	Parms.VanishSec = VanishSec;
	Parms.StartVanish = StartVanish;
	Parms.EndVanish = EndVanish;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartFallIfFlyingIF
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::StartFallIfFlyingIF(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartFallIfFlyingIF");

	Params::RSBattlePlayer_C_StartFallIfFlyingIF Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartDamageFloating_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::StartDamageFloating_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartDamageFloating_Native");

	Params::RSBattlePlayer_C_StartDamageFloating_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetWeakEmissiveOff_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           WeakSlotName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetWeakEmissiveOff_Native(const class FString& WeakSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetWeakEmissiveOff_Native");

	Params::RSBattlePlayer_C_SetWeakEmissiveOff_Native Parms{};

	Parms.WeakSlotName = std::move(WeakSlotName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetUseWaitNoInterpolation_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetUseWaitNoInterpolation_Native(bool Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetUseWaitNoInterpolation_Native");

	Params::RSBattlePlayer_C_SetUseWaitNoInterpolation_Native Parms{};

	Parms.Use = Use;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetReserveAction_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param00                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param01                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetReserveAction_Native(uint8 Action, float Param00, float Param01)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetReserveAction_Native");

	Params::RSBattlePlayer_C_SetReserveAction_Native Parms{};

	Parms.Action = Action;
	Parms.Param00 = Param00;
	Parms.Param01 = Param01;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetLanding_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLanding                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetLanding_Native(bool bLanding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetLanding_Native");

	Params::RSBattlePlayer_C_SetLanding_Native Parms{};

	Parms.bLanding = bLanding;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetIsMoveAnim_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewIsMoveAnim                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetIsMoveAnim_Native(bool NewIsMoveAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetIsMoveAnim_Native");

	Params::RSBattlePlayer_C_SetIsMoveAnim_Native Parms{};

	Parms.NewIsMoveAnim = NewIsMoveAnim;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetIsLaunchDown_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewIsLaunchDown                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetIsLaunchDown_Native(bool NewIsLaunchDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetIsLaunchDown_Native");

	Params::RSBattlePlayer_C_SetIsLaunchDown_Native Parms{};

	Parms.NewIsLaunchDown = NewIsLaunchDown;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetIsLandCheck_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewIsLandCheck                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetIsLandCheck_Native(bool NewIsLandCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetIsLandCheck_Native");

	Params::RSBattlePlayer_C_SetIsLandCheck_Native Parms{};

	Parms.NewIsLandCheck = NewIsLandCheck;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetIsBrainAccess_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewIsBrainAccess                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetIsBrainAccess_Native(bool NewIsBrainAccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetIsBrainAccess_Native");

	Params::RSBattlePlayer_C_SetIsBrainAccess_Native Parms{};

	Parms.NewIsBrainAccess = NewIsBrainAccess;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetIdleMove_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsIdle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetIdleMove_Native(bool IsIdle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetIdleMove_Native");

	Params::RSBattlePlayer_C_SetIdleMove_Native Parms{};

	Parms.IsIdle = IsIdle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetHp_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetHp_Native(int32 HP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetHp_Native");

	Params::RSBattlePlayer_C_SetHp_Native Parms{};

	Parms.HP = HP;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDownTimer_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetDownTimer_Native(float NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDownTimer_Native");

	Params::RSBattlePlayer_C_SetDownTimer_Native Parms{};

	Parms.NewTime = NewTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetDamageCollisionDisable_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ClaimantName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetDamageCollisionDisable_Native(const class FName& ClaimantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetDamageCollisionDisable_Native");

	Params::RSBattlePlayer_C_SetDamageCollisionDisable_Native Parms{};

	Parms.ClaimantName = ClaimantName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SafeDestroy_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SafeDestroy_Native(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SafeDestroy_Native");

	Params::RSBattlePlayer_C_SafeDestroy_Native Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestoreWeakState_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::RestoreWeakState_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestoreWeakState_Native");

	Params::RSBattlePlayer_C_RestoreWeakState_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.RestoreWeakEmissive_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           WeakSlotName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::RestoreWeakEmissive_Native(const class FString& WeakSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "RestoreWeakEmissive_Native");

	Params::RSBattlePlayer_C_RestoreWeakEmissive_Native Parms{};

	Parms.WeakSlotName = std::move(WeakSlotName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetStateReceivedExecuteAi_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ResetStateReceivedExecuteAi_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetStateReceivedExecuteAi_Native");

	Params::RSBattlePlayer_C_ResetStateReceivedExecuteAi_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetCore_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveCore                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ResetCore_Native(class AActor* Enemy, bool RemoveCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetCore_Native");

	Params::RSBattlePlayer_C_ResetCore_Native Parms{};

	Parms.Enemy = Enemy;
	Parms.RemoveCore = RemoveCore;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ResetAction_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::ResetAction_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ResetAction_Native");

	Params::RSBattlePlayer_C_ResetAction_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.ReceivedNotifyAnimEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Received                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::ReceivedNotifyAnimEnd_Native(bool* Received)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "ReceivedNotifyAnimEnd_Native");

	Params::RSBattlePlayer_C_ReceivedNotifyAnimEnd_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Received != nullptr)
		*Received = Parms.Received;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OutputLogCrashChanceEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OutputLogCrashChanceEnd_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OutputLogCrashChanceEnd_Native");

	Params::RSBattlePlayer_C_OutputLogCrashChanceEnd_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEndCrashChance_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnEndCrashChance_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEndCrashChance_Native");

	Params::RSBattlePlayer_C_OnEndCrashChance_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnEndAnimDieIF
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDummy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::OnEndAnimDieIF(bool* bDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnEndAnimDieIF");

	Params::RSBattlePlayer_C_OnEndAnimDieIF Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDummy != nullptr)
		*bDummy = Parms.bDummy;
}


// Function RSBattlePlayer.RSBattlePlayer_C.LeaveBrainCrashAccess_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::LeaveBrainCrashAccess_Native(class ARSCharacterBase* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "LeaveBrainCrashAccess_Native");

	Params::RSBattlePlayer_C_LeaveBrainCrashAccess_Native Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.LaunchDown_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::LaunchDown_Native(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "LaunchDown_Native");

	Params::RSBattlePlayer_C_LaunchDown_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.KickCrashChanceLoopEffect_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::KickCrashChanceLoopEffect_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "KickCrashChanceLoopEffect_Native");

	Params::RSBattlePlayer_C_KickCrashChanceLoopEffect_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPossibleTargetAttack_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPossibleTargetAttack_CallFromCPP(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPossibleTargetAttack_CallFromCPP");

	Params::RSBattlePlayer_C_IsPossibleTargetAttack_CallFromCPP Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsMotionEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsMotionEnd_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsMotionEnd_Native");

	Params::RSBattlePlayer_C_IsMotionEnd_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsIgnoreLandingCheck_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnoreLandingCheck                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsIgnoreLandingCheck_Native(bool* bIgnoreLandingCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsIgnoreLandingCheck_Native");

	Params::RSBattlePlayer_C_IsIgnoreLandingCheck_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnoreLandingCheck != nullptr)
		*bIgnoreLandingCheck = Parms.bIgnoreLandingCheck;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyStateAttack_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemyStateAttack_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyStateAttack_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnemyStateAttack_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyLandingCheck_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyLandingCheck_Native(bool* bHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyLandingCheck_Native");

	Params::RSBattlePlayer_C_IsEnemyLandingCheck_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainCrashMiss_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMiss                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBrainCrashMiss_Native(bool* IsMiss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainCrashMiss_Native");

	Params::RSBattlePlayer_C_IsBrainCrashMiss_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMiss != nullptr)
		*IsMiss = Parms.IsMiss;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSearchingComponent_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USearchingComponent*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class USearchingComponent* ARSBattlePlayer_C::GetSearchingComponent_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSearchingComponent_Native");

	Params::RSBattlePlayer_C_GetSearchingComponent_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetLostData_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LostMoveTimeMin                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LostMoveTimeMax                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LostMoveRotationRate                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpeedScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNoMoveAnim                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetLostData_Native(float* LostMoveTimeMin, float* LostMoveTimeMax, float* LostMoveRotationRate, float* SpeedScale, bool* IsNoMoveAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetLostData_Native");

	Params::RSBattlePlayer_C_GetLostData_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LostMoveTimeMin != nullptr)
		*LostMoveTimeMin = Parms.LostMoveTimeMin;

	if (LostMoveTimeMax != nullptr)
		*LostMoveTimeMax = Parms.LostMoveTimeMax;

	if (LostMoveRotationRate != nullptr)
		*LostMoveRotationRate = Parms.LostMoveRotationRate;

	if (SpeedScale != nullptr)
		*SpeedScale = Parms.SpeedScale;

	if (IsNoMoveAnim != nullptr)
		*IsNoMoveAnim = Parms.IsNoMoveAnim;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetHitObjectType_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EObjectTypeQuery>                ObjectType                                             (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetHitObjectType_Native(TArray<EObjectTypeQuery>* ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetHitObjectType_Native");

	Params::RSBattlePlayer_C_GetHitObjectType_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectType != nullptr)
		*ObjectType = std::move(Parms.ObjectType);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetFall_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetFall_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetFall_Native");

	Params::RSBattlePlayer_C_GetFall_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetFailedFall_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetFailedFall_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetFailedFall_Native");

	Params::RSBattlePlayer_C_GetFailedFall_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentActionTime_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ActionTime                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentActionTime_Native(float* ActionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentActionTime_Native");

	Params::RSBattlePlayer_C_GetCurrentActionTime_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionTime != nullptr)
		*ActionTime = Parms.ActionTime;
}


// Function RSBattlePlayer.RSBattlePlayer_C.FlyDown_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::FlyDown_Native(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "FlyDown_Native");

	Params::RSBattlePlayer_C_FlyDown_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EntryBrainCrashAccess_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EntryBrainCrashAccess_Native(class ARSCharacterBase* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EntryBrainCrashAccess_Native");

	Params::RSBattlePlayer_C_EntryBrainCrashAccess_Native Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EndDamageFloating_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EndDamageFloating_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EndDamageFloating_Native");

	Params::RSBattlePlayer_C_EndDamageFloating_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnableFitGroundTmp_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EnableFitGroundTmp_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnableFitGroundTmp_Native");

	Params::RSBattlePlayer_C_EnableFitGroundTmp_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnableAllWeak_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EnableAllWeak_Native(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnableAllWeak_Native");

	Params::RSBattlePlayer_C_EnableAllWeak_Native Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DropFlyingEnemy_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::DropFlyingEnemy_Native(class AActor* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DropFlyingEnemy_Native");

	Params::RSBattlePlayer_C_DropFlyingEnemy_Native Parms{};

	Parms.Enemy = Enemy;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DisableFitGroundTmp_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::DisableFitGroundTmp_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DisableFitGroundTmp_Native");

	Params::RSBattlePlayer_C_DisableFitGroundTmp_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DeadStart_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::DeadStart_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DeadStart_Native");

	Params::RSBattlePlayer_C_DeadStart_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DamageMotionEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::DamageMotionEnd_Native(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DamageMotionEnd_Native");

	Params::RSBattlePlayer_C_DamageMotionEnd_Native Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DamageFloatEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::DamageFloatEnd_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DamageFloatEnd_Native");

	Params::RSBattlePlayer_C_DamageFloatEnd_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckSASHologramAttack_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESASHologramAttackTiming                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSCharacterBase*                 RequestCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckSASHologramAttack_Native(ESASHologramAttackTiming Timing, class ARSCharacterBase* RequestCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckSASHologramAttack_Native");

	Params::RSBattlePlayer_C_CheckSASHologramAttack_Native Parms{};

	Parms.Timing = Timing;
	Parms.RequestCharacter = RequestCharacter;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckNpcDrive_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENpcDriveCheckType                      CheckType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           EnemyActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CheckNpcDrive_Native(ENpcDriveCheckType CheckType, class AActor* EnemyActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckNpcDrive_Native");

	Params::RSBattlePlayer_C_CheckNpcDrive_Native Parms{};

	Parms.CheckType = CheckType;
	Parms.EnemyActor = EnemyActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CameraAttentionEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      FovCurveOut                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CameraAttentionEnd_Native(class UCurveFloat* FovCurveOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CameraAttentionEnd_Native");

	Params::RSBattlePlayer_C_CameraAttentionEnd_Native Parms{};

	Parms.FovCurveOut = FovCurveOut;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CallFuncDamageDownStart_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CallFuncDamageDownStart_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CallFuncDamageDownStart_Native");

	Params::RSBattlePlayer_C_CallFuncDamageDownStart_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CallFuncDamageDownLoop_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CallFuncDamageDownLoop_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CallFuncDamageDownLoop_Native");

	Params::RSBattlePlayer_C_CallFuncDamageDownLoop_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CallFuncDamageDownEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CallFuncDamageDownEnd_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CallFuncDamageDownEnd_Native");

	Params::RSBattlePlayer_C_CallFuncDamageDownEnd_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CallDead_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::CallDead_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CallDead_Native");

	Params::RSBattlePlayer_C_CallDead_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BrainCrashLock_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::BrainCrashLock_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BrainCrashLock_Native");

	Params::RSBattlePlayer_C_BrainCrashLock_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.UpdateMoveMaxSpeed
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::UpdateMoveMaxSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "UpdateMoveMaxSpeed");

	Params::RSBattlePlayer_C_UpdateMoveMaxSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnemyUpdateEvDitherNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EnemyUpdateEvDitherNative(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnemyUpdateEvDitherNative");

	Params::RSBattlePlayer_C_EnemyUpdateEvDitherNative Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnemyStartEvDitherNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisp                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DitherTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EnemyStartEvDitherNative(bool bDisp, float DitherTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnemyStartEvDitherNative");

	Params::RSBattlePlayer_C_EnemyStartEvDitherNative Parms{};

	Parms.bDisp = bDisp;
	Parms.DitherTime = DitherTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.EnemyEndEvDitherNative
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisp                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::EnemyEndEvDitherNative(bool bDisp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "EnemyEndEvDitherNative");

	Params::RSBattlePlayer_C_EnemyEndEvDitherNative Parms{};

	Parms.bDisp = bDisp;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsFlyEnemyCheck_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsFlyEnemyCheck_Native()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsFlyEnemyCheck_Native");

	Params::RSBattlePlayer_C_IsFlyEnemyCheck_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyDamageDown_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemyDamageDown_CallFromCPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyDamageDown_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnemyDamageDown_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.StartReactionDilation_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ReactionKind                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAddDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::StartReactionDilation_CallFromCPP(uint8 ReactionKind, bool bAddDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "StartReactionDilation_CallFromCPP");

	Params::RSBattlePlayer_C_StartReactionDilation_CallFromCPP Parms{};

	Parms.ReactionKind = ReactionKind;
	Parms.bAddDamage = bAddDamage;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckLookScrollTick
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsCheckLookScrollTick(const struct FVector& Start, const struct FVector& End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCheckLookScrollTick");

	Params::RSBattlePlayer_C_IsCheckLookScrollTick Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetTickEnableMeshOnly
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMeshOnly                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetTickEnableMeshOnly(bool bMeshOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetTickEnableMeshOnly");

	Params::RSBattlePlayer_C_SetTickEnableMeshOnly Parms{};

	Parms.bMeshOnly = bMeshOnly;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckSameCompareGroundLoaction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsCheckSameCompareGroundLoaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCheckSameCompareGroundLoaction");

	Params::RSBattlePlayer_C_IsCheckSameCompareGroundLoaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.SetEnemyConsiderDownDead
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::SetEnemyConsiderDownDead(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "SetEnemyConsiderDownDead");

	Params::RSBattlePlayer_C_SetEnemyConsiderDownDead Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyTribe
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEnemyTribe                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EEnemyTribe ARSBattlePlayer_C::GetEnemyTribe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemyTribe");

	Params::RSBattlePlayer_C_GetEnemyTribe Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnCrashVisionDead
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnCrashVisionDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnCrashVisionDead");

	Params::RSBattlePlayer_C_OnCrashVisionDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OnNotifyPlayerDead
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::OnNotifyPlayerDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OnNotifyPlayerDead");

	Params::RSBattlePlayer_C_OnNotifyPlayerDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeaponManage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_WeaponManageComponent_C*      WeaponManage                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerWeaponManage(class UBP_WeaponManageComponent_C** WeaponManage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerWeaponManage");

	Params::RSBattlePlayer_C_GetPlayerWeaponManage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponManage != nullptr)
		*WeaponManage = Parms.WeaponManage;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentTargetActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentTargetActor(class AActor** TargetActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentTargetActor");

	Params::RSBattlePlayer_C_GetCurrentTargetActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bBatting                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBattling(bool* bBatting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattling");

	Params::RSBattlePlayer_C_IsBattling Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBatting != nullptr)
		*bBatting = Parms.bBatting;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         CameraRotate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetCameraRotation(struct FRotator* CameraRotate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCameraRotation");

	Params::RSBattlePlayer_C_GetCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraRotate != nullptr)
		*CameraRotate = std::move(Parms.CameraRotate);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerCommonStatus                     PlayerStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPlayerStatus(EPlayerCommonStatus PlayerStatus, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerStatus");

	Params::RSBattlePlayer_C_IsPlayerStatus Parms{};

	Parms.PlayerStatus = PlayerStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActionStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerActionStatus                     ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActionStatus(EPlayerActionStatus ActionStatus, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActionStatus");

	Params::RSBattlePlayer_C_IsActionStatus Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionJump(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionJump");

	Params::RSBattlePlayer_C_IsEnableActionJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionDodge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bIgnoreBadStatus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionDodge(bool bIgnoreBadStatus, bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionDodge");

	Params::RSBattlePlayer_C_IsEnableActionDodge Parms{};

	Parms.bIgnoreBadStatus = bIgnoreBadStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionAttack(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionAttack");

	Params::RSBattlePlayer_C_IsEnableActionAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionPsychic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bPsychicEx                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionPsychic(bool bPsychicEx, bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionPsychic");

	Params::RSBattlePlayer_C_IsEnableActionPsychic Parms{};

	Parms.bPsychicEx = bPsychicEx;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionSprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionSprint(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionSprint");

	Params::RSBattlePlayer_C_IsEnableActionSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASParamForKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASKind                               SasKind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SASParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSASParamForKind(E_SASKind SasKind, int32 SASParam, float* Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASParamForKind");

	Params::RSBattlePlayer_C_GetSASParamForKind Parms{};

	Parms.SasKind = SasKind;
	Parms.SASParam = SASParam;

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionCommon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionCommon(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionCommon");

	Params::RSBattlePlayer_C_IsEnableActionCommon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionIdleWalkRun
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionIdleWalkRun(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionIdleWalkRun");

	Params::RSBattlePlayer_C_IsEnableActionIdleWalkRun Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionDamage(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionDamage");

	Params::RSBattlePlayer_C_IsEnableActionDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetBoss
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           LockBoss                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetTargetBoss(class AActor** LockBoss) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTargetBoss");

	Params::RSBattlePlayer_C_GetTargetBoss Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LockBoss != nullptr)
		*LockBoss = Parms.LockBoss;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_ForKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASKind                               SAS_Kind                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActiveSAS_ForKind(E_SASKind SAS_Kind, bool* IsActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_ForKind");

	Params::RSBattlePlayer_C_IsActiveSAS_ForKind Parms{};

	Parms.SAS_Kind = SAS_Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.isForceCritical
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsForceCritical(bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "isForceCritical");

	Params::RSBattlePlayer_C_IsForceCritical Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetActorDeltaSeconds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ActorDeltaSeconds                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetActorDeltaSeconds(float* ActorDeltaSeconds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetActorDeltaSeconds");

	Params::RSBattlePlayer_C_GetActorDeltaSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorDeltaSeconds != nullptr)
		*ActorDeltaSeconds = Parms.ActorDeltaSeconds;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsLockTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_IsLockTarget                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsLockTarget(bool* Param_IsLockTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsLockTarget");

	Params::RSBattlePlayer_C_IsLockTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsLockTarget != nullptr)
		*Param_IsLockTarget = Parms.Param_IsLockTarget;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsControlAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bAI                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsControlAI(bool* bAI) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsControlAI");

	Params::RSBattlePlayer_C_IsControlAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAI != nullptr)
		*bAI = Parms.bAI;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetIsBattleMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsBattleMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetIsBattleMode(bool* IsBattleMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetIsBattleMode");

	Params::RSBattlePlayer_C_GetIsBattleMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBattleMode != nullptr)
		*IsBattleMode = Parms.IsBattleMode;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDefaultCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         DefaultCameraRotation                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetDefaultCameraRotation(struct FRotator* DefaultCameraRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDefaultCameraRotation");

	Params::RSBattlePlayer_C_GetDefaultCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultCameraRotation != nullptr)
		*DefaultCameraRotation = std::move(Parms.DefaultCameraRotation);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUpperActionStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerUpperActionStatus                ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsUpperActionStatus(EPlayerUpperActionStatus ActionStatus, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUpperActionStatus");

	Params::RSBattlePlayer_C_IsUpperActionStatus Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionBrainCrash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionBrainCrash(bool* Enable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionBrainCrash");

	Params::RSBattlePlayer_C_IsEnableActionBrainCrash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_WeaponBase_C*                 Weapon                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerWeapon(int32 Param_Index, class ABP_WeaponBase_C** Weapon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerWeapon");

	Params::RSBattlePlayer_C_GetPlayerWeapon Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Weapon != nullptr)
		*Weapon = Parms.Weapon;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeaponPure
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_WeaponBase_C*                 Weapon                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerWeaponPure(int32 Param_Index, class ABP_WeaponBase_C** Weapon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerWeaponPure");

	Params::RSBattlePlayer_C_GetPlayerWeaponPure Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Weapon != nullptr)
		*Weapon = Parms.Weapon;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetConnectEffectLocation
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bSource                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EEffectConnectPoint                     ConnectPoint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetConnectEffectLocation(bool bSource, EEffectConnectPoint ConnectPoint, class FName SocketName, int32 Param, struct FVector* Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetConnectEffectLocation");

	Params::RSBattlePlayer_C_GetConnectEffectLocation Parms{};

	Parms.bSource = bSource;
	Parms.ConnectPoint = ConnectPoint;
	Parms.SocketName = SocketName;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDisableAction(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDisableAction");

	Params::RSBattlePlayer_C_IsDisableAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCameraPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCameraPitch(float* Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCameraPitch");

	Params::RSBattlePlayer_C_GetCameraPitch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = Parms.Rotation;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayBlendAnimMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bPlay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPlayBlendAnimMontage(bool* bPlay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayBlendAnimMontage");

	Params::RSBattlePlayer_C_IsPlayBlendAnimMontage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPlay != nullptr)
		*bPlay = Parms.bPlay;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckExistActorByCapsule
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EObjectTypeQuery                        ActorObjectType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreActorHeight                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bExist                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckExistActorByCapsule(const struct FVector& Offset, EObjectTypeQuery ActorObjectType, class AActor* Actor, bool IgnoreActorHeight, bool* bExist) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckExistActorByCapsule");

	Params::RSBattlePlayer_C_CheckExistActorByCapsule Parms{};

	Parms.Offset = std::move(Offset);
	Parms.ActorObjectType = ActorObjectType;
	Parms.Actor = Actor;
	Parms.IgnoreActorHeight = IgnoreActorHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (bExist != nullptr)
		*bExist = Parms.bExist;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsNoBattleWeaponDispOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bOff                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsNoBattleWeaponDispOff(bool* bOff) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsNoBattleWeaponDispOff");

	Params::RSBattlePlayer_C_IsNoBattleWeaponDispOff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOff != nullptr)
		*bOff = Parms.bOff;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCompleteTelepoDisappear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bComplete                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsCompleteTelepoDisappear(bool* bComplete) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCompleteTelepoDisappear");

	Params::RSBattlePlayer_C_IsCompleteTelepoDisappear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bComplete != nullptr)
		*bComplete = Parms.bComplete;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableAddMovementInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableAddMovementInput(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableAddMovementInput");

	Params::RSBattlePlayer_C_IsEnableAddMovementInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetWeaponSocketName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBattle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForceBattle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             SocketName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetWeaponSocketName(int32 Param_Index, bool bBattle, bool ForceBattle, class FName* SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetWeaponSocketName");

	Params::RSBattlePlayer_C_GetWeaponSocketName Parms{};

	Parms.Param_Index = Param_Index;
	Parms.bBattle = bBattle;
	Parms.ForceBattle = ForceBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (SocketName != nullptr)
		*SocketName = Parms.SocketName;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESASEffect                              Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Param0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param1                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param2                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param3                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::IsEnableSASEffect(E_SASKind Kind, ESASEffect Effect, bool* bEnable, float* Param0, float* Param1, float* Param2, float* Param3) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSASEffect");

	Params::RSBattlePlayer_C_IsEnableSASEffect Parms{};

	Parms.Kind = Kind;
	Parms.Effect = Effect;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;

	if (Param0 != nullptr)
		*Param0 = Parms.Param0;

	if (Param1 != nullptr)
		*Param1 = Parms.Param1;

	if (Param2 != nullptr)
		*Param2 = Parms.Param2;

	if (Param3 != nullptr)
		*Param3 = Parms.Param3;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASParamDataCurrentLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SASParam                      Param                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSASParamDataCurrentLevel(E_SASKind Kind, struct FF_SASParam* Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASParamDataCurrentLevel");

	Params::RSBattlePlayer_C_GetSASParamDataCurrentLevel Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = std::move(Parms.Param);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCopyPlayerList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class ABP_SASCopyPlayerActor_C*> Param_CopyPlayerList                                   (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCopyPlayerList(TArray<class ABP_SASCopyPlayerActor_C*>* Param_CopyPlayerList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCopyPlayerList");

	Params::RSBattlePlayer_C_GetCopyPlayerList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CopyPlayerList != nullptr)
		*Param_CopyPlayerList = std::move(Parms.Param_CopyPlayerList);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSearchAbleActionIcon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsSearchAbleActionIcon(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSearchAbleActionIcon");

	Params::RSBattlePlayer_C_IsSearchAbleActionIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsMetalMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bMetal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsMetalMode(bool* bMetal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsMetalMode");

	Params::RSBattlePlayer_C_IsMetalMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMetal != nullptr)
		*bMetal = Parms.bMetal;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableAssist
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableAssist(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableAssist");

	Params::RSBattlePlayer_C_IsEnableAssist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckWaitEnableAssist
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckWaitEnableAssist(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckWaitEnableAssist");

	Params::RSBattlePlayer_C_CheckWaitEnableAssist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.DebugDrawAiInfo
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent, Const)

void ARSBattlePlayer_C::DebugDrawAiInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "DebugDrawAiInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionChangeBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableActionChangeBattle(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionChangeBattle");

	Params::RSBattlePlayer_C_IsEnableActionChangeBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentActionState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerActionKind                       Kind                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentActionState(EPlayerActionKind* Kind) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentActionState");

	Params::RSBattlePlayer_C_GetCurrentActionState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Kind != nullptr)
		*Kind = Parms.Kind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAbleTransitionBrainField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAbleTransitionBrainField(bool* bOK) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAbleTransitionBrainField");

	Params::RSBattlePlayer_C_IsAbleTransitionBrainField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerAccessoryEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EEffecacyType                           EffectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEquip                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Param                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerAccessoryEffect(EEffecacyType EffectType, bool* bEquip, float* Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerAccessoryEffect");

	Params::RSBattlePlayer_C_GetPlayerAccessoryEffect Parms{};

	Parms.EffectType = EffectType;

	UObject::ProcessEvent(Func, &Parms);

	if (bEquip != nullptr)
		*bEquip = Parms.bEquip;

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetWeakTargetPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          AttackerPos                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetWeakTargetPoint(const struct FVector& AttackerPos, struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetWeakTargetPoint");

	Params::RSBattlePlayer_C_GetWeakTargetPoint Parms{};

	Parms.AttackerPos = std::move(AttackerPos);

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableMetalMode
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableMetalMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableMetalMode");

	Params::RSBattlePlayer_C_IsEnableMetalMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsGuardBadCondition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EHCSkillAttribute                       Attr                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsGuardBadCondition(EHCSkillAttribute Attr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsGuardBadCondition");

	Params::RSBattlePlayer_C_IsGuardBadCondition Parms{};

	Parms.Attr = Attr;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetReviveCableSocketName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetReviveCableSocketName(int32 Param_Index, class FName* SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetReviveCableSocketName");

	Params::RSBattlePlayer_C_GetReviveCableSocketName Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (SocketName != nullptr)
		*SocketName = Parms.SocketName;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetUseItemSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerUseItemSpeed                     Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetUseItemSpeed(EPlayerUseItemSpeed* Speed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetUseItemSpeed");

	Params::RSBattlePlayer_C_GetUseItemSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckFlyingAttackKind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ERSAttackInputKind                      AttackKind                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFlying                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckFlyingAttackKind(ERSAttackInputKind AttackKind, bool* bFlying) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckFlyingAttackKind");

	Params::RSBattlePlayer_C_CheckFlyingAttackKind Parms{};

	Parms.AttackKind = AttackKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bFlying != nullptr)
		*bFlying = Parms.bFlying;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetHpGaugePoint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetHpGaugePoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetHpGaugePoint");

	Params::RSBattlePlayer_C_GetHpGaugePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCrashChanceCursorPoint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCrashChanceCursorPoint(struct FVector* Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCrashChanceCursorPoint");

	Params::RSBattlePlayer_C_GetCrashChanceCursorPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainCrashSuccess
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBrainCrashSuccess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainCrashSuccess");

	Params::RSBattlePlayer_C_IsBrainCrashSuccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainCrashAccess
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBrainCrashAccess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainCrashAccess");

	Params::RSBattlePlayer_C_IsBrainCrashAccess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsComboInputEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsComboInputEnd(bool* NewParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsComboInputEnd");

	Params::RSBattlePlayer_C_IsComboInputEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBadStateIconParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EHCBadState                             BadType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBadStateAddParticleData         ParamData                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBadStateIconParam(EHCBadState BadType, struct FBadStateAddParticleData* ParamData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBadStateIconParam");

	Params::RSBattlePlayer_C_GetBadStateIconParam Parms{};

	Parms.BadType = BadType;

	UObject::ProcessEvent(Func, &Parms);

	if (ParamData != nullptr)
		*ParamData = std::move(Parms.ParamData);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCameraDitherTableRowName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             RowName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCameraDitherTableRowName(class FName* RowName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCameraDitherTableRowName");

	Params::RSBattlePlayer_C_GetCameraDitherTableRowName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RowName != nullptr)
		*RowName = Parms.RowName;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDriveParameterName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             Param_Name                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetDriveParameterName(class FName* Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDriveParameterName");

	Params::RSBattlePlayer_C_GetDriveParameterName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Name != nullptr)
		*Param_Name = Parms.Param_Name;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsWeaponAttachMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bBattle                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsWeaponAttachMode(bool* bBattle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsWeaponAttachMode");

	Params::RSBattlePlayer_C_IsWeaponAttachMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBattle != nullptr)
		*bBattle = Parms.bBattle;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASTimeParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RecastSec                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ActivationSec                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSASTimeParameter(E_SASKind Kind, float* RecastSec, float* ActivationSec) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASTimeParameter");

	Params::RSBattlePlayer_C_GetSASTimeParameter Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (RecastSec != nullptr)
		*RecastSec = Parms.RecastSec;

	if (ActivationSec != nullptr)
		*ActivationSec = Parms.ActivationSec;
}


// Function RSBattlePlayer.RSBattlePlayer_C.BadStateEffectDispSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bInDisp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::BadStateEffectDispSwitch(bool bInDisp, bool* bSuccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "BadStateEffectDispSwitch");

	Params::RSBattlePlayer_C_BadStateEffectDispSwitch Parms{};

	Parms.bInDisp = bInDisp;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsContentsOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EContentsOpening                        Contents                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOpen                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsContentsOpen(EContentsOpening Contents, bool* bOpen) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsContentsOpen");

	Params::RSBattlePlayer_C_IsContentsOpen Parms{};

	Parms.Contents = Contents;

	UObject::ProcessEvent(Func, &Parms);

	if (bOpen != nullptr)
		*bOpen = Parms.bOpen;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerSuperArmor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bSuperArmor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPlayerSuperArmor(bool* bSuperArmor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerSuperArmor");

	Params::RSBattlePlayer_C_IsPlayerSuperArmor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuperArmor != nullptr)
		*bSuperArmor = Parms.bSuperArmor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCharacterLV
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   LV                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCharacterLV(int32* LV) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCharacterLV");

	Params::RSBattlePlayer_C_GetCharacterLV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LV != nullptr)
		*LV = Parms.LV;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAssasinAttackHitType
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EAssassinAttackHit                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EAssassinAttackHit ARSBattlePlayer_C::GetAssasinAttackHitType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAssasinAttackHitType");

	Params::RSBattlePlayer_C_GetAssasinAttackHitType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBodyMeshes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class USkeletalMeshComponent*>   Meshes                                                 (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBodyMeshes(TArray<class USkeletalMeshComponent*>* Meshes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBodyMeshes");

	Params::RSBattlePlayer_C_GetBodyMeshes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Meshes != nullptr)
		*Meshes = std::move(Parms.Meshes);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsControlPlayer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsControlPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsControlPlayer");

	Params::RSBattlePlayer_C_IsControlPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableBoringIdle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDisableBoringIdle(bool* bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDisableBoringIdle");

	Params::RSBattlePlayer_C_IsDisableBoringIdle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisable != nullptr)
		*bDisable = Parms.bDisable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDamageCollisionInvincible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bInvincible                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDamageCollisionInvincible(bool* bInvincible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDamageCollisionInvincible");

	Params::RSBattlePlayer_C_IsDamageCollisionInvincible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInvincible != nullptr)
		*bInvincible = Parms.bInvincible;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCrashRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetBrainCrashRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainCrashRange");

	Params::RSBattlePlayer_C_GetBrainCrashRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NeedsDispNoDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bNeedsDipsNoDamage                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::NeedsDispNoDamage(bool* bNeedsDipsNoDamage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NeedsDispNoDamage");

	Params::RSBattlePlayer_C_NeedsDispNoDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNeedsDipsNoDamage != nullptr)
		*bNeedsDipsNoDamage = Parms.bNeedsDipsNoDamage;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableDispNoDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnableDispNoDamage(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableDispNoDamage");

	Params::RSBattlePlayer_C_IsEnableDispNoDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAutoStealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bAuto                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAutoStealth(bool* bAuto) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAutoStealth");

	Params::RSBattlePlayer_C_IsAutoStealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAuto != nullptr)
		*bAuto = Parms.bAuto;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableBehaviorTree
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDisableBehaviorTree(bool* bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDisableBehaviorTree");

	Params::RSBattlePlayer_C_IsDisableBehaviorTree Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisable != nullptr)
		*bDisable = Parms.bDisable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetWeaponEmissiveValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Emmisive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetWeaponEmissiveValue(float* Emmisive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetWeaponEmissiveValue");

	Params::RSBattlePlayer_C_GetWeaponEmissiveValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Emmisive != nullptr)
		*Emmisive = Parms.Emmisive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.NeedsWeaponVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bNeedsVisibility                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::NeedsWeaponVisibility(bool* bNeedsVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "NeedsWeaponVisibility");

	Params::RSBattlePlayer_C_NeedsWeaponVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNeedsVisibility != nullptr)
		*bNeedsVisibility = Parms.bNeedsVisibility;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainFieldUser
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bIsUser                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBrainFieldUser(bool* bIsUser) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainFieldUser");

	Params::RSBattlePlayer_C_IsBrainFieldUser Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsUser != nullptr)
		*bIsUser = Parms.bIsUser;
}


// Function RSBattlePlayer.RSBattlePlayer_C.CheckDisableBeginSAS_Telepo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bDisable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::CheckDisableBeginSAS_Telepo(bool* bDisable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "CheckDisableBeginSAS_Telepo");

	Params::RSBattlePlayer_C_CheckDisableBeginSAS_Telepo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisable != nullptr)
		*bDisable = Parms.bDisable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsStealthFromEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bFromEvent                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsStealthFromEvent(bool* bFromEvent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsStealthFromEvent");

	Params::RSBattlePlayer_C_IsStealthFromEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFromEvent != nullptr)
		*bFromEvent = Parms.bFromEvent;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInvisibleMiniMap
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInvisibleMiniMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInvisibleMiniMap");

	Params::RSBattlePlayer_C_IsInvisibleMiniMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAttackerMainPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bMainPlayer                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAttackerMainPlayer(bool* bMainPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAttackerMainPlayer");

	Params::RSBattlePlayer_C_IsAttackerMainPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMainPlayer != nullptr)
		*bMainPlayer = Parms.bMainPlayer;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSpawnWait
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bSpawnWait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsSpawnWait(bool* bSpawnWait) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSpawnWait");

	Params::RSBattlePlayer_C_IsSpawnWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSpawnWait != nullptr)
		*bSpawnWait = Parms.bSpawnWait;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDebugInvincible
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDebugInvincible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDebugInvincible");

	Params::RSBattlePlayer_C_IsDebugInvincible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsLookAtEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsLookAtEnable(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsLookAtEnable");

	Params::RSBattlePlayer_C_IsLookAtEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerIndex(int32* Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerIndex");

	Params::RSBattlePlayer_C_GetPlayerIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerWeaponList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EGetPlayerWeaponType                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_WeaponBase_C*>         WeaponList                                             (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerWeaponList(EGetPlayerWeaponType Type, TArray<class ABP_WeaponBase_C*>* WeaponList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerWeaponList");

	Params::RSBattlePlayer_C_GetPlayerWeaponList Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponList != nullptr)
		*WeaponList = std::move(Parms.WeaponList);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnemyPlayer                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyPlayer(bool* bEnemyPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyPlayer");

	Params::RSBattlePlayer_C_IsEnemyPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnemyPlayer != nullptr)
		*bEnemyPlayer = Parms.bEnemyPlayer;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsForceWarpAble_Interface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bWarpAble                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsForceWarpAble_Interface(bool* bWarpAble) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsForceWarpAble_Interface");

	Params::RSBattlePlayer_C_IsForceWarpAble_Interface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bWarpAble != nullptr)
		*bWarpAble = Parms.bWarpAble;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSkillParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerSkill                            Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLearned                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Parameter                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSkillParameter(EPlayerSkill Skill, bool* bLearned, float* Parameter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSkillParameter");

	Params::RSBattlePlayer_C_GetSkillParameter Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);

	if (bLearned != nullptr)
		*bLearned = Parms.bLearned;

	if (Parameter != nullptr)
		*Parameter = Parms.Parameter;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerInputRestriction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerInputRestrictionType             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRestriction                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPlayerInputRestriction(EPlayerInputRestrictionType Type, bool* bRestriction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerInputRestriction");

	Params::RSBattlePlayer_C_IsPlayerInputRestriction Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (bRestriction != nullptr)
		*bRestriction = Parms.bRestriction;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnpcComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UBP_ENpcComponent_C*              ReturnComp                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetEnpcComp(class UBP_ENpcComponent_C** ReturnComp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnpcComp");

	Params::RSBattlePlayer_C_GetEnpcComp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnComp != nullptr)
		*ReturnComp = Parms.ReturnComp;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAnimationEndTalkTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bAnimation                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAnimationEndTalkTurn(bool* bAnimation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAnimationEndTalkTurn");

	Params::RSBattlePlayer_C_IsAnimationEndTalkTurn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAnimation != nullptr)
		*bAnimation = Parms.bAnimation;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTalkLookAtLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Param_bTalkLookAt                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetTalkLookAtLocation(bool* Param_bTalkLookAt, struct FVector* Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTalkLookAtLocation");

	Params::RSBattlePlayer_C_GetTalkLookAtLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bTalkLookAt != nullptr)
		*Param_bTalkLookAt = Parms.Param_bTalkLookAt;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCameraControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bControl                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsCameraControl(bool* bControl) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCameraControl");

	Params::RSBattlePlayer_C_IsCameraControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bControl != nullptr)
		*bControl = Parms.bControl;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnpcSASLinkAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOK                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnpcSASLinkAble(E_SASKind Kind, bool* bOK) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnpcSASLinkAble");

	Params::RSBattlePlayer_C_IsEnpcSASLinkAble Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bOK != nullptr)
		*bOK = Parms.bOK;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bDying                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDying(bool* bDying) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDying");

	Params::RSBattlePlayer_C_IsDying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDying != nullptr)
		*bDying = Parms.bDying;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAutoTakenItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bAuto                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAutoTakenItem(bool* bAuto) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAutoTakenItem");

	Params::RSBattlePlayer_C_IsAutoTakenItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAuto != nullptr)
		*bAuto = Parms.bAuto;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCrashStartTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetBrainCrashStartTransform(struct FTransform* Transform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainCrashStartTransform");

	Params::RSBattlePlayer_C_GetBrainCrashStartTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsExecTalkEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bTalk                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsExecTalkEvent(bool* bTalk) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsExecTalkEvent");

	Params::RSBattlePlayer_C_IsExecTalkEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTalk != nullptr)
		*bTalk = Parms.bTalk;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUsingItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bUsing                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EConsumeItemID                          ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::IsUsingItem(bool* bUsing, EConsumeItemID* ItemId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUsingItem");

	Params::RSBattlePlayer_C_IsUsingItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bUsing != nullptr)
		*bUsing = Parms.bUsing;

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetControlPlayerDist
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Dist                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetControlPlayerDist(struct FVector* Dist) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetControlPlayerDist");

	Params::RSBattlePlayer_C_GetControlPlayerDist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dist != nullptr)
		*Dist = std::move(Parms.Dist);
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsMoveAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsMoveAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsMoveAble");

	Params::RSBattlePlayer_C_IsMoveAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMovePosActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           MovePosActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetMovePosActor(class AActor** MovePosActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMovePosActor");

	Params::RSBattlePlayer_C_GetMovePosActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovePosActor != nullptr)
		*MovePosActor = Parms.MovePosActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAttackAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAttackAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAttackAble");

	Params::RSBattlePlayer_C_IsAttackAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActionStatusAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerActionStatus                     ActionStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActionStatusAI(EPlayerActionStatus ActionStatus, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActionStatusAI");

	Params::RSBattlePlayer_C_IsActionStatusAI Parms{};

	Parms.ActionStatus = ActionStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerStatusAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerCommonStatus                     PlayerStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsPlayerStatusAI(EPlayerCommonStatus PlayerStatus, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerStatusAI");

	Params::RSBattlePlayer_C_IsPlayerStatusAI Parms{};

	Parms.PlayerStatus = PlayerStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Attack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bON                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsInputAI_Attack(bool* bON) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Attack");

	Params::RSBattlePlayer_C_IsInputAI_Attack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bON != nullptr)
		*bON = Parms.bON;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Dodge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bON                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsInputAI_Dodge(bool* bON) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Dodge");

	Params::RSBattlePlayer_C_IsInputAI_Dodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bON != nullptr)
		*bON = Parms.bON;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDodgeAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsDodgeAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDodgeAble");

	Params::RSBattlePlayer_C_IsDodgeAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAIMoveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerAIMoveMode                       Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAIMoveMode(EPlayerAIMoveMode Mode, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAIMoveMode");

	Params::RSBattlePlayer_C_IsAIMoveMode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerAIBattleThinkType                Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBattleThink(EPlayerAIBattleThinkType Type, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattleThink");

	Params::RSBattlePlayer_C_IsBattleThink Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBattleThinkParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerAIBattleThinkParam               Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBattleThinkParam(EPlayerAIBattleThinkParam Param, bool* bResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBattleThinkParam");

	Params::RSBattlePlayer_C_IsBattleThinkParam Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBattleTargetActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBattleTargetActor(class AActor** TargetActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBattleTargetActor");

	Params::RSBattlePlayer_C_GetBattleTargetActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Jump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bON                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsInputAI_Jump(bool* bON) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Jump");

	Params::RSBattlePlayer_C_IsInputAI_Jump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bON != nullptr)
		*bON = Parms.bON;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsJumpAble
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsJumpAble(bool* bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsJumpAble");

	Params::RSBattlePlayer_C_IsJumpAble Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAttackCountAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetAttackCountAI(int32* Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAttackCountAI");

	Params::RSBattlePlayer_C_GetAttackCountAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function RSBattlePlayer.RSBattlePlayer_C.OverwriteAttackInputKindAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EPlayerAIBattleThinkType                ThinkType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSAttackInputKind                      InputKind                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERSAttackInputKind                      Kind                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::OverwriteAttackInputKindAI(EPlayerAIBattleThinkType ThinkType, ERSAttackInputKind InputKind, ERSAttackInputKind* Kind) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "OverwriteAttackInputKindAI");

	Params::RSBattlePlayer_C_OverwriteAttackInputKindAI Parms{};

	Parms.ThinkType = ThinkType;
	Parms.InputKind = InputKind;

	UObject::ProcessEvent(Func, &Parms);

	if (Kind != nullptr)
		*Kind = Parms.Kind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEventMove(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEventMove");

	Params::RSBattlePlayer_C_IsEventMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMoveEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEventMoveEnd(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEventMoveEnd");

	Params::RSBattlePlayer_C_IsEventMoveEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsResetBehaviorTree
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bReset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsResetBehaviorTree(bool* bReset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsResetBehaviorTree");

	Params::RSBattlePlayer_C_IsResetBehaviorTree Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReset != nullptr)
		*bReset = Parms.bReset;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEventWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bWait                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEventWait(bool* bWait) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEventWait");

	Params::RSBattlePlayer_C_IsEventWait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bWait != nullptr)
		*bWait = Parms.bWait;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetUseItemID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EConsumeItemID                          ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetUseItemID(EConsumeItemID* ItemId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetUseItemID");

	Params::RSBattlePlayer_C_GetUseItemID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerID
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerID                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPlayerID ARSBattlePlayer_C::GetPlayerID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerID");

	Params::RSBattlePlayer_C_GetPlayerID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPartyPlayerKind
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ERSPartyPlayerKind                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ERSPartyPlayerKind ARSBattlePlayer_C::GetPartyPlayerKind() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPartyPlayerKind");

	Params::RSBattlePlayer_C_GetPartyPlayerKind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsLockTargetInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsLockTarget                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsLockTargetInterface(bool* IsLockTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsLockTargetInterface");

	Params::RSBattlePlayer_C_IsLockTargetInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLockTarget != nullptr)
		*IsLockTarget = Parms.IsLockTarget;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetBossInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           LockBoss                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetTargetBossInterface(class AActor** LockBoss) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTargetBossInterface");

	Params::RSBattlePlayer_C_GetTargetBossInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LockBoss != nullptr)
		*LockBoss = Parms.LockBoss;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentTargetActorInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetCurrentTargetActorInterface(class AActor** TargetActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentTargetActorInterface");

	Params::RSBattlePlayer_C_GetCurrentTargetActorInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveSAS_ForButton
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSAS                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActiveSAS_ForButton(E_SASButton SASButton, bool* IsSAS) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveSAS_ForButton");

	Params::RSBattlePlayer_C_IsActiveSAS_ForButton Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSAS != nullptr)
		*IsSAS = Parms.IsSAS;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsOnReadySAS
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsOnReadySAS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsOnReadySAS");

	Params::RSBattlePlayer_C_IsOnReadySAS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCanSAS_Use
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSASUse                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsCanSAS_Use(E_SASButton SASButton, bool* IsSASUse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCanSAS_Use");

	Params::RSBattlePlayer_C_IsCanSAS_Use Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSASUse != nullptr)
		*IsSASUse = Parms.IsSASUse;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetSASKindforButton
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SASKindNative                         SasKind                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetSASKindforButton(E_SASButton SASButton, E_SASKindNative* SasKind) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetSASKindforButton");

	Params::RSBattlePlayer_C_GetSASKindforButton Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (SasKind != nullptr)
		*SasKind = Parms.SasKind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputSAS
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASButton                             SASButton                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsInputSAS                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsInputSAS(E_SASButton SASButton, bool* Param_IsInputSAS) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputSAS");

	Params::RSBattlePlayer_C_IsInputSAS Parms{};

	Parms.SASButton = SASButton;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsInputSAS != nullptr)
		*Param_IsInputSAS = Parms.Param_IsInputSAS;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsLockTargetLostInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsLockTargetLostInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsLockTargetLostInterface");

	Params::RSBattlePlayer_C_IsLockTargetLostInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableBrainCrash_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableBrainCrash_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableBrainCrash_Native");

	Params::RSBattlePlayer_C_IsEnableBrainCrash_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsResetBehaviorTree_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsResetBehaviorTree_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsResetBehaviorTree_CallFromCPP");

	Params::RSBattlePlayer_C_IsResetBehaviorTree_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsMoveAble_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsMoveAble_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsMoveAble_CallFromCPP");

	Params::RSBattlePlayer_C_IsMoveAble_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsJumpAble_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsJumpAble_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsJumpAble_CallFromCPP");

	Params::RSBattlePlayer_C_IsJumpAble_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Jump_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInputAI_Jump_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Jump_CallFromCPP");

	Params::RSBattlePlayer_C_IsInputAI_Jump_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Dodge_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInputAI_Dodge_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Dodge_CallFromCPP");

	Params::RSBattlePlayer_C_IsInputAI_Dodge_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInputAI_Attack_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInputAI_Attack_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInputAI_Attack_CallFromCPP");

	Params::RSBattlePlayer_C_IsInputAI_Attack_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEventWait_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEventWait_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEventWait_CallFromCPP");

	Params::RSBattlePlayer_C_IsEventWait_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMoveEnd_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEventMoveEnd_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEventMoveEnd_CallFromCPP");

	Params::RSBattlePlayer_C_IsEventMoveEnd_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionDodge_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableActionDodge_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionDodge_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnableActionDodge_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDodgeAble_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDodgeAble_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDodgeAble_CallFromCPP");

	Params::RSBattlePlayer_C_IsDodgeAble_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAttackAble_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsAttackAble_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAttackAble_CallFromCPP");

	Params::RSBattlePlayer_C_IsAttackAble_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMovePosActor_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ARSBattlePlayer_C::GetMovePosActor_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMovePosActor_CallFromCPP");

	Params::RSBattlePlayer_C_GetMovePosActor_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetControlPlayerDist_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattlePlayer_C::GetControlPlayerDist_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetControlPlayerDist_CallFromCPP");

	Params::RSBattlePlayer_C_GetControlPlayerDist_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetAttackCountAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ARSBattlePlayer_C::GetAttackCountAI_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetAttackCountAI_CallFromCPP");

	Params::RSBattlePlayer_C_GetAttackCountAI_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEventMove_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEventMove_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEventMove_CallFromCPP");

	Params::RSBattlePlayer_C_IsEventMove_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsMetalMode_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsMetalMode_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsMetalMode_CallFromCPP");

	Params::RSBattlePlayer_C_IsMetalMode_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableActionJump_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnableActionJump_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableActionJump_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnableActionJump_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsControlAI_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsControlAI_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsControlAI_CallFromCPP");

	Params::RSBattlePlayer_C_IsControlAI_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDying_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDying_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDying_CallFromCPP");

	Params::RSBattlePlayer_C_IsDying_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPlayerAccessoryEffect_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EEffecacyType                           EffectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOutEquip                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   OutParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetPlayerAccessoryEffect_CallFromCPP(EEffecacyType EffectType, bool* bOutEquip, float* OutParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPlayerAccessoryEffect_CallFromCPP");

	Params::RSBattlePlayer_C_GetPlayerAccessoryEffect_CallFromCPP Parms{};

	Parms.EffectType = EffectType;

	UObject::ProcessEvent(Func, &Parms);

	if (bOutEquip != nullptr)
		*bOutEquip = Parms.bOutEquip;

	if (OutParam != nullptr)
		*OutParam = Parms.OutParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCoverDamagePlayerID_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerID                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPlayerID ARSBattlePlayer_C::GetCoverDamagePlayerID_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCoverDamagePlayerID_CallFromCPP");

	Params::RSBattlePlayer_C_GetCoverDamagePlayerID_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPlayerSuperArmor_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPlayerSuperArmor_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPlayerSuperArmor_CallFromCPP");

	Params::RSBattlePlayer_C_IsPlayerSuperArmor_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDamageCollisionInvincible_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDamageCollisionInvincible_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDamageCollisionInvincible_CallFromCPP");

	Params::RSBattlePlayer_C_IsDamageCollisionInvincible_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyForceWait_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemyForceWait_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyForceWait_CallFromCPP");

	Params::RSBattlePlayer_C_IsEnemyForceWait_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnableSASEffectInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASKindNative                         Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESASEffect                              Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutEnable                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   OutParam0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutParam2                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutParam3                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::IsEnableSASEffectInterface(E_SASKindNative Kind, ESASEffect Effect, bool* OutEnable, float* OutParam0, float* OutParam1, float* OutParam2, float* OutParam3) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnableSASEffectInterface");

	Params::RSBattlePlayer_C_IsEnableSASEffectInterface Parms{};

	Parms.Kind = Kind;
	Parms.Effect = Effect;

	UObject::ProcessEvent(Func, &Parms);

	if (OutEnable != nullptr)
		*OutEnable = Parms.OutEnable;

	if (OutParam0 != nullptr)
		*OutParam0 = Parms.OutParam0;

	if (OutParam1 != nullptr)
		*OutParam1 = Parms.OutParam1;

	if (OutParam2 != nullptr)
		*OutParam2 = Parms.OutParam2;

	if (OutParam3 != nullptr)
		*OutParam3 = Parms.OutParam3;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyActive(bool* Return) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyActive");

	Params::RSBattlePlayer_C_IsEnemyActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBossEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bBoss                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsBossEnemy(bool* bBoss) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBossEnemy");

	Params::RSBattlePlayer_C_IsBossEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBoss != nullptr)
		*bBoss = Parms.bBoss;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDistanceToPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetDistanceToPlayer(float* Distance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDistanceToPlayer");

	Params::RSBattlePlayer_C_GetDistanceToPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetTargetDistance(float* Distance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTargetDistance");

	Params::RSBattlePlayer_C_GetTargetDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemySpawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetEnemySpawn(bool* Return) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemySpawn");

	Params::RSBattlePlayer_C_GetEnemySpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetHeightCheckFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::GetHeightCheckFlag(bool* NewParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetHeightCheckFlag");

	Params::RSBattlePlayer_C_GetHeightCheckFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsFlyEnemyCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsFlyEnemyCheck(bool* NewParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsFlyEnemyCheck");

	Params::RSBattlePlayer_C_IsFlyEnemyCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetBrainCrashSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsUnique                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ULevelSequence*                   Sequence                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetBrainCrashSequence(bool IsUnique, class ULevelSequence** Sequence) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetBrainCrashSequence");

	Params::RSBattlePlayer_C_GetBrainCrashSequence Parms{};

	Parms.IsUnique = IsUnique;

	UObject::ProcessEvent(Func, &Parms);

	if (Sequence != nullptr)
		*Sequence = Parms.Sequence;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMoveToTargetAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EnemyMoveAnimKind                       MoveAnim                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetMoveToTargetAnim(EnemyMoveAnimKind* MoveAnim) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMoveToTargetAnim");

	Params::RSBattlePlayer_C_GetMoveToTargetAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MoveAnim != nullptr)
		*MoveAnim = Parms.MoveAnim;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetMainPlayerDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetMainPlayerDistance(float* Distance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetMainPlayerDistance");

	Params::RSBattlePlayer_C_GetMainPlayerDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsRealThings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bReal                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsRealThings(bool* bReal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsRealThings");

	Params::RSBattlePlayer_C_IsRealThings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReal != nullptr)
		*bReal = Parms.bReal;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemySpawnNow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    SpawnNow                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemySpawnNow(bool* SpawnNow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemySpawnNow");

	Params::RSBattlePlayer_C_IsEnemySpawnNow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnNow != nullptr)
		*SpawnNow = Parms.SpawnNow;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsNotFindPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bNotFind                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsNotFindPlayer(bool* bNotFind) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsNotFindPlayer");

	Params::RSBattlePlayer_C_IsNotFindPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNotFind != nullptr)
		*bNotFind = Parms.bNotFind;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyTickDisableCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bDisableCondition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsEnemyTickDisableCondition(bool* bDisableCondition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyTickDisableCondition");

	Params::RSBattlePlayer_C_IsEnemyTickDisableCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableCondition != nullptr)
		*bDisableCondition = Parms.bDisableCondition;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8310_IsMaskMan
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bMaskMan                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8310_IsMaskMan(bool* bMaskMan) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8310_IsMaskMan");

	Params::RSBattlePlayer_C_Em8310_IsMaskMan Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMaskMan != nullptr)
		*bMaskMan = Parms.bMaskMan;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Accelerating                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAccelerating(bool* Accelerating) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAccelerating");

	Params::RSBattlePlayer_C_IsAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Accelerating != nullptr)
		*Accelerating = Parms.Accelerating;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsAcceleratorValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsAcceleratorValid(bool* Valid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsAcceleratorValid");

	Params::RSBattlePlayer_C_IsAcceleratorValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetENpcParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UBP_ENpc_ParamBase_C*             Param                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetENpcParam(class UBP_ENpc_ParamBase_C** Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetENpcParam");

	Params::RSBattlePlayer_C_GetENpcParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetBattleType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// Enum_BattleType_em8000                  BattleType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_GetBattleType(Enum_BattleType_em8000* BattleType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_GetBattleType");

	Params::RSBattlePlayer_C_Em8000_GetBattleType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleType != nullptr)
		*BattleType = Parms.BattleType;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsActiveEnpcSAS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// E_SASKind                               Kind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bActive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsActiveEnpcSAS(E_SASKind Kind, bool* bActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsActiveEnpcSAS");

	Params::RSBattlePlayer_C_IsActiveEnpcSAS Parms{};

	Parms.Kind = Kind;

	UObject::ProcessEvent(Func, &Parms);

	if (bActive != nullptr)
		*bActive = Parms.bActive;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8210_IsHomingEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8210_IsHomingEnd(bool* bEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8210_IsHomingEnd");

	Params::RSBattlePlayer_C_Em8210_IsHomingEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnd != nullptr)
		*bEnd = Parms.bEnd;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8000_GetBattleProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   CurProcess                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8000_GetBattleProcess(int32* CurProcess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8000_GetBattleProcess");

	Params::RSBattlePlayer_C_Em8000_GetBattleProcess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurProcess != nullptr)
		*CurProcess = Parms.CurProcess;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_GetBattleType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// Enum_BattleType_em8010                  BattleType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8010_GetBattleType(Enum_BattleType_em8010* BattleType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_GetBattleType");

	Params::RSBattlePlayer_C_Em8010_GetBattleType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleType != nullptr)
		*BattleType = Parms.BattleType;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsNotRequirementPartner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bNotRequirement                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsNotRequirementPartner(bool* bNotRequirement) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsNotRequirementPartner");

	Params::RSBattlePlayer_C_IsNotRequirementPartner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNotRequirement != nullptr)
		*bNotRequirement = Parms.bNotRequirement;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsIgnoreForceFinishMetamorphosis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::IsIgnoreForceFinishMetamorphosis(bool* bIgnore) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsIgnoreForceFinishMetamorphosis");

	Params::RSBattlePlayer_C_IsIgnoreForceFinishMetamorphosis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamophosis_BaseChara
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bIsMetamorphosis                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_IsMetamophosis_BaseChara(bool* bIsMetamorphosis) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_IsMetamophosis_BaseChara");

	Params::RSBattlePlayer_C_Em8010_IsMetamophosis_BaseChara Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsMetamorphosis != nullptr)
		*bIsMetamorphosis = Parms.bIsMetamorphosis;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamophosis_ChangeChara
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bIsMetamorphosis                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_IsMetamophosis_ChangeChara(bool* bIsMetamorphosis) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_IsMetamophosis_ChangeChara");

	Params::RSBattlePlayer_C_Em8010_IsMetamophosis_ChangeChara Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsMetamorphosis != nullptr)
		*bIsMetamorphosis = Parms.bIsMetamorphosis;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamorphosis_Disappear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bDisappear                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_IsMetamorphosis_Disappear(bool* bDisappear) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_IsMetamorphosis_Disappear");

	Params::RSBattlePlayer_C_Em8010_IsMetamorphosis_Disappear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisappear != nullptr)
		*bDisappear = Parms.bDisappear;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_IsMetamorphosis_Appear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bAppear                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8010_IsMetamorphosis_Appear(bool* bAppear) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_IsMetamorphosis_Appear");

	Params::RSBattlePlayer_C_Em8010_IsMetamorphosis_Appear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAppear != nullptr)
		*bAppear = Parms.bAppear;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8010_GetParameterTableAttackScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARSBattlePlayer_C::Em8010_GetParameterTableAttackScale(float* Scale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8010_GetParameterTableAttackScale");

	Params::RSBattlePlayer_C_Em8010_GetParameterTableAttackScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function RSBattlePlayer.RSBattlePlayer_C.Em8220_IsSpFieldOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bOpen                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARSBattlePlayer_C::Em8220_IsSpFieldOpen(bool* bOpen) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "Em8220_IsSpFieldOpen");

	Params::RSBattlePlayer_C_Em8220_IsSpFieldOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOpen != nullptr)
		*bOpen = Parms.bOpen;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUpdateEnemyTickEnable
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUpdateEnemyTickEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUpdateEnemyTickEnable");

	Params::RSBattlePlayer_C_IsUpdateEnemyTickEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUpdateEnemySpawn
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUpdateEnemySpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUpdateEnemySpawn");

	Params::RSBattlePlayer_C_IsUpdateEnemySpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsTickDisableCondition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsTickDisableCondition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsTickDisableCondition");

	Params::RSBattlePlayer_C_IsTickDisableCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsReflectContainer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsReflectContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsReflectContainer");

	Params::RSBattlePlayer_C_IsReflectContainer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsPressDown_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsPressDown_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsPressDown_Native");

	Params::RSBattlePlayer_C_IsPressDown_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsLaunchDown_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsLaunchDown_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsLaunchDown_Native");

	Params::RSBattlePlayer_C_IsLaunchDown_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsExecLowProcess
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsExecLowProcess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsExecLowProcess");

	Params::RSBattlePlayer_C_IsExecLowProcess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemySpawn_Interface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemySpawn_Interface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemySpawn_Interface");

	Params::RSBattlePlayer_C_IsEnemySpawn_Interface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyFalling_Interface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemyFalling_Interface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyFalling_Interface");

	Params::RSBattlePlayer_C_IsEnemyFalling_Interface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableUroAction_Interface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDisableUroAction_Interface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDisableUroAction_Interface");

	Params::RSBattlePlayer_C_IsDisableUroAction_Interface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDamageMotionEnd_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDamageMotionEnd_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDamageMotionEnd_Native");

	Params::RSBattlePlayer_C_IsDamageMotionEnd_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckLookTargetTick
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsCheckLookTargetTick(const struct FVector& Start, const struct FVector& End) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCheckLookTargetTick");

	Params::RSBattlePlayer_C_IsCheckLookTargetTick Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsCheckHeightChangeTick
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsCheckHeightChangeTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsCheckHeightChangeTick");

	Params::RSBattlePlayer_C_IsCheckHeightChangeTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBrainSuccess_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBrainSuccess_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBrainSuccess_Native");

	Params::RSBattlePlayer_C_IsBrainSuccess_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTopHeightLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattlePlayer_C::GetTopHeightLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTopHeightLocation");

	Params::RSBattlePlayer_C_GetTopHeightLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetTargetCharacter_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ARSBattlePlayer_C::GetTargetCharacter_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetTargetCharacter_Native");

	Params::RSBattlePlayer_C_GetTargetCharacter_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetPressDownLoop_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetPressDownLoop_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetPressDownLoop_Native");

	Params::RSBattlePlayer_C_GetPressDownLoop_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetNewDamageFloating_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetNewDamageFloating_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetNewDamageFloating_Native");

	Params::RSBattlePlayer_C_GetNewDamageFloating_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetLostActionInfoList_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FEmLostActionInfo>        LostActionInfo                                         (Parm, OutParm, HasGetValueTypeHash)

void ARSBattlePlayer_C::GetLostActionInfoList_Native(TArray<struct FEmLostActionInfo>* LostActionInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetLostActionInfoList_Native");

	Params::RSBattlePlayer_C_GetLostActionInfoList_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LostActionInfo != nullptr)
		*LostActionInfo = std::move(Parms.LostActionInfo);
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetIsLandCheck
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetIsLandCheck() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetIsLandCheck");

	Params::RSBattlePlayer_C_GetIsLandCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetIsJumpEnd
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetIsJumpEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetIsJumpEnd");

	Params::RSBattlePlayer_C_GetIsJumpEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetHateTarget_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UHateTargetComponent*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UHateTargetComponent* ARSBattlePlayer_C::GetHateTarget_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetHateTarget_Native");

	Params::RSBattlePlayer_C_GetHateTarget_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyScriptComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UEnemyScriptComponent*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UEnemyScriptComponent* ARSBattlePlayer_C::GetEnemyScriptComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemyScriptComponent");

	Params::RSBattlePlayer_C_GetEnemyScriptComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyAnimControllerComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UEnemyAnimControllerComponent*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UEnemyAnimControllerComponent* ARSBattlePlayer_C::GetEnemyAnimControllerComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemyAnimControllerComponent");

	Params::RSBattlePlayer_C_GetEnemyAnimControllerComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetEnemyAiComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UEnemyAiComponentBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UEnemyAiComponentBase* ARSBattlePlayer_C::GetEnemyAiComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetEnemyAiComponent");

	Params::RSBattlePlayer_C_GetEnemyAiComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDownUpMoveAnimKind_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EnemyMoveAnimKind                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EnemyMoveAnimKind ARSBattlePlayer_C::GetDownUpMoveAnimKind_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDownUpMoveAnimKind_Native");

	Params::RSBattlePlayer_C_GetDownUpMoveAnimKind_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDownTimer_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetDownTimer_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDownTimer_Native");

	Params::RSBattlePlayer_C_GetDownTimer_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDebugEnemyDownInfinity_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::GetDebugEnemyDownInfinity_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDebugEnemyDownInfinity_Native");

	Params::RSBattlePlayer_C_GetDebugEnemyDownInfinity_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetDamageHitDirectionIF
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ARSBattlePlayer_C::GetDamageHitDirectionIF() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetDamageHitDirectionIF");

	Params::RSBattlePlayer_C_GetDamageHitDirectionIF Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCurrentTarget
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ARSBattlePlayer_C::GetCurrentTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCurrentTarget");

	Params::RSBattlePlayer_C_GetCurrentTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetCapsuleComponent_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UCapsuleComponent* ARSBattlePlayer_C::GetCapsuleComponent_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetCapsuleComponent_Native");

	Params::RSBattlePlayer_C_GetCapsuleComponent_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsWeakUiDamageHit_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsWeakUiDamageHit_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsWeakUiDamageHit_CallFromCPP");

	Params::RSBattlePlayer_C_IsWeakUiDamageHit_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsNotFindPlayer_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsNotFindPlayer_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsNotFindPlayer_CallFromCPP");

	Params::RSBattlePlayer_C_IsNotFindPlayer_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsUniqueAroundEffectPause
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsUniqueAroundEffectPause() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsUniqueAroundEffectPause");

	Params::RSBattlePlayer_C_IsUniqueAroundEffectPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.GetUniqueTickEnableRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARSBattlePlayer_C::GetUniqueTickEnableRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "GetUniqueTickEnableRange");

	Params::RSBattlePlayer_C_GetUniqueTickEnableRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsBossEnemy_CallFromCPP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsBossEnemy_CallFromCPP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsBossEnemy_CallFromCPP");

	Params::RSBattlePlayer_C_IsBossEnemy_CallFromCPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSpawned
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsSpawned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSpawned");

	Params::RSBattlePlayer_C_IsSpawned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsDisableDownMotionInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsDisableDownMotionInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsDisableDownMotionInterface");

	Params::RSBattlePlayer_C_IsDisableDownMotionInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsSuspendFollowAttackInterface
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsSuspendFollowAttackInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsSuspendFollowAttackInterface");

	Params::RSBattlePlayer_C_IsSuspendFollowAttackInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsInvincible_Native
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsInvincible_Native() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsInvincible_Native");

	Params::RSBattlePlayer_C_IsInvincible_Native Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RSBattlePlayer.RSBattlePlayer_C.IsEnemyConsiderDownDead
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ARSBattlePlayer_C::IsEnemyConsiderDownDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RSBattlePlayer_C", "IsEnemyConsiderDownDead");

	Params::RSBattlePlayer_C_IsEnemyConsiderDownDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

