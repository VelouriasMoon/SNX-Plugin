#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BrainFieldManager

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ERenderTargetType_structs.hpp"


namespace SDK::Params
{

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_BrainFieldBattleEnd__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature final
{
public:
	EBrainFieldEndType                            Param_EndType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature");
static_assert(sizeof(BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature) == 0x000001, "Wrong size on BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature");
static_assert(offsetof(BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature, Param_EndType) == 0x000000, "Member 'BP_BrainFieldManager_C_ED_BrainFieldBattleEnd__DelegateSignature::Param_EndType' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_BrainFieldSwitchBG__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature final
{
public:
	bool                                          IsBrainField;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature");
static_assert(sizeof(BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature) == 0x000001, "Wrong size on BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature");
static_assert(offsetof(BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature, IsBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_ED_BrainFieldSwitchBG__DelegateSignature::IsBrainField' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ED_ChangeMonitorState__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature final
{
public:
	EBrainFieldMonitorState                       MonitorState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature");
static_assert(sizeof(BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature) == 0x000001, "Wrong size on BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature");
static_assert(offsetof(BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature, MonitorState) == 0x000000, "Member 'BP_BrainFieldManager_C_ED_ChangeMonitorState__DelegateSignature::MonitorState' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ExecuteUbergraph_BP_BrainFieldManager
// 0x0350 (0x0350 - 0x0000)
struct BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFinishNormalFieldVisible_Finish;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_VisibleBrainField;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B7D[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ObjectNum;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_MoveBrainField;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFinishBrainFieldVisible_Finish;         // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayPerformSequencer_StartPlay;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B7E[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBrainFieldRestoreFlag                 CallFunc_VisibleNormalParticles_SetRestoreFlag;    // 0x0030(0x0028)()
	class ABP_LevelManager_C*                     CallFunc_GetLevelManager_LevelManager;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B7F[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LevelManager_C*                     CallFunc_GetLevelManager_LevelManager_1;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B80[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseRefresh;                     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B81[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BrainFieldSequenceActor_C*          CallFunc_FinishSpawningActor_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B82[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_CustomEvent_Actors;                         // 0x00C8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Visible;                        // 0x00D8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B83[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Enable_1;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B84[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	EREDActorStatType                             CallFunc_GetActorStatType_ReturnValue;             // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B85[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckFinishCondition_IsFinish;            // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CloseBrainField_ReturnValue;              // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B86[0xD];                                     // 0x0113(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B87[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventCameraRoot_C*                  CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B88[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B89[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0190(0x0018)()
	const class ADebuggingItemBool*               K2Node_CustomEvent_InItem;                         // 0x01A8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetValue_ReturnValue;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B8A[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x01B4(0x0010)(ZeroConstructor, NoDestructor)
	EBrainFieldMonitorState                       K2Node_CustomEvent_MonitorState;                   // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B8B[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadSoftClassActor_ReturnValue;           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B8C[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventStartup_IsEvent;                   // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B8D[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x01E0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACameraActor*                           CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B8E[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHoodVisible_ReturnValue;               // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B8F[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0240(0x0030)(IsPlainOldData, NoDestructor)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3; // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingAnyDead_Playing;                 // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B90[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_3;        // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B91[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessComponent*                  CallFunc_GetPerformPostProcess_PostProcess;        // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RenderTargetManager_C*              CallFunc_GetRenderTargetManager_Manager;           // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_GetRenderTarget_RenderTarget;             // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B92[0x6];                                     // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebuggingItemBase*                     CallFunc_SearchItem_ReturnValue;                   // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADebuggingItemBool*                     K2Node_DynamicCast_AsDebugging_Item_Bool;          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReady_ReturnValue;                      // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Performance_Sequencer_IsPerform;       // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B93[0x5];                                     // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1; // 0x02E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B94[0x5];                                     // 0x02F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 K2Node_CustomEvent_target;                         // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERenderTargetType                             K2Node_CustomEvent_RenderTargetType;               // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B95[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 K2Node_CustomEvent_NewTarget;                      // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B96[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ADebuggingItemBool* InItem)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0314(0x0010)(ZeroConstructor, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B97[0x3];                                     // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0328(0x0010)(ZeroConstructor, NoDestructor)
	class ABP_RenderTargetManager_C*              CallFunc_GetRenderTargetManager_Manager_1;         // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERenderTargetType RenderTargetType, class UTextureRenderTarget2D* NewTarget)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0340(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager");
static_assert(sizeof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager) == 0x000350, "Wrong size on BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, EntryPoint) == 0x000000, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsFinishNormalFieldVisible_Finish) == 0x000004, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsFinishNormalFieldVisible_Finish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_VisibleBrainField) == 0x000005, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_VisibleBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_ObjectNum) == 0x000008, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_ObjectNum' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000D, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_MoveBrainField) == 0x00000E, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_MoveBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsFinishBrainFieldVisible_Finish) == 0x00000F, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsFinishBrainFieldVisible_Finish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Array_LastIndex_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_PlayPerformSequencer_StartPlay) == 0x000018, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_PlayPerformSequencer_StartPlay' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_VisibleNormalParticles_SetRestoreFlag) == 0x000030, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_VisibleNormalParticles_SetRestoreFlag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetLevelManager_LevelManager) == 0x000058, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetLevelManager_LevelManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetLevelManager_LevelManager_1) == 0x000068, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetLevelManager_LevelManager_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue_2) == 0x000071, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Divide_IntInt_ReturnValue) == 0x000074, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_UseRefresh) == 0x00007C, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_UseRefresh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000B0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000B8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_Actors) == 0x0000C8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_Actors' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_Visible) == 0x0000D8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_Visible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Array_Length_ReturnValue) == 0x0000DC, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_Enable_1) == 0x0000E0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_Enable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_Enable) == 0x0000E1, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_Event_DeltaSeconds) == 0x0000E4, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CreateDelegate_OutputDelegate) == 0x0000E8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetActorStatType_ReturnValue) == 0x0000F8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetActorStatType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_DynamicCast_AsPlayer_Interface) == 0x000100, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_CheckFinishCondition_IsFinish) == 0x000111, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_CheckFinishCondition_IsFinish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_CloseBrainField_ReturnValue) == 0x000112, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_CloseBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeTransform_ReturnValue_1) == 0x000120, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, Temp_int_Variable) == 0x000150, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000158, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000160, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000168, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Array_Length_ReturnValue_1) == 0x000178, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Add_IntInt_ReturnValue_2) == 0x00017C, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000180, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, Temp_int_Loop_Counter_Variable) == 0x000184, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Add_IntInt_ReturnValue_3) == 0x000188, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeLiteralByte_ReturnValue) == 0x00018C, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x00018D, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeLiteralText_ReturnValue) == 0x000190, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_InItem) == 0x0001A8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_InItem' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetValue_ReturnValue) == 0x0001B0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001B4, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_MonitorState) == 0x0001C4, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_MonitorState' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_LoadSoftClassActor_ReturnValue) == 0x0001C8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_LoadSoftClassActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x0001D0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, Temp_int_Loop_Num_Variable) == 0x0001D4, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Less_IntInt_ReturnValue) == 0x0001D8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsEventStartup_IsEvent) == 0x0001D9, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsEventStartup_IsEvent' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeTransform_ReturnValue_2) == 0x0001E0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x000210, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x000218, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, Temp_int_Array_Index_Variable) == 0x000220, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_DynamicCast_AsEvent_Interface) == 0x000228, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_DynamicCast_bSuccess_1) == 0x000238, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue_3) == 0x000239, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_SetHoodVisible_ReturnValue) == 0x00023A, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_SetHoodVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x00023B, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_MakeTransform_ReturnValue_3) == 0x000240, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetPlayerManager_PlayerManager) == 0x000270, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3) == 0x000278, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsPlayingAnyDead_Playing) == 0x000280, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsPlayingAnyDead_Playing' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_FinishSpawningActor_ReturnValue_3) == 0x000288, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_FinishSpawningActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetPostProcessManager_Manager) == 0x000290, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue_4) == 0x000298, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetPerformPostProcess_PostProcess) == 0x0002A0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetPerformPostProcess_PostProcess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetRenderTargetManager_Manager) == 0x0002A8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetRenderTargetManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetDebuggingManager_Manager) == 0x0002B0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetRenderTarget_RenderTarget) == 0x0002B8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetRenderTarget_RenderTarget' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue_5) == 0x0002C0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsValid_ReturnValue_6) == 0x0002C1, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_SearchItem_ReturnValue) == 0x0002C8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_SearchItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_DynamicCast_AsDebugging_Item_Bool) == 0x0002D0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_DynamicCast_AsDebugging_Item_Bool' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_DynamicCast_bSuccess_2) == 0x0002D8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsReady_ReturnValue) == 0x0002D9, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsReady_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Is_Performance_Sequencer_IsPerform) == 0x0002DA, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Is_Performance_Sequencer_IsPerform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1) == 0x0002E0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_IsUserIsPlayer_IsPlayer) == 0x0002F0, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_Not_PreBool_ReturnValue_2) == 0x0002F1, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_BooleanAND_ReturnValue) == 0x0002F2, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_target) == 0x0002F8, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_target' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_RenderTargetType) == 0x000300, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_RenderTargetType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CustomEvent_NewTarget) == 0x000308, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CustomEvent_NewTarget' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000310, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CreateDelegate_OutputDelegate_2) == 0x000314, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_Event_EndPlayReason) == 0x000324, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CreateDelegate_OutputDelegate_3) == 0x000328, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, CallFunc_GetRenderTargetManager_Manager_1) == 0x000338, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::CallFunc_GetRenderTargetManager_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager, K2Node_CreateDelegate_OutputDelegate_4) == 0x000340, "Member 'BP_BrainFieldManager_C_ExecuteUbergraph_BP_BrainFieldManager::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_ReceiveEndPlay");
static_assert(sizeof(BP_BrainFieldManager_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_BrainFieldManager_C_ReceiveEndPlay");
static_assert(offsetof(BP_BrainFieldManager_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_BrainFieldManager_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ResetRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct BP_BrainFieldManager_C_ResetRenderTarget final
{
public:
	ERenderTargetType                             RenderTargetType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B98[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 NewTarget;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ResetRenderTarget) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_ResetRenderTarget");
static_assert(sizeof(BP_BrainFieldManager_C_ResetRenderTarget) == 0x000010, "Wrong size on BP_BrainFieldManager_C_ResetRenderTarget");
static_assert(offsetof(BP_BrainFieldManager_C_ResetRenderTarget, RenderTargetType) == 0x000000, "Member 'BP_BrainFieldManager_C_ResetRenderTarget::RenderTargetType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ResetRenderTarget, NewTarget) == 0x000008, "Member 'BP_BrainFieldManager_C_ResetRenderTarget::NewTarget' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetBGRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct BP_BrainFieldManager_C_SetBGRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SetBGRenderTarget) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetBGRenderTarget");
static_assert(sizeof(BP_BrainFieldManager_C_SetBGRenderTarget) == 0x000008, "Wrong size on BP_BrainFieldManager_C_SetBGRenderTarget");
static_assert(offsetof(BP_BrainFieldManager_C_SetBGRenderTarget, Target) == 0x000000, "Member 'BP_BrainFieldManager_C_SetBGRenderTarget::Target' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OnChangeMonitorState
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_OnChangeMonitorState final
{
public:
	EBrainFieldMonitorState                       MonitorState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_OnChangeMonitorState) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_OnChangeMonitorState");
static_assert(sizeof(BP_BrainFieldManager_C_OnChangeMonitorState) == 0x000001, "Wrong size on BP_BrainFieldManager_C_OnChangeMonitorState");
static_assert(offsetof(BP_BrainFieldManager_C_OnChangeMonitorState, MonitorState) == 0x000000, "Member 'BP_BrainFieldManager_C_OnChangeMonitorState::MonitorState' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OnChangedDebugForceEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_BrainFieldManager_C_OnChangedDebugForceEnd final
{
public:
	const class ADebuggingItemBool*               InItem;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_OnChangedDebugForceEnd) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_OnChangedDebugForceEnd");
static_assert(sizeof(BP_BrainFieldManager_C_OnChangedDebugForceEnd) == 0x000008, "Wrong size on BP_BrainFieldManager_C_OnChangedDebugForceEnd");
static_assert(offsetof(BP_BrainFieldManager_C_OnChangedDebugForceEnd, InItem) == 0x000000, "Member 'BP_BrainFieldManager_C_OnChangedDebugForceEnd::InItem' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BrainFieldManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_ReceiveTick");
static_assert(sizeof(BP_BrainFieldManager_C_ReceiveTick) == 0x000004, "Wrong size on BP_BrainFieldManager_C_ReceiveTick");
static_assert(offsetof(BP_BrainFieldManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BrainFieldManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetDynamicShadowDelay
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay) == 0x000001, "Wrong size on BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay, Enable) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetDynamicShadowDelay::Enable' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetDynamicShadow
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetDynamicShadow final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetDynamicShadow) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetDynamicShadow");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetDynamicShadow) == 0x000001, "Wrong size on BP_BrainFieldManager_C_PrivateSetDynamicShadow");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetDynamicShadow, Enable) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetDynamicShadow::Enable' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_DelayedHood
// 0x0018 (0x0018 - 0x0000)
struct BP_BrainFieldManager_C_Private_DelayedHood final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0010(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_Private_DelayedHood) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_Private_DelayedHood");
static_assert(sizeof(BP_BrainFieldManager_C_Private_DelayedHood) == 0x000018, "Wrong size on BP_BrainFieldManager_C_Private_DelayedHood");
static_assert(offsetof(BP_BrainFieldManager_C_Private_DelayedHood, Actors) == 0x000000, "Member 'BP_BrainFieldManager_C_Private_DelayedHood::Actors' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_DelayedHood, Visible) == 0x000010, "Member 'BP_BrainFieldManager_C_Private_DelayedHood::Visible' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateEvent_PlaySequencerENPCBrainField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField final
{
public:
	bool                                          UseRefresh;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField, UseRefresh) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateEvent_PlaySequencerENPCBrainField::UseRefresh' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_PerformEndWait
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_Private_PerformEndWait final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_Private_PerformEndWait) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_Private_PerformEndWait");
static_assert(sizeof(BP_BrainFieldManager_C_Private_PerformEndWait) == 0x000001, "Wrong size on BP_BrainFieldManager_C_Private_PerformEndWait");
static_assert(offsetof(BP_BrainFieldManager_C_Private_PerformEndWait, MoveBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_Private_PerformEndWait::MoveBrainField' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private_SwitchVisibleActorSplitFrame
// 0x0008 (0x0008 - 0x0000)
struct BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame final
{
public:
	bool                                          VisibleBrainField;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B99[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectNum;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame");
static_assert(sizeof(BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame) == 0x000008, "Wrong size on BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame");
static_assert(offsetof(BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame, VisibleBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame::VisibleBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame, ObjectNum) == 0x000004, "Member 'BP_BrainFieldManager_C_Private_SwitchVisibleActorSplitFrame::ObjectNum' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartBrainField
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_StartBrainField final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SubUser;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEvent;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADropItemManager*                       CallFunc_GetDropItemManager_Drop_Item_Manager;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_StartBrainField) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_StartBrainField");
static_assert(sizeof(BP_BrainFieldManager_C_StartBrainField) == 0x000048, "Wrong size on BP_BrainFieldManager_C_StartBrainField");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, User) == 0x000000, "Member 'BP_BrainFieldManager_C_StartBrainField::User' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, SubUser) == 0x000008, "Member 'BP_BrainFieldManager_C_StartBrainField::SubUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, IsEvent) == 0x000010, "Member 'BP_BrainFieldManager_C_StartBrainField::IsEvent' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, CallFunc_GetDropItemManager_Drop_Item_Manager) == 0x000018, "Member 'BP_BrainFieldManager_C_StartBrainField::CallFunc_GetDropItemManager_Drop_Item_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_StartBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000028, "Member 'BP_BrainFieldManager_C_StartBrainField::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'BP_BrainFieldManager_C_StartBrainField::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartBrainField, CallFunc_MakeLiteralString_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_StartBrainField::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetPlayerList
// 0x0050 (0x0050 - 0x0000)
struct BP_BrainFieldManager_C_GetPlayerList final
{
public:
	TArray<class AActor*>                         Param_PlayerLists;                                 // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Ret;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9D[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0040(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_GetPlayerList) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_GetPlayerList");
static_assert(sizeof(BP_BrainFieldManager_C_GetPlayerList) == 0x000050, "Wrong size on BP_BrainFieldManager_C_GetPlayerList");
static_assert(offsetof(BP_BrainFieldManager_C_GetPlayerList, Param_PlayerLists) == 0x000000, "Member 'BP_BrainFieldManager_C_GetPlayerList::Param_PlayerLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetPlayerList, Ret) == 0x000010, "Member 'BP_BrainFieldManager_C_GetPlayerList::Ret' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetPlayerList, K2Node_MakeArray_Array) == 0x000020, "Member 'BP_BrainFieldManager_C_GetPlayerList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetPlayerList, CallFunc_GetPlayerManager_PlayerManager) == 0x000030, "Member 'BP_BrainFieldManager_C_GetPlayerList::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetPlayerList, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_GetPlayerList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetPlayerList, CallFunc_GetPlayerList_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_GetPlayerList::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EndBrainField
// 0x0038 (0x0038 - 0x0000)
struct BP_BrainFieldManager_C_EndBrainField final
{
public:
	EBrainFieldEndType                            Param_EndType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B9E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_BrainCrashAttacker;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_BrainCrashAttackerSub;                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_EndBrainField) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_EndBrainField");
static_assert(sizeof(BP_BrainFieldManager_C_EndBrainField) == 0x000038, "Wrong size on BP_BrainFieldManager_C_EndBrainField");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, Param_EndType) == 0x000000, "Member 'BP_BrainFieldManager_C_EndBrainField::Param_EndType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, Param_BrainCrashAttacker) == 0x000008, "Member 'BP_BrainFieldManager_C_EndBrainField::Param_BrainCrashAttacker' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, Param_BrainCrashAttackerSub) == 0x000010, "Member 'BP_BrainFieldManager_C_EndBrainField::Param_BrainCrashAttackerSub' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000018, "Member 'BP_BrainFieldManager_C_EndBrainField::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_EndBrainField::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_BrainFieldManager_C_EndBrainField::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BP_BrainFieldManager_C_EndBrainField::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'BP_BrainFieldManager_C_EndBrainField::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndBrainField, CallFunc_MakeLiteralString_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_EndBrainField::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenEnd
// 0x0700 (0x0700 - 0x0000)
struct BP_BrainFieldManager_C_PerformOpenEnd final
{
public:
	bool                                          InGameStart;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       MainPlayer;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     RestorePlayerTransforms;                           // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BA1[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransform;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class AActor*                                 TmpUser;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BA2[0x8];                                     // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA3[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA4[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00F0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA5[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA6[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA7[0x2];                                     // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA8[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BA9[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlayerCameraReset_Dummy;                  // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BAA[0x1];                                     // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BAB[0x6];                                     // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface;             // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraViewTarget_ReturnValue;    // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BAC[0x5];                                     // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BAD[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_5;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BAE[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BAF[0x3];                                     // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BB0[0xC];                                     // 0x0274(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0280(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x02B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB1[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0340(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x03A0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x03E0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0420(0x0040)(HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0468(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0478(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB2[0x3];                                     // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB3[0x3];                                     // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x04A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x04B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCharacterVisibility_bDummy;            // 0x04B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x04B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB4[0x3];                                     // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB5[0x2];                                     // 0x04CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue; // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB6[0x7];                                     // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x04D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DynamicEventEnd_ReturnValue;              // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB7[0x2];                                     // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x04EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x04F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0504(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_1;            // 0x0510(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BB8[0x3];                                     // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BB9[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_2;            // 0x0540(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerEnd_ReturnValue;           // 0x0551(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BBA[0x6];                                     // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0558(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BBB[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x0570(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldStart_NewParam;         // 0x0581(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldStart_NewParam_1;       // 0x0582(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0583(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0584(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BBC[0x3];                                     // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue_1;       // 0x0590(0x0030)(IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 CallFunc_GetSkeletalMeshFromActor_ReturnValue;     // 0x05C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BBD[0x3];                                     // 0x05C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x05CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x05D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x05E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x05F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0610(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x061C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_3;            // 0x0628(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BBE[0x3];                                     // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x063C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x06C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BBF[0x3];                                     // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_4;            // 0x06C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x06D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DynamicEventEnd_ReturnValue_1;            // 0x06D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC0[0x2];                                     // 0x06DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x06DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC1[0x3];                                     // 0x06E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x06E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x06EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_6;                      // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x06F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x06F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformOpenEnd) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PerformOpenEnd");
static_assert(sizeof(BP_BrainFieldManager_C_PerformOpenEnd) == 0x000700, "Wrong size on BP_BrainFieldManager_C_PerformOpenEnd");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, InGameStart) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::InGameStart' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, MainPlayer) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::MainPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, RestorePlayerTransforms) == 0x000010, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::RestorePlayerTransforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, SkeletalMesh) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, BaseTransform) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::BaseTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, TmpUser) == 0x000060, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::TmpUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Player) == 0x000068, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable) == 0x000074, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable_1) == 0x0000B8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable_2) == 0x0000BC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000C4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable_1) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable_1) == 0x0000CC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable_2) == 0x0000D4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable_2) == 0x0000DC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable_3) == 0x0000E0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000E4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable_3) == 0x0000E8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable_3) == 0x0000EC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_MakeStruct_FormatArgumentData) == 0x0000F0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue_1) == 0x000130, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable_4) == 0x000134, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable_4) == 0x000138, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue_2) == 0x00013C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue_4) == 0x000140, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000144, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BooleanAND_ReturnValue) == 0x000145, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable_5) == 0x000148, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_1) == 0x00014C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsRSBattle_Player) == 0x000150, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000160, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_PlayerCameraReset_Dummy) == 0x000171, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_PlayerCameraReset_Dummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_2) == 0x000172, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable_4) == 0x000174, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_3) == 0x000178, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue_3) == 0x000179, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetPlayerManager_PlayerManager) == 0x000180, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsCamera_Interface) == 0x000188, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsCamera_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_2) == 0x000198, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_4) == 0x000199, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_SetPlayerCameraViewTarget_ReturnValue) == 0x00019A, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_SetPlayerCameraViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetPlayer_ReturnValue) == 0x0001A0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_5) == 0x0001A8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable_5) == 0x0001AC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsRSBattle_Character) == 0x0001B0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_3) == 0x0001B8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Array_Index_Variable_6) == 0x0001BC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetRelativeTransform_ReturnValue) == 0x0001C0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Location) == 0x0001F0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Rotation) == 0x0001FC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Scale) == 0x000208, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000214, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Roll) == 0x000218, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Pitch) == 0x00021C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Yaw) == 0x000220, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Location_1) == 0x000224, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Rotation_1) == 0x000230, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Scale_1) == 0x00023C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Roll_1) == 0x000248, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Pitch_1) == 0x00024C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Yaw_1) == 0x000250, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000254, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000258, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_MakeRotator_ReturnValue) == 0x000264, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue) == 0x000270, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_MakeTransform_ReturnValue_1) == 0x000280, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0002B0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000338, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetTransform_ReturnValue) == 0x000340, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Location_2) == 0x000370, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Rotation_2) == 0x00037C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Scale_2) == 0x000388, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_X) == 0x000394, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_Y) == 0x000398, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_Z) == 0x00039C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_MakeStruct_FormatArgumentData_1) == 0x0003A0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_MakeStruct_FormatArgumentData_2) == 0x0003E0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_MakeStruct_FormatArgumentData_3) == 0x000420, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000460, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_MakeArray_Array) == 0x000468, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Format_ReturnValue) == 0x000478, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_6) == 0x000490, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable_5) == 0x000494, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue_4) == 0x000498, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue_5) == 0x00049C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0004A0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_4) == 0x0004B0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_7) == 0x0004B1, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_SetCharacterVisibility_bDummy) == 0x0004B2, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_SetCharacterVisibility_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0004B3, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Counter_Variable_6) == 0x0004B4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue_5) == 0x0004B8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Add_IntInt_ReturnValue_6) == 0x0004BC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetPostProcessManager_Manager) == 0x0004C0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsUserIsPlayer_IsPlayer) == 0x0004C8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_8) == 0x0004C9, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue) == 0x0004CC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_DisplayTipsOrMiniTipsByHelpID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0004D0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsEvent_Interface) == 0x0004D8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_5) == 0x0004E8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_DynamicEventEnd_ReturnValue) == 0x0004E9, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_DynamicEventEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Location_3) == 0x0004EC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Rotation_3) == 0x0004F8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Scale_3) == 0x000504, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsEvent_Interface_1) == 0x000510, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsEvent_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_6) == 0x000520, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Roll_2) == 0x000524, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Pitch_2) == 0x000528, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Yaw_2) == 0x00052C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_X_1) == 0x000530, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_Y_1) == 0x000534, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_Z_1) == 0x000538, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsEvent_Interface_2) == 0x000540, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsEvent_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_7) == 0x000550, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BattleSequencerEnd_ReturnValue) == 0x000551, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BattleSequencerEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000558, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_8) == 0x000568, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x000570, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_9) == 0x000580, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_SetEnemyBrainFieldStart_NewParam) == 0x000581, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_SetEnemyBrainFieldStart_NewParam' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_SetEnemyBrainFieldStart_NewParam_1) == 0x000582, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_SetEnemyBrainFieldStart_NewParam_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_9) == 0x000583, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_10) == 0x000584, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue_1) == 0x000588, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue_2) == 0x00058C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetRelativeTransform_ReturnValue_1) == 0x000590, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_GetSkeletalMeshFromActor_ReturnValue) == 0x0005C0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_GetSkeletalMeshFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_11) == 0x0005C8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Location_4) == 0x0005CC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Rotation_4) == 0x0005D8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakTransform_Scale_4) == 0x0005E4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Roll_3) == 0x0005F0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Pitch_3) == 0x0005F4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakRotator_Yaw_3) == 0x0005F8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_X_2) == 0x0005FC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_Y_2) == 0x000600, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_BreakVector_Z_2) == 0x000604, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000608, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x00060C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_MakeRotator_ReturnValue_1) == 0x000610, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_MakeVector_ReturnValue) == 0x00061C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsEvent_Interface_3) == 0x000628, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsEvent_Interface_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_10) == 0x000638, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x00063C, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0006C4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_AsEvent_Interface_4) == 0x0006C8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_AsEvent_Interface_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, K2Node_DynamicCast_bSuccess_11) == 0x0006D8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_DynamicEventEnd_ReturnValue_1) == 0x0006D9, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_DynamicEventEnd_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue_3) == 0x0006DC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_IsValid_ReturnValue_12) == 0x0006E0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue_4) == 0x0006E4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue_5) == 0x0006E8, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Array_Length_ReturnValue_6) == 0x0006EC, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, Temp_int_Loop_Num_Variable_6) == 0x0006F0, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::Temp_int_Loop_Num_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Not_PreBool_ReturnValue_1) == 0x0006F4, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEnd, CallFunc_Less_IntInt_ReturnValue_6) == 0x0006F5, "Member 'BP_BrainFieldManager_C_PerformOpenEnd::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseEnd
// 0x0050 (0x0050 - 0x0000)
struct BP_BrainFieldManager_C_PerformCloseEnd final
{
public:
	class ULevelStreaming*                        TmpLevel;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC2[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetOutlineEnpcAlpha_Alpha;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC4[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADropItemManager*                       CallFunc_GetDropItemManager_Drop_Item_Manager;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformCloseEnd) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformCloseEnd");
static_assert(sizeof(BP_BrainFieldManager_C_PerformCloseEnd) == 0x000050, "Wrong size on BP_BrainFieldManager_C_PerformCloseEnd");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, TmpLevel) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::TmpLevel' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_GetPostProcessManager_Manager) == 0x000010, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_GetOutlineEnpcAlpha_Alpha) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_GetOutlineEnpcAlpha_Alpha' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_GetDropItemManager_Drop_Item_Manager) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_GetDropItemManager_Drop_Item_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEnd, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'BP_BrainFieldManager_C_PerformCloseEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldEnemyList
// 0x0230 (0x0230 - 0x0000)
struct BP_BrainFieldManager_C_GetBrainFieldEnemyList final
{
public:
	bool                                          InGameStart;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllTrain;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC5[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetEnemyListBattleField;                        // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetEnemyListBattleFieldWave;                    // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetEnemyListNormal;                             // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         FarEnemyLists;                                     // 0x0038(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyBoss;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyENPC;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyTargetNormalTarget;                           // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyTargetBattleFieldWave;                        // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyTargetBattleField;                            // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          UseBattleField;                                    // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC6[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattleFieldID;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     EnemyManager;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundHeight;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BC7[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Enemy;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         RetFar;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyList;                                         // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	struct FVector                                UserLocation;                                      // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BC8[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Ret;                                               // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_RemoveEnpcFromEnemyList_EnemyReturn;      // 0x00F8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_RemoveEnpcFromEnemyList_FarEnemyReturn;   // 0x0108(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBattleFieldNoFenceEnemy_UseBattleField; // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BC9[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckBattleFieldNoFenceEnemy_BFGroupID;   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BCA[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BCB[0x2];                                     // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x0160(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBrainFieldTarget_BattleFieldTarget;  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBrainFieldTarget_NormalTarget;       // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BCC[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattlefieldManager*                    CallFunc_GetBattleFieldManager_BattleFieldManager; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCurrentBattlefieldInfo_Exist;          // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BCD[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattlefieldInfo                       CallFunc_GetCurrentBattlefieldInfo_ReturnValue;    // 0x0188(0x0088)(ConstParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BCE[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetBrainFieldEnemyList) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_GetBrainFieldEnemyList");
static_assert(sizeof(BP_BrainFieldManager_C_GetBrainFieldEnemyList) == 0x000230, "Wrong size on BP_BrainFieldManager_C_GetBrainFieldEnemyList");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, InGameStart) == 0x000000, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::InGameStart' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, AllTrain) == 0x000001, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::AllTrain' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, TargetEnemyListBattleField) == 0x000008, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::TargetEnemyListBattleField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, TargetEnemyListBattleFieldWave) == 0x000018, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::TargetEnemyListBattleFieldWave' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, TargetEnemyListNormal) == 0x000028, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::TargetEnemyListNormal' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, FarEnemyLists) == 0x000038, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::FarEnemyLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyBoss) == 0x000048, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyBoss' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyENPC) == 0x000058, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyENPC' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyTargetNormalTarget) == 0x000068, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyTargetNormalTarget' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyTargetBattleFieldWave) == 0x000078, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyTargetBattleFieldWave' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyTargetBattleField) == 0x000088, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyTargetBattleField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, UseBattleField) == 0x000098, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::UseBattleField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, BattleFieldID) == 0x00009C, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::BattleFieldID' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyManager) == 0x0000A0, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, GroundHeight) == 0x0000A8, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::GroundHeight' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, Enemy) == 0x0000B0, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, RetFar) == 0x0000B8, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::RetFar' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, EnemyList) == 0x0000C8, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, UserLocation) == 0x0000D8, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::UserLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, Ret) == 0x0000E8, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::Ret' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_RemoveEnpcFromEnemyList_EnemyReturn) == 0x0000F8, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_RemoveEnpcFromEnemyList_EnemyReturn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_RemoveEnpcFromEnemyList_FarEnemyReturn) == 0x000108, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_RemoveEnpcFromEnemyList_FarEnemyReturn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_CheckBattleFieldNoFenceEnemy_UseBattleField) == 0x000118, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_CheckBattleFieldNoFenceEnemy_UseBattleField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_CheckBattleFieldNoFenceEnemy_BFGroupID) == 0x00011C, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_CheckBattleFieldNoFenceEnemy_BFGroupID' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, Temp_int_Loop_Num_Variable) == 0x000120, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, K2Node_MakeArray_Array) == 0x000128, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Array_Add_ReturnValue) == 0x000138, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, Temp_int_Array_Index_Variable) == 0x00013C, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Array_Add_ReturnValue_1) == 0x000140, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Array_Add_ReturnValue_2) == 0x000144, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000148, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_GetEnemySpawn_return) == 0x000159, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Array_Add_ReturnValue_3) == 0x00015C, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_GetEnemyList_ReturnValue) == 0x000160, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_CheckBrainFieldTarget_BattleFieldTarget) == 0x000170, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_CheckBrainFieldTarget_BattleFieldTarget' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_CheckBrainFieldTarget_NormalTarget) == 0x000171, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_CheckBrainFieldTarget_NormalTarget' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_GetBattleFieldManager_BattleFieldManager) == 0x000178, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_GetBattleFieldManager_BattleFieldManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_IsValid_ReturnValue) == 0x000180, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_GetCurrentBattlefieldInfo_Exist) == 0x000181, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_GetCurrentBattlefieldInfo_Exist' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_GetCurrentBattlefieldInfo_ReturnValue) == 0x000188, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_GetCurrentBattlefieldInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Array_Length_ReturnValue) == 0x000210, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, Temp_int_Loop_Counter_Variable) == 0x000214, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Less_IntInt_ReturnValue) == 0x000218, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_Add_IntInt_ReturnValue) == 0x00021C, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_GetEnemyManager_Manager) == 0x000220, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_IsValid_ReturnValue_1) == 0x000228, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldEnemyList, CallFunc_IsValid_ReturnValue_2) == 0x000229, "Member 'BP_BrainFieldManager_C_GetBrainFieldEnemyList::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenStartInnerOne
// 0x00D0 (0x00D0 - 0x0000)
struct BP_BrainFieldManager_C_PerformOpenStartInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BCF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FTransform>                     Transforms;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          InGameStart;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD0[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  OutValid;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD1[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD2[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD3[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00C0(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00C1(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformOpenStartInnerOne) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PerformOpenStartInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformOpenStartInnerOne) == 0x0000D0, "Wrong size on BP_BrainFieldManager_C_PerformOpenStartInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Transforms) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Transforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, InGameStart) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::InGameStart' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, OutValid) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::OutValid' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Player) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Temp_int_Variable) == 0x000048, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000058, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Array_Length_ReturnValue_2) == 0x000078, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Add_IntInt_ReturnValue_1) == 0x000084, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Temp_int_Loop_Num_Variable) == 0x000088, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_Less_IntInt_ReturnValue_1) == 0x00008C, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_GetTransform_ReturnValue) == 0x000090, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Temp_bool_Variable) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, Temp_bool_Variable_1) == 0x0000C1, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStartInnerOne, CallFunc_IsValid_ReturnValue) == 0x0000C2, "Member 'BP_BrainFieldManager_C_PerformOpenStartInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenEndInnerOne
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PerformOpenEndInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          InGameStart;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD5[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BD6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD7[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformOpenEndInnerOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformOpenEndInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformOpenEndInnerOne) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PerformOpenEndInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, InGameStart) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::InGameStart' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x000042, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenEndInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_BrainFieldManager_C_PerformOpenEndInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseStartInnerOne
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PerformCloseStartInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD9[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BDA[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformCloseStartInnerOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformCloseStartInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformCloseStartInnerOne) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PerformCloseStartInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, Temp_int_Loop_Num_Variable) == 0x000034, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStartInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformCloseStartInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseEndInnerOne
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PerformCloseEndInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BDB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BDC[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BDD[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformCloseEndInnerOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformCloseEndInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformCloseEndInnerOne) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PerformCloseEndInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, Temp_int_Loop_Num_Variable) == 0x000034, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseEndInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformCloseEndInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOpenStart
// 0x02B0 (0x02B0 - 0x0000)
struct BP_BrainFieldManager_C_PerformOpenStart final
{
public:
	bool                                          InGameStart;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BDE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  TmpBoolArray;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BDF[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE0[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE1[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLockTarget_ReturnValue;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE2[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBrainFieldEnemyList_AllTrain;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE3[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetBrainFieldEnemyList_TargetEnemyListBattleField; // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetBrainFieldEnemyList_TargetEnemyListBattleFieldWave; // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetBrainFieldEnemyList_TargetEnemyListNormal; // 0x00A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetBrainFieldEnemyList_FarEnemyLists;     // 0x00B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SelectJumpBrainFieldTrainEnemy_TrainList; // 0x00C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SelectJumpBrainFieldTrainEnemy_NoTrainList; // 0x00D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE4[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BE5[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE6[0xE];                                     // 0x0192(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x01A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE7[0xF];                                     // 0x01D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x01E0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BE8[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0220(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BE9[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BEA[0x3];                                     // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayPerformSequencer_StartPlay;           // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BEB[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorList_LevelLists;       // 0x0268(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class UBP_RSParticleBackgroundComponent_C*> CallFunc_GetNormalLevelActorList_LevelParticleList; // 0x0278(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BEC[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BED[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetPlayerList_PlayerLists;                // 0x0298(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BEE[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformOpenStart) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PerformOpenStart");
static_assert(sizeof(BP_BrainFieldManager_C_PerformOpenStart) == 0x0002B0, "Wrong size on BP_BrainFieldManager_C_PerformOpenStart");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, InGameStart) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformOpenStart::InGameStart' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, TmpBoolArray) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformOpenStart::TmpBoolArray' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, PlayerLocation) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformOpenStart::PlayerLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'BP_BrainFieldManager_C_PerformOpenStart::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformOpenStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetPlayerManager_PlayerManager) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetPlayer_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, K2Node_DynamicCast_AsRSBattle_Player) == 0x000050, "Member 'BP_BrainFieldManager_C_PerformOpenStart::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_BrainFieldManager_C_PerformOpenStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_IsLockTarget_ReturnValue) == 0x000059, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_IsLockTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00005A, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_BreakTransform_Location) == 0x00005C, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_BreakTransform_Rotation) == 0x000068, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_BreakTransform_Scale) == 0x000074, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetBrainFieldEnemyList_AllTrain) == 0x000084, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetBrainFieldEnemyList_AllTrain' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetBrainFieldEnemyList_TargetEnemyListBattleField) == 0x000088, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetBrainFieldEnemyList_TargetEnemyListBattleField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetBrainFieldEnemyList_TargetEnemyListBattleFieldWave) == 0x000098, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetBrainFieldEnemyList_TargetEnemyListBattleFieldWave' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetBrainFieldEnemyList_TargetEnemyListNormal) == 0x0000A8, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetBrainFieldEnemyList_TargetEnemyListNormal' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetBrainFieldEnemyList_FarEnemyLists) == 0x0000B8, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetBrainFieldEnemyList_FarEnemyLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_SelectJumpBrainFieldTrainEnemy_TrainList) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_SelectJumpBrainFieldTrainEnemy_TrainList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_SelectJumpBrainFieldTrainEnemy_NoTrainList) == 0x0000D8, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_SelectJumpBrainFieldTrainEnemy_NoTrainList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, Temp_int_Array_Index_Variable_1) == 0x0000E8, "Member 'BP_BrainFieldManager_C_PerformOpenStart::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000EC, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000174, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_Length_ReturnValue_1) == 0x000178, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, K2Node_DynamicCast_AsEvent_Interface) == 0x000180, "Member 'BP_BrainFieldManager_C_PerformOpenStart::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, K2Node_DynamicCast_bSuccess_1) == 0x000190, "Member 'BP_BrainFieldManager_C_PerformOpenStart::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_EventStart_ReturnValue) == 0x000191, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_Get_Item) == 0x0001A0, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0001D0, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetTransform_ReturnValue) == 0x0001E0, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_Length_ReturnValue_2) == 0x000210, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Array_Length_ReturnValue_3) == 0x000214, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetTransform_ReturnValue_1) == 0x000220, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_IsValid_ReturnValue_2) == 0x000250, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, Temp_int_Loop_Counter_Variable) == 0x000254, "Member 'BP_BrainFieldManager_C_PerformOpenStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Less_IntInt_ReturnValue) == 0x000258, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Add_IntInt_ReturnValue) == 0x00025C, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_PlayPerformSequencer_StartPlay) == 0x000260, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_PlayPerformSequencer_StartPlay' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetNormalLevelActorList_LevelLists) == 0x000268, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetNormalLevelActorList_LevelLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetNormalLevelActorList_LevelParticleList) == 0x000278, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetNormalLevelActorList_LevelParticleList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, Temp_int_Loop_Num_Variable_1) == 0x000288, "Member 'BP_BrainFieldManager_C_PerformOpenStart::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Not_PreBool_ReturnValue) == 0x00028C, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, Temp_int_Loop_Counter_Variable_1) == 0x000290, "Member 'BP_BrainFieldManager_C_PerformOpenStart::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_GetPlayerList_PlayerLists) == 0x000298, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_GetPlayerList_PlayerLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002A8, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOpenStart, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002AC, "Member 'BP_BrainFieldManager_C_PerformOpenStart::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformCloseStart
// 0x0090 (0x0090 - 0x0000)
struct BP_BrainFieldManager_C_PerformCloseStart final
{
public:
	bool                                          PlaySequencer;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BEF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetPlayerList_PlayerLists;                // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF1[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BF2[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0038(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF3[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF4[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventStart_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlayPerformSequencer_StartPlay;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF5[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF6[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF7[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformCloseStart) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformCloseStart");
static_assert(sizeof(BP_BrainFieldManager_C_PerformCloseStart) == 0x000090, "Wrong size on BP_BrainFieldManager_C_PerformCloseStart");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, PlaySequencer) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformCloseStart::PlaySequencer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_PerformCloseStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_GetPlayerList_PlayerLists) == 0x000010, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_GetPlayerList_PlayerLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'BP_BrainFieldManager_C_PerformCloseStart::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformCloseStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_GetPlayerList_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, K2Node_DynamicCast_AsEvent_Interface) == 0x000050, "Member 'BP_BrainFieldManager_C_PerformCloseStart::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_BrainFieldManager_C_PerformCloseStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_EventStart_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_EventStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_PlayPerformSequencer_StartPlay) == 0x000069, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_PlayPerformSequencer_StartPlay' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, Temp_int_Array_Index_Variable_1) == 0x00006C, "Member 'BP_BrainFieldManager_C_PerformCloseStart::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, K2Node_DynamicCast_AsRSBattle_Player) == 0x000078, "Member 'BP_BrainFieldManager_C_PerformCloseStart::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'BP_BrainFieldManager_C_PerformCloseStart::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Not_PreBool_ReturnValue_1) == 0x000081, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'BP_BrainFieldManager_C_PerformCloseStart::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Less_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformCloseStart, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'BP_BrainFieldManager_C_PerformCloseStart::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldPlayerTransform
// 0x00E0 (0x00E0 - 0x0000)
struct BP_BrainFieldManager_C_GetBrainFieldPlayerTransform final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class AActor*                                 TmpPlayerStart;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Ret;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBrainFieldRightPlayerLocation_Transform; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBrainFieldLeftPlayerLocation_Transform; // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue_1;     // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	TArray<struct FTransform>                     K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_GetBrainFieldPlayerTransform");
static_assert(sizeof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform) == 0x0000E0, "Wrong size on BP_BrainFieldManager_C_GetBrainFieldPlayerTransform");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, Transforms) == 0x000000, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::Transforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, TmpPlayerStart) == 0x000010, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::TmpPlayerStart' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, Ret) == 0x000018, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::Ret' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, CallFunc_GetBrainFieldRightPlayerLocation_Transform) == 0x000028, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::CallFunc_GetBrainFieldRightPlayerLocation_Transform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, CallFunc_GetBrainFieldLeftPlayerLocation_Transform) == 0x000034, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::CallFunc_GetBrainFieldLeftPlayerLocation_Transform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, CallFunc_Conv_VectorToTransform_ReturnValue_1) == 0x000070, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::CallFunc_Conv_VectorToTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, CallFunc_MakeTransform_ReturnValue) == 0x0000A0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransform, K2Node_MakeArray_Array) == 0x0000D0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransform::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SwitchVisibleBrainFieldLevel
// 0x0440 (0x0440 - 0x0000)
struct BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel final
{
public:
	bool                                          VisibleBrainField;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               EnemyList;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ADirectionalLight*                      TmpDirectionalLight;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        TmpLevelStreaming;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BF9[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BFA[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BFB[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BFC[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BFD[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_5;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BFE[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_6;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EndMinimapBrainField_ReturnValue;         // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BFF[0x2];                                     // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C00[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUDMainGame_C*                         CallFunc_GetHUDMainGame_HUDMainGame_1;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartMinimapBrainField_ReturnValue;       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C01[0x2];                                     // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C02[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C03[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x00D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C04[0x5];                                     // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BrainFieldMonitor_C> K2Node_DynamicCast_AsBPI_Brain_Field_Monitor;      // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C05[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PostProcessManager_C*               CallFunc_GetPostProcessManager_Manager;            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C06[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetOutlineEnpcAlpha_Alpha;                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C07[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlayerCameraReset_Dummy;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C08[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C09[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_7;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldMoveInner_Dummy;        // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C0A[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldEnd_NewParam;           // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C0B[0x1];                                     // 0x019B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_7;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C0C[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_2;        // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldEnd_NewParam_1;         // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_StageManager_C*                     CallFunc_GetStageManager_Manager;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C0D[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StageManager_C*                     CallFunc_GetStageManager_Manager_1;                // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C0E[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_7;                      // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C0F[0x3];                                     // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_8;                      // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C10[0x2];                                     // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_8;                   // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C11[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_3;        // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyBrainFieldMoveInner_Dummy_1;      // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C12[0x1];                                     // 0x0243(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C13[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InBranField_InBrainDield;                 // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C14[0x2];                                     // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReceiveBrainCrashGameOver_IsGameOver;   // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C15[0x2];                                     // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_8;                  // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C16[0x3];                                     // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C17[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x027C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C18[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_4;        // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnSwitchVisibleBrainFieldLevel_Unused;    // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C19[0x5];                                     // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1A[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x02C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetSpecialEffects_bDummy;               // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1B[0x2];                                     // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BrainFieldMonitor_C> K2Node_DynamicCast_AsBPI_Brain_Field_Monitor_1;    // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1C[0x6];                                     // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x02F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1D[0x4];                                     // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x032C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0338(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0360(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_10;              // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0400(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_10;               // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1E[0x6];                                     // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1F[0x2];                                     // 0x0432(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_11;              // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_12;              // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel");
static_assert(sizeof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel) == 0x000440, "Wrong size on BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, VisibleBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::VisibleBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, EnemyList) == 0x000008, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, TmpDirectionalLight) == 0x000018, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::TmpDirectionalLight' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, TmpLevelStreaming) == 0x000020, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::TmpLevelStreaming' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_1) == 0x000034, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_bool_True_if_break_was_hit_Variable) == 0x000040, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_1) == 0x00004C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BooleanAND_ReturnValue) == 0x000051, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsVisible_ReturnValue) == 0x000052, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_2) == 0x000054, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_2) == 0x000058, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_2) == 0x00005C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_3) == 0x000064, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_3) == 0x000068, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_4) == 0x000070, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_3) == 0x000074, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_3) == 0x000078, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_4) == 0x00007C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_4) == 0x000080, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_2) == 0x000084, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_4) == 0x000088, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_5) == 0x00008C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_3) == 0x000090, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_6) == 0x000094, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetHUDMainGame_HUDMainGame) == 0x000098, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetHUDMainGame_HUDMainGame' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_5) == 0x0000A0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_EndMinimapBrainField_ReturnValue) == 0x0000A4, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_EndMinimapBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_4) == 0x0000A5, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000A8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue) == 0x0000AC, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetHUDMainGame_HUDMainGame_1) == 0x0000B0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetHUDMainGame_HUDMainGame_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_StartMinimapBrainField_ReturnValue) == 0x0000B8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_StartMinimapBrainField_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_1) == 0x0000B9, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_5) == 0x0000BC, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_6) == 0x0000C0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetEnemyManager_Manager) == 0x0000C8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_2) == 0x0000D0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetEnemyList_ReturnValue) == 0x0000D8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsPlayer_Interface) == 0x0000E8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_3) == 0x0000F9, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetPlayerID_ReturnValue) == 0x0000FA, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Brain_Field_Monitor) == 0x000100, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Brain_Field_Monitor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetPostProcessManager_Manager) == 0x000118, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetPostProcessManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_4) == 0x000120, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_5) == 0x000121, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetOutlineEnpcAlpha_Alpha) == 0x000124, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetOutlineEnpcAlpha_Alpha' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Get_Item) == 0x000128, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000130, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000138, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_2) == 0x000148, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_PlayerCameraReset_Dummy) == 0x000149, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_PlayerCameraReset_Dummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_6) == 0x00014C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue) == 0x000150, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_5) == 0x000154, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_6) == 0x000158, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_7) == 0x00015C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000160, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_3) == 0x000170, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_6) == 0x000171, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_SetEnemyBrainFieldMoveInner_Dummy) == 0x000172, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_SetEnemyBrainFieldMoveInner_Dummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_6) == 0x000173, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_7) == 0x000174, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_1) == 0x000178, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00017C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_2) == 0x000180, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x000188, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_4) == 0x000198, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_7) == 0x000199, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_SetEnemyBrainFieldEnd_NewParam) == 0x00019A, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_SetEnemyBrainFieldEnd_NewParam' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_3) == 0x00019C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_7) == 0x0001A0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Enemy_Interface_2) == 0x0001A8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Enemy_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_5) == 0x0001B8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_8) == 0x0001B9, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_SetEnemyBrainFieldEnd_NewParam_1) == 0x0001BA, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_SetEnemyBrainFieldEnd_NewParam_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_9) == 0x0001BB, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001BC, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x0001C8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetStageManager_Manager) == 0x0001D8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetStageManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_10) == 0x0001E0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetStageManager_Manager_1) == 0x0001E8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetStageManager_Manager_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_11) == 0x0001F0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_7) == 0x0001F4, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0001F8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_7) == 0x000204, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x000208, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Num_Variable_8) == 0x000218, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Num_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_4) == 0x00021C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_12) == 0x000220, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Not_PreBool_ReturnValue_1) == 0x000221, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Array_Index_Variable_8) == 0x000224, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Array_Index_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Not_PreBool_ReturnValue_2) == 0x000228, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Enemy_Interface_3) == 0x000230, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Enemy_Interface_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_6) == 0x000240, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_13) == 0x000241, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_SetEnemyBrainFieldMoveInner_Dummy_1) == 0x000242, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_SetEnemyBrainFieldMoveInner_Dummy_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Variable) == 0x000244, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_bool_Variable) == 0x000248, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetActorForwardVector_ReturnValue) == 0x00024C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_InBranField_InBrainDield) == 0x000258, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_InBranField_InBrainDield' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000259, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_5) == 0x00025C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsReceiveBrainCrashGameOver_IsGameOver) == 0x000260, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsReceiveBrainCrashGameOver_IsGameOver' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Not_PreBool_ReturnValue_3) == 0x000261, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Loop_Counter_Variable_8) == 0x000264, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Loop_Counter_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_8) == 0x000268, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_8) == 0x00026C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Not_PreBool_ReturnValue_4) == 0x000270, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_6) == 0x000274, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_7) == 0x000278, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetVectorParameterValue_ReturnValue) == 0x00027C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Variable_1) == 0x00028C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_9) == 0x000290, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Enemy_Interface_4) == 0x000298, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Enemy_Interface_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_7) == 0x0002A8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_OnSwitchVisibleBrainFieldLevel_Unused) == 0x0002A9, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_OnSwitchVisibleBrainFieldLevel_Unused' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_14) == 0x0002AA, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Get_Item_1) == 0x0002B0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_9) == 0x0002B8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x0002C0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_8) == 0x0002D0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_ResetSpecialEffects_bDummy) == 0x0002D1, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_ResetSpecialEffects_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_8) == 0x0002D4, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsBPI_Brain_Field_Monitor_1) == 0x0002D8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsBPI_Brain_Field_Monitor_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_9) == 0x0002E8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_byte_Variable) == 0x0002E9, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x0002F0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_MakeLiteralInt_ReturnValue) == 0x000300, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_9) == 0x000304, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000308, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000318, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BreakVector_X) == 0x000320, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BreakVector_Y) == 0x000324, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BreakVector_Z) == 0x000328, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_GetCameraLocation_ReturnValue) == 0x00032C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000338, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BreakVector_X_1) == 0x000344, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BreakVector_Y_1) == 0x000348, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_BreakVector_Z_1) == 0x00034C, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000350, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_MakeVector_ReturnValue) == 0x000354, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000360, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_10) == 0x0003E8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_Select_Default) == 0x0003EC, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, Temp_int_Variable_2) == 0x0003F0, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Add_IntInt_ReturnValue_10) == 0x0003F4, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Get_Item_2) == 0x0003F8, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsEvent_Interface) == 0x000400, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_10) == 0x000410, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Less_IntInt_ReturnValue_10) == 0x000411, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Less_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_MakeLiteralString_ReturnValue) == 0x000418, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x000428, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, K2Node_DynamicCast_bSuccess_11) == 0x000430, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_IsValid_ReturnValue_15) == 0x000431, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_11) == 0x000434, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel, CallFunc_Array_Length_ReturnValue_12) == 0x000438, "Member 'BP_BrainFieldManager_C_SwitchVisibleBrainFieldLevel::CallFunc_Array_Length_ReturnValue_12' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsFinishBrainFieldVisible
// 0x0030 (0x0030 - 0x0000)
struct BP_BrainFieldManager_C_IsFinishBrainFieldVisible final
{
public:
	bool                                          Finish;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C20[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C21[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C22[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C23[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C24[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelVisible_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_IsFinishBrainFieldVisible");
static_assert(sizeof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible) == 0x000030, "Wrong size on BP_BrainFieldManager_C_IsFinishBrainFieldVisible");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, Finish) == 0x000000, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::Finish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, Ret) == 0x000001, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::Ret' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_Array_LastIndex_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_BooleanAND_ReturnValue_1) == 0x000025, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishBrainFieldVisible, CallFunc_IsLevelVisible_ReturnValue) == 0x00002C, "Member 'BP_BrainFieldManager_C_IsFinishBrainFieldVisible::CallFunc_IsLevelVisible_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsFinishNormalFieldVisible
// 0x000C (0x000C - 0x0000)
struct BP_BrainFieldManager_C_IsFinishNormalFieldVisible final
{
public:
	bool                                          Finish;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C25[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_IsFinishNormalFieldVisible");
static_assert(sizeof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible) == 0x00000C, "Wrong size on BP_BrainFieldManager_C_IsFinishNormalFieldVisible");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible, Finish) == 0x000000, "Member 'BP_BrainFieldManager_C_IsFinishNormalFieldVisible::Finish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible, Ret) == 0x000001, "Member 'BP_BrainFieldManager_C_IsFinishNormalFieldVisible::Ret' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible, CallFunc_Array_LastIndex_ReturnValue) == 0x000004, "Member 'BP_BrainFieldManager_C_IsFinishNormalFieldVisible::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_IsFinishNormalFieldVisible::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsFinishNormalFieldVisible, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'BP_BrainFieldManager_C_IsFinishNormalFieldVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetNormalLevelActorList
// 0x0280 (0x0280 - 0x0000)
struct BP_BrainFieldManager_C_GetNormalLevelActorList final
{
public:
	TArray<class AActor*>                         LevelLists;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UBP_RSParticleBackgroundComponent_C*> LevelParticleList;                                 // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          TestError;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C26[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_RSParticleBackgroundComponent_C*> TestRetParticles;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class AActor*>                         TestRet;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   TmpBattleCharacter;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_RSParticleBackgroundComponent_C*> RetParticles;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class AActor*                                 TmpActor;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Ret;                                               // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C27[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C28[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> CallFunc_IsDead_self_CastInput;                    // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C29[0x2];                                     // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FBrainFieldNormalLevelActorListInput   K2Node_MakeStruct_BrainFieldNormalLevelActorListInput; // 0x00D0(0x0048)()
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_NormalLevelActors; // 0x0118(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_Characters; // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_Weapons;    // 0x0138(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_PsychicObjects; // 0x0148(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_PsychicGrabs; // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_EffectBackround; // 0x0168(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetNormalLevelActorListNative_EffectBackroundMother; // 0x0178(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2A[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2B[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2C[0x3];                                     // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2D[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2E[0x2];                                     // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_5;                      // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C2F[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponBase_C*                       K2Node_DynamicCast_AsBP_Weapon_Base;               // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C30[0x3];                                     // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C31[0x2];                                     // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C32[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PsychicObjectBasic_C*               K2Node_DynamicCast_AsBP_Psychic_Object_Basic;      // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C33[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicGrabAttachment_C*               K2Node_DynamicCast_AsPsychic_Grab_Attachment;      // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isGrab_return;                            // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C34[0x2];                                     // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_6;                      // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C35[0x2];                                     // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EffectBackground_C*                 K2Node_DynamicCast_AsBP_Effect_Background;         // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x025B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainFieldParticle_BrainField;          // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C36[0x3];                                     // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EffectBackGroundMother_C*           K2Node_DynamicCast_AsBP_Effect_Back_Ground_Mother; // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C37[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBrainFieldParticle_BrainField_1;        // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetNormalLevelActorList) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_GetNormalLevelActorList");
static_assert(sizeof(BP_BrainFieldManager_C_GetNormalLevelActorList) == 0x000280, "Wrong size on BP_BrainFieldManager_C_GetNormalLevelActorList");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, LevelLists) == 0x000000, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::LevelLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, LevelParticleList) == 0x000010, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::LevelParticleList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, TestError) == 0x000020, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::TestError' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, TestRetParticles) == 0x000028, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::TestRetParticles' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, TestRet) == 0x000038, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::TestRet' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, TmpBattleCharacter) == 0x000048, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::TmpBattleCharacter' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, RetParticles) == 0x000050, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::RetParticles' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, TmpActor) == 0x000060, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::TmpActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Ret) == 0x000068, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Ret' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable) == 0x000088, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000090, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsDead_self_CastInput) == 0x0000A8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsDead_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsDead_bDead) == 0x0000B8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000B9, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable_1) == 0x0000BC, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_MakeStruct_BrainFieldNormalLevelActorListInput) == 0x0000D0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_MakeStruct_BrainFieldNormalLevelActorListInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_NormalLevelActors) == 0x000118, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_NormalLevelActors' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_Characters) == 0x000128, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_Characters' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_Weapons) == 0x000138, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_Weapons' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_PsychicObjects) == 0x000148, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_PsychicObjects' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_PsychicGrabs) == 0x000158, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_PsychicGrabs' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_EffectBackround) == 0x000168, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_EffectBackround' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_GetNormalLevelActorListNative_EffectBackroundMother) == 0x000178, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_GetNormalLevelActorListNative_EffectBackroundMother' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable_1) == 0x000188, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue) == 0x00018C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue) == 0x000190, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue_1) == 0x000194, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue_2) == 0x000198, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue_3) == 0x00019C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue_4) == 0x0001A0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue_5) == 0x0001A4, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable_2) == 0x0001A8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable_2) == 0x0001AC, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable_1) == 0x0001B0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001B4, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001B8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable_2) == 0x0001BC, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable_3) == 0x0001C0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001C4, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001C8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable_3) == 0x0001CC, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable_3) == 0x0001D0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable_4) == 0x0001D4, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue_3) == 0x0001D8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001DC, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable_4) == 0x0001E0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable_4) == 0x0001E4, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsRSBattle_Character) == 0x0001E8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue_4) == 0x0001F1, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue_4) == 0x0001F4, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable_5) == 0x0001F8, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsBP_Weapon_Base) == 0x000200, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsBP_Weapon_Base' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess_2) == 0x000208, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable_5) == 0x00020C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable_5) == 0x000210, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsValid_ReturnValue) == 0x000214, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue_5) == 0x000215, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue_5) == 0x000218, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsBP_Psychic_Object_Basic) == 0x000220, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsBP_Psychic_Object_Basic' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess_3) == 0x000228, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsPsychic_Grab_Attachment) == 0x000230, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsPsychic_Grab_Attachment' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess_4) == 0x000238, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_isGrab_return) == 0x000239, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_isGrab_return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Add_ReturnValue_1) == 0x00023C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Num_Variable_6) == 0x000240, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Num_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Array_Index_Variable_6) == 0x000244, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_bool_True_if_break_was_hit_Variable) == 0x000248, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Not_PreBool_ReturnValue) == 0x000249, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, Temp_int_Loop_Counter_Variable_6) == 0x00024C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsBP_Effect_Background) == 0x000250, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsBP_Effect_Background' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess_5) == 0x000258, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Less_IntInt_ReturnValue_6) == 0x000259, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsValid_ReturnValue_1) == 0x00025A, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_BooleanAND_ReturnValue) == 0x00025B, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsBrainFieldParticle_BrainField) == 0x00025C, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsBrainFieldParticle_BrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Add_ReturnValue_2) == 0x000260, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Add_IntInt_ReturnValue_6) == 0x000264, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_AsBP_Effect_Back_Ground_Mother) == 0x000268, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_AsBP_Effect_Back_Ground_Mother' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, K2Node_DynamicCast_bSuccess_6) == 0x000270, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_Array_Length_ReturnValue_6) == 0x000274, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsValid_ReturnValue_2) == 0x000278, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetNormalLevelActorList, CallFunc_IsBrainFieldParticle_BrainField_1) == 0x000279, "Member 'BP_BrainFieldManager_C_GetNormalLevelActorList::CallFunc_IsBrainFieldParticle_BrainField_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.VisibleNormalActors
// 0x00D0 (0x00D0 - 0x0000)
struct BP_BrainFieldManager_C_VisibleNormalActors final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C38[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectNum;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VisibleSplitIndex;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C39[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorList;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<struct FBrainFieldRestoreFlag>         SettingFlags;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UPrimitiveComponent*                    TmpPrimitive;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponentBase*                    TmpLight;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C3A[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TmpFlags;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C3B[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrainFieldRestoreFlag                 RestoreFlags;                                      // 0x0058(0x0028)(Edit, BlueprintVisible)
	TArray<int32>                                 PrimitiveComponentFlags;                           // 0x0080(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 LightComponentFlags;                               // 0x0090(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            TmpPrimitiveComponents;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         ActorFlag;                                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C3C[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponentBase*>            LightComponents;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         LastActorSplitIndex;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_VisibleNormalActors) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_VisibleNormalActors");
static_assert(sizeof(BP_BrainFieldManager_C_VisibleNormalActors) == 0x0000D0, "Wrong size on BP_BrainFieldManager_C_VisibleNormalActors");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, IsVisible) == 0x000000, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::IsVisible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, ObjectNum) == 0x000004, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::ObjectNum' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, VisibleSplitIndex) == 0x000008, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::VisibleSplitIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, ActorList) == 0x000010, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::ActorList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, SettingFlags) == 0x000020, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::SettingFlags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, TmpPrimitive) == 0x000030, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::TmpPrimitive' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, TmpLight) == 0x000038, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::TmpLight' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, TargetIndex) == 0x000040, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::TargetIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, TargetActor) == 0x000048, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, TmpFlags) == 0x000050, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::TmpFlags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, RestoreFlags) == 0x000058, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::RestoreFlags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, PrimitiveComponentFlags) == 0x000080, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::PrimitiveComponentFlags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, LightComponentFlags) == 0x000090, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::LightComponentFlags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, TmpPrimitiveComponents) == 0x0000A0, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::TmpPrimitiveComponents' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, ActorFlag) == 0x0000B0, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::ActorFlag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, LightComponents) == 0x0000B8, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::LightComponents' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalActors, LastActorSplitIndex) == 0x0000C8, "Member 'BP_BrainFieldManager_C_VisibleNormalActors::LastActorSplitIndex' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.JumpBrainFieldTransform
// 0x03C0 (0x03C0 - 0x0000)
struct BP_BrainFieldManager_C_JumpBrainFieldTransform final
{
public:
	struct FTransform                             EnemyTransform;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	TArray<struct FTransform>                     BrainFieldEnemyTransform;                          // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<bool>                                  IsWaves;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         EnemyIndex;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C3D[0xC];                                     // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartPlayerTransform;                              // 0x0060(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class AActor*                                 TargetActor;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C3E[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewPlayerTransform;                                // 0x00A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C3F[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C40[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C41[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_CalcJumpBrainFieldTransformEnemyCustomCollision2_OutTransforms; // 0x0158(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C42[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0170(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C43[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0200(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C44[0xF];                                     // 0x0211(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetEnemyGroundTransform_return;           // 0x0220(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C45[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_CalcJumpBrainFieldTransformEnemy_OutTransforms; // 0x0278(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C46[0x1];                                     // 0x029B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C47[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x02AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C48[0x2];                                     // 0x02AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C49[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GetBrainFieldPlayerTransformCustomCollision_Transforms; // 0x02B8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C4A[0xF];                                     // 0x02D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalcBrainFieldPsychicAttachmentTransform_NewTransform; // 0x02E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0310(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C4B[0x2];                                     // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C4C[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GetBrainFieldPlayerTransform_Transforms;  // 0x03A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_JumpBrainFieldTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_JumpBrainFieldTransform");
static_assert(sizeof(BP_BrainFieldManager_C_JumpBrainFieldTransform) == 0x0003C0, "Wrong size on BP_BrainFieldManager_C_JumpBrainFieldTransform");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, EnemyTransform) == 0x000000, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::EnemyTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, BrainFieldEnemyTransform) == 0x000030, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::BrainFieldEnemyTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, IsWaves) == 0x000040, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::IsWaves' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, EnemyIndex) == 0x000050, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::EnemyIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, StartPlayerTransform) == 0x000060, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::StartPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, TargetActor) == 0x000090, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, NewPlayerTransform) == 0x0000A0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::NewPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Array_Index_Variable) == 0x0000D0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Loop_Num_Variable) == 0x0000D4, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Loop_Counter_Variable) == 0x0000D8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Add_IntInt_ReturnValue) == 0x0000DC, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Loop_Counter_Variable_1) == 0x0000E0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Loop_Counter_Variable_2) == 0x0000E4, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000E8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Less_IntInt_ReturnValue) == 0x0000EC, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000F0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Location) == 0x0000F4, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Rotation) == 0x000100, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Scale) == 0x00010C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_DoesImplementInterface_ReturnValue) == 0x000118, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Array_Index_Variable_1) == 0x00011C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Location_1) == 0x000120, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Rotation_1) == 0x00012C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Scale_1) == 0x000138, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakVector_X) == 0x000144, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakVector_Y) == 0x000148, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakVector_Z) == 0x00014C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Loop_Num_Variable_1) == 0x000150, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_CalcJumpBrainFieldTransformEnemyCustomCollision2_OutTransforms) == 0x000158, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_CalcJumpBrainFieldTransformEnemyCustomCollision2_OutTransforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Less_IntInt_ReturnValue_1) == 0x000168, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_Length_ReturnValue) == 0x00016C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000170, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001F8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000200, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, K2Node_DynamicCast_bSuccess) == 0x000210, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_GetEnemyGroundTransform_return) == 0x000220, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_GetEnemyGroundTransform_return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Location_2) == 0x000250, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Rotation_2) == 0x00025C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_BreakTransform_Scale_2) == 0x000268, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_CalcJumpBrainFieldTransformEnemy_OutTransforms) == 0x000278, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_CalcJumpBrainFieldTransformEnemy_OutTransforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x000288, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, K2Node_DynamicCast_bSuccess_1) == 0x000298, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_GetEnemySpawn_return) == 0x000299, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Not_PreBool_ReturnValue) == 0x00029A, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_Length_ReturnValue_1) == 0x00029C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_IsValid_ReturnValue) == 0x0002A0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_Length_ReturnValue_2) == 0x0002A4, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Loop_Num_Variable_2) == 0x0002A8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Less_IntInt_ReturnValue_2) == 0x0002AC, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0002AD, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_Length_ReturnValue_3) == 0x0002B0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_GetBrainFieldPlayerTransformCustomCollision_Transforms) == 0x0002B8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_GetBrainFieldPlayerTransformCustomCollision_Transforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, Temp_int_Array_Index_Variable_2) == 0x0002C8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_Length_ReturnValue_4) == 0x0002CC, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Greater_IntInt_ReturnValue) == 0x0002D0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_CalcBrainFieldPsychicAttachmentTransform_NewTransform) == 0x0002E0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_CalcBrainFieldPsychicAttachmentTransform_NewTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000310, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000398, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_IsValid_ReturnValue_1) == 0x000399, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_Array_Length_ReturnValue_5) == 0x00039C, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_IsValid_ReturnValue_2) == 0x0003A0, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpBrainFieldTransform, CallFunc_GetBrainFieldPlayerTransform_Transforms) == 0x0003A8, "Member 'BP_BrainFieldManager_C_JumpBrainFieldTransform::CallFunc_GetBrainFieldPlayerTransform_Transforms' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.JumpNormalTransform
// 0x0780 (0x0780 - 0x0000)
struct BP_BrainFieldManager_C_JumpNormalTransform final
{
public:
	struct FTransform                             MakeTransform;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          InvalidPlayer;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C4D[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0090(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C4E[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0128(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0168(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0180(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01A0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01C8(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C4F[0x3];                                     // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C50[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C51[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0260(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x02A0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x02E0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0320(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C52[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0338(0x0018)()
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C53[0x3];                                     // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C54[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0360(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0378(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C55[0x7];                                     // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x03C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x03D0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x03F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C56[0x1];                                     // 0x040B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C57[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x0440(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0480(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_10;           // 0x04C0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_4;                          // 0x0500(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_4;                     // 0x0510(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C58[0x3];                                     // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0539(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x053A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x053B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x053C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x05C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C59[0x3];                                     // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x05C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x05D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x05E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x05EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0610(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5A[0x4];                                     // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0620(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_1;    // 0x0654(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_1;       // 0x06DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RegisterBrainFieldNormalTransform_Return; // 0x06DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5B[0x2];                                     // 0x06DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_2;    // 0x06E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_2;       // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5C[0x3];                                     // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x076C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_JumpNormalTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_JumpNormalTransform");
static_assert(sizeof(BP_BrainFieldManager_C_JumpNormalTransform) == 0x000780, "Wrong size on BP_BrainFieldManager_C_JumpNormalTransform");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, MakeTransform) == 0x000000, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::MakeTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, InvalidPlayer) == 0x000030, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::InvalidPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, TargetActor) == 0x000038, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Transform) == 0x000040, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Transform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Num_Variable) == 0x000074, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Counter_Variable_1) == 0x00007C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Add_IntInt_ReturnValue_1) == 0x000084, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Array_Index_Variable_1) == 0x000088, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Num_Variable_1) == 0x00008C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData) == 0x000090, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000D8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeArray_Array) == 0x000118, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_2) == 0x000128, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Format_ReturnValue) == 0x000168, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeArray_Array_1) == 0x000180, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Conv_TextToString_ReturnValue) == 0x000190, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Format_ReturnValue_1) == 0x0001A0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0001B8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001C8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Counter_Variable_2) == 0x000208, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Num_Variable_2) == 0x00020C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Add_IntInt_ReturnValue_2) == 0x000210, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Less_IntInt_ReturnValue_1) == 0x000214, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_Length_ReturnValue) == 0x000218, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Counter_Variable_3) == 0x00021C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Less_IntInt_ReturnValue_2) == 0x000220, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Add_IntInt_ReturnValue_3) == 0x000224, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Array_Index_Variable_2) == 0x000228, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Location) == 0x00022C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Rotation) == 0x000238, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Scale) == 0x000244, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakVector_X) == 0x000250, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakVector_Y) == 0x000254, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakVector_Z) == 0x000258, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_4) == 0x000260, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_5) == 0x0002A0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_6) == 0x0002E0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeArray_Array_2) == 0x000320, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Loop_Num_Variable_3) == 0x000330, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Format_ReturnValue_2) == 0x000338, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Less_IntInt_ReturnValue_3) == 0x000350, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_int_Array_Index_Variable_3) == 0x000354, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_IsValid_ReturnValue) == 0x000358, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Conv_BoolToText_ReturnValue) == 0x000360, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_7) == 0x000378, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0003B8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeArray_Array_3) == 0x0003C0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Format_ReturnValue_3) == 0x0003D0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Format_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Conv_TextToString_ReturnValue_2) == 0x0003E8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x0003F8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_DynamicCast_bSuccess) == 0x000408, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_IsValid_ReturnValue_1) == 0x000409, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_IsValid_ReturnValue_2) == 0x00040A, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Location_1) == 0x00040C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Rotation_1) == 0x000418, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Scale_1) == 0x000424, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakVector_X_1) == 0x000430, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakVector_Y_1) == 0x000434, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakVector_Z_1) == 0x000438, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_8) == 0x000440, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_9) == 0x000480, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeStruct_FormatArgumentData_10) == 0x0004C0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeStruct_FormatArgumentData_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, K2Node_MakeArray_Array_4) == 0x000500, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Format_ReturnValue_4) == 0x000510, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Format_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_IsValid_ReturnValue_3) == 0x000528, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_Length_ReturnValue_1) == 0x00052C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_GetPlayerManager_PlayerManager) == 0x000530, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000538, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, Temp_bool_True_if_break_was_hit_Variable) == 0x000539, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Not_PreBool_ReturnValue) == 0x00053A, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BooleanAND_ReturnValue) == 0x00053B, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x00053C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0005C4, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0005C8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Location_2) == 0x0005D4, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Rotation_2) == 0x0005E0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakTransform_Scale_2) == 0x0005EC, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakRotator_Roll) == 0x0005F8, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakRotator_Pitch) == 0x0005FC, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakRotator_Yaw) == 0x000600, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakRotator_Roll_1) == 0x000604, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakRotator_Pitch_1) == 0x000608, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_BreakRotator_Yaw_1) == 0x00060C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_MakeRotator_ReturnValue) == 0x000610, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_MakeTransform_ReturnValue) == 0x000620, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_Length_ReturnValue_2) == 0x000650, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_SetActorTransform_SweepHitResult_1) == 0x000654, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_SetActorTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_SetActorTransform_ReturnValue_1) == 0x0006DC, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_SetActorTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_RegisterBrainFieldNormalTransform_Return) == 0x0006DD, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_RegisterBrainFieldNormalTransform_Return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_SetActorTransform_SweepHitResult_2) == 0x0006E0, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_SetActorTransform_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_K2_SetActorTransform_ReturnValue_2) == 0x000768, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_K2_SetActorTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_Length_ReturnValue_3) == 0x00076C, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_JumpNormalTransform, CallFunc_Array_Length_ReturnValue_4) == 0x000770, "Member 'BP_BrainFieldManager_C_JumpNormalTransform::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PlayPerformSequencer
// 0x0380 (0x0380 - 0x0000)
struct BP_BrainFieldManager_C_PlayPerformSequencer final
{
public:
	bool                                          MoveBrainField;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartPlay;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         DriveActors;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          DriveIn;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseRefresh;                                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5F[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 User;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SequencerNum;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C60[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C61[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCharacterVisibility_bDummy;            // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C62[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C63[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C64[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C65[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_1;            // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DynamicEventBeforeBindCharacter_ReturnValue; // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DynamicEventStart_ReturnValue;            // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C66[0x1];                                     // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C67[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C68[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C69[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0120(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_2;                          // 0x0130(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C6A[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_3;                          // 0x0148(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_SetupCutSceneActorHideDither_UpdatedTime; // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetupCutSceneActorHideDither_UpdatedTime_1; // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C6B[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C6C[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_2;            // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DynamicEventStart_ReturnValue_1;          // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C6D[0x9];                                     // 0x0187(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0190(0x0030)(IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C6E[0x3];                                     // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x01D4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDriveMode_bDrive;                       // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C6F[0x2];                                     // 0x025E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0268(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldCutChange_Dummy;         // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x027A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C70[0x1];                                     // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingSystemRoot_IsBinding;         // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C71[0x5];                                     // 0x0283(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C72[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1;    // 0x02A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C73[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetRightPlayerBP_Player;                  // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetLeftPlayerBP_Player;                   // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C74[0x6];                                     // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface_2;    // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C75[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetMainPlayerBP_Player;                   // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base;             // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingPlayerFromTextOpt_IsBinding;  // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C76[0x6];                                     // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSLevelSequenceActor*>          CallFunc_GetSequencerList_SequencerList;           // 0x0310(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0330(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C77[0x5];                                     // 0x0343(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       K2Node_DynamicCast_AsRSCharacter_Base_1;           // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingENPC_IsBinding;               // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C78[0x2];                                     // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x0358(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldCutChange_Dummy_1;       // 0x036A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            CallFunc_GetEndType_EndType;                       // 0x036B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingDummyFromText_IsBinding;      // 0x036D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x036E(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingPlayerFromText_IsBinding;     // 0x036F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingPlayer_IsBinding;             // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingDummyFromText_IsBinding_1;    // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingDummyFromText_IsBinding_2;    // 0x0372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingPlayerFromText_IsBinding_1;   // 0x0373(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetupBindingPlayerFromText_IsBinding_2;   // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0375(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0376(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C79[0x1];                                     // 0x0377(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PlayPerformSequencer) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PlayPerformSequencer");
static_assert(sizeof(BP_BrainFieldManager_C_PlayPerformSequencer) == 0x000380, "Wrong size on BP_BrainFieldManager_C_PlayPerformSequencer");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, MoveBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::MoveBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Param_Index) == 0x000004, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, StartPlay) == 0x000008, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::StartPlay' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Player) == 0x000010, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, DriveActors) == 0x000018, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::DriveActors' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, DriveIn) == 0x000028, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::DriveIn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, UseRefresh) == 0x000029, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::UseRefresh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, User) == 0x000030, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::User' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, SequencerNum) == 0x000038, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::SequencerNum' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Num_Variable) == 0x000048, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Num_Variable_1) == 0x000050, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Array_Index_Variable_2) == 0x000060, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Num_Variable_2) == 0x000064, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000070, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetCharacterVisibility_bDummy) == 0x000081, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetCharacterVisibility_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000088, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsDead_bDead) == 0x000099, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSBattle_Player) == 0x0000A0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsEvent_Interface) == 0x0000B0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsEvent_Interface_1) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsEvent_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_4) == 0x0000D8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_DynamicEventBeforeBindCharacter_ReturnValue) == 0x0000D9, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_DynamicEventBeforeBindCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_DynamicEventStart_ReturnValue) == 0x0000DA, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_DynamicEventStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Counter_Variable_2) == 0x0000DC, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000E0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_MakeArray_Array) == 0x0000E8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsPlayer_Interface) == 0x0000F8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_5) == 0x000108, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x000110, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_6) == 0x000118, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetPlayerID_ReturnValue) == 0x000119, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_MakeArray_Array_1) == 0x000120, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_MakeArray_Array_2) == 0x000130, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Counter_Variable_3) == 0x000140, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_MakeArray_Array_3) == 0x000148, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupCutSceneActorHideDither_UpdatedTime) == 0x000158, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupCutSceneActorHideDither_UpdatedTime' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupCutSceneActorHideDither_UpdatedTime_1) == 0x00015C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupCutSceneActorHideDither_UpdatedTime_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Less_IntInt_ReturnValue_2) == 0x000160, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Add_IntInt_ReturnValue_3) == 0x000164, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000168, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Add_ReturnValue) == 0x00016C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsEvent_Interface_2) == 0x000170, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsEvent_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_7) == 0x000180, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_DynamicEventStart_ReturnValue_1) == 0x000181, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_DynamicEventStart_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_byte_Variable) == 0x000182, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000183, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_SwitchInteger_CmpSuccess) == 0x000184, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Not_PreBool_ReturnValue) == 0x000185, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_BooleanAND_ReturnValue) == 0x000186, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_MakeTransform_ReturnValue) == 0x000190, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0001C0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_8) == 0x0001D0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0001D4, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_K2_SetActorTransform_ReturnValue) == 0x00025C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsDriveMode_bDrive) == 0x00025D, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsDriveMode_bDrive' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Length_ReturnValue_1) == 0x000260, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Length_ReturnValue_2) == 0x000264, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000268, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_9) == 0x000278, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_OnEnemyBrainFieldCutChange_Dummy) == 0x000279, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_OnEnemyBrainFieldCutChange_Dummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsValid_ReturnValue) == 0x00027A, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Loop_Num_Variable_3) == 0x00027C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Less_IntInt_ReturnValue_3) == 0x000280, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingSystemRoot_IsBinding) == 0x000281, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingSystemRoot_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsValid_ReturnValue_1) == 0x000282, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetGameMode_ReturnValue) == 0x000288, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x000290, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_10) == 0x0002A0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1) == 0x0002A8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_11) == 0x0002B8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetRightPlayerBP_Player) == 0x0002C0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetRightPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetLeftPlayerBP_Player) == 0x0002C8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetLeftPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsValid_ReturnValue_2) == 0x0002D0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsValid_ReturnValue_3) == 0x0002D1, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSGame_Mode_BPInterface_2) == 0x0002D8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSGame_Mode_BPInterface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_12) == 0x0002E8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetMainPlayerBP_Player) == 0x0002F0, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetMainPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SelectInt_ReturnValue) == 0x0002F8, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Length_ReturnValue_3) == 0x0002FC, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSCharacter_Base) == 0x000300, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSCharacter_Base' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_13) == 0x000308, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingPlayerFromTextOpt_IsBinding) == 0x000309, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingPlayerFromTextOpt_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetSequencerList_SequencerList) == 0x000310, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetSequencerList_SequencerList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000320, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Length_ReturnValue_4) == 0x00032C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000330, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000340, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_BooleanAND_ReturnValue_1) == 0x000341, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsValid_ReturnValue_4) == 0x000342, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsRSCharacter_Base_1) == 0x000348, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsRSCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_14) == 0x000350, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingENPC_IsBinding) == 0x000351, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingENPC_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_int_Array_Index_Variable_3) == 0x000354, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x000358, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, K2Node_DynamicCast_bSuccess_15) == 0x000368, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_IsValid_ReturnValue_5) == 0x000369, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_OnEnemyBrainFieldCutChange_Dummy_1) == 0x00036A, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_OnEnemyBrainFieldCutChange_Dummy_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_GetEndType_EndType) == 0x00036B, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_GetEndType_EndType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00036C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingDummyFromText_IsBinding) == 0x00036D, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingDummyFromText_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, Temp_bool_Variable) == 0x00036E, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingPlayerFromText_IsBinding) == 0x00036F, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingPlayerFromText_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingPlayer_IsBinding) == 0x000370, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingPlayer_IsBinding' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingDummyFromText_IsBinding_1) == 0x000371, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingDummyFromText_IsBinding_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingDummyFromText_IsBinding_2) == 0x000372, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingDummyFromText_IsBinding_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingPlayerFromText_IsBinding_1) == 0x000373, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingPlayerFromText_IsBinding_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_SetupBindingPlayerFromText_IsBinding_2) == 0x000374, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_SetupBindingPlayerFromText_IsBinding_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000375, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_BooleanAND_ReturnValue_2) == 0x000376, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Array_Length_ReturnValue_5) == 0x000378, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencer, CallFunc_Less_IntInt_ReturnValue_4) == 0x00037C, "Member 'BP_BrainFieldManager_C_PlayPerformSequencer::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.CalcBrainFieldPsychicAttachmentTransform
// 0x0190 (0x0190 - 0x0000)
struct BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform final
{
public:
	class AActor*                                 PsychicActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C7A[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastPlayerTransform;                               // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             NewPlayerTransform;                                // 0x0040(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             NewTransform;                                      // 0x0070(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00A0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform");
static_assert(sizeof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform) == 0x000190, "Wrong size on BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, PsychicActor) == 0x000000, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::PsychicActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, LastPlayerTransform) == 0x000010, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::LastPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, NewPlayerTransform) == 0x000040, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::NewPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, NewTransform) == 0x000070, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::NewTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_GetTransform_ReturnValue) == 0x0000A0, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000D0, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Location) == 0x0000DC, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Scale) == 0x0000F4, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Location_1) == 0x000100, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Rotation_1) == 0x00010C, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Scale_1) == 0x000118, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Location_2) == 0x000124, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Rotation_2) == 0x000130, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_BreakTransform_Scale_2) == 0x00013C, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000148, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x000154, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform, CallFunc_MakeTransform_ReturnValue) == 0x000160, "Member 'BP_BrainFieldManager_C_CalcBrainFieldPsychicAttachmentTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.CheckFinishCondition
// 0x0040 (0x0040 - 0x0000)
struct BP_BrainFieldManager_C_CheckFinishCondition final
{
public:
	bool                                          IsFinish;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnemyLive;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C7B[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C7C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEventStartup_IsEvent;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C7D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C7E[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C7F[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_CheckFinishCondition) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_CheckFinishCondition");
static_assert(sizeof(BP_BrainFieldManager_C_CheckFinishCondition) == 0x000040, "Wrong size on BP_BrainFieldManager_C_CheckFinishCondition");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, IsFinish) == 0x000000, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::IsFinish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, EnemyLive) == 0x000001, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::EnemyLive' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_IsEventStartup_IsEvent) == 0x000010, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_IsEventStartup_IsEvent' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_Not_PreBool_ReturnValue_1) == 0x000018, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_Less_IntInt_ReturnValue) == 0x000019, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_Not_PreBool_ReturnValue_2) == 0x000021, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000028, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckFinishCondition, CallFunc_GetEnemySpawn_return) == 0x00003A, "Member 'BP_BrainFieldManager_C_CheckFinishCondition::CallFunc_GetEnemySpawn_return' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DebugForceEndField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_DebugForceEndField final
{
public:
	bool                                          IsForce;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_DebugForceEndField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_DebugForceEndField");
static_assert(sizeof(BP_BrainFieldManager_C_DebugForceEndField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_DebugForceEndField");
static_assert(offsetof(BP_BrainFieldManager_C_DebugForceEndField, IsForce) == 0x000000, "Member 'BP_BrainFieldManager_C_DebugForceEndField::IsForce' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PostLoadedLevel
// 0x00F0 (0x00F0 - 0x0000)
struct BP_BrainFieldManager_C_PostLoadedLevel final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C80[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C81[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C82[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C83[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UBP_RSParticleBackgroundComponent_C* Emitter)> K2Node_CreateDelegate_OutputDelegate;              // 0x005C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetBrainFieldActors_ReturnValue;          // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C84[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetBrainFieldActors_ReturnValue_1;        // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EffectBackground_C*                 K2Node_DynamicCast_AsBP_Effect_Background;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C85[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      K2Node_DynamicCast_AsDirectional_Light;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C86[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetBrainFieldActors_ReturnValue_2;        // 0x00E0(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PostLoadedLevel) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PostLoadedLevel");
static_assert(sizeof(BP_BrainFieldManager_C_PostLoadedLevel) == 0x0000F0, "Wrong size on BP_BrainFieldManager_C_PostLoadedLevel");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Array_Index_Variable_1) == 0x000008, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Array_Index_Variable_2) == 0x000014, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Num_Variable_1) == 0x000018, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Counter_Variable_2) == 0x000024, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Less_IntInt_ReturnValue_1) == 0x00002C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Add_IntInt_ReturnValue_2) == 0x000030, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Counter_Variable_3) == 0x000034, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Num_Variable_2) == 0x000038, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Add_IntInt_ReturnValue_3) == 0x00003C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Less_IntInt_ReturnValue_2) == 0x000040, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Counter_Variable_4) == 0x000044, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Add_IntInt_ReturnValue_4) == 0x000048, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Array_Index_Variable_3) == 0x00004C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Num_Variable_3) == 0x000050, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Less_IntInt_ReturnValue_3) == 0x000054, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Array_Index_Variable_4) == 0x000058, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, K2Node_CreateDelegate_OutputDelegate) == 0x00005C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_GetBrainFieldActors_ReturnValue) == 0x000070, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_GetBrainFieldActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, Temp_int_Loop_Num_Variable_4) == 0x000080, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Less_IntInt_ReturnValue_4) == 0x000084, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_GetBrainFieldActors_ReturnValue_1) == 0x000088, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_GetBrainFieldActors_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_2) == 0x00009C, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_3) == 0x0000A0, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Max_ReturnValue) == 0x0000A4, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, K2Node_DynamicCast_AsBP_Effect_Background) == 0x0000A8, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::K2Node_DynamicCast_AsBP_Effect_Background' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, K2Node_DynamicCast_AsDirectional_Light) == 0x0000B8, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::K2Node_DynamicCast_AsDirectional_Light' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_4) == 0x0000C4, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Add_ReturnValue) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_5) == 0x0000CC, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000D0, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_6) == 0x0000D4, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_7) == 0x0000D8, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_Array_Length_ReturnValue_8) == 0x0000DC, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PostLoadedLevel, CallFunc_GetBrainFieldActors_ReturnValue_2) == 0x0000E0, "Member 'BP_BrainFieldManager_C_PostLoadedLevel::CallFunc_GetBrainFieldActors_ReturnValue_2' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupPlayerMaterial
// 0x0068 (0x0068 - 0x0000)
struct BP_BrainFieldManager_C_SetupPlayerMaterial final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleBrainField;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C87[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C88[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C89[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_SASCopyPlayerActor_C*>       CallFunc_GetCopyPlayerList_CopyPlayerList;         // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C8A[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C8B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetHoodVisible_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C8C[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupPlayerMaterial) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetupPlayerMaterial");
static_assert(sizeof(BP_BrainFieldManager_C_SetupPlayerMaterial) == 0x000068, "Wrong size on BP_BrainFieldManager_C_SetupPlayerMaterial");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, Player) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, VisibleBrainField) == 0x000008, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::VisibleBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, Temp_int_Loop_Num_Variable) == 0x000014, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, CallFunc_GetCopyPlayerList_CopyPlayerList) == 0x000020, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::CallFunc_GetCopyPlayerList_CopyPlayerList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, K2Node_DynamicCast_AsEvent_Interface) == 0x000040, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, CallFunc_SetHoodVisible_ReturnValue) == 0x000051, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::CallFunc_SetHoodVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000058, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupPlayerMaterial, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_BrainFieldManager_C_SetupPlayerMaterial::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupEnemyEnabled
// 0x00B0 (0x00B0 - 0x0000)
struct BP_BrainFieldManager_C_SetupEnemyEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BFUseActor;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C8D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  EnemyFlagList;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<bool>                                  ComponentsFlagList;                                // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UActorComponent*                        Component;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Enemy;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                ComponentList;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFlagListStruct                        K2Node_MakeStruct_FlagListStruct;                  // 0x0058(0x0010)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C8E[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C8F[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  CallFunc_SetupEnemyEnabledInternal_ComponentsFlagList; // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FFlagListStruct                        K2Node_MakeStruct_FlagListStruct_1;                // 0x00A0(0x0010)()
};
static_assert(alignof(BP_BrainFieldManager_C_SetupEnemyEnabled) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetupEnemyEnabled");
static_assert(sizeof(BP_BrainFieldManager_C_SetupEnemyEnabled) == 0x0000B0, "Wrong size on BP_BrainFieldManager_C_SetupEnemyEnabled");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, Enabled) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, BFUseActor) == 0x000001, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::BFUseActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, EnemyFlagList) == 0x000008, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::EnemyFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, ComponentsFlagList) == 0x000018, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::ComponentsFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, Component) == 0x000028, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::Component' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, Enemy) == 0x000030, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, ComponentList) == 0x000038, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::ComponentList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, CallFunc_GetEnemyManager_Manager) == 0x000050, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, K2Node_MakeStruct_FlagListStruct) == 0x000058, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::K2Node_MakeStruct_FlagListStruct' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, K2Node_MakeArray_Array) == 0x000070, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, Temp_int_Loop_Num_Variable) == 0x000080, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, Temp_int_Array_Index_Variable) == 0x000084, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, CallFunc_Array_Length_ReturnValue_1) == 0x00008C, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, CallFunc_SetupEnemyEnabledInternal_ComponentsFlagList) == 0x000090, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::CallFunc_SetupEnemyEnabledInternal_ComponentsFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabled, K2Node_MakeStruct_FlagListStruct_1) == 0x0000A0, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabled::K2Node_MakeStruct_FlagListStruct_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartUserInput
// 0x0058 (0x0058 - 0x0000)
struct BP_BrainFieldManager_C_StartUserInput final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C90[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface_1;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventEnd_ReturnValue_1;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C91[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerActionAfterEvent_bDummy;         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_StartUserInput) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_StartUserInput");
static_assert(sizeof(BP_BrainFieldManager_C_StartUserInput) == 0x000058, "Wrong size on BP_BrainFieldManager_C_StartUserInput");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_BrainFieldManager_C_StartUserInput::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_StartUserInput::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_StartUserInput::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_DynamicCast_AsEvent_Interface) == 0x000010, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_EventEnd_ReturnValue) == 0x000021, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_EventEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_Less_IntInt_ReturnValue) == 0x000022, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_DynamicCast_AsEvent_Interface_1) == 0x000028, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_DynamicCast_AsEvent_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_EventEnd_ReturnValue_1) == 0x000039, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_EventEnd_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_SwitchEnum_CmpSuccess) == 0x00003A, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_IsValid_ReturnValue) == 0x00003B, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000040, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'BP_BrainFieldManager_C_StartUserInput::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartUserInput, CallFunc_SetPlayerActionAfterEvent_bDummy) == 0x000051, "Member 'BP_BrainFieldManager_C_StartUserInput::CallFunc_SetPlayerActionAfterEvent_bDummy' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupEnemyEnabledInternal
// 0x0100 (0x0100 - 0x0000)
struct BP_BrainFieldManager_C_SetupEnemyEnabledInternal final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C92[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InEnemy;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InEnemyIndex;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C93[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  EnemyFlagList;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<bool>                                  ComponentsFlagList;                                // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          BFUseActor;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C94[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  TmpEnemyFlagList;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<bool>                                  TmpComponentsFlagList;                             // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UActorComponent*                        Component;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Enemy;                                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                ComponentList;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetEnemyWait_NewParam;                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C95[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEnemyWait_NewParam;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C96[0x6];                                     // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C97[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C98[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C99[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue_1;     // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9A[0x2];                                     // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C9B[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetupEnemyEnabledInternal");
static_assert(sizeof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal) == 0x000100, "Wrong size on BP_BrainFieldManager_C_SetupEnemyEnabledInternal");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, Enabled) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::Enabled' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, InEnemy) == 0x000008, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::InEnemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, InEnemyIndex) == 0x000010, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::InEnemyIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, EnemyFlagList) == 0x000018, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::EnemyFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, ComponentsFlagList) == 0x000028, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::ComponentsFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, BFUseActor) == 0x000038, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::BFUseActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, TmpEnemyFlagList) == 0x000040, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::TmpEnemyFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, TmpComponentsFlagList) == 0x000050, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::TmpComponentsFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, Component) == 0x000060, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::Component' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, Enemy) == 0x000068, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, ComponentList) == 0x000070, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::ComponentList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000080, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_ResetEnemyWait_NewParam) == 0x000091, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_ResetEnemyWait_NewParam' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x000098, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_SetEnemyWait_NewParam) == 0x0000A9, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_SetEnemyWait_NewParam' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x0000B0, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_IsActorTickEnabled_ReturnValue) == 0x0000C0, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_Array_Find_ReturnValue) == 0x0000C4, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_IsValid_ReturnValue) == 0x0000C9, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, Temp_int_Loop_Num_Variable) == 0x0000CC, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, Temp_int_Array_Index_Variable) == 0x0000D0, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_Array_Length_ReturnValue_1) == 0x0000D8, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x0000DC, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, Temp_int_Loop_Counter_Variable) == 0x0000E0, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_IsComponentTickEnabled_ReturnValue_1) == 0x0000E4, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_IsComponentTickEnabled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_Less_IntInt_ReturnValue) == 0x0000E5, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_Add_IntInt_ReturnValue) == 0x0000E8, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x0000F0, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, K2Node_DynamicCast_bSuccess_2) == 0x0000F8, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_BooleanAND_ReturnValue) == 0x0000F9, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_BooleanAND_ReturnValue_1) == 0x0000FA, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyEnabledInternal, CallFunc_Not_PreBool_ReturnValue) == 0x0000FB, "Member 'BP_BrainFieldManager_C_SetupEnemyEnabledInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupGrabObjectEnabled
// 0x0040 (0x0040 - 0x0000)
struct BP_BrainFieldManager_C_SetupGrabObjectEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APsychicGrabAttachment_C*               TmpGrab;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                ComponentList;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetVisibilityPsyObj_return;               // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9E[0x1];                                     // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupGrabObjectEnabled) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetupGrabObjectEnabled");
static_assert(sizeof(BP_BrainFieldManager_C_SetupGrabObjectEnabled) == 0x000040, "Wrong size on BP_BrainFieldManager_C_SetupGrabObjectEnabled");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, Enabled) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, TmpGrab) == 0x000008, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::TmpGrab' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, ComponentList) == 0x000010, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::ComponentList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_IsValid_ReturnValue) == 0x000035, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_SetVisibilityPsyObj_return) == 0x000036, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_SetVisibilityPsyObj_return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupGrabObjectEnabled, CallFunc_IsValid_ReturnValue_1) == 0x00003C, "Member 'BP_BrainFieldManager_C_SetupGrabObjectEnabled::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SwitchParticleSystem
// 0x00A0 (0x00A0 - 0x0000)
struct BP_BrainFieldManager_C_SwitchParticleSystem final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               TmpParticle;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TmpActor;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA0[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA1[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA2[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA3[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RSParticleBackgroundComponent_C*    CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA4[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA5[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RSParticleBackgroundComponent_C*    CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA6[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SwitchParticleSystem) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SwitchParticleSystem");
static_assert(sizeof(BP_BrainFieldManager_C_SwitchParticleSystem) == 0x0000A0, "Wrong size on BP_BrainFieldManager_C_SwitchParticleSystem");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Enabled) == 0x000000, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Enabled' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, TmpParticle) == 0x000008, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::TmpParticle' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, TmpActor) == 0x000010, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::TmpActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Variable_1) == 0x00001C, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Add_IntInt_ReturnValue_2) == 0x000048, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Loop_Num_Variable) == 0x00004C, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Add_IntInt_ReturnValue_3) == 0x000058, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Array_Index_Variable_1) == 0x000060, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, Temp_int_Loop_Num_Variable_1) == 0x000064, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00007C, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Less_IntInt_ReturnValue_2) == 0x000084, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Length_ReturnValue_2) == 0x000090, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Less_IntInt_ReturnValue_3) == 0x000094, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Length_ReturnValue_3) == 0x000098, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchParticleSystem, CallFunc_Array_Length_ReturnValue_4) == 0x00009C, "Member 'BP_BrainFieldManager_C_SwitchParticleSystem::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInvokeBrainField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsInvokeBrainField final
{
public:
	bool                                          Param_InvokeBrainField;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsInvokeBrainField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsInvokeBrainField");
static_assert(sizeof(BP_BrainFieldManager_C_IsInvokeBrainField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsInvokeBrainField");
static_assert(offsetof(BP_BrainFieldManager_C_IsInvokeBrainField, Param_InvokeBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_IsInvokeBrainField::Param_InvokeBrainField' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetBrainFieldLightVisible
// 0x0028 (0x0028 - 0x0000)
struct BP_BrainFieldManager_C_SetBrainFieldLightVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CA8[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CA9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetBrainFieldLightVisible) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetBrainFieldLightVisible");
static_assert(sizeof(BP_BrainFieldManager_C_SetBrainFieldLightVisible) == 0x000028, "Wrong size on BP_BrainFieldManager_C_SetBrainFieldLightVisible");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, Visible) == 0x000000, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::Visible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, Temp_int_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetBrainFieldLightVisible, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_SetBrainFieldLightVisible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformMoveBrainFieldInnerOne
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CAA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CAB[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CAC[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, Temp_int_Loop_Num_Variable) == 0x000034, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformMoveBrainFieldInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformMoveNormalFieldInnerOne
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CAD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CAE[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CAF[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, Temp_int_Loop_Num_Variable) == 0x000034, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformMoveNormalFieldInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetEndType
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_GetEndType final
{
public:
	EBrainFieldEndType                            Param_EndType;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_GetEndType) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_GetEndType");
static_assert(sizeof(BP_BrainFieldManager_C_GetEndType) == 0x000001, "Wrong size on BP_BrainFieldManager_C_GetEndType");
static_assert(offsetof(BP_BrainFieldManager_C_GetEndType, Param_EndType) == 0x000000, "Member 'BP_BrainFieldManager_C_GetEndType::Param_EndType' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsReceiveBrainCrashGameOver
// 0x0030 (0x0030 - 0x0000)
struct BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver final
{
public:
	bool                                          IsGameOver;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver");
static_assert(sizeof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver) == 0x000030, "Wrong size on BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver");
static_assert(offsetof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver, IsGameOver) == 0x000000, "Member 'BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver::IsGameOver' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver, CallFunc_GetPlayer_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000018, "Member 'BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver, CallFunc_IsDead_bDead) == 0x000029, "Member 'BP_BrainFieldManager_C_IsReceiveBrainCrashGameOver::CallFunc_IsDead_bDead' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SwitchGameOver
// 0x0038 (0x0038 - 0x0000)
struct BP_BrainFieldManager_C_SwitchGameOver final
{
public:
	class ABP_StageManager_C*                     CallFunc_GetStageManager_Manager;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      CallFunc_GetMainPlayer_Player;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> CallFunc_RequestDie_self_CastInput;                // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequestDie_bDummy;                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SwitchGameOver) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SwitchGameOver");
static_assert(sizeof(BP_BrainFieldManager_C_SwitchGameOver) == 0x000038, "Wrong size on BP_BrainFieldManager_C_SwitchGameOver");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_GetStageManager_Manager) == 0x000000, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_GetStageManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_GetPlayerManager_PlayerManager) == 0x000008, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_GetMainPlayer_Player) == 0x000018, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_GetMainPlayer_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_RequestDie_self_CastInput) == 0x000020, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_RequestDie_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_RequestDie_bDummy) == 0x000030, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_RequestDie_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SwitchGameOver, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BP_BrainFieldManager_C_SwitchGameOver::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.LoadAsset
// 0x0060 (0x0060 - 0x0000)
struct BP_BrainFieldManager_C_LoadAsset final
{
public:
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_1;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      K2Node_DynamicCast_AsMaterial_Instance;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB2[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB3[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB4[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadSoftObject_ReturnValue_2;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      K2Node_DynamicCast_AsMaterial_Instance_1;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB5[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_LoadAsset) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_LoadAsset");
static_assert(sizeof(BP_BrainFieldManager_C_LoadAsset) == 0x000060, "Wrong size on BP_BrainFieldManager_C_LoadAsset");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue_1) == 0x000008, "Member 'BP_BrainFieldManager_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, K2Node_DynamicCast_AsMaterial_Instance) == 0x000010, "Member 'BP_BrainFieldManager_C_LoadAsset::K2Node_DynamicCast_AsMaterial_Instance' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BrainFieldManager_C_LoadAsset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, K2Node_DynamicCast_AsStatic_Mesh) == 0x000020, "Member 'BP_BrainFieldManager_C_LoadAsset::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_BrainFieldManager_C_LoadAsset::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_LoadAsset::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, CallFunc_SetStaticMesh_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_LoadAsset::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, CallFunc_LoadSoftObject_ReturnValue_2) == 0x000040, "Member 'BP_BrainFieldManager_C_LoadAsset::CallFunc_LoadSoftObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, K2Node_DynamicCast_AsMaterial_Instance_1) == 0x000048, "Member 'BP_BrainFieldManager_C_LoadAsset::K2Node_DynamicCast_AsMaterial_Instance_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'BP_BrainFieldManager_C_LoadAsset::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadAsset, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000058, "Member 'BP_BrainFieldManager_C_LoadAsset::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSwitchBGSide
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSwitchBGSide final
{
public:
	bool                                          Param_UserIsPlayer;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSwitchBGSide) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_PrivateSwitchBGSide");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSwitchBGSide) == 0x000001, "Wrong size on BP_BrainFieldManager_C_PrivateSwitchBGSide");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchBGSide, Param_UserIsPlayer) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSwitchBGSide::Param_UserIsPlayer' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateMoveBFPlayerTransform
// 0x0270 (0x0270 - 0x0000)
struct BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform final
{
public:
	bool                                          UseDynamicEventRelative;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EventParamComponent_C*              EventParamComp;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CB7[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TmpTransform;                                      // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CB8[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CB9[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CBA[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StopMovementImmediately_bDummy;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CBB[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventParamComponent_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CBC[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CBD[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0138(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CBE[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CBF[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TraceGroundLocation_groundLocation;       // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CC0[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC1[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform) == 0x000270, "Wrong size on BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, UseDynamicEventRelative) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::UseDynamicEventRelative' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, EventParamComp) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::EventParamComp' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, Player) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, TmpTransform) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::TmpTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, Temp_int_Loop_Num_Variable) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000060, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Location) == 0x000074, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Rotation) == 0x000080, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Scale) == 0x00008C, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_StopMovementImmediately_bDummy) == 0x000098, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_StopMovementImmediately_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Location_1) == 0x00009C, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Rotation_1) == 0x0000A8, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Scale_1) == 0x0000B4, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_GetComponentByClass_ReturnValue) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_ComposeRotators_ReturnValue) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D4, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_MakeTransform_ReturnValue) == 0x0000E0, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, K2Node_DynamicCast_AsRSBattle_Character) == 0x000110, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, Temp_int_Loop_Counter_Variable) == 0x00011C, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_SelectFloat_ReturnValue) == 0x000124, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_MakeVector_ReturnValue) == 0x000128, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Add_IntInt_ReturnValue) == 0x000134, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000138, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0001C0, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Location_2) == 0x0001C4, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Rotation_2) == 0x0001D0, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Scale_2) == 0x0001DC, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_IsValid_ReturnValue_1) == 0x0001E8, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_TraceGroundLocation_groundLocation) == 0x0001EC, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_TraceGroundLocation_groundLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001F8, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Location_3) == 0x000204, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Rotation_3) == 0x000210, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_BreakTransform_Scale_3) == 0x00021C, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_MakeTransform_ReturnValue_1) == 0x000230, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Array_Length_ReturnValue) == 0x000260, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Less_IntInt_ReturnValue_1) == 0x000264, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform, CallFunc_Array_Length_ReturnValue_1) == 0x000268, "Member 'BP_BrainFieldManager_C_PrivateMoveBFPlayerTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.OverrideBrainField
// 0x0020 (0x0020 - 0x0000)
struct BP_BrainFieldManager_C_OverrideBrainField final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SubUser;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_OverrideBrainField) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_OverrideBrainField");
static_assert(sizeof(BP_BrainFieldManager_C_OverrideBrainField) == 0x000020, "Wrong size on BP_BrainFieldManager_C_OverrideBrainField");
static_assert(offsetof(BP_BrainFieldManager_C_OverrideBrainField, User) == 0x000000, "Member 'BP_BrainFieldManager_C_OverrideBrainField::User' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_OverrideBrainField, SubUser) == 0x000008, "Member 'BP_BrainFieldManager_C_OverrideBrainField::SubUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_OverrideBrainField, CallFunc_MakeLiteralString_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_OverrideBrainField::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOverrideStart
// 0x0060 (0x0060 - 0x0000)
struct BP_BrainFieldManager_C_PerformOverrideStart final
{
public:
	bool                                          PlaySequencer;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        TmpLevel;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC3[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC4[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CC5[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetSpecialEffects_bDummy;               // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC6[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayPerformSequencer_StartPlay;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC7[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformOverrideStart) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformOverrideStart");
static_assert(sizeof(BP_BrainFieldManager_C_PerformOverrideStart) == 0x000060, "Wrong size on BP_BrainFieldManager_C_PerformOverrideStart");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, PlaySequencer) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::PlaySequencer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, TmpLevel) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::TmpLevel' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, Temp_int_Variable) == 0x000010, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Not_PreBool_ReturnValue_1) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_ResetSpecialEffects_bDummy) == 0x000052, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_ResetSpecialEffects_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_PlayPerformSequencer_StartPlay) == 0x000058, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_PlayPerformSequencer_StartPlay' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Less_IntInt_ReturnValue_1) == 0x000059, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStart, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_BrainFieldManager_C_PerformOverrideStart::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupBFVisible
// 0x0060 (0x0060 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetupBFVisible final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC8[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CC9[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CCA[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ResetSpecialEffects_bDummy;               // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetupBFVisible) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetupBFVisible");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetupBFVisible) == 0x000060, "Wrong size on BP_BrainFieldManager_C_PrivateSetupBFVisible");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Variable) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Loop_Num_Variable_1) == 0x00001C, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Less_IntInt_ReturnValue_1) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Add_IntInt_ReturnValue_2) == 0x000034, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Array_Length_ReturnValue_2) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000048, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_Less_IntInt_ReturnValue_2) == 0x000059, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBFVisible, CallFunc_ResetSpecialEffects_bDummy) == 0x00005A, "Member 'BP_BrainFieldManager_C_PrivateSetupBFVisible::CallFunc_ResetSpecialEffects_bDummy' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupPartyMaterial
// 0x0080 (0x0080 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetupPartyMaterial final
{
public:
	bool                                          VisibleBrainField;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CCB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CCC[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CCD[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRSGameModeBPInterface_C> K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1;    // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CCE[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetRightPlayerBP_Player;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       CallFunc_GetLeftPlayerBP_Player;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CCF[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player_1;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetupPartyMaterial");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial) == 0x000080, "Wrong size on BP_BrainFieldManager_C_PrivateSetupPartyMaterial");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, VisibleBrainField) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::VisibleBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, TargetActor) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, CallFunc_GetGameMode_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_AsRSGame_Mode_BPInterface) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_AsRSGame_Mode_BPInterface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_AsRSGame_Mode_BPInterface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, CallFunc_GetRightPlayerBP_Player) == 0x000050, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::CallFunc_GetRightPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, CallFunc_GetLeftPlayerBP_Player) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::CallFunc_GetLeftPlayerBP_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_AsRSBattle_Player) == 0x000060, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_AsRSBattle_Player_1) == 0x000070, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_AsRSBattle_Player_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupPartyMaterial, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'BP_BrainFieldManager_C_PrivateSetupPartyMaterial::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupMaterial
// 0x0078 (0x0078 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetupMaterial final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleBrainField;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetupBrainCode;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD0[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerMaterialManageComponent_C*    MaterialManageComponent;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD1[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMaterialManageComponent_C*    CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBrainCodeVisible_bDummy;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD2[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Mesh_C>           K2Node_DynamicCast_AsBPI_Mesh;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD3[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD4[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetSkeletalMesh_SkeletalMesh;             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetupMaterial) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetupMaterial");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetupMaterial) == 0x000078, "Wrong size on BP_BrainFieldManager_C_PrivateSetupMaterial");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, Actor) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::Actor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, VisibleBrainField) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::VisibleBrainField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, SetupBrainCode) == 0x000009, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::SetupBrainCode' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, MaterialManageComponent) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::MaterialManageComponent' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, CallFunc_SetBrainCodeVisible_bDummy) == 0x000039, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::CallFunc_SetBrainCodeVisible_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, K2Node_DynamicCast_AsBPI_Mesh) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::K2Node_DynamicCast_AsBPI_Mesh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, K2Node_DynamicCast_AsRSBattle_Player) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, CallFunc_GetSkeletalMesh_SkeletalMesh) == 0x000068, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::CallFunc_GetSkeletalMesh_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupMaterial, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'BP_BrainFieldManager_C_PrivateSetupMaterial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PerformOverrideStartInnerOne
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PerformOverrideStartInnerOne final
{
public:
	bool                                          IsUser;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lists;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CD6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD7[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD8[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PerformOverrideStartInnerOne");
static_assert(sizeof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PerformOverrideStartInnerOne");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, IsUser) == 0x000000, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::IsUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, Lists) == 0x000008, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::Lists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, Temp_int_Loop_Num_Variable) == 0x000020, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000028, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PerformOverrideStartInnerOne, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_BrainFieldManager_C_PerformOverrideStartInnerOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Is Performance Sequencer
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_Is_Performance_Sequencer final
{
public:
	bool                                          IsPerform;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_Is_Performance_Sequencer) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_Is_Performance_Sequencer");
static_assert(sizeof(BP_BrainFieldManager_C_Is_Performance_Sequencer) == 0x000001, "Wrong size on BP_BrainFieldManager_C_Is_Performance_Sequencer");
static_assert(offsetof(BP_BrainFieldManager_C_Is_Performance_Sequencer, IsPerform) == 0x000000, "Member 'BP_BrainFieldManager_C_Is_Performance_Sequencer::IsPerform' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventOpenUser
// 0x0010 (0x0010 - 0x0000)
struct BP_BrainFieldManager_C_EventOpenUser final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SubUser;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_EventOpenUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_EventOpenUser");
static_assert(sizeof(BP_BrainFieldManager_C_EventOpenUser) == 0x000010, "Wrong size on BP_BrainFieldManager_C_EventOpenUser");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUser, User) == 0x000000, "Member 'BP_BrainFieldManager_C_EventOpenUser::User' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUser, SubUser) == 0x000008, "Member 'BP_BrainFieldManager_C_EventOpenUser::SubUser' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupENPCStencil
// 0x0058 (0x0058 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetupENPCStencil final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set;                                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StencilValue;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CDA[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 TmpSkeletal;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CDB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetSkeletalMeshFromActor_ReturnValue;     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CDC[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CDD[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Not_Int_ReturnValue;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue_1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetupENPCStencil) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetupENPCStencil");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetupENPCStencil) == 0x000058, "Wrong size on BP_BrainFieldManager_C_PrivateSetupENPCStencil");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, Target) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::Target' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, Set) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::Set' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, Param_Index) == 0x00000C, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, StencilValue) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::StencilValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, TmpSkeletal) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::TmpSkeletal' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, K2Node_DynamicCast_AsRSBattle_Character) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_GetSkeletalMeshFromActor_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_GetSkeletalMeshFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_And_IntInt_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_Not_Int_ReturnValue) == 0x000044, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_Not_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_MakeLiteralInt_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_And_IntInt_ReturnValue_1) == 0x00004C, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_And_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_Or_IntInt_ReturnValue) == 0x000050, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_Or_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupENPCStencil, CallFunc_Or_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_BrainFieldManager_C_PrivateSetupENPCStencil::CallFunc_Or_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.LoadLevels
// 0x0088 (0x0088 - 0x0000)
struct BP_BrainFieldManager_C_LoadLevels final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CDE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LoadLevelNames;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CDF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CE0[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE1[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LoadLevelInstance_bOutSuccess;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE2[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 CallFunc_LoadLevelInstance_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_LoadLevels) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_LoadLevels");
static_assert(sizeof(BP_BrainFieldManager_C_LoadLevels) == 0x000088, "Wrong size on BP_BrainFieldManager_C_LoadLevels");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, Type) == 0x000000, "Member 'BP_BrainFieldManager_C_LoadLevels::Type' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, LoadLevelNames) == 0x000008, "Member 'BP_BrainFieldManager_C_LoadLevels::LoadLevelNames' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_LoadLevels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, K2Node_SwitchInteger_CmpSuccess) == 0x00001C, "Member 'BP_BrainFieldManager_C_LoadLevels::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_BrainFieldManager_C_LoadLevels::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Conv_NameToString_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_BrainFieldManager_C_LoadLevels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_MakeRotator_ReturnValue) == 0x00005C, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_LoadLevelInstance_bOutSuccess) == 0x000068, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_LoadLevelInstance_bOutSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_LoadLevelInstance_ReturnValue) == 0x000070, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_LoadLevelInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Array_Add_ReturnValue_1) == 0x00007C, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadLevels, CallFunc_Array_Add_ReturnValue_2) == 0x000080, "Member 'BP_BrainFieldManager_C_LoadLevels::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSwitchVisibleTeamActors
// 0x0040 (0x0040 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         BGHideList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TmpSkeletal;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE4[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CE5[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_Select_Default;                             // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors) == 0x000040, "Wrong size on BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, IsPlayer) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, IsVisible) == 0x000001, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::IsVisible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, BGHideList) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::BGHideList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, TmpSkeletal) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::TmpSkeletal' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, Temp_bool_Variable) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, CallFunc_MakeLiteralInt_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors, K2Node_Select_Default) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateSwitchVisibleTeamActors::K2Node_Select_Default' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsEventStartup
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsEventStartup final
{
public:
	bool                                          IsEvent;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsEventStartup) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsEventStartup");
static_assert(sizeof(BP_BrainFieldManager_C_IsEventStartup) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsEventStartup");
static_assert(offsetof(BP_BrainFieldManager_C_IsEventStartup, IsEvent) == 0x000000, "Member 'BP_BrainFieldManager_C_IsEventStartup::IsEvent' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.LoadENPC
// 0x0040 (0x0040 - 0x0000)
struct BP_BrainFieldManager_C_LoadENPC final
{
public:
	class AActor*                                 ENPCActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldENPCType                           ENPCType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldSequencerType                      SequencerType;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE7[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface_1;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_LoadENPC) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_LoadENPC");
static_assert(sizeof(BP_BrainFieldManager_C_LoadENPC) == 0x000040, "Wrong size on BP_BrainFieldManager_C_LoadENPC");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, ENPCActor) == 0x000000, "Member 'BP_BrainFieldManager_C_LoadENPC::ENPCActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, ENPCType) == 0x000008, "Member 'BP_BrainFieldManager_C_LoadENPC::ENPCType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, SequencerType) == 0x000009, "Member 'BP_BrainFieldManager_C_LoadENPC::SequencerType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, Temp_byte_Variable) == 0x00000A, "Member 'BP_BrainFieldManager_C_LoadENPC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'BP_BrainFieldManager_C_LoadENPC::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'BP_BrainFieldManager_C_LoadENPC::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_BrainFieldManager_C_LoadENPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, K2Node_DynamicCast_AsPlayer_Interface_1) == 0x000028, "Member 'BP_BrainFieldManager_C_LoadENPC::K2Node_DynamicCast_AsPlayer_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_BrainFieldManager_C_LoadENPC::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, CallFunc_GetPlayerID_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_LoadENPC::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, CallFunc_GetPlayerID_ReturnValue_1) == 0x00003A, "Member 'BP_BrainFieldManager_C_LoadENPC::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, Temp_byte_Variable_1) == 0x00003B, "Member 'BP_BrainFieldManager_C_LoadENPC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_LoadENPC, K2Node_SwitchEnum_CmpSuccess_1) == 0x00003C, "Member 'BP_BrainFieldManager_C_LoadENPC::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventOpenUserEnd
// 0x01B0 (0x01B0 - 0x0000)
struct BP_BrainFieldManager_C_EventOpenUserEnd final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class AActor*                                 Enemy;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CE8[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDistance_bResult;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CE9[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_SelectTransform_ReturnValue;              // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CEA[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CEB[0x2];                                     // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_EventOpenUserEnd) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_EventOpenUserEnd");
static_assert(sizeof(BP_BrainFieldManager_C_EventOpenUserEnd) == 0x0001B0, "Wrong size on BP_BrainFieldManager_C_EventOpenUserEnd");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, NewTransform) == 0x000000, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::NewTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, Enemy) == 0x000030, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, Temp_int_Loop_Num_Variable) == 0x00003C, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_BreakTransform_Location) == 0x000040, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_MakeVector_ReturnValue) == 0x000064, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_Add_VectorVector_ReturnValue) == 0x000070, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_BreakTransform_Location_1) == 0x0000B0, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_BreakTransform_Rotation_1) == 0x0000BC, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_BreakTransform_Scale_1) == 0x0000C8, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, Temp_int_Loop_Counter_Variable) == 0x0000D4, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_CheckDistance_bResult) == 0x0000D8, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_CheckDistance_bResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_SelectTransform_ReturnValue) == 0x0000E0, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_SelectTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_Less_IntInt_ReturnValue) == 0x000110, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000114, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000118, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0001A0, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0001A1, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventOpenUserEnd, CallFunc_Array_Length_ReturnValue) == 0x0001A4, "Member 'BP_BrainFieldManager_C_EventOpenUserEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.StartFreeCameraWatchUser
// 0x0180 (0x0180 - 0x0000)
struct BP_BrainFieldManager_C_StartFreeCameraWatchUser final
{
public:
	float                                         BlendTimeSeconds;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WatchOffset;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       Player;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface;             // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CEC[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface_1;           // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CED[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayerCameraFieldOfView_ReturnValue;   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPlayerCameraLocation_ReturnValue;      // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CEE[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CEF[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF0[0xC];                                     // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF1[0x2];                                     // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF2[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_StartFreeCameraWatchUser) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_StartFreeCameraWatchUser");
static_assert(sizeof(BP_BrainFieldManager_C_StartFreeCameraWatchUser) == 0x000180, "Wrong size on BP_BrainFieldManager_C_StartFreeCameraWatchUser");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, BlendTimeSeconds) == 0x000000, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::BlendTimeSeconds' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, WatchOffset) == 0x000004, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::WatchOffset' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, Player) == 0x000010, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, PlayerManager) == 0x000018, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, K2Node_DynamicCast_AsCamera_Interface) == 0x000020, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::K2Node_DynamicCast_AsCamera_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, K2Node_DynamicCast_AsCamera_Interface_1) == 0x000038, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::K2Node_DynamicCast_AsCamera_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetPlayerCameraFieldOfView_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetPlayerCameraFieldOfView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetPlayerCameraLocation_ReturnValue) == 0x000050, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetPlayerCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetPlayerManager_PlayerManager) == 0x000060, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetPlayer_ReturnValue) == 0x000070, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_FindLookAtRotation_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x0000C0, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x0000CC, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_IsValid_ReturnValue_1) == 0x0000E4, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_IsValid_ReturnValue_2) == 0x0000E5, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000E8, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000170, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_StartFreeCameraWatchUser, CallFunc_GetPlayerController_ReturnValue) == 0x000178, "Member 'BP_BrainFieldManager_C_StartFreeCameraWatchUser::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PlayerStopEvent
// 0x0070 (0x0070 - 0x0000)
struct BP_BrainFieldManager_C_PlayerStopEvent final
{
public:
	class ARSCharacterBase*                       Player;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               PlayerList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF3[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetPlayerList_ReturnValue;                // 0x0028(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF4[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF5[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventInterface>       K2Node_DynamicCast_AsEvent_Interface;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleSequencerStart_ReturnValue;         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PlayerStopEvent) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PlayerStopEvent");
static_assert(sizeof(BP_BrainFieldManager_C_PlayerStopEvent) == 0x000070, "Wrong size on BP_BrainFieldManager_C_PlayerStopEvent");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, Player) == 0x000000, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, PlayerList) == 0x000008, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::PlayerList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, PlayerManager) == 0x000018, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_GetPlayerList_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_GetPlayerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, Temp_int_Loop_Num_Variable) == 0x00003C, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_GetPlayerManager_PlayerManager) == 0x000050, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, K2Node_DynamicCast_AsEvent_Interface) == 0x000058, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::K2Node_DynamicCast_AsEvent_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PlayerStopEvent, CallFunc_BattleSequencerStart_ReturnValue) == 0x000069, "Member 'BP_BrainFieldManager_C_PlayerStopEvent::CallFunc_BattleSequencerStart_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateUpdateFreeCameraWatchUser
// 0x00C0 (0x00C0 - 0x0000)
struct BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraWatchZoom_Zoom;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF6[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser) == 0x0000C0, "Wrong size on BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, DeltaSeconds) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, ZoomRate) == 0x000004, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::ZoomRate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_GetCameraWatchZoom_Zoom) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_GetCameraWatchZoom_Zoom' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_Add_VectorVector_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000034, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000BC, "Member 'BP_BrainFieldManager_C_PrivateUpdateFreeCameraWatchUser::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.BrainFieldUserHoodON
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_BrainFieldUserHoodON final
{
public:
	bool                                          HoodON;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CF8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Mesh_C>           K2Node_DynamicCast_AsBPI_Mesh;                     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CF9[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetSkeletalMesh_SkeletalMesh;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CFA[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_BrainFieldUserHoodON) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_BrainFieldUserHoodON");
static_assert(sizeof(BP_BrainFieldManager_C_BrainFieldUserHoodON) == 0x000048, "Wrong size on BP_BrainFieldManager_C_BrainFieldUserHoodON");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, HoodON) == 0x000000, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::HoodON' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, K2Node_DynamicCast_AsBPI_Mesh) == 0x000018, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::K2Node_DynamicCast_AsBPI_Mesh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, CallFunc_GetSkeletalMesh_SkeletalMesh) == 0x000030, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::CallFunc_GetSkeletalMesh_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BrainFieldUserHoodON, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_BrainFieldUserHoodON::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetPlayerCameraWatchUser
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_SetPlayerCameraWatchUser final
{
public:
	struct FVector                                TargetOffset;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      Player;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CFB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetPlayerCameraWatchUser");
static_assert(sizeof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser) == 0x000048, "Wrong size on BP_BrainFieldManager_C_SetPlayerCameraWatchUser");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, TargetOffset) == 0x000000, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::TargetOffset' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, Pitch) == 0x00000C, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::Pitch' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, Player) == 0x000010, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, PlayerManager) == 0x000018, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, CallFunc_GetPlayerManager_PlayerManager) == 0x000020, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, CallFunc_GetPlayer_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, K2Node_DynamicCast_AsRSBattle_Player) == 0x000038, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetPlayerCameraWatchUser, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'BP_BrainFieldManager_C_SetPlayerCameraWatchUser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateUpdateFieldTimeColor
// 0x0040 (0x0040 - 0x0000)
struct BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrayScaleRate;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BattleManager_C*                    CallFunc_GetBattleManager_BattleManager;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CFC[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CFD[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBrainFieldTimeRate_Rate;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetENPCBrainFieldRate_Rate;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUserIsPlayer_IsPlayer;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor) == 0x000040, "Wrong size on BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, DeltaSeconds) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, GrayScaleRate) == 0x000004, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::GrayScaleRate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_GetBattleManager_BattleManager) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_GetBattleManager_BattleManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_GetBrainFieldTimeRate_Rate) == 0x00002C, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_GetBrainFieldTimeRate_Rate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_GetENPCBrainFieldRate_Rate) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_GetENPCBrainFieldRate_Rate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_IsUserIsPlayer_IsPlayer) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_IsUserIsPlayer_IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_Less_FloatFloat_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor, CallFunc_IsValid_ReturnValue_1) == 0x00003A, "Member 'BP_BrainFieldManager_C_PrivateUpdateFieldTimeColor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventReceiveBrainCrashCheckENPC
// 0x0003 (0x0003 - 0x0000)
struct BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldEndType                            CallFunc_GetEndType_EndType;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC");
static_assert(sizeof(BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC) == 0x000003, "Wrong size on BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC");
static_assert(offsetof(BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC, CallFunc_GetEndType_EndType) == 0x000001, "Member 'BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC::CallFunc_GetEndType_EndType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_BrainFieldManager_C_EventReceiveBrainCrashCheckENPC::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.UnloadENPCCheck
// 0x0028 (0x0028 - 0x0000)
struct BP_BrainFieldManager_C_UnloadENPCCheck final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CFE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_UnloadENPCCheck) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_UnloadENPCCheck");
static_assert(sizeof(BP_BrainFieldManager_C_UnloadENPCCheck) == 0x000028, "Wrong size on BP_BrainFieldManager_C_UnloadENPCCheck");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, Player) == 0x000000, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, Temp_byte_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, CallFunc_GetPlayerID_ReturnValue) == 0x000021, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UnloadENPCCheck, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'BP_BrainFieldManager_C_UnloadENPCCheck::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldUser
// 0x0008 (0x0008 - 0x0000)
struct BP_BrainFieldManager_C_GetBrainFieldUser final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_GetBrainFieldUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_GetBrainFieldUser");
static_assert(sizeof(BP_BrainFieldManager_C_GetBrainFieldUser) == 0x000008, "Wrong size on BP_BrainFieldManager_C_GetBrainFieldUser");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldUser, User) == 0x000000, "Member 'BP_BrainFieldManager_C_GetBrainFieldUser::User' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.BeginPlayerCameraWatchUser
// 0x0068 (0x0068 - 0x0000)
struct BP_BrainFieldManager_C_BeginPlayerCameraWatchUser final
{
public:
	struct FVector                                TargetOffset;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EaseTime;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CFF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      Player;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D00[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_BeginPlayerCameraWatchUser");
static_assert(sizeof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser) == 0x000068, "Wrong size on BP_BrainFieldManager_C_BeginPlayerCameraWatchUser");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, TargetOffset) == 0x000000, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::TargetOffset' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, Pitch) == 0x00000C, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::Pitch' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, EaseTime) == 0x000010, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::EaseTime' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, Player) == 0x000018, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, PlayerManager) == 0x000020, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_GetPlayerManager_PlayerManager) == 0x000028, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_GetController_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_GetControlRotation_ReturnValue) == 0x000038, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_FMax_ReturnValue) == 0x000044, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, CallFunc_GetPlayer_ReturnValue) == 0x000050, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, K2Node_DynamicCast_AsRSBattle_Player) == 0x000058, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_BeginPlayerCameraWatchUser, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_BrainFieldManager_C_BeginPlayerCameraWatchUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EndPlayerCameraWatchUser
// 0x0010 (0x0010 - 0x0000)
struct BP_BrainFieldManager_C_EndPlayerCameraWatchUser final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_EndPlayerCameraWatchUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_EndPlayerCameraWatchUser");
static_assert(sizeof(BP_BrainFieldManager_C_EndPlayerCameraWatchUser) == 0x000010, "Wrong size on BP_BrainFieldManager_C_EndPlayerCameraWatchUser");
static_assert(offsetof(BP_BrainFieldManager_C_EndPlayerCameraWatchUser, Player) == 0x000000, "Member 'BP_BrainFieldManager_C_EndPlayerCameraWatchUser::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EndPlayerCameraWatchUser, PlayerManager) == 0x000008, "Member 'BP_BrainFieldManager_C_EndPlayerCameraWatchUser::PlayerManager' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateUpdatePlayerCameraWatchUser
// 0x0098 (0x0098 - 0x0000)
struct BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D01[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      Player;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D02[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D03[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_CalcPlayerCameraToTarget_Rotation;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_REase_ReturnValue;                        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D04[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      CallFunc_SetPlayerCameraRotation_self_CastInput;   // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraRotation_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D05[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D06[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser) == 0x000098, "Wrong size on BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, DeltaSeconds) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, Player) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, PlayerManager) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_FMin_ReturnValue) == 0x00002C, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_GetController_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, K2Node_DynamicCast_AsPlayer_Controller) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_CalcPlayerCameraToTarget_Rotation) == 0x000044, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_CalcPlayerCameraToTarget_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_REase_ReturnValue) == 0x000050, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_REase_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_IsValid_ReturnValue_1) == 0x00005C, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_SetPlayerCameraRotation_self_CastInput) == 0x000060, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_SetPlayerCameraRotation_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_SetPlayerCameraRotation_ReturnValue) == 0x000070, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_SetPlayerCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_GetPlayer_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, CallFunc_IsValid_ReturnValue_2) == 0x000080, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, K2Node_DynamicCast_AsRSBattle_Player) == 0x000088, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'BP_BrainFieldManager_C_PrivateUpdatePlayerCameraWatchUser::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetVisiblePlayer
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_SetVisiblePlayer final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D07[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D08[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetPlayerList_PlayerLists;                // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D09[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D0A[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPlayerHidden_bDummy;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvokeBrainField_InvokeBrainField;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetVisiblePlayer) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetVisiblePlayer");
static_assert(sizeof(BP_BrainFieldManager_C_SetVisiblePlayer) == 0x000048, "Wrong size on BP_BrainFieldManager_C_SetVisiblePlayer");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, Visible) == 0x000000, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::Visible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_GetPlayerList_PlayerLists) == 0x000018, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_GetPlayerList_PlayerLists' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, K2Node_DynamicCast_AsRSBattle_Player) == 0x000030, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_SetPlayerHidden_bDummy) == 0x000040, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_SetPlayerHidden_bDummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisiblePlayer, CallFunc_IsInvokeBrainField_InvokeBrainField) == 0x000041, "Member 'BP_BrainFieldManager_C_SetVisiblePlayer::CallFunc_IsInvokeBrainField_InvokeBrainField' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDebugForceBrainCrashENPCOverwrite
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite");
static_assert(sizeof(BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite) == 0x000001, "Wrong size on BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite");
static_assert(offsetof(BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite, Enable) == 0x000000, "Member 'BP_BrainFieldManager_C_SetDebugForceBrainCrashENPCOverwrite::Enable' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDebugForceFieldColor
// 0x000C (0x000C - 0x0000)
struct BP_BrainFieldManager_C_SetDebugForceFieldColor final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D0B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SideColor;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Grayscale;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SetDebugForceFieldColor) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_SetDebugForceFieldColor");
static_assert(sizeof(BP_BrainFieldManager_C_SetDebugForceFieldColor) == 0x00000C, "Wrong size on BP_BrainFieldManager_C_SetDebugForceFieldColor");
static_assert(offsetof(BP_BrainFieldManager_C_SetDebugForceFieldColor, Enable) == 0x000000, "Member 'BP_BrainFieldManager_C_SetDebugForceFieldColor::Enable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetDebugForceFieldColor, SideColor) == 0x000004, "Member 'BP_BrainFieldManager_C_SetDebugForceFieldColor::SideColor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetDebugForceFieldColor, Grayscale) == 0x000008, "Member 'BP_BrainFieldManager_C_SetDebugForceFieldColor::Grayscale' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetENPCStartTransform
// 0x0030 (0x0030 - 0x0000)
struct BP_BrainFieldManager_C_SetENPCStartTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetENPCStartTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_SetENPCStartTransform");
static_assert(sizeof(BP_BrainFieldManager_C_SetENPCStartTransform) == 0x000030, "Wrong size on BP_BrainFieldManager_C_SetENPCStartTransform");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCStartTransform, Transform) == 0x000000, "Member 'BP_BrainFieldManager_C_SetENPCStartTransform::Transform' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetENPCStartTransform
// 0x0030 (0x0030 - 0x0000)
struct BP_BrainFieldManager_C_GetENPCStartTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetENPCStartTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_GetENPCStartTransform");
static_assert(sizeof(BP_BrainFieldManager_C_GetENPCStartTransform) == 0x000030, "Wrong size on BP_BrainFieldManager_C_GetENPCStartTransform");
static_assert(offsetof(BP_BrainFieldManager_C_GetENPCStartTransform, Transform) == 0x000000, "Member 'BP_BrainFieldManager_C_GetENPCStartTransform::Transform' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldUserList
// 0x0010 (0x0010 - 0x0000)
struct BP_BrainFieldManager_C_GetBrainFieldUserList final
{
public:
	TArray<class AActor*>                         User;                                              // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_GetBrainFieldUserList) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_GetBrainFieldUserList");
static_assert(sizeof(BP_BrainFieldManager_C_GetBrainFieldUserList) == 0x000010, "Wrong size on BP_BrainFieldManager_C_GetBrainFieldUserList");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldUserList, User) == 0x000000, "Member 'BP_BrainFieldManager_C_GetBrainFieldUserList::User' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetupBrainFieldUser
// 0x0140 (0x0140 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetupBrainFieldUser final
{
public:
	class AActor*                                 User;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SubUser;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldENPCType                           LDebugENPCType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D0C[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer_bPlayer;                         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D0D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D0E[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D0F[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0060(0x0018)()
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D10[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLoadENPC_Loaded;                        // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D11[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface_1;           // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_1;                // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D12[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface_2;           // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue_2;                // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D13[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D14[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetupBrainFieldUser");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser) == 0x000140, "Wrong size on BP_BrainFieldManager_C_PrivateSetupBrainFieldUser");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, User) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::User' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, SubUser) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::SubUser' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, LDebugENPCType) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::LDebugENPCType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, Temp_byte_Variable) == 0x000011, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_IsPlayer_bPlayer) == 0x000029, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_IsPlayer_bPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, Temp_byte_Variable_1) == 0x00002A, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00002B, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_AsPlayer_Interface) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_GetPlayerID_ReturnValue) == 0x000042, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_GetDisplayName_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, Temp_byte_Variable_2) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_Conv_StringToText_ReturnValue) == 0x000060, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000078, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_Format_ReturnValue) == 0x0000D0, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_Conv_TextToString_ReturnValue) == 0x0000E8, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_IsLoadENPC_Loaded) == 0x0000F8, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_IsLoadENPC_Loaded' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_AsPlayer_Interface_1) == 0x000100, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_AsPlayer_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_bSuccess_2) == 0x000110, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_GetPlayerID_ReturnValue_1) == 0x000111, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_GetPlayerID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_AsPlayer_Interface_2) == 0x000118, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_AsPlayer_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, K2Node_DynamicCast_bSuccess_3) == 0x000128, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_IsValid_ReturnValue) == 0x000129, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_GetPlayerID_ReturnValue_2) == 0x00012A, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_GetPlayerID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_IsValid_ReturnValue_1) == 0x00012B, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_BooleanAND_ReturnValue) == 0x00012C, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_Array_Add_ReturnValue) == 0x000130, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_IsValid_ReturnValue_2) == 0x000134, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetupBrainFieldUser, CallFunc_Array_Add_ReturnValue_1) == 0x000138, "Member 'BP_BrainFieldManager_C_PrivateSetupBrainFieldUser::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DebugDispEnemy
// 0x02D0 (0x02D0 - 0x0000)
struct BP_BrainFieldManager_C_DebugDispEnemy final
{
public:
	bool                                          LongAway;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D15[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             PlayerTransform;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class ARSCharacterBase*                       Player;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D16[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActorTickInterval_ReturnValue;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D17[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_DebugCheckEnemyWaveTransformNativeCollision_EnemyTransform; // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugCheckEnemyWaveTransformNativeCollision_ValidIndex; // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DebugCheckEnemyWaveTransformNativeCollision_UseCollision; // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D18[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEnemyLocationWaveNum_ReturnValue;      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D19[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_2;                // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface;             // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D1A[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetPlayerCameraRotation_ReturnValue;      // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D1B[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D1C[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1D[0x8];                                     // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetActorTickInterval_ReturnValue_1;       // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D1E[0x2];                                     // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1F[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D20[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEnemySpawn_return;                     // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D21[0x5];                                     // 0x01CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x01E0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01F8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0238(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0278(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0288(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0298(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x02B0(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_DebugDispEnemy) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_DebugDispEnemy");
static_assert(sizeof(BP_BrainFieldManager_C_DebugDispEnemy) == 0x0002D0, "Wrong size on BP_BrainFieldManager_C_DebugDispEnemy");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, LongAway) == 0x000000, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::LongAway' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, TargetLocation) == 0x000004, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, PlayerTransform) == 0x000010, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::PlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, Player) == 0x000040, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, Temp_int_Variable) == 0x000048, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, Temp_int_Loop_Num_Variable) == 0x00005C, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetActorTickInterval_ReturnValue) == 0x000064, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetActorTickInterval_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_DebugCheckEnemyWaveTransformNativeCollision_EnemyTransform) == 0x000070, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_DebugCheckEnemyWaveTransformNativeCollision_EnemyTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_DebugCheckEnemyWaveTransformNativeCollision_ValidIndex) == 0x0000A0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_DebugCheckEnemyWaveTransformNativeCollision_ValidIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_DebugCheckEnemyWaveTransformNativeCollision_UseCollision) == 0x0000A1, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_DebugCheckEnemyWaveTransformNativeCollision_UseCollision' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetEnemyLocationWaveNum_ReturnValue) == 0x0000A4, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetEnemyLocationWaveNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_SelectColor_ReturnValue) == 0x0000A8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_SelectColor_ReturnValue_1) == 0x0000BC, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_SelectColor_ReturnValue_2) == 0x0000D0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_SelectColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_BreakTransform_Location) == 0x0000E0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_BreakTransform_Rotation) == 0x0000EC, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_BreakTransform_Scale) == 0x0000F8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Add_VectorVector_ReturnValue) == 0x000104, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_DynamicCast_AsCamera_Interface) == 0x000110, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_DynamicCast_AsCamera_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000124, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetPlayerCameraRotation_ReturnValue) == 0x000130, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetPlayerCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetPlayerManager_PlayerManager) == 0x000140, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000148, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetPlayer_ReturnValue) == 0x000150, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_MakeTransform_ReturnValue) == 0x000160, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetActorTickInterval_ReturnValue_1) == 0x000190, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetActorTickInterval_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, Temp_int_Variable_1) == 0x000194, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000198, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00019C, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00019D, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001A0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetDebuggingManager_Manager) == 0x0001A8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_IsValid_ReturnValue_2) == 0x0001B0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x0001B8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_DynamicCast_bSuccess_1) == 0x0001C8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetEnemySpawn_return) == 0x0001C9, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetEnemySpawn_return' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_IsValid_ReturnValue_3) == 0x0001CA, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_GetDisplayName_ReturnValue) == 0x0001D0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Conv_StringToText_ReturnValue) == 0x0001E0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_MakeStruct_FormatArgumentData) == 0x0001F8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_MakeStruct_FormatArgumentData_1) == 0x000238, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_MakeArray_Array) == 0x000278, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, K2Node_MakeArray_Array_1) == 0x000288, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Format_ReturnValue) == 0x000298, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Format_ReturnValue_1) == 0x0002B0, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugDispEnemy, CallFunc_Array_Length_ReturnValue) == 0x0002C8, "Member 'BP_BrainFieldManager_C_DebugDispEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateOnSpawnBrainFieldBGEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect final
{
public:
	class UBP_RSParticleBackgroundComponent_C*    Emitter;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect) == 0x000010, "Wrong size on BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect, Emitter) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect::Emitter' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateOnSpawnBrainFieldBGEffect::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ReloadPlayerSequencer
// 0x0007 (0x0007 - 0x0000)
struct BP_BrainFieldManager_C_ReloadPlayerSequencer final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldSequencerType                      Type;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldSequencerType                      Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldSequencerType                      Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBrainFieldSequencerType                      K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ReloadPlayerSequencer) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_ReloadPlayerSequencer");
static_assert(sizeof(BP_BrainFieldManager_C_ReloadPlayerSequencer) == 0x000007, "Wrong size on BP_BrainFieldManager_C_ReloadPlayerSequencer");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, PlayerId) == 0x000000, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, Type) == 0x000001, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::Type' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, Temp_bool_Variable) == 0x000002, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, Temp_byte_Variable) == 0x000003, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, Temp_byte_Variable_1) == 0x000004, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ReloadPlayerSequencer, K2Node_Select_Default) == 0x000006, "Member 'BP_BrainFieldManager_C_ReloadPlayerSequencer::K2Node_Select_Default' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.VisibleNormalParticles
// 0x00F8 (0x00F8 - 0x0000)
struct BP_BrainFieldManager_C_VisibleNormalParticles final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D22[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_RSParticleBackgroundComponent_C*> ParticleList;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FBrainFieldRestoreFlag                 RestoreFlag;                                       // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FBrainFieldRestoreFlag                 SetRestoreFlag;                                    // 0x0040(0x0028)(Parm, OutParm)
	int32                                         Param_Index;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D23[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RSParticleBackgroundComponent_C*    Particle;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flag;                                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D24[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PrimitiveComponentFlags;                           // 0x0080(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D25[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D26[0x5];                                     // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBrainFieldRestoreFlag                 K2Node_MakeStruct_BrainFieldRestoreFlag;           // 0x00B8(0x0028)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_VisibleNormalParticles) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_VisibleNormalParticles");
static_assert(sizeof(BP_BrainFieldManager_C_VisibleNormalParticles) == 0x0000F8, "Wrong size on BP_BrainFieldManager_C_VisibleNormalParticles");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, IsVisible) == 0x000000, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::IsVisible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, ParticleList) == 0x000008, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::ParticleList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, RestoreFlag) == 0x000018, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::RestoreFlag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, SetRestoreFlag) == 0x000040, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::SetRestoreFlag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Param_Index) == 0x000068, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Particle) == 0x000070, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Particle' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Flag) == 0x000078, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Flag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, PrimitiveComponentFlags) == 0x000080, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::PrimitiveComponentFlags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Temp_int_Loop_Num_Variable) == 0x000090, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Temp_int_Loop_Counter_Variable_1) == 0x000098, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A4, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Temp_int_Array_Index_Variable) == 0x0000A8, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Temp_int_Loop_Num_Variable_1) == 0x0000AC, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B0, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_IsValid_ReturnValue_1) == 0x0000B2, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, K2Node_MakeStruct_BrainFieldRestoreFlag) == 0x0000B8, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::K2Node_MakeStruct_BrainFieldRestoreFlag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, Temp_int_Array_Index_Variable_1) == 0x0000E4, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Array_Length_ReturnValue_1) == 0x0000E8, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Array_Length_ReturnValue_2) == 0x0000EC, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_VisibleNormalParticles, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F0, "Member 'BP_BrainFieldManager_C_VisibleNormalParticles::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetVisibleEnemy
// 0x0040 (0x0040 - 0x0000)
struct BP_BrainFieldManager_C_SetVisibleEnemy final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D27[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEventManagerInterface> K2Node_DynamicCast_AsEvent_Manager_Interface;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D28[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventManagerInterface> K2Node_DynamicCast_AsEvent_Manager_Interface_1;    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerEnd_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventManagerStart_ReturnValue;            // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetVisibleEnemy) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetVisibleEnemy");
static_assert(sizeof(BP_BrainFieldManager_C_SetVisibleEnemy) == 0x000040, "Wrong size on BP_BrainFieldManager_C_SetVisibleEnemy");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, Visible) == 0x000000, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::Visible' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, CallFunc_GetEnemyManager_EnemyManager) == 0x000008, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, K2Node_DynamicCast_AsEvent_Manager_Interface) == 0x000010, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::K2Node_DynamicCast_AsEvent_Manager_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, K2Node_DynamicCast_AsEvent_Manager_Interface_1) == 0x000028, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::K2Node_DynamicCast_AsEvent_Manager_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, CallFunc_EventManagerEnd_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::CallFunc_EventManagerEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, CallFunc_EventManagerStart_ReturnValue) == 0x00003A, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::CallFunc_EventManagerStart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetVisibleEnemy, CallFunc_IsValid_ReturnValue) == 0x00003B, "Member 'BP_BrainFieldManager_C_SetVisibleEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetTimePostRate
// 0x0020 (0x0020 - 0x0000)
struct BP_BrainFieldManager_C_SetTimePostRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D29[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D2A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetTimePostRate) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetTimePostRate");
static_assert(sizeof(BP_BrainFieldManager_C_SetTimePostRate) == 0x000020, "Wrong size on BP_BrainFieldManager_C_SetTimePostRate");
static_assert(offsetof(BP_BrainFieldManager_C_SetTimePostRate, Rate) == 0x000000, "Member 'BP_BrainFieldManager_C_SetTimePostRate::Rate' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetTimePostRate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_BrainFieldManager_C_SetTimePostRate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetTimePostRate, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_BrainFieldManager_C_SetTimePostRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetTimePostRate, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_SetTimePostRate::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetTimePostRate, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000010, "Member 'BP_BrainFieldManager_C_SetTimePostRate::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.HiddenNearBG
// 0x00D0 (0x00D0 - 0x0000)
struct BP_BrainFieldManager_C_HiddenNearBG final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D2B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    PrimitiveComp;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       MainPlayer;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D2C[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D2D[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0080(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D2E[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            CallFunc_SphereOverlapComponents_OutComponents;    // 0x00A8(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_SphereOverlapComponents_ReturnValue;      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D2F[0x2];                                     // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D30[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_HiddenNearBG) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_HiddenNearBG");
static_assert(sizeof(BP_BrainFieldManager_C_HiddenNearBG) == 0x0000D0, "Wrong size on BP_BrainFieldManager_C_HiddenNearBG");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, Param_Index) == 0x000000, "Member 'BP_BrainFieldManager_C_HiddenNearBG::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, PrimitiveComp) == 0x000008, "Member 'BP_BrainFieldManager_C_HiddenNearBG::PrimitiveComp' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, MainPlayer) == 0x000010, "Member 'BP_BrainFieldManager_C_HiddenNearBG::MainPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_HiddenNearBG::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_BrainFieldManager_C_HiddenNearBG::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'BP_BrainFieldManager_C_HiddenNearBG::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, Temp_int_Variable) == 0x000038, "Member 'BP_BrainFieldManager_C_HiddenNearBG::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_GetCameraLocation_ReturnValue) == 0x00003C, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, K2Node_MakeArray_Array) == 0x000048, "Member 'BP_BrainFieldManager_C_HiddenNearBG::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_IsValid_ReturnValue_1) == 0x000064, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000074, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, K2Node_MakeArray_Array_1) == 0x000080, "Member 'BP_BrainFieldManager_C_HiddenNearBG::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Add_VectorVector_ReturnValue) == 0x000090, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_GetPlayerManager_PlayerManager) == 0x0000A0, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_SphereOverlapComponents_OutComponents) == 0x0000A8, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_SphereOverlapComponents_OutComponents' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_SphereOverlapComponents_ReturnValue) == 0x0000B8, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_SphereOverlapComponents_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_IsValid_ReturnValue_2) == 0x0000B9, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Array_Length_ReturnValue) == 0x0000BC, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_Array_Length_ReturnValue_1) == 0x0000C0, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HiddenNearBG, CallFunc_GetPlayer_ReturnValue) == 0x0000C8, "Member 'BP_BrainFieldManager_C_HiddenNearBG::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.RestoreVisibleNearBG
// 0x0028 (0x0028 - 0x0000)
struct BP_BrainFieldManager_C_RestoreVisibleNearBG final
{
public:
	class UPrimitiveComponent*                    PrimitiveComp;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D31[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D32[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_RestoreVisibleNearBG) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_RestoreVisibleNearBG");
static_assert(sizeof(BP_BrainFieldManager_C_RestoreVisibleNearBG) == 0x000028, "Wrong size on BP_BrainFieldManager_C_RestoreVisibleNearBG");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, PrimitiveComp) == 0x000000, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::PrimitiveComp' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RestoreVisibleNearBG, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_RestoreVisibleNearBG::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.CheckCustomCollision
// 0x0470 (0x0470 - 0x0000)
struct BP_BrainFieldManager_C_CheckCustomCollision final
{
public:
	struct FBrainFieldSettingsLocation            K2Node_MakeStruct_BrainFieldSettingsLocation;      // 0x0000(0x0220)(NoDestructor)
	class ABP_EnemyManager_C*                     CallFunc_GetEnemyManager_Manager;                  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D33[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyList_ReturnValue;                 // 0x0230(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FBrainFieldSettingsLocation            CallFunc_GetLocationSettings_OutSettings;          // 0x0240(0x0220)(NoDestructor)
	bool                                          CallFunc_GetLocationSettings_ReturnValue;          // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0462(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D34[0x1];                                     // 0x0463(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0464(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x046C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_CheckCustomCollision) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_CheckCustomCollision");
static_assert(sizeof(BP_BrainFieldManager_C_CheckCustomCollision) == 0x000470, "Wrong size on BP_BrainFieldManager_C_CheckCustomCollision");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, K2Node_MakeStruct_BrainFieldSettingsLocation) == 0x000000, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::K2Node_MakeStruct_BrainFieldSettingsLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_GetEnemyManager_Manager) == 0x000220, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_GetEnemyManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_IsValid_ReturnValue) == 0x000228, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_GetEnemyList_ReturnValue) == 0x000230, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_GetEnemyList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_GetLocationSettings_OutSettings) == 0x000240, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_GetLocationSettings_OutSettings' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_GetLocationSettings_ReturnValue) == 0x000460, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_GetLocationSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, Temp_bool_Variable) == 0x000461, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_NotEqual_NameName_ReturnValue) == 0x000462, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, K2Node_Select_Default) == 0x000464, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_CheckCustomCollision, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x00046C, "Member 'BP_BrainFieldManager_C_CheckCustomCollision::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetBrainFieldPlayerTransformCustomCollision
// 0x02F0 (0x02F0 - 0x0000)
struct BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	struct FTransform                             RightPlayerTransform;                              // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             LeftPlayerTransform;                               // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             MainPlayerTransform;                               // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D35[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D36[0xC];                                     // 0x0174(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetBrainFieldRightPlayerLocation_Transform; // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBrainFieldLeftPlayerLocation_Transform; // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_3; // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D37[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0260(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D38[0xC];                                     // 0x02B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_4;              // 0x02C0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision");
static_assert(sizeof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision) == 0x0002F0, "Wrong size on BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, Transforms) == 0x000000, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::Transforms' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, RightPlayerTransform) == 0x000010, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::RightPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, LeftPlayerTransform) == 0x000040, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::LeftPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, MainPlayerTransform) == 0x000070, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::MainPlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Rotation) == 0x0000AC, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Scale) == 0x0000B8, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Location_1) == 0x0000C4, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Rotation_1) == 0x0000D0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Scale_1) == 0x0000DC, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Location_2) == 0x0000E8, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Rotation_2) == 0x0000F4, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Scale_2) == 0x000100, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, K2Node_MakeArray_Array) == 0x000110, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Location_3) == 0x000120, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Rotation_3) == 0x00012C, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Scale_3) == 0x000138, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000144, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000150, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00015C, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000168, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_MakeTransform_ReturnValue_1) == 0x0001B0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_GetBrainFieldRightPlayerLocation_Transform) == 0x0001E0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_GetBrainFieldRightPlayerLocation_Transform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_GetBrainFieldLeftPlayerLocation_Transform) == 0x0001EC, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_GetBrainFieldLeftPlayerLocation_Transform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x0001F8, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_GreaterGreater_VectorRotator_ReturnValue_3) == 0x000204, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_GreaterGreater_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_Add_VectorVector_ReturnValue) == 0x000210, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00021C, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_MakeTransform_ReturnValue_2) == 0x000230, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_MakeTransform_ReturnValue_3) == 0x000260, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Location_4) == 0x000290, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Rotation_4) == 0x00029C, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_BreakTransform_Scale_4) == 0x0002A8, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision, CallFunc_MakeTransform_ReturnValue_4) == 0x0002C0, "Member 'BP_BrainFieldManager_C_GetBrainFieldPlayerTransformCustomCollision::CallFunc_MakeTransform_ReturnValue_4' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivatePostLoadCollisionLevel
// 0x0080 (0x0080 - 0x0000)
struct BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel final
{
public:
	class ULevelStreaming*                        CollisionLevel;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D39[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D3A[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel");
static_assert(sizeof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel) == 0x000080, "Wrong size on BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CollisionLevel) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CollisionLevel' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_BreakTransform_Location) == 0x00000C, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_BreakTransform_Rotation) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_BreakTransform_Scale) == 0x000024, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel, CallFunc_GetStreamingLevel_ReturnValue) == 0x000070, "Member 'BP_BrainFieldManager_C_PrivatePostLoadCollisionLevel::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Update ENPCSequence Time
// 0x0060 (0x0060 - 0x0000)
struct BP_BrainFieldManager_C_Update_ENPCSequence_Time final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D3B[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D3C[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_Update_ENPCSequence_Time) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_Update_ENPCSequence_Time");
static_assert(sizeof(BP_BrainFieldManager_C_Update_ENPCSequence_Time) == 0x000060, "Wrong size on BP_BrainFieldManager_C_Update_ENPCSequence_Time");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, Temp_int_Loop_Num_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Update_ENPCSequence_Time, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_BrainFieldManager_C_Update_ENPCSequence_Time::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.HasSeamlessEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_BrainFieldManager_C_HasSeamlessEvent final
{
public:
	bool                                          HasEvent;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidEventCommandTypeAtBrainField_IsValid; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_HasSeamlessEvent) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_HasSeamlessEvent");
static_assert(sizeof(BP_BrainFieldManager_C_HasSeamlessEvent) == 0x000002, "Wrong size on BP_BrainFieldManager_C_HasSeamlessEvent");
static_assert(offsetof(BP_BrainFieldManager_C_HasSeamlessEvent, HasEvent) == 0x000000, "Member 'BP_BrainFieldManager_C_HasSeamlessEvent::HasEvent' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_HasSeamlessEvent, CallFunc_IsValidEventCommandTypeAtBrainField_IsValid) == 0x000001, "Member 'BP_BrainFieldManager_C_HasSeamlessEvent::CallFunc_IsValidEventCommandTypeAtBrainField_IsValid' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDamageStep
// 0x0008 (0x0008 - 0x0000)
struct BP_BrainFieldManager_C_SetDamageStep final
{
public:
	int32                                         Step;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetDamageStep) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_SetDamageStep");
static_assert(sizeof(BP_BrainFieldManager_C_SetDamageStep) == 0x000008, "Wrong size on BP_BrainFieldManager_C_SetDamageStep");
static_assert(offsetof(BP_BrainFieldManager_C_SetDamageStep, Step) == 0x000000, "Member 'BP_BrainFieldManager_C_SetDamageStep::Step' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetDamageStep, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_BrainFieldManager_C_SetDamageStep::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.UndoENpcDriveSetting
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_UndoENpcDriveSetting final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D3D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> CallFunc_GetEnpcComp_self_CastInput;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_ENpcComponent_C*                    CallFunc_GetEnpcComp_ReturnComp;                   // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      CallFunc_GetPlayerID_self_CastInput;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReadyDriveWithCancel_IsReadyDrive;      // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_UndoENpcDriveSetting) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_UndoENpcDriveSetting");
static_assert(sizeof(BP_BrainFieldManager_C_UndoENpcDriveSetting) == 0x000048, "Wrong size on BP_BrainFieldManager_C_UndoENpcDriveSetting");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, Actor) == 0x000000, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::Actor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, K2Node_DynamicCast_AsRSBattle_Player) == 0x000008, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_GetEnpcComp_self_CastInput) == 0x000018, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_GetEnpcComp_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_GetEnpcComp_ReturnComp) == 0x000028, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_GetEnpcComp_ReturnComp' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_GetPlayerID_self_CastInput) == 0x000030, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_GetPlayerID_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_GetPlayerID_ReturnValue) == 0x000040, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000042, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_IsReadyDriveWithCancel_IsReadyDrive) == 0x000043, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_IsReadyDriveWithCancel_IsReadyDrive' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_BooleanOR_ReturnValue) == 0x000044, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_IsValid_ReturnValue) == 0x000045, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_UndoENpcDriveSetting, CallFunc_IsValid_ReturnValue_1) == 0x000046, "Member 'BP_BrainFieldManager_C_UndoENpcDriveSetting::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupEnemyWaveTransform
// 0x0110 (0x0110 - 0x0000)
struct BP_BrainFieldManager_C_SetupEnemyWaveTransform final
{
public:
	TArray<class ARSBattleCharacter_C*>           WaveEnemyList;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FTransform                             PlayerTransform;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class ARSCharacterBase*                       Player;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FBrainFieldWaveEnemyFlag>       Param_Flags;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ARSBattleCharacter_C*                   Enemy;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D3E[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D3F[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D40[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICameraInterface>      K2Node_DynamicCast_AsCamera_Interface;             // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D41[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetPlayerCameraRotation_ReturnValue;      // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D42[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D43[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBrainFieldWaveEnemyFlag               K2Node_MakeStruct_BrainFieldWaveEnemyFlag;         // 0x0100(0x0008)(NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupEnemyWaveTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_SetupEnemyWaveTransform");
static_assert(sizeof(BP_BrainFieldManager_C_SetupEnemyWaveTransform) == 0x000110, "Wrong size on BP_BrainFieldManager_C_SetupEnemyWaveTransform");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, WaveEnemyList) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::WaveEnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, PlayerTransform) == 0x000010, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::PlayerTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, Player) == 0x000040, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, Param_Flags) == 0x000048, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::Param_Flags' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, Enemy) == 0x000058, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, Temp_int_Array_Index_Variable) == 0x000064, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, Temp_int_Loop_Num_Variable) == 0x000070, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, K2Node_DynamicCast_AsCamera_Interface) == 0x000080, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::K2Node_DynamicCast_AsCamera_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_GetPlayerCameraRotation_ReturnValue) == 0x000094, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_GetPlayerCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A0, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_MakeTransform_ReturnValue) == 0x0000B0, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_GetPlayerManager_PlayerManager) == 0x0000E0, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_IsValid_ReturnValue_1) == 0x0000E8, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_GetPlayer_ReturnValue) == 0x0000F0, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_Array_Length_ReturnValue_1) == 0x0000F8, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, CallFunc_Array_Length_ReturnValue_2) == 0x0000FC, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupEnemyWaveTransform, K2Node_MakeStruct_BrainFieldWaveEnemyFlag) == 0x000100, "Member 'BP_BrainFieldManager_C_SetupEnemyWaveTransform::K2Node_MakeStruct_BrainFieldWaveEnemyFlag' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupBrainFieldMaterial
// 0x0030 (0x0030 - 0x0000)
struct BP_BrainFieldManager_C_SetupBrainFieldMaterial final
{
public:
	ERSPartyPlayerKind                            Kind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D44[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       NewPlayer;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D45[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerManager*                         CallFunc_GetPlayerManager_PlayerManager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D46[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupBrainFieldMaterial) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetupBrainFieldMaterial");
static_assert(sizeof(BP_BrainFieldManager_C_SetupBrainFieldMaterial) == 0x000030, "Wrong size on BP_BrainFieldManager_C_SetupBrainFieldMaterial");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, Kind) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::Kind' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, NewPlayer) == 0x000008, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::NewPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, CallFunc_GetPlayerManager_PlayerManager) == 0x000018, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupBrainFieldMaterial, CallFunc_GetPlayer_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_SetupBrainFieldMaterial::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInvokeBrainField_FromNative
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsInvokeBrainField_FromNative final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsInvokeBrainField_FromNative) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsInvokeBrainField_FromNative");
static_assert(sizeof(BP_BrainFieldManager_C_IsInvokeBrainField_FromNative) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsInvokeBrainField_FromNative");
static_assert(offsetof(BP_BrainFieldManager_C_IsInvokeBrainField_FromNative, ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_IsInvokeBrainField_FromNative::ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateCheckUseSpawnPsychicObject
// 0x0020 (0x0020 - 0x0000)
struct BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject final
{
public:
	bool                                          UseSpawn;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D47[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayerID                                     CallFunc_GetPlayerID_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject) == 0x000020, "Wrong size on BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject, UseSpawn) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject::UseSpawn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject, Temp_byte_Variable) == 0x000001, "Member 'BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject, K2Node_DynamicCast_AsPlayer_Interface) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject, CallFunc_GetPlayerID_ReturnValue) == 0x000019, "Member 'BP_BrainFieldManager_C_PrivateCheckUseSpawnPsychicObject::CallFunc_GetPlayerID_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetUserIsPlayer
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_GetUserIsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetUserIsPlayer) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_GetUserIsPlayer");
static_assert(sizeof(BP_BrainFieldManager_C_GetUserIsPlayer) == 0x000001, "Wrong size on BP_BrainFieldManager_C_GetUserIsPlayer");
static_assert(offsetof(BP_BrainFieldManager_C_GetUserIsPlayer, ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_GetUserIsPlayer::ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateLoadLevelVisible
// 0x0030 (0x0030 - 0x0000)
struct BP_BrainFieldManager_C_PrivateLoadLevelVisible final
{
public:
	class ULevelStreaming*                        NavimeshLevel;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        CollisionLevel;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D48[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelVisible_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D49[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue_1;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateLoadLevelVisible) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateLoadLevelVisible");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateLoadLevelVisible) == 0x000030, "Wrong size on BP_BrainFieldManager_C_PrivateLoadLevelVisible");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, NavimeshLevel) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::NavimeshLevel' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, CollisionLevel) == 0x000008, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::CollisionLevel' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, CallFunc_GetStreamingLevel_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, CallFunc_IsLevelVisible_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::CallFunc_IsLevelVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateLoadLevelVisible, CallFunc_GetStreamingLevel_ReturnValue_1) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateLoadLevelVisible::CallFunc_GetStreamingLevel_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventCheckUsePsychicSpawn
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_EventCheckUsePsychicSpawn final
{
public:
	bool                                          CallFunc_PrivateCheckUseSpawnPsychicObject_UseSpawn; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_EventCheckUsePsychicSpawn) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_EventCheckUsePsychicSpawn");
static_assert(sizeof(BP_BrainFieldManager_C_EventCheckUsePsychicSpawn) == 0x000001, "Wrong size on BP_BrainFieldManager_C_EventCheckUsePsychicSpawn");
static_assert(offsetof(BP_BrainFieldManager_C_EventCheckUsePsychicSpawn, CallFunc_PrivateCheckUseSpawnPsychicObject_UseSpawn) == 0x000000, "Member 'BP_BrainFieldManager_C_EventCheckUsePsychicSpawn::CallFunc_PrivateCheckUseSpawnPsychicObject_UseSpawn' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetENPCCustomStencil
// 0x0020 (0x0020 - 0x0000)
struct BP_BrainFieldManager_C_SetENPCCustomStencil final
{
public:
	bool                                          Set;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D4A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D4B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D4C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SetENPCCustomStencil) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_SetENPCCustomStencil");
static_assert(sizeof(BP_BrainFieldManager_C_SetENPCCustomStencil) == 0x000020, "Wrong size on BP_BrainFieldManager_C_SetENPCCustomStencil");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, Set) == 0x000000, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::Set' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, Temp_int_Loop_Num_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetENPCCustomStencil, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_SetENPCCustomStencil::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.InBranField_FromNative
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_InBranField_FromNative final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_InBranField_FromNative) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_InBranField_FromNative");
static_assert(sizeof(BP_BrainFieldManager_C_InBranField_FromNative) == 0x000001, "Wrong size on BP_BrainFieldManager_C_InBranField_FromNative");
static_assert(offsetof(BP_BrainFieldManager_C_InBranField_FromNative, ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_InBranField_FromNative::ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsPerformanceSequencer_FromNative
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative");
static_assert(sizeof(BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative");
static_assert(offsetof(BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative, ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_IsPerformanceSequencer_FromNative::ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PlayPerformSequencerInternal
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_PlayPerformSequencerInternal final
{
public:
	bool                                          UseRefresh;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PlayPerformSequencerInternal) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_PlayPerformSequencerInternal");
static_assert(sizeof(BP_BrainFieldManager_C_PlayPerformSequencerInternal) == 0x000001, "Wrong size on BP_BrainFieldManager_C_PlayPerformSequencerInternal");
static_assert(offsetof(BP_BrainFieldManager_C_PlayPerformSequencerInternal, UseRefresh) == 0x000000, "Member 'BP_BrainFieldManager_C_PlayPerformSequencerInternal::UseRefresh' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.DebugSetMonitorIndex
// 0x0020 (0x0020 - 0x0000)
struct BP_BrainFieldManager_C_DebugSetMonitorIndex final
{
public:
	EPlayerID                                     Param_Index;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D4D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BrainFieldMonitor_C> K2Node_DynamicCast_AsBPI_Brain_Field_Monitor;      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_DebugSetMonitorIndex) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_DebugSetMonitorIndex");
static_assert(sizeof(BP_BrainFieldManager_C_DebugSetMonitorIndex) == 0x000020, "Wrong size on BP_BrainFieldManager_C_DebugSetMonitorIndex");
static_assert(offsetof(BP_BrainFieldManager_C_DebugSetMonitorIndex, Param_Index) == 0x000000, "Member 'BP_BrainFieldManager_C_DebugSetMonitorIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugSetMonitorIndex, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_BrainFieldManager_C_DebugSetMonitorIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugSetMonitorIndex, K2Node_DynamicCast_AsBPI_Brain_Field_Monitor) == 0x000008, "Member 'BP_BrainFieldManager_C_DebugSetMonitorIndex::K2Node_DynamicCast_AsBPI_Brain_Field_Monitor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_DebugSetMonitorIndex, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BrainFieldManager_C_DebugSetMonitorIndex::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetDelayedBattleFieldEnemyEnabled
// 0x0008 (0x0008 - 0x0000)
struct BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled final
{
public:
	int32                                         GroupID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBossInBattleField;                               // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled) == 0x000004, "Wrong alignment on BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled");
static_assert(sizeof(BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled) == 0x000008, "Wrong size on BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled");
static_assert(offsetof(BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled, GroupID) == 0x000000, "Member 'BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled::GroupID' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled, IsBossInBattleField) == 0x000004, "Member 'BP_BrainFieldManager_C_SetDelayedBattleFieldEnemyEnabled::IsBossInBattleField' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupJumpBFEnemyAvatar
// 0x03B0 (0x03B0 - 0x0000)
struct BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar final
{
public:
	bool                                          Break;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D4E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TrainEnemy;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EnemyMetamorphosis;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       Enemy;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARSCharacterBase*>               AddedEnemyList;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class AActor*                                 AvatarOwner;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Find;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D4F[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EnemyReal;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       EnemyAvatar;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D50[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D51[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D52[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D53[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D54[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D55[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D56[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D57[0x1];                                     // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D58[0x2];                                     // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy;               // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatar_IsAvatar;                        // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D59[0x5];                                     // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5A[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarOwner_AvatarOwner;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface;          // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldCutChange_Dummy;         // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5B[0x5];                                     // 0x0113(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field;              // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_3;        // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5C[0x6];                                     // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  K2Node_DynamicCast_AsBPI_ENpc_Interface;           // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5D[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  K2Node_DynamicCast_AsBPI_ENpc_Interface_1;         // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Em8010_IsMetamorphosis_Disappear_bDisappear; // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Em8010_IsMetamophosis_BaseChara_bIsMetamorphosis; // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5E[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5F[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D60[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  K2Node_DynamicCast_AsBPI_ENpc_Interface_2;         // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D61[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  K2Node_DynamicCast_AsBPI_ENpc_Interface_3;         // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Em8010_IsMetamorphosis_Appear_bAppear;    // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Em8010_IsMetamophosis_ChangeChara_bIsMetamorphosis; // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D62[0xC];                                     // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x01B0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D63[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_1;        // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldCutChange_Dummy_1;       // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D64[0x5];                                     // 0x01FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BrainField_C>     K2Node_DynamicCast_AsBPI_Brain_Field_1;            // 0x0200(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D65[0x2];                                     // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer_1;             // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D66[0x6];                                     // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyInterface_C> K2Node_DynamicCast_AsBPI_Enemy_Interface_2;        // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnEnemyBrainFieldCutChange_Dummy_2;       // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D67[0x2];                                     // 0x0242(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D68[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleEnemy_C*                       K2Node_DynamicCast_AsRSBattle_Enemy_1;             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D69[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D6A[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D6B[0x6];                                     // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D6C[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyListRef_ReturnValue;              // 0x0290(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D6D[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_ObjectToText_ReturnValue;            // 0x02A8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x02C0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_ObjectToText_ReturnValue_1;          // 0x0300(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0318(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_5;                      // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D6E[0x4];                                     // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0360(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D6F[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0378(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D70[0x2];                                     // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           Temp_object_Variable;                              // 0x0398(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D71[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar");
static_assert(sizeof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar) == 0x0003B0, "Wrong size on BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Break) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Break' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, TrainEnemy) == 0x000008, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::TrainEnemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, EnemyMetamorphosis) == 0x000010, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::EnemyMetamorphosis' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Enemy) == 0x000018, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, AddedEnemyList) == 0x000020, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::AddedEnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, AvatarOwner) == 0x000030, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::AvatarOwner' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Find) == 0x000038, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Find' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, EnemyReal) == 0x000040, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::EnemyReal' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, EnemyAvatar) == 0x000048, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::EnemyAvatar' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_bool_True_if_break_was_hit_Variable) == 0x00005C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Not_PreBool_ReturnValue) == 0x00005D, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Num_Variable) == 0x000060, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Num_Variable_1) == 0x000064, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Counter_Variable_1) == 0x00006C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000074, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Array_Index_Variable_1) == 0x000078, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Not_PreBool_ReturnValue_1) == 0x00007C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Num_Variable_2) == 0x000080, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Counter_Variable_2) == 0x000084, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Add_IntInt_ReturnValue_2) == 0x00008C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Counter_Variable_3) == 0x000094, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Add_IntInt_ReturnValue_3) == 0x000098, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Array_Index_Variable_2) == 0x00009C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Num_Variable_3) == 0x0000A0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000A4, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Array_Index_Variable_3) == 0x0000A8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Num_Variable_4) == 0x0000AC, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000B0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B2, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Array_Index_Variable_4) == 0x0000B4, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Counter_Variable_4) == 0x0000B8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000BC, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_bool_True_if_break_was_hit_Variable_2) == 0x0000C0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000C1, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Length_ReturnValue) == 0x0000C4, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsRSBattle_Enemy) == 0x0000C8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsRSBattle_Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue_1) == 0x0000D1, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsAvatar_IsAvatar) == 0x0000D2, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsAvatar_IsAvatar' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x0000D8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x0000E9, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_GetAvatarOwner_AvatarOwner) == 0x0000F0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_GetAvatarOwner_AvatarOwner' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Add_ReturnValue) == 0x0000F8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Add_ReturnValue_1) == 0x0000FC, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Enemy_Interface) == 0x000100, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Enemy_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_2) == 0x000110, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_OnEnemyBrainFieldCutChange_Dummy) == 0x000111, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_OnEnemyBrainFieldCutChange_Dummy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Not_PreBool_ReturnValue_3) == 0x000112, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Brain_Field) == 0x000118, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Brain_Field' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_3) == 0x000128, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_bool_True_if_break_was_hit_Variable_3) == 0x000129, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_ENpc_Interface) == 0x000130, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_ENpc_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_4) == 0x000140, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_ENpc_Interface_1) == 0x000148, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_ENpc_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_5) == 0x000158, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Em8010_IsMetamorphosis_Disappear_bDisappear) == 0x000159, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Em8010_IsMetamorphosis_Disappear_bDisappear' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Em8010_IsMetamophosis_BaseChara_bIsMetamorphosis) == 0x00015A, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Em8010_IsMetamophosis_BaseChara_bIsMetamorphosis' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_BooleanOR_ReturnValue) == 0x00015B, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Not_PreBool_ReturnValue_4) == 0x00015C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Counter_Variable_5) == 0x000160, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Length_ReturnValue_1) == 0x000164, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_4) == 0x000168, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Add_IntInt_ReturnValue_5) == 0x00016C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_BooleanAND_ReturnValue_2) == 0x000170, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_ENpc_Interface_2) == 0x000178, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_ENpc_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_6) == 0x000188, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_ENpc_Interface_3) == 0x000190, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_ENpc_Interface_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_7) == 0x0001A0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Em8010_IsMetamorphosis_Appear_bAppear) == 0x0001A1, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Em8010_IsMetamorphosis_Appear_bAppear' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Em8010_IsMetamophosis_ChangeChara_bIsMetamorphosis) == 0x0001A2, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Em8010_IsMetamophosis_ChangeChara_bIsMetamorphosis' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_BooleanOR_ReturnValue_1) == 0x0001A3, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_GetTransform_ReturnValue) == 0x0001B0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Add_ReturnValue_2) == 0x0001E0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Enemy_Interface_1) == 0x0001E8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Enemy_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_8) == 0x0001F8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_OnEnemyBrainFieldCutChange_Dummy_1) == 0x0001F9, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_OnEnemyBrainFieldCutChange_Dummy_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Not_PreBool_ReturnValue_5) == 0x0001FA, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Brain_Field_1) == 0x000200, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Brain_Field_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_9) == 0x000210, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue_2) == 0x000211, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Add_ReturnValue_3) == 0x000214, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x000218, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_10) == 0x000228, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsEnemyPlayer_bEnemyPlayer_1) == 0x000229, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsEnemyPlayer_bEnemyPlayer_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsBPI_Enemy_Interface_2) == 0x000230, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsBPI_Enemy_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_11) == 0x000240, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_OnEnemyBrainFieldCutChange_Dummy_2) == 0x000241, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_OnEnemyBrainFieldCutChange_Dummy_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Add_ReturnValue_4) == 0x000244, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Array_Index_Variable_5) == 0x000248, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Add_ReturnValue_5) == 0x00024C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue_3) == 0x000250, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_AsRSBattle_Enemy_1) == 0x000258, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_AsRSBattle_Enemy_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_DynamicCast_bSuccess_12) == 0x000260, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Find_ReturnValue) == 0x000264, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Length_ReturnValue_2) == 0x000268, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00026C, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Find_ReturnValue_1) == 0x000270, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Find_ReturnValue_2) == 0x000274, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_5) == 0x000278, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_6) == 0x000279, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_GetEnemyManager_EnemyManager) == 0x000280, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue_4) == 0x000288, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_GetEnemyListRef_ReturnValue) == 0x000290, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_GetEnemyListRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Length_ReturnValue_3) == 0x0002A0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0002A4, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Conv_ObjectToText_ReturnValue) == 0x0002A8, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Conv_ObjectToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_MakeStruct_FormatArgumentData) == 0x0002C0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Conv_ObjectToText_ReturnValue_1) == 0x000300, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Conv_ObjectToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_MakeStruct_FormatArgumentData_1) == 0x000318, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_int_Loop_Num_Variable_5) == 0x000358, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_int_Loop_Num_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, K2Node_MakeArray_Array) == 0x000360, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Less_IntInt_ReturnValue_7) == 0x000370, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Format_ReturnValue) == 0x000378, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_BooleanAND_ReturnValue_3) == 0x000390, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue_5) == 0x000391, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Length_ReturnValue_4) == 0x000394, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, Temp_object_Variable) == 0x000398, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_IsValid_ReturnValue_6) == 0x0003A0, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar, CallFunc_Array_Length_ReturnValue_5) == 0x0003A4, "Member 'BP_BrainFieldManager_C_SetupJumpBFEnemyAvatar::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateOverwriteRestoreTransform
// 0x0240 (0x0240 - 0x0000)
struct BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform final
{
public:
	struct FVector                                PlayerRelativeLocation;                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D72[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PlayerActor;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D73[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D74[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         Pad_6D75[0x8];                                     // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D76[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0168(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0178(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0188(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D77[0x6];                                     // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D78[0x3];                                     // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D79[0x3];                                     // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform) == 0x000240, "Wrong size on BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, PlayerRelativeLocation) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::PlayerRelativeLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, PlayerActor) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::PlayerActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, TargetTransform) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::TargetTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakVector_X) == 0x000054, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakVector_Y) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakVector_Z) == 0x00005C, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_MakeVector_ReturnValue) == 0x000064, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0000C9, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakTransform_Location) == 0x0000CC, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakTransform_Rotation) == 0x0000D8, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakTransform_Scale) == 0x0000E4, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000F0, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakTransform_Location_1) == 0x0000FC, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakTransform_Rotation_1) == 0x000108, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_BreakTransform_Scale_1) == 0x000114, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x000150, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00015C, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, K2Node_MakeArray_Array_1) == 0x000168, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, Temp_object_Variable) == 0x000178, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000188, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000210, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_IsValid_ReturnValue) == 0x000211, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, K2Node_DynamicCast_AsRSBattle_Player) == 0x000218, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, K2Node_DynamicCast_bSuccess) == 0x000220, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Array_Length_ReturnValue) == 0x000224, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000228, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_Less_IntInt_ReturnValue) == 0x00022C, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform, CallFunc_MakeVector_ReturnValue_1) == 0x000230, "Member 'BP_BrainFieldManager_C_PrivateOverwriteRestoreTransform::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateSetInvalidDamagePlayers
// 0x0048 (0x0048 - 0x0000)
struct BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D7A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClaimantName;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D7B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D7C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D7D[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D7E[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSBattleCharacter_C*                   K2Node_DynamicCast_AsRSBattle_Character;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvalidDamage_Dummy;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers) == 0x000048, "Wrong size on BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, Invalid) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::Invalid' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, ClaimantName) == 0x000004, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::ClaimantName' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, Player) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, Temp_int_Loop_Num_Variable) == 0x00001C, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, K2Node_DynamicCast_AsRSBattle_Character) == 0x000038, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::K2Node_DynamicCast_AsRSBattle_Character' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers, CallFunc_SetInvalidDamage_Dummy) == 0x000041, "Member 'BP_BrainFieldManager_C_PrivateSetInvalidDamagePlayers::CallFunc_SetInvalidDamage_Dummy' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsNeedFrameWait
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsNeedFrameWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsNeedFrameWait) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsNeedFrameWait");
static_assert(sizeof(BP_BrainFieldManager_C_IsNeedFrameWait) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsNeedFrameWait");
static_assert(offsetof(BP_BrainFieldManager_C_IsNeedFrameWait, ReturnValue) == 0x000000, "Member 'BP_BrainFieldManager_C_IsNeedFrameWait::ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.ChangeBrainFieldEnemy
// 0x0078 (0x0078 - 0x0000)
struct BP_BrainFieldManager_C_ChangeBrainFieldEnemy final
{
public:
	class AActor*                                 NewEnemy;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OldEnemy;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  DummyFlag;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         FindIndex;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Find;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D7F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D80[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_SetupEnemyEnabledInternal_ComponentsFlagList; // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FFlagListStruct                        K2Node_MakeStruct_FlagListStruct;                  // 0x0048(0x0010)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D81[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D82[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_ChangeBrainFieldEnemy");
static_assert(sizeof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy) == 0x000078, "Wrong size on BP_BrainFieldManager_C_ChangeBrainFieldEnemy");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, NewEnemy) == 0x000000, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::NewEnemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, OldEnemy) == 0x000008, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::OldEnemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, DummyFlag) == 0x000010, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::DummyFlag' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, FindIndex) == 0x000020, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::FindIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, Find) == 0x000024, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::Find' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, Temp_int_Loop_Num_Variable) == 0x00002C, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_SetupEnemyEnabledInternal_ComponentsFlagList) == 0x000038, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_SetupEnemyEnabledInternal_ComponentsFlagList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, K2Node_MakeStruct_FlagListStruct) == 0x000048, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::K2Node_MakeStruct_FlagListStruct' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000058, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Array_AddUnique_ReturnValue) == 0x000068, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, Temp_bool_True_if_break_was_hit_Variable) == 0x00006C, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Not_PreBool_ReturnValue) == 0x00006D, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_BooleanAND_ReturnValue) == 0x00006E, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00006F, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_ChangeBrainFieldEnemy, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'BP_BrainFieldManager_C_ChangeBrainFieldEnemy::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.HasCustomRestoreTransform
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_HasCustomRestoreTransform final
{
public:
	bool                                          UseRestoreTransform;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_HasCustomRestoreTransform) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_HasCustomRestoreTransform");
static_assert(sizeof(BP_BrainFieldManager_C_HasCustomRestoreTransform) == 0x000001, "Wrong size on BP_BrainFieldManager_C_HasCustomRestoreTransform");
static_assert(offsetof(BP_BrainFieldManager_C_HasCustomRestoreTransform, UseRestoreTransform) == 0x000000, "Member 'BP_BrainFieldManager_C_HasCustomRestoreTransform::UseRestoreTransform' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetCustomCollisionSettings
// 0x0230 (0x0230 - 0x0000)
struct BP_BrainFieldManager_C_GetCustomCollisionSettings final
{
public:
	struct FBrainFieldSettingsLocation            Settings;                                          // 0x0000(0x0220)(Parm, OutParm, NoDestructor)
	bool                                          Param_UseCustomCollision;                          // 0x0220(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetCustomCollisionSettings) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_GetCustomCollisionSettings");
static_assert(sizeof(BP_BrainFieldManager_C_GetCustomCollisionSettings) == 0x000230, "Wrong size on BP_BrainFieldManager_C_GetCustomCollisionSettings");
static_assert(offsetof(BP_BrainFieldManager_C_GetCustomCollisionSettings, Settings) == 0x000000, "Member 'BP_BrainFieldManager_C_GetCustomCollisionSettings::Settings' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetCustomCollisionSettings, Param_UseCustomCollision) == 0x000220, "Member 'BP_BrainFieldManager_C_GetCustomCollisionSettings::Param_UseCustomCollision' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetupMenu
// 0x0004 (0x0004 - 0x0000)
struct BP_BrainFieldManager_C_SetupMenu final
{
public:
	bool                                          InMenu;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InBranField_InBrainDield;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetupMenu) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_SetupMenu");
static_assert(sizeof(BP_BrainFieldManager_C_SetupMenu) == 0x000004, "Wrong size on BP_BrainFieldManager_C_SetupMenu");
static_assert(offsetof(BP_BrainFieldManager_C_SetupMenu, InMenu) == 0x000000, "Member 'BP_BrainFieldManager_C_SetupMenu::InMenu' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupMenu, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_BrainFieldManager_C_SetupMenu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupMenu, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_BrainFieldManager_C_SetupMenu::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetupMenu, CallFunc_InBranField_InBrainDield) == 0x000003, "Member 'BP_BrainFieldManager_C_SetupMenu::CallFunc_InBranField_InBrainDield' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.EventENPCWhiteoutEnd
// 0x0028 (0x0028 - 0x0000)
struct BP_BrainFieldManager_C_EventENPCWhiteoutEnd final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D83[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D84[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_EventENPCWhiteoutEnd");
static_assert(sizeof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd) == 0x000028, "Wrong size on BP_BrainFieldManager_C_EventENPCWhiteoutEnd");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, Enemy) == 0x000000, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::Enemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, Temp_int_Loop_Num_Variable) == 0x00000C, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_EventENPCWhiteoutEnd, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_EventENPCWhiteoutEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.PrivateAdjustPlayerOpenSequenceLocation
// 0x0530 (0x0530 - 0x0000)
struct BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation final
{
public:
	float                                         CheckMoveOffset;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D85[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FinalTransform;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FRotator                               CheckRotation;                                     // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CheckLocation;                                     // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 MoveCheck;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<float>                                 RotateCheck;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CheckFinish;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D86[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckRadius;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CheckCenterOffset;                                 // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D87[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTransform;                                     // 0x0090(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class ARSCharacterBase*                       MainPlayer;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D88[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D89[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D8A[0x6];                                     // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ReferenceParm, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8B[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_RotatorToText_ReturnValue;           // 0x01B8(0x0018)()
	class FText                                   CallFunc_Conv_VectorToText_ReturnValue;            // 0x01D0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01E8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0228(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8C[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0270(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0280(0x0018)()
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0298(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D8D[0x2];                                     // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D8E[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D8F[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0370(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array_2;                          // 0x03D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x03E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D90[0x3];                                     // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D91[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_3;                          // 0x0400(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0425(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0426(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D92[0x1];                                     // 0x0427(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_4;                          // 0x0428(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0438(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D93[0x7];                                     // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D94[0x3];                                     // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x04D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D95[0x4];                                     // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x04FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0518(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation) == 0x000010, "Wrong alignment on BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation");
static_assert(sizeof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation) == 0x000530, "Wrong size on BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CheckMoveOffset) == 0x000000, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CheckMoveOffset' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, FinalTransform) == 0x000010, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::FinalTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CheckRotation) == 0x000040, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CheckRotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CheckLocation) == 0x00004C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CheckLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, MoveCheck) == 0x000058, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::MoveCheck' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, RotateCheck) == 0x000068, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::RotateCheck' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CheckFinish) == 0x000078, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CheckFinish' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CheckRadius) == 0x00007C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CheckRadius' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CheckCenterOffset) == 0x000080, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CheckCenterOffset' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, BaseTransform) == 0x000090, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::BaseTransform' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, MainPlayer) == 0x0000C0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::MainPlayer' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_int_Loop_Num_Variable) == 0x0000C8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeVector_ReturnValue) == 0x0000CC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_int_Loop_Counter_Variable) == 0x0000D8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Less_IntInt_ReturnValue) == 0x0000DC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Location) == 0x0000E0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Rotation) == 0x0000EC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Scale) == 0x0000F8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakRotator_Roll) == 0x000108, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakRotator_Pitch) == 0x00010C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakRotator_Yaw) == 0x000110, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_X) == 0x000114, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Y) == 0x000118, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Z) == 0x00011C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000120, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_bool_True_if_break_was_hit_Variable) == 0x000124, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_int_Loop_Counter_Variable_1) == 0x000128, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_IntInt_ReturnValue_1) == 0x00012C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000130, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BooleanAND_ReturnValue) == 0x000131, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeArray_Array) == 0x000138, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_X_1) == 0x000148, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Y_1) == 0x00014C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Z_1) == 0x000150, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeVector_ReturnValue_1) == 0x000154, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Location_1) == 0x000160, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Rotation_1) == 0x00016C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Scale_1) == 0x000178, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000184, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Location_2) == 0x000190, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Rotation_2) == 0x00019C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Scale_2) == 0x0001A8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Conv_RotatorToText_ReturnValue) == 0x0001B8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Conv_RotatorToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Conv_VectorToText_ReturnValue) == 0x0001D0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Conv_VectorToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeStruct_FormatArgumentData) == 0x0001E8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeStruct_FormatArgumentData_1) == 0x000228, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_int_Array_Index_Variable) == 0x000268, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeArray_Array_1) == 0x000270, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Format_ReturnValue) == 0x000280, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000298, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000320, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_IsValid_ReturnValue) == 0x000321, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_int_Loop_Num_Variable_1) == 0x000324, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_int_Array_Index_Variable_1) == 0x000328, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Less_IntInt_ReturnValue_1) == 0x00032C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Location_3) == 0x000330, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Rotation_3) == 0x00033C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Scale_3) == 0x000348, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_X_2) == 0x000354, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Y_2) == 0x000358, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Z_2) == 0x00035C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeVector_ReturnValue_2) == 0x000360, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeTransform_ReturnValue) == 0x000370, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Location_4) == 0x0003A0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Rotation_4) == 0x0003AC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakTransform_Scale_4) == 0x0003B8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakRotator_Roll_1) == 0x0003C4, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakRotator_Pitch_1) == 0x0003C8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakRotator_Yaw_1) == 0x0003CC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeArray_Array_2) == 0x0003D0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0003E0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_IsValid_ReturnValue_1) == 0x0003EC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0003F0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeArray_Array_3) == 0x000400, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Array_Length_ReturnValue) == 0x000410, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000414, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeRotator_ReturnValue) == 0x000418, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000424, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Not_PreBool_ReturnValue_1) == 0x000425, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BooleanAND_ReturnValue_1) == 0x000426, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, K2Node_MakeArray_Array_4) == 0x000428, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000438, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0004C0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_GetPlayerManager_PlayerManager) == 0x0004C8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_IsValid_ReturnValue_2) == 0x0004D0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0004D4, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeRotator_ReturnValue_1) == 0x0004D8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_GetPlayer_ReturnValue) == 0x0004E8, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x0004F0, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0004FC, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_Array_Length_ReturnValue_1) == 0x000508, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_X_3) == 0x00050C, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Y_3) == 0x000510, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_BreakVector_Z_3) == 0x000514, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation, CallFunc_MakeVector_ReturnValue_3) == 0x000518, "Member 'BP_BrainFieldManager_C_PrivateAdjustPlayerOpenSequenceLocation::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.Private Player Position Check
// 0x0278 (0x0278 - 0x0000)
struct BP_BrainFieldManager_C_Private_Player_Position_Check final
{
public:
	struct FVector                                LocalLocation;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D96[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LocalTargetActor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D97[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0040)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D98[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00C8(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D99[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D9A[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0140(0x0040)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D9B[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0190(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x01A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9C[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0230(0x0018)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9D[0x7];                                     // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9E[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9F[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_Private_Player_Position_Check) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_Private_Player_Position_Check");
static_assert(sizeof(BP_BrainFieldManager_C_Private_Player_Position_Check) == 0x000278, "Wrong size on BP_BrainFieldManager_C_Private_Player_Position_Check");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, LocalLocation) == 0x000000, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::LocalLocation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, LocalTargetActor) == 0x000010, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::LocalTargetActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, Temp_int_Loop_Num_Variable) == 0x000024, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_X) == 0x00002C, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_Y) == 0x000030, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_Z) == 0x000034, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000078, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000C8, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_IsValid_ReturnValue) == 0x000108, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakTransform_Location) == 0x00010C, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakTransform_Rotation) == 0x000118, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakTransform_Scale) == 0x000124, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_X_1) == 0x000130, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_Y_1) == 0x000134, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_Z_1) == 0x000138, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, K2Node_MakeStruct_FormatArgumentData_3) == 0x000140, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_MakeVector_ReturnValue) == 0x000180, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, K2Node_MakeArray_Array) == 0x000190, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0001A0, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000228, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Format_ReturnValue) == 0x000230, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000248, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Conv_TextToString_ReturnValue) == 0x000250, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BooleanAND_ReturnValue) == 0x000260, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_X_2) == 0x000264, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_Y_2) == 0x000268, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_BreakVector_Z_2) == 0x00026C, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Less_FloatFloat_ReturnValue) == 0x000270, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_Private_Player_Position_Check, CallFunc_Array_Length_ReturnValue) == 0x000274, "Member 'BP_BrainFieldManager_C_Private_Player_Position_Check::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.RemoveEnpcFromEnemyList
// 0x00B8 (0x00B8 - 0x0000)
struct BP_BrainFieldManager_C_RemoveEnpcFromEnemyList final
{
public:
	TArray<class AActor*>                         RefEnemyList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemyReturn;                                       // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         FarEnemyReturn;                                    // 0x0020(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         LIndex;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA0[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LFarEnemyList;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TArray<class AActor*>                         LEnemyList;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA1[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA2[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA3[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBattleCharacterHudInterface> CallFunc_IsSpawnWait_self_CastInput;               // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpawnWait_bSpawnWait;                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemy_bEnemy;                           // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA4[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA5[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_RemoveEnpcFromEnemyList");
static_assert(sizeof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList) == 0x0000B8, "Wrong size on BP_BrainFieldManager_C_RemoveEnpcFromEnemyList");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, RefEnemyList) == 0x000000, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::RefEnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, EnemyReturn) == 0x000010, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::EnemyReturn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, FarEnemyReturn) == 0x000020, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::FarEnemyReturn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, LIndex) == 0x000030, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::LIndex' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, LFarEnemyList) == 0x000038, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::LFarEnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, LEnemyList) == 0x000048, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::LEnemyList' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_Subtract_IntInt_ReturnValue) == 0x00005C, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, Temp_int_Variable) == 0x000060, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, K2Node_DynamicCast_AsRSBattle_Player) == 0x000070, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000080, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_IsSpawnWait_self_CastInput) == 0x000098, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_IsSpawnWait_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_IsSpawnWait_bSpawnWait) == 0x0000A8, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_IsSpawnWait_bSpawnWait' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_IsEnemy_bEnemy) == 0x0000A9, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_IsEnemy_bEnemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, Temp_int_Variable_1) == 0x0000AC, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_RemoveEnpcFromEnemyList, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_BrainFieldManager_C_RemoveEnpcFromEnemyList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetInSpField
// 0x0018 (0x0018 - 0x0000)
struct BP_BrainFieldManager_C_SetInSpField final
{
public:
	bool                                          Param_InSpField;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SoundManager_C*                     CallFunc_GetSoundManager_SoundManager;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetInSpField) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_SetInSpField");
static_assert(sizeof(BP_BrainFieldManager_C_SetInSpField) == 0x000018, "Wrong size on BP_BrainFieldManager_C_SetInSpField");
static_assert(offsetof(BP_BrainFieldManager_C_SetInSpField, Param_InSpField) == 0x000000, "Member 'BP_BrainFieldManager_C_SetInSpField::Param_InSpField' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetInSpField, CallFunc_GetSoundManager_SoundManager) == 0x000008, "Member 'BP_BrainFieldManager_C_SetInSpField::CallFunc_GetSoundManager_SoundManager' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_SetInSpField, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_BrainFieldManager_C_SetInSpField::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.SetInvokeSpField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_SetInvokeSpField final
{
public:
	bool                                          InInvoke;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_SetInvokeSpField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_SetInvokeSpField");
static_assert(sizeof(BP_BrainFieldManager_C_SetInvokeSpField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_SetInvokeSpField");
static_assert(offsetof(BP_BrainFieldManager_C_SetInvokeSpField, InInvoke) == 0x000000, "Member 'BP_BrainFieldManager_C_SetInvokeSpField::InInvoke' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.InBranField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_InBranField final
{
public:
	bool                                          InBrainDield;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_InBranField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_InBranField");
static_assert(sizeof(BP_BrainFieldManager_C_InBranField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_InBranField");
static_assert(offsetof(BP_BrainFieldManager_C_InBranField, InBrainDield) == 0x000000, "Member 'BP_BrainFieldManager_C_InBranField::InBrainDield' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsSpawnPsychicObject
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsSpawnPsychicObject final
{
public:
	bool                                          IsSpawn;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsSpawnPsychicObject) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsSpawnPsychicObject");
static_assert(sizeof(BP_BrainFieldManager_C_IsSpawnPsychicObject) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsSpawnPsychicObject");
static_assert(offsetof(BP_BrainFieldManager_C_IsSpawnPsychicObject, IsSpawn) == 0x000000, "Member 'BP_BrainFieldManager_C_IsSpawnPsychicObject::IsSpawn' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsUserIsPlayer
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsUserIsPlayer final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsUserIsPlayer) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsUserIsPlayer");
static_assert(sizeof(BP_BrainFieldManager_C_IsUserIsPlayer) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsUserIsPlayer");
static_assert(offsetof(BP_BrainFieldManager_C_IsUserIsPlayer, IsPlayer) == 0x000000, "Member 'BP_BrainFieldManager_C_IsUserIsPlayer::IsPlayer' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.GetENPCSequencerType
// 0x0003 (0x0003 - 0x0000)
struct BP_BrainFieldManager_C_GetENPCSequencerType final
{
public:
	EBrainFieldSequencerType                      Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBrainFieldSequencerType                      CallFunc_GetSequencerTypeENPC_SequencerType;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_GetENPCSequencerType) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_GetENPCSequencerType");
static_assert(sizeof(BP_BrainFieldManager_C_GetENPCSequencerType) == 0x000003, "Wrong size on BP_BrainFieldManager_C_GetENPCSequencerType");
static_assert(offsetof(BP_BrainFieldManager_C_GetENPCSequencerType, Type) == 0x000000, "Member 'BP_BrainFieldManager_C_GetENPCSequencerType::Type' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetENPCSequencerType, CallFunc_GetSequencerTypeENPC_SequencerType) == 0x000001, "Member 'BP_BrainFieldManager_C_GetENPCSequencerType::CallFunc_GetSequencerTypeENPC_SequencerType' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_GetENPCSequencerType, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_BrainFieldManager_C_GetENPCSequencerType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsEnemyLastOne
// 0x0050 (0x0050 - 0x0000)
struct BP_BrainFieldManager_C_IsEnemyLastOne final
{
public:
	bool                                          IsLastOne;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LLifeOne;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LReturn;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA7[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LEnemy;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA9[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterParamater_C> K2Node_DynamicCast_AsBPI_Character_Paramater;      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDead_bDead;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAA[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsEnemyLastOne) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_IsEnemyLastOne");
static_assert(sizeof(BP_BrainFieldManager_C_IsEnemyLastOne) == 0x000050, "Wrong size on BP_BrainFieldManager_C_IsEnemyLastOne");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, IsLastOne) == 0x000000, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::IsLastOne' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, LLifeOne) == 0x000001, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::LLifeOne' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, LReturn) == 0x000002, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::LReturn' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, LEnemy) == 0x000008, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::LEnemy' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, K2Node_DynamicCast_AsBPI_Character_Paramater) == 0x000028, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::K2Node_DynamicCast_AsBPI_Character_Paramater' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_IsDead_bDead) == 0x00003A, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_IsDead_bDead' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsEnemyLastOne, CallFunc_BooleanAND_ReturnValue) == 0x00004D, "Member 'BP_BrainFieldManager_C_IsEnemyLastOne::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInFieldActorInEnemyList
// 0x0010 (0x0010 - 0x0000)
struct BP_BrainFieldManager_C_IsInFieldActorInEnemyList final
{
public:
	class AActor*                                 SearchActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsInFieldActorInEnemyList) == 0x000008, "Wrong alignment on BP_BrainFieldManager_C_IsInFieldActorInEnemyList");
static_assert(sizeof(BP_BrainFieldManager_C_IsInFieldActorInEnemyList) == 0x000010, "Wrong size on BP_BrainFieldManager_C_IsInFieldActorInEnemyList");
static_assert(offsetof(BP_BrainFieldManager_C_IsInFieldActorInEnemyList, SearchActor) == 0x000000, "Member 'BP_BrainFieldManager_C_IsInFieldActorInEnemyList::SearchActor' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsInFieldActorInEnemyList, Result) == 0x000008, "Member 'BP_BrainFieldManager_C_IsInFieldActorInEnemyList::Result' has a wrong offset!");
static_assert(offsetof(BP_BrainFieldManager_C_IsInFieldActorInEnemyList, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'BP_BrainFieldManager_C_IsInFieldActorInEnemyList::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInSpField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsInSpField final
{
public:
	bool                                          Param_InSpField;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsInSpField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsInSpField");
static_assert(sizeof(BP_BrainFieldManager_C_IsInSpField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsInSpField");
static_assert(offsetof(BP_BrainFieldManager_C_IsInSpField, Param_InSpField) == 0x000000, "Member 'BP_BrainFieldManager_C_IsInSpField::Param_InSpField' has a wrong offset!");

// Function BP_BrainFieldManager.BP_BrainFieldManager_C.IsInvokeSpField
// 0x0001 (0x0001 - 0x0000)
struct BP_BrainFieldManager_C_IsInvokeSpField final
{
public:
	bool                                          InvokeSpField;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BrainFieldManager_C_IsInvokeSpField) == 0x000001, "Wrong alignment on BP_BrainFieldManager_C_IsInvokeSpField");
static_assert(sizeof(BP_BrainFieldManager_C_IsInvokeSpField) == 0x000001, "Wrong size on BP_BrainFieldManager_C_IsInvokeSpField");
static_assert(offsetof(BP_BrainFieldManager_C_IsInvokeSpField, InvokeSpField) == 0x000000, "Member 'BP_BrainFieldManager_C_IsInvokeSpField::InvokeSpField' has a wrong offset!");

}

