#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_GameUtility

#include "Basic.hpp"

#include "BattlePrototype_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CinematicCamera_structs.hpp"
#include "E_SASKind_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"
#include "CascadeExtensionPlugin_structs.hpp"


namespace SDK::Params
{

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetLowLODIndex
// 0x0020 (0x0020 - 0x0000)
struct BPFL_GameUtility_C_GetLowLODIndex final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumLODs_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetLowLODIndex) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetLowLODIndex");
static_assert(sizeof(BPFL_GameUtility_C_GetLowLODIndex) == 0x000020, "Wrong size on BPFL_GameUtility_C_GetLowLODIndex");
static_assert(offsetof(BPFL_GameUtility_C_GetLowLODIndex, StaticMesh) == 0x000000, "Member 'BPFL_GameUtility_C_GetLowLODIndex::StaticMesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetLowLODIndex, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_GetLowLODIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetLowLODIndex, Param_Index) == 0x000010, "Member 'BPFL_GameUtility_C_GetLowLODIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetLowLODIndex, CallFunc_GetNumLODs_ReturnValue) == 0x000014, "Member 'BPFL_GameUtility_C_GetLowLODIndex::CallFunc_GetNumLODs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetLowLODIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'BPFL_GameUtility_C_GetLowLODIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetLowLODIndex, CallFunc_Max_ReturnValue) == 0x00001C, "Member 'BPFL_GameUtility_C_GetLowLODIndex::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SearchMaterialFromName
// 0x0080 (0x0080 - 0x0000)
struct BPFL_GameUtility_C_SearchMaterialFromName final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SearchSubStirng;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FindMaterial;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetIndex;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Ret;                                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoopLastIndex;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8130[0x1];                                     // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8131[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SearchMaterialFromName) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SearchMaterialFromName");
static_assert(sizeof(BPFL_GameUtility_C_SearchMaterialFromName) == 0x000080, "Wrong size on BPFL_GameUtility_C_SearchMaterialFromName");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, Primitive) == 0x000000, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::Primitive' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, SearchSubStirng) == 0x000008, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::SearchSubStirng' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, FindMaterial) == 0x000020, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::FindMaterial' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, Param_Index) == 0x000028, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, RetIndex) == 0x00002C, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::RetIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, Ret) == 0x000030, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::Ret' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, Material) == 0x000038, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::Material' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, LoopLastIndex) == 0x000040, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::LoopLastIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, Temp_bool_Variable) == 0x000044, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_IsValid_ReturnValue) == 0x000045, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_Not_PreBool_ReturnValue) == 0x000046, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, Temp_int_Variable) == 0x000048, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_GetNumMaterials_ReturnValue) == 0x00004C, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_GetMaterial_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_Subtract_IntInt_ReturnValue) == 0x000058, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000060, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_GetPathName_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_FindSubstring_ReturnValue) == 0x000078, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMaterialFromName, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00007C, "Member 'BPFL_GameUtility_C_SearchMaterialFromName::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SearchMeshMaterialFromSlot
// 0x00B8 (0x00B8 - 0x0000)
struct BPFL_GameUtility_C_SearchMeshMaterialFromSlot final
{
public:
	class USkinnedMeshComponent*                  Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SearchSubStirng;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FindMaterial;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8132[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SlotNames;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         RetIndex;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8133[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Ret;                                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoopLastIndex;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8134[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8135[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8136[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8137[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8138[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8139[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetMaterialSlotNames_ReturnValue;         // 0x00A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SearchMeshMaterialFromSlot");
static_assert(sizeof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot) == 0x0000B8, "Wrong size on BPFL_GameUtility_C_SearchMeshMaterialFromSlot");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, Mesh) == 0x000000, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, SearchSubStirng) == 0x000008, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::SearchSubStirng' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, FindMaterial) == 0x000020, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::FindMaterial' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, Param_Index) == 0x000028, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, SlotNames) == 0x000030, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::SlotNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, RetIndex) == 0x000040, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::RetIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, Ret) == 0x000048, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::Ret' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, LoopLastIndex) == 0x000050, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::LoopLastIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, Temp_bool_True_if_break_was_hit_Variable) == 0x000059, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_Array_Get_Item) == 0x00005C, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_Conv_NameToString_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000078, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_GetMaterial_ReturnValue) == 0x000088, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_BooleanAND_ReturnValue) == 0x000098, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_GetMaterialSlotNames_ReturnValue) == 0x0000A0, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_GetMaterialSlotNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_FindSubstring_ReturnValue) == 0x0000B0, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialFromSlot, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000B4, "Member 'BPFL_GameUtility_C_SearchMeshMaterialFromSlot::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetHoodVisible
// 0x0018 (0x0018 - 0x0000)
struct BPFL_GameUtility_C_SetHoodVisible final
{
public:
	class USkinnedMeshComponent*                  Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceReset;                                        // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InvisibleMask;                                     // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InvisibleBFHood;                                   // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_813A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_SetHoodVisible) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetHoodVisible");
static_assert(sizeof(BPFL_GameUtility_C_SetHoodVisible) == 0x000018, "Wrong size on BPFL_GameUtility_C_SetHoodVisible");
static_assert(offsetof(BPFL_GameUtility_C_SetHoodVisible, Mesh) == 0x000000, "Member 'BPFL_GameUtility_C_SetHoodVisible::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetHoodVisible, Visible) == 0x000008, "Member 'BPFL_GameUtility_C_SetHoodVisible::Visible' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetHoodVisible, ForceReset) == 0x000009, "Member 'BPFL_GameUtility_C_SetHoodVisible::ForceReset' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetHoodVisible, InvisibleMask) == 0x00000A, "Member 'BPFL_GameUtility_C_SetHoodVisible::InvisibleMask' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetHoodVisible, InvisibleBFHood) == 0x00000B, "Member 'BPFL_GameUtility_C_SetHoodVisible::InvisibleBFHood' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetHoodVisible, __WorldContext) == 0x000010, "Member 'BPFL_GameUtility_C_SetHoodVisible::__WorldContext' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CreateAllDynamicMaterialInstance
// 0x0050 (0x0050 - 0x0000)
struct BPFL_GameUtility_C_CreateAllDynamicMaterialInstance final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DMArray;                                           // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       TmpMDArray;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_813B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CreateAllDynamicMaterialInstance");
static_assert(sizeof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance) == 0x000050, "Wrong size on BPFL_GameUtility_C_CreateAllDynamicMaterialInstance");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, Mesh) == 0x000000, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, DMArray) == 0x000010, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::DMArray' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, TmpMDArray) == 0x000020, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::TmpMDArray' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, Temp_int_Variable) == 0x000030, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, CallFunc_GetNumMaterials_ReturnValue) == 0x000044, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstance, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstance::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventPlayer
// 0x00C0 (0x00C0 - 0x0000)
struct BPFL_GameUtility_C_BindingEventPlayer final
{
public:
	class ARSCharacterBase*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BindSASCode;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BindBrainCode;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Weapon;                                            // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChangeOwnerShip;                                 // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllowSuffixNo;                                     // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_813C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingPlayer;                                   // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingSASCode;                                  // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingBrainCode;                                // 0x0023(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_813D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsBindingWeapon;                                   // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class FText                                   IDText;                                            // 0x0038(0x0018)(Edit, BlueprintVisible)
	int32                                         TmpIndex;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_813E[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           CallFunc_GetSequencerSuffixNoList_List;            // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_2;                          // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BindingEventCharacterBase_IsBinding;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingPlayer; // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingSASCode; // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingBrainCode; // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_813F[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_BindingEventCharacterBase_IsBindingWeapon; // 0x00B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventPlayer) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventPlayer");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventPlayer) == 0x0000C0, "Wrong size on BPFL_GameUtility_C_BindingEventPlayer");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, Player) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventPlayer::Player' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventPlayer::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, BindSASCode) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventPlayer::BindSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, BindBrainCode) == 0x000011, "Member 'BPFL_GameUtility_C_BindingEventPlayer::BindBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, Weapon) == 0x000012, "Member 'BPFL_GameUtility_C_BindingEventPlayer::Weapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IsChangeOwnerShip) == 0x000013, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, AllowSuffixNo) == 0x000014, "Member 'BPFL_GameUtility_C_BindingEventPlayer::AllowSuffixNo' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventPlayer::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IsBinding) == 0x000020, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IsBindingPlayer) == 0x000021, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IsBindingSASCode) == 0x000022, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IsBindingBrainCode) == 0x000023, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IsBindingWeapon) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, IDText) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventPlayer::IDText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, TmpIndex) == 0x000050, "Member 'BPFL_GameUtility_C_BindingEventPlayer::TmpIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, Param_Name) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventPlayer::Param_Name' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, K2Node_MakeArray_Array) == 0x000068, "Member 'BPFL_GameUtility_C_BindingEventPlayer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, CallFunc_GetSequencerSuffixNoList_List) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventPlayer::CallFunc_GetSequencerSuffixNoList_List' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, K2Node_MakeArray_Array_1) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventPlayer::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, K2Node_MakeArray_Array_2) == 0x000098, "Member 'BPFL_GameUtility_C_BindingEventPlayer::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, CallFunc_BindingEventCharacterBase_IsBinding) == 0x0000A8, "Member 'BPFL_GameUtility_C_BindingEventPlayer::CallFunc_BindingEventCharacterBase_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, CallFunc_BindingEventCharacterBase_IsBindingPlayer) == 0x0000A9, "Member 'BPFL_GameUtility_C_BindingEventPlayer::CallFunc_BindingEventCharacterBase_IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, CallFunc_BindingEventCharacterBase_IsBindingSASCode) == 0x0000AA, "Member 'BPFL_GameUtility_C_BindingEventPlayer::CallFunc_BindingEventCharacterBase_IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, CallFunc_BindingEventCharacterBase_IsBindingBrainCode) == 0x0000AB, "Member 'BPFL_GameUtility_C_BindingEventPlayer::CallFunc_BindingEventCharacterBase_IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayer, CallFunc_BindingEventCharacterBase_IsBindingWeapon) == 0x0000B0, "Member 'BPFL_GameUtility_C_BindingEventPlayer::CallFunc_BindingEventCharacterBase_IsBindingWeapon' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.Private_BindingEventPlayer
// 0x0070 (0x0070 - 0x0000)
struct BPFL_GameUtility_C_Private_BindingEventPlayer final
{
public:
	TArray<class AActor*>                         BindingActors;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingNames;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeOwnerShip;                                 // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8140[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8141[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList; // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDList_IsFind;    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8142[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8143[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8144[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_Private_BindingEventPlayer) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_Private_BindingEventPlayer");
static_assert(sizeof(BPFL_GameUtility_C_Private_BindingEventPlayer) == 0x000070, "Wrong size on BPFL_GameUtility_C_Private_BindingEventPlayer");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, BindingActors) == 0x000000, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::BindingActors' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, BindingNames) == 0x000010, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::BindingNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, Sequencer) == 0x000020, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, IsChangeOwnerShip) == 0x000028, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, __WorldContext) == 0x000030, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, IsBinding) == 0x000038, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList) == 0x000040, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_GetSequenceObjectBindingIDList_IsFind) == 0x000050, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_GetSequenceObjectBindingIDList_IsFind' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, Temp_int_Loop_Num_Variable) == 0x00005C, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'BPFL_GameUtility_C_Private_BindingEventPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetAllEnableTick
// 0x0058 (0x0058 - 0x0000)
struct BPFL_GameUtility_C_SetAllEnableTick final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTick;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8145[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                LComponents;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UActorComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SetAllEnableTick) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetAllEnableTick");
static_assert(sizeof(BPFL_GameUtility_C_SetAllEnableTick) == 0x000058, "Wrong size on BPFL_GameUtility_C_SetAllEnableTick");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, Actor) == 0x000000, "Member 'BPFL_GameUtility_C_SetAllEnableTick::Actor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, EnableTick) == 0x000008, "Member 'BPFL_GameUtility_C_SetAllEnableTick::EnableTick' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, __WorldContext) == 0x000010, "Member 'BPFL_GameUtility_C_SetAllEnableTick::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, LComponents) == 0x000018, "Member 'BPFL_GameUtility_C_SetAllEnableTick::LComponents' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BPFL_GameUtility_C_SetAllEnableTick::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BPFL_GameUtility_C_SetAllEnableTick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BPFL_GameUtility_C_SetAllEnableTick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, CallFunc_Array_Get_Item) == 0x000040, "Member 'BPFL_GameUtility_C_SetAllEnableTick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_SetAllEnableTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BPFL_GameUtility_C_SetAllEnableTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetAllEnableTick, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_SetAllEnableTick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CreateAllDynamicMaterialInstanceFromParticle
// 0x0058 (0x0058 - 0x0000)
struct BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DMArray;                                           // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         MatNum;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8146[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       TmpMDArray;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8147[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8148[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle");
static_assert(sizeof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle) == 0x000058, "Wrong size on BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, Particle) == 0x000000, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::Particle' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, DMArray) == 0x000010, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::DMArray' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, MatNum) == 0x000020, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::MatNum' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, TmpMDArray) == 0x000028, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::TmpMDArray' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, CallFunc_GetNumMaterials_ReturnValue) == 0x000038, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, Temp_int_Variable) == 0x000040, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetScalarParameterFromSearchMaterial
// 0x0078 (0x0078 - 0x0000)
struct BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial final
{
public:
	class USkinnedMeshComponent*                  Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8149[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaterialName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 MatIndexArray;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_814A[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_SearchMeshMaterialFromSlotName_ReturnValue; // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_814B[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial");
static_assert(sizeof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial) == 0x000078, "Wrong size on BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, Mesh) == 0x000000, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, Value) == 0x000008, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::Value' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, MaterialName) == 0x000010, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::MaterialName' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, ParameterName) == 0x000020, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::ParameterName' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, __WorldContext) == 0x000028, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, MatIndexArray) == 0x000030, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::MatIndexArray' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, CallFunc_SearchMeshMaterialFromSlotName_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::CallFunc_SearchMeshMaterialFromSlotName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, CallFunc_Array_Get_Item) == 0x000060, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventPlayerFromText
// 0x03D8 (0x03D8 - 0x0000)
struct BPFL_GameUtility_C_BindingEventPlayerFromText final
{
public:
	class ARSCharacterBase*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BindSASCode;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BindBrainCode;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Weapon;                                            // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_814C[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           BindingNames;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingCodeBaseText;                               // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingWeaponBaseText;                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          IsChangeOwnerShip;                                 // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_814D[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingPlayer;                                   // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingSASCode;                                  // 0x005A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingBrainCode;                                // 0x005B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_814E[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsBindingWeapon;                                   // 0x0060(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class ABP_WeaponBase_C*                       PlayerWeapon;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               WeaponList;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	bool                                          RetBrainCode;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetSASCode;                                        // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_814F[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  RetWeapon;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FText                                   IndexText;                                         // 0x00A0(0x0018)(Edit, BlueprintVisible)
	TArray<class FText>                           TmpBindingNames;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          RetPlayer;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8150[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8151[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00E8(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8152[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0120(0x0018)()
	int32                                         Temp_int_Variable;                                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8153[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8154[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_2;                      // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8155[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable_3;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8156[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  CallFunc_BindingEventPlayerWeaponFromText_IsBinding; // 0x0170(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8157[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_4;                      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8158[0x3];                                     // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0190(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8159[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0218(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815A[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0230(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0248(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0290(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x02D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x02E0(0x0018)()
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815B[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0300(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815C[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WeaponBase_C*>               CallFunc_GetPlayerWeaponList_WeaponList;           // 0x0318(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815D[0x3];                                     // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815E[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_1;       // 0x0338(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815F[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetBrainCodeActorList_CodeList;           // 0x0350(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8160[0x4];                                     // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_2;                          // 0x0368(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Private_BindingEventPlayer_IsBinding;     // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8161[0x6];                                     // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface_2;       // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8162[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CableBase_C*>                CallFunc_GetSASCodeActorList_CodeList;             // 0x0398(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_3;                          // 0x03A8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8163[0x4];                                     // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_4;                          // 0x03C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Private_BindingEventPlayer_IsBinding_1;   // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Private_BindingEventPlayer_IsBinding_2;   // 0x03D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventPlayerFromText) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventPlayerFromText");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventPlayerFromText) == 0x0003D8, "Wrong size on BPFL_GameUtility_C_BindingEventPlayerFromText");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Player) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Player' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, BindSASCode) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::BindSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, BindBrainCode) == 0x000011, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::BindBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Weapon) == 0x000012, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Weapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, BindingNames) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::BindingNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, BindingCodeBaseText) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::BindingCodeBaseText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, BindingWeaponBaseText) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::BindingWeaponBaseText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IsChangeOwnerShip) == 0x000048, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, __WorldContext) == 0x000050, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IsBinding) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IsBindingPlayer) == 0x000059, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IsBindingSASCode) == 0x00005A, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IsBindingBrainCode) == 0x00005B, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IsBindingWeapon) == 0x000060, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, PlayerWeapon) == 0x000070, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::PlayerWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, WeaponList) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::WeaponList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, RetBrainCode) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::RetBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, RetSASCode) == 0x000089, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::RetSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, RetWeapon) == 0x000090, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::RetWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, IndexText) == 0x0000A0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::IndexText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, TmpBindingNames) == 0x0000B8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::TmpBindingNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, RetPlayer) == 0x0000C8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::RetPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Array_Index_Variable) == 0x0000CC, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Counter_Variable) == 0x0000D0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue) == 0x0000D4, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Array_Index_Variable_1) == 0x0000D8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Num_Variable) == 0x0000DC, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000E0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Less_IntInt_ReturnValue) == 0x0000E4, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Conv_IntToText_ReturnValue) == 0x0000E8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Counter_Variable_1) == 0x000100, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_2) == 0x000104, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Counter_Variable_2) == 0x000108, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_3) == 0x00010C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Array_Index_Variable_2) == 0x000110, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Num_Variable_1) == 0x000114, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_4) == 0x000118, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Less_IntInt_ReturnValue_1) == 0x00011C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000120, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Variable) == 0x000138, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Counter_Variable_3) == 0x00013C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Conv_IntToByte_ReturnValue) == 0x000140, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_5) == 0x000144, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_GetValidValue_ReturnValue) == 0x000148, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_6) == 0x00014C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Array_Index_Variable_3) == 0x000150, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Num_Variable_2) == 0x000154, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Num_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Less_IntInt_ReturnValue_2) == 0x000158, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Num_Variable_3) == 0x00015C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Num_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Add_ReturnValue) == 0x000164, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Greater_IntInt_ReturnValue) == 0x000168, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Counter_Variable_4) == 0x00016C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_BindingEventPlayerWeaponFromText_IsBinding) == 0x000170, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_BindingEventPlayerWeaponFromText_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Less_IntInt_ReturnValue_3) == 0x000180, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Add_IntInt_ReturnValue_7) == 0x000184, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Loop_Num_Variable_4) == 0x000188, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Loop_Num_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Less_IntInt_ReturnValue_4) == 0x00018C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeStruct_FormatArgumentData) == 0x000190, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, Temp_int_Array_Index_Variable_4) == 0x0001D0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001D8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeArray_Array) == 0x000218, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue_1) == 0x000228, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Format_ReturnValue) == 0x000230, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeStruct_FormatArgumentData_2) == 0x000248, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue_2) == 0x000288, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue_3) == 0x00028C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeStruct_FormatArgumentData_3) == 0x000290, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeArray_Array_1) == 0x0002D0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Format_ReturnValue_1) == 0x0002E0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_MakeLiteralByte_ReturnValue) == 0x0002F8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000300, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_DynamicCast_bSuccess) == 0x000310, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000314, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_GetPlayerWeaponList_WeaponList) == 0x000318, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_GetPlayerWeaponList_WeaponList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000328, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue_4) == 0x00032C, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_IsValid_ReturnValue) == 0x000330, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_DynamicCast_AsBPI_Player_Interface_1) == 0x000338, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_DynamicCast_AsBPI_Player_Interface_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_DynamicCast_bSuccess_1) == 0x000348, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_GetBrainCodeActorList_CodeList) == 0x000350, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_GetBrainCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue_5) == 0x000360, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeArray_Array_2) == 0x000368, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Private_BindingEventPlayer_IsBinding) == 0x000378, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Private_BindingEventPlayer_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_BooleanOR_ReturnValue) == 0x000379, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_DynamicCast_AsBPI_Player_Interface_2) == 0x000380, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_DynamicCast_AsBPI_Player_Interface_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_DynamicCast_bSuccess_2) == 0x000390, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_GetSASCodeActorList_CodeList) == 0x000398, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_GetSASCodeActorList_CodeList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeArray_Array_3) == 0x0003A8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Array_Length_ReturnValue_6) == 0x0003B8, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, K2Node_MakeArray_Array_4) == 0x0003C0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Private_BindingEventPlayer_IsBinding_1) == 0x0003D0, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Private_BindingEventPlayer_IsBinding_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_BooleanOR_ReturnValue_1) == 0x0003D1, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerFromText, CallFunc_Private_BindingEventPlayer_IsBinding_2) == 0x0003D2, "Member 'BPFL_GameUtility_C_BindingEventPlayerFromText::CallFunc_Private_BindingEventPlayer_IsBinding_2' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CheckWallHeight
// 0x02D8 (0x02D8 - 0x0000)
struct BPFL_GameUtility_C_CheckWallHeight final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckLimitHeight;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8164[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8165[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GroundPoint;                                       // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WallCheckPoint;                                    // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8166[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0048(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0078(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00AC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8167[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8168[0x2];                                     // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x01C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8169[0x1];                                     // 0x024B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_816A[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0298(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_CheckWallHeight) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CheckWallHeight");
static_assert(sizeof(BPFL_GameUtility_C_CheckWallHeight) == 0x0002D8, "Wrong size on BPFL_GameUtility_C_CheckWallHeight");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, Start) == 0x000000, "Member 'BPFL_GameUtility_C_CheckWallHeight::Start' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, End) == 0x00000C, "Member 'BPFL_GameUtility_C_CheckWallHeight::End' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CheckLimitHeight) == 0x000018, "Member 'BPFL_GameUtility_C_CheckWallHeight::CheckLimitHeight' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, __WorldContext) == 0x000020, "Member 'BPFL_GameUtility_C_CheckWallHeight::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, bHit) == 0x000028, "Member 'BPFL_GameUtility_C_CheckWallHeight::bHit' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, GroundPoint) == 0x00002C, "Member 'BPFL_GameUtility_C_CheckWallHeight::GroundPoint' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, WallCheckPoint) == 0x000038, "Member 'BPFL_GameUtility_C_CheckWallHeight::WallCheckPoint' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, Temp_object_Variable) == 0x000048, "Member 'BPFL_GameUtility_C_CheckWallHeight::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, K2Node_MakeArray_Array) == 0x000058, "Member 'BPFL_GameUtility_C_CheckWallHeight::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, K2Node_MakeArray_Array_1) == 0x000068, "Member 'BPFL_GameUtility_C_CheckWallHeight::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, Temp_object_Variable_1) == 0x000078, "Member 'BPFL_GameUtility_C_CheckWallHeight::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_MakeVector_ReturnValue) == 0x000088, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_Add_VectorVector_ReturnValue) == 0x000094, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A0, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000AC, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000134, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_Normal_ReturnValue) == 0x000138, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_bBlockingHit) == 0x000144, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_bInitialOverlap) == 0x000145, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Time) == 0x000148, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Distance) == 0x00014C, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Location) == 0x000150, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_ImpactPoint) == 0x00015C, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Normal) == 0x000168, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_ImpactNormal) == 0x000174, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_PhysMat) == 0x000180, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitActor) == 0x000188, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitComponent) == 0x000190, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitBoneName) == 0x000198, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitItem) == 0x0001A0, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_FaceIndex) == 0x0001A4, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_TraceStart) == 0x0001A8, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_TraceEnd) == 0x0001B4, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x0001C0, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x000248, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000249, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00024A, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Time_1) == 0x00024C, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Distance_1) == 0x000250, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Location_1) == 0x000254, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000260, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_Normal_1) == 0x00026C, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000278, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_PhysMat_1) == 0x000288, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitActor_1) == 0x000290, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitComponent_1) == 0x000298, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitBoneName_1) == 0x0002A0, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_HitItem_1) == 0x0002A8, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_FaceIndex_1) == 0x0002AC, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_TraceStart_1) == 0x0002B0, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_BreakHitResult_TraceEnd_1) == 0x0002BC, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CheckWallHeight, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002C8, "Member 'BPFL_GameUtility_C_CheckWallHeight::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetScalarParameterValueOnMaterialByCaptureActor
// 0x00C8 (0x00C8 - 0x0000)
struct BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor final
{
public:
	class ABPCaptureActor_C*                      Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParameterName;                                     // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_816B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_816C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     _Material;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetBP_static_pl_AsCharacter;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_816D[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ULandscapeMaterialInstanceConstant*     K2Node_DynamicCast_AsLandscape_Material_Instance_Constant; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_816E[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_816F[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8170[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue_1; // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor");
static_assert(sizeof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor) == 0x0000C8, "Wrong size on BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, Actor) == 0x000000, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::Actor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, MaterialIndex) == 0x000008, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::MaterialIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, ParameterName) == 0x00000C, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::ParameterName' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, Value) == 0x000020, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::Value' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, _Material) == 0x000028, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::_Material' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_GetBP_static_pl_AsCharacter) == 0x000030, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_GetBP_static_pl_AsCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_GetPathName_ReturnValue) == 0x000038, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_GetDisplayName_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, K2Node_DynamicCast_AsLandscape_Material_Instance_Constant) == 0x000070, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::K2Node_DynamicCast_AsLandscape_Material_Instance_Constant' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000080, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000090, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A0, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_IsValid_ReturnValue_1) == 0x0000B0, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_IsValid_ReturnValue_2) == 0x0000B1, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_GetMaterial_ReturnValue) == 0x0000B8, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x0000C0, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor, CallFunc_K2_GetScalarParameterValue_ReturnValue_1) == 0x0000C4, "Member 'BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor::CallFunc_K2_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CalcPlayerCameraToTarget
// 0x0098 (0x0098 - 0x0000)
struct BPFL_GameUtility_C_CalcPlayerCameraToTarget final
{
public:
	class AActor*                                 BaseActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8171[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation_1;      // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation_1;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_CalcPlayerCameraToTarget) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CalcPlayerCameraToTarget");
static_assert(sizeof(BPFL_GameUtility_C_CalcPlayerCameraToTarget) == 0x000098, "Wrong size on BPFL_GameUtility_C_CalcPlayerCameraToTarget");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, BaseActor) == 0x000000, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::BaseActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, TargetActor) == 0x000008, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, TargetOffset) == 0x000010, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, Pitch) == 0x00001C, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, __WorldContext) == 0x000020, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, Rotation) == 0x000028, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_IsValid_ReturnValue_1) == 0x000035, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x000038, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x000044, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_GetActorEyesViewPoint_OutLocation_1) == 0x000050, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_GetActorEyesViewPoint_OutLocation_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_GetActorEyesViewPoint_OutRotation_1) == 0x00005C, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_GetActorEyesViewPoint_OutRotation_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_FindLookAtRotation_ReturnValue) == 0x000074, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_BreakRotator_Roll) == 0x000080, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_BreakRotator_Pitch) == 0x000084, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_BreakRotator_Yaw) == 0x000088, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CalcPlayerCameraToTarget, CallFunc_MakeRotator_ReturnValue) == 0x00008C, "Member 'BPFL_GameUtility_C_CalcPlayerCameraToTarget::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetPlayerCameraToTarget
// 0x0068 (0x0068 - 0x0000)
struct BPFL_GameUtility_C_SetPlayerCameraToTarget final
{
public:
	class ARSBattlePlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffset;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8172[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_CalcPlayerCameraToTarget_Rotation;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class ICameraInterface>      CallFunc_SetPlayerCameraRotation_self_CastInput;   // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetPlayerCameraRotation_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8173[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SetPlayerCameraToTarget) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetPlayerCameraToTarget");
static_assert(sizeof(BPFL_GameUtility_C_SetPlayerCameraToTarget) == 0x000068, "Wrong size on BPFL_GameUtility_C_SetPlayerCameraToTarget");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, Player) == 0x000000, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::Player' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, TargetActor) == 0x000008, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, TargetOffset) == 0x000010, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::TargetOffset' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, Pitch) == 0x00001C, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, __WorldContext) == 0x000020, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, CallFunc_CalcPlayerCameraToTarget_Rotation) == 0x00002C, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::CallFunc_CalcPlayerCameraToTarget_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, CallFunc_SetPlayerCameraRotation_self_CastInput) == 0x000038, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::CallFunc_SetPlayerCameraRotation_self_CastInput' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, CallFunc_SetPlayerCameraRotation_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::CallFunc_SetPlayerCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, CallFunc_GetController_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, K2Node_DynamicCast_AsPlayer_Controller) == 0x000058, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetPlayerCameraToTarget, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BPFL_GameUtility_C_SetPlayerCameraToTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventEnemy
// 0x0060 (0x0060 - 0x0000)
struct BPFL_GameUtility_C_BindingEventEnemy final
{
public:
	class ARSCharacterBase*                       Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeOwnerShip;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8174[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8175[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   IDText;                                            // 0x0028(0x0018)(Edit, BlueprintVisible)
	int32                                         TmpIndex;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8176[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BindingEventEnemyFromText_IsBinding;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventEnemy) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventEnemy");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventEnemy) == 0x000060, "Wrong size on BPFL_GameUtility_C_BindingEventEnemy");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, Enemy) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventEnemy::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, IsChangeOwnerShip) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventEnemy::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventEnemy::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, IsBinding) == 0x000020, "Member 'BPFL_GameUtility_C_BindingEventEnemy::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, IDText) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventEnemy::IDText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, TmpIndex) == 0x000040, "Member 'BPFL_GameUtility_C_BindingEventEnemy::TmpIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, Param_Name) == 0x000048, "Member 'BPFL_GameUtility_C_BindingEventEnemy::Param_Name' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemy, CallFunc_BindingEventEnemyFromText_IsBinding) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventEnemy::CallFunc_BindingEventEnemyFromText_IsBinding' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventEnemyFromText
// 0x0100 (0x0100 - 0x0000)
struct BPFL_GameUtility_C_BindingEventEnemyFromText final
{
public:
	class ARSCharacterBase*                       Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           BindingTags;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          IsChangeOwnerShip;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8177[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8178[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8179[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharacterInterface_C> K2Node_DynamicCast_AsBPI_Battle_Character_Interface; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_817A[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           CallFunc_Get_Event_Bind_Mesh_Component_MeshComponent; // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_817B[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList; // 0x00A0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDList_IsFind;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_817C[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        K2Node_MakeArray_Array_2;                          // 0x00B8(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	struct FMovieSceneObjectBindingID             CallFunc_Array_Get_Item;                           // 0x00C8(0x0018)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_817D[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_817E[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Private_BindingEventEnemy_IsBinding;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventEnemyFromText) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventEnemyFromText");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventEnemyFromText) == 0x000100, "Wrong size on BPFL_GameUtility_C_BindingEventEnemyFromText");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Enemy) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Enemy' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, BindingTags) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::BindingTags' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, IsChangeOwnerShip) == 0x000020, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, __WorldContext) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, IsBinding) == 0x000030, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Ret) == 0x000031, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Ret' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Temp_int_Loop_Num_Variable) == 0x000044, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, K2Node_MakeArray_Array) == 0x000050, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, K2Node_DynamicCast_AsBPI_Battle_Character_Interface) == 0x000060, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::K2Node_DynamicCast_AsBPI_Battle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Get_Event_Bind_Mesh_Component_MeshComponent) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Get_Event_Bind_Mesh_Component_MeshComponent' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, K2Node_MakeArray_Array_1) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList) == 0x0000A0, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_GetSequenceObjectBindingIDList_IsFind) == 0x0000B0, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_GetSequenceObjectBindingIDList_IsFind' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, K2Node_MakeArray_Array_2) == 0x0000B8, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Array_Length_ReturnValue_2) == 0x0000E4, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E8, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, Temp_int_Loop_Counter_Variable_1) == 0x0000EC, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F0, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000F4, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventEnemyFromText, CallFunc_Private_BindingEventEnemy_IsBinding) == 0x0000F8, "Member 'BPFL_GameUtility_C_BindingEventEnemyFromText::CallFunc_Private_BindingEventEnemy_IsBinding' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.Private_BindingEventEnemy
// 0x0090 (0x0090 - 0x0000)
struct BPFL_GameUtility_C_Private_BindingEventEnemy final
{
public:
	TArray<class AActor*>                         BindingActors;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FName>                           BindingTags;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeOwnerShip;                                 // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_817F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8180[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FMovieSceneObjectBindingID>     CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList; // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetSequenceObjectBindingIDList_IsFind;    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8181[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             CallFunc_Array_Get_Item;                           // 0x006C(0x0018)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_Private_BindingEventEnemy) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_Private_BindingEventEnemy");
static_assert(sizeof(BPFL_GameUtility_C_Private_BindingEventEnemy) == 0x000090, "Wrong size on BPFL_GameUtility_C_Private_BindingEventEnemy");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, BindingActors) == 0x000000, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::BindingActors' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, BindingTags) == 0x000010, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::BindingTags' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, Sequencer) == 0x000020, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, IsChangeOwnerShip) == 0x000028, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, __WorldContext) == 0x000030, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, IsBinding) == 0x000038, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, K2Node_MakeArray_Array) == 0x000048, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList) == 0x000058, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_GetSequenceObjectBindingIDList_OutBindingIDList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_GetSequenceObjectBindingIDList_IsFind) == 0x000068, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_GetSequenceObjectBindingIDList_IsFind' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_Array_Get_Item) == 0x00006C, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_Private_BindingEventEnemy, CallFunc_Greater_IntInt_ReturnValue) == 0x00008D, "Member 'BPFL_GameUtility_C_Private_BindingEventEnemy::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCamera
// 0x0070 (0x0070 - 0x0000)
struct BPFL_GameUtility_C_InterpolateCineCamera final
{
public:
	class UCineCameraComponent*                   A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   B;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Dst;                                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpTransform;                                   // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8182[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8183[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_InterpolateCineCamera) == 0x000010, "Wrong alignment on BPFL_GameUtility_C_InterpolateCineCamera");
static_assert(sizeof(BPFL_GameUtility_C_InterpolateCineCamera) == 0x000070, "Wrong size on BPFL_GameUtility_C_InterpolateCineCamera");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, A) == 0x000000, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::A' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, B) == 0x000008, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::B' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, Dst) == 0x000010, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::Dst' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, Rate) == 0x000018, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::Rate' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, InterpTransform) == 0x00001C, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::InterpTransform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, __WorldContext) == 0x000020, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCamera, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BPFL_GameUtility_C_InterpolateCineCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraToDefault
// 0x00E0 (0x00E0 - 0x0000)
struct BPFL_GameUtility_C_InterpolateCineCameraToDefault final
{
public:
	class UCineCameraComponent*                   A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8184[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             B_Transform;                                       // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UCineCameraComponent*                   Dst;                                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpTransform;                                   // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8185[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFocusSettings                   K2Node_MakeStruct_CameraFocusSettings;             // 0x0058(0x0058)()
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFilmbackSettings                K2Node_MakeStruct_CameraFilmbackSettings;          // 0x00B4(0x000C)(NoDestructor)
	struct FCameraLensSettings                    K2Node_MakeStruct_CameraLensSettings;              // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_InterpolateCineCameraToDefault) == 0x000010, "Wrong alignment on BPFL_GameUtility_C_InterpolateCineCameraToDefault");
static_assert(sizeof(BPFL_GameUtility_C_InterpolateCineCameraToDefault) == 0x0000E0, "Wrong size on BPFL_GameUtility_C_InterpolateCineCameraToDefault");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, A) == 0x000000, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::A' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, B_Transform) == 0x000010, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::B_Transform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, Dst) == 0x000040, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::Dst' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, Rate) == 0x000048, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::Rate' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, InterpTransform) == 0x00004C, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::InterpTransform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, __WorldContext) == 0x000050, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, K2Node_MakeStruct_CameraFocusSettings) == 0x000058, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::K2Node_MakeStruct_CameraFocusSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, CallFunc_MakeLiteralFloat_ReturnValue) == 0x0000B0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, K2Node_MakeStruct_CameraFilmbackSettings) == 0x0000B4, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::K2Node_MakeStruct_CameraFilmbackSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefault, K2Node_MakeStruct_CameraLensSettings) == 0x0000C0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefault::K2Node_MakeStruct_CameraLensSettings' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraParam
// 0x0280 (0x0280 - 0x0000)
struct BPFL_GameUtility_C_InterpolateCineCameraParam final
{
public:
	class UCineCameraComponent*                   A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFilmbackSettings                B_FilmbackSettings;                                // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FCameraLensSettings                    B_LensSettings;                                    // 0x0014(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8186[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraFocusSettings                   BFocusSettings;                                    // 0x0030(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         B_CurrentFocalLength;                              // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         B_Current_Aperture;                                // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             B_Transform;                                       // 0x0090(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UCineCameraComponent*                   Dst;                                               // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpTransform;                                   // 0x00CC(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8187[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8188[0x1];                                     // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECameraFocusMethod                            K2Node_Select_Default;                             // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8189[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraFocusSettings                   K2Node_MakeStruct_CameraFocusSettings;             // 0x00E8(0x0058)()
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_TInterpTo_ReturnValue;                    // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x01A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_4;                       // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_5;                       // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_6;                       // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraLensSettings                    K2Node_MakeStruct_CameraLensSettings;              // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Lerp_ReturnValue_7;                       // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_8;                       // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_9;                       // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFilmbackSettings                K2Node_MakeStruct_CameraFilmbackSettings;          // 0x026C(0x000C)(NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_InterpolateCineCameraParam) == 0x000010, "Wrong alignment on BPFL_GameUtility_C_InterpolateCineCameraParam");
static_assert(sizeof(BPFL_GameUtility_C_InterpolateCineCameraParam) == 0x000280, "Wrong size on BPFL_GameUtility_C_InterpolateCineCameraParam");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, A) == 0x000000, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::A' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, B_FilmbackSettings) == 0x000008, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::B_FilmbackSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, B_LensSettings) == 0x000014, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::B_LensSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, BFocusSettings) == 0x000030, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::BFocusSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, B_CurrentFocalLength) == 0x000088, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::B_CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, B_Current_Aperture) == 0x00008C, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::B_Current_Aperture' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, B_Transform) == 0x000090, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::B_Transform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, Dst) == 0x0000C0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::Dst' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, Rate) == 0x0000C8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::Rate' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, InterpTransform) == 0x0000CC, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::InterpTransform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, __WorldContext) == 0x0000D0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D9, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_IsValid_ReturnValue_1) == 0x0000DA, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue) == 0x0000DC, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, Temp_bool_Variable) == 0x0000E0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, K2Node_Select_Default) == 0x0000E1, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, K2Node_MakeStruct_CameraFocusSettings) == 0x0000E8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::K2Node_MakeStruct_CameraFocusSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000140, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_TInterpTo_ReturnValue) == 0x000170, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_TInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0001A0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_1) == 0x000228, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, K2Node_MathExpression_ReturnValue) == 0x00022C, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_2) == 0x000230, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_FTrunc_ReturnValue) == 0x000234, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_3) == 0x000238, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_4) == 0x00023C, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_5) == 0x000240, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_6) == 0x000244, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, K2Node_MakeStruct_CameraLensSettings) == 0x000248, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::K2Node_MakeStruct_CameraLensSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_7) == 0x000260, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_8) == 0x000264, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, CallFunc_Lerp_ReturnValue_9) == 0x000268, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParam, K2Node_MakeStruct_CameraFilmbackSettings) == 0x00026C, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParam::K2Node_MakeStruct_CameraFilmbackSettings' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraParamFromFov
// 0x00E0 (0x00E0 - 0x0000)
struct BPFL_GameUtility_C_InterpolateCineCameraParamFromFov final
{
public:
	class UCineCameraComponent*                   A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFilmbackSettings                B_FilmbackSettings;                                // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FCameraLensSettings                    B_LensSettings;                                    // 0x0014(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_818A[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraFocusSettings                   B_FocusSettings;                                   // 0x0030(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         B_Current_Aperture;                                // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         B_Field_Of_View;                                   // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             B_Transform;                                       // 0x0090(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UCineCameraComponent*                   Dst;                                               // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpTransform;                                   // 0x00CC(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_818B[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue;             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov) == 0x000010, "Wrong alignment on BPFL_GameUtility_C_InterpolateCineCameraParamFromFov");
static_assert(sizeof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov) == 0x0000E0, "Wrong size on BPFL_GameUtility_C_InterpolateCineCameraParamFromFov");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, A) == 0x000000, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::A' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, B_FilmbackSettings) == 0x000008, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::B_FilmbackSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, B_LensSettings) == 0x000014, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::B_LensSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, B_FocusSettings) == 0x000030, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::B_FocusSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, B_Current_Aperture) == 0x000088, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::B_Current_Aperture' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, B_Field_Of_View) == 0x00008C, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::B_Field_Of_View' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, B_Transform) == 0x000090, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::B_Transform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, Dst) == 0x0000C0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::Dst' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, Rate) == 0x0000C8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::Rate' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, InterpTransform) == 0x0000CC, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::InterpTransform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, __WorldContext) == 0x0000D0, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, CallFunc_DegreesToRadians_ReturnValue) == 0x0000D8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraParamFromFov, K2Node_MathExpression_ReturnValue) == 0x0000DC, "Member 'BPFL_GameUtility_C_InterpolateCineCameraParamFromFov::K2Node_MathExpression_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventNPC
// 0x00C0 (0x00C0 - 0x0000)
struct BPFL_GameUtility_C_BindingEventNPC final
{
public:
	class ARSCharacterBase*                       NPC;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BindSASCode;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BindBrainCode;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Weapon;                                            // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChangeOwnerShip;                                 // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllowSuffixNo;                                     // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_818C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingPlayer;                                   // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingSASCode;                                  // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingBrainCode;                                // 0x0023(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_818D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsBindingWeapon;                                   // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class FText                                   IDText;                                            // 0x0038(0x0018)(Edit, BlueprintVisible)
	int32                                         TmpIndex;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_818E[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           CallFunc_GetSequencerSuffixNoList_List;            // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_2;                          // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BindingEventCharacterBase_IsBinding;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingPlayer; // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingSASCode; // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingBrainCode; // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_818F[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_BindingEventCharacterBase_IsBindingWeapon; // 0x00B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventNPC) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventNPC");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventNPC) == 0x0000C0, "Wrong size on BPFL_GameUtility_C_BindingEventNPC");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, NPC) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventNPC::NPC' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventNPC::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, BindSASCode) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventNPC::BindSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, BindBrainCode) == 0x000011, "Member 'BPFL_GameUtility_C_BindingEventNPC::BindBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, Weapon) == 0x000012, "Member 'BPFL_GameUtility_C_BindingEventNPC::Weapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IsChangeOwnerShip) == 0x000013, "Member 'BPFL_GameUtility_C_BindingEventNPC::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, AllowSuffixNo) == 0x000014, "Member 'BPFL_GameUtility_C_BindingEventNPC::AllowSuffixNo' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventNPC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IsBinding) == 0x000020, "Member 'BPFL_GameUtility_C_BindingEventNPC::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IsBindingPlayer) == 0x000021, "Member 'BPFL_GameUtility_C_BindingEventNPC::IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IsBindingSASCode) == 0x000022, "Member 'BPFL_GameUtility_C_BindingEventNPC::IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IsBindingBrainCode) == 0x000023, "Member 'BPFL_GameUtility_C_BindingEventNPC::IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IsBindingWeapon) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventNPC::IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, IDText) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventNPC::IDText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, TmpIndex) == 0x000050, "Member 'BPFL_GameUtility_C_BindingEventNPC::TmpIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, Param_Name) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventNPC::Param_Name' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, K2Node_MakeArray_Array) == 0x000068, "Member 'BPFL_GameUtility_C_BindingEventNPC::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, CallFunc_GetSequencerSuffixNoList_List) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventNPC::CallFunc_GetSequencerSuffixNoList_List' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, K2Node_MakeArray_Array_1) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventNPC::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, K2Node_MakeArray_Array_2) == 0x000098, "Member 'BPFL_GameUtility_C_BindingEventNPC::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, CallFunc_BindingEventCharacterBase_IsBinding) == 0x0000A8, "Member 'BPFL_GameUtility_C_BindingEventNPC::CallFunc_BindingEventCharacterBase_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, CallFunc_BindingEventCharacterBase_IsBindingPlayer) == 0x0000A9, "Member 'BPFL_GameUtility_C_BindingEventNPC::CallFunc_BindingEventCharacterBase_IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, CallFunc_BindingEventCharacterBase_IsBindingSASCode) == 0x0000AA, "Member 'BPFL_GameUtility_C_BindingEventNPC::CallFunc_BindingEventCharacterBase_IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, CallFunc_BindingEventCharacterBase_IsBindingBrainCode) == 0x0000AB, "Member 'BPFL_GameUtility_C_BindingEventNPC::CallFunc_BindingEventCharacterBase_IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPC, CallFunc_BindingEventCharacterBase_IsBindingWeapon) == 0x0000B0, "Member 'BPFL_GameUtility_C_BindingEventNPC::CallFunc_BindingEventCharacterBase_IsBindingWeapon' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventCharacterBase
// 0x0158 (0x0158 - 0x0000)
struct BPFL_GameUtility_C_BindingEventCharacterBase final
{
public:
	class ARSCharacterBase*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BindSASCode;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BindBrainCode;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Weapon;                                            // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChangeOwnerShip;                                 // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8190[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkeletalTextPrefix;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FText>                           BindingTextPrefix;                                 // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingCodeTextPrefix;                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingWeaponTextPrefix;                           // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingSuffix;                                     // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           WeaponBindingSuffix;                               // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingPlayer;                                   // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingSASCode;                                  // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingBrainCode;                                // 0x0083(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8191[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsBindingWeapon;                                   // 0x0088(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FText>                           BindingWeaponNames;                                // 0x0098(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FText>                           BindingCodeNames;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FText>                           BindingNames;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FText                                   IDText;                                            // 0x00C8(0x0018)(Edit, BlueprintVisible)
	int32                                         TmpIndex;                                          // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8192[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8193[0x5];                                     // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8194[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBinding;     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBindingPlayer; // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBindingSASCode; // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventPlayerFromText_IsBindingBrainCode; // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8195[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_BindingEventPlayerFromText_IsBindingWeapon; // 0x0120(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0140(0x0018)()
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventCharacterBase) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventCharacterBase");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventCharacterBase) == 0x000158, "Wrong size on BPFL_GameUtility_C_BindingEventCharacterBase");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, Character) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::Character' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindSASCode) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindBrainCode) == 0x000011, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, Weapon) == 0x000012, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::Weapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IsChangeOwnerShip) == 0x000013, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, SkeletalTextPrefix) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::SkeletalTextPrefix' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingTextPrefix) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingTextPrefix' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingCodeTextPrefix) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingCodeTextPrefix' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingWeaponTextPrefix) == 0x000048, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingWeaponTextPrefix' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingSuffix) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingSuffix' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, WeaponBindingSuffix) == 0x000068, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::WeaponBindingSuffix' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, __WorldContext) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IsBinding) == 0x000080, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IsBindingPlayer) == 0x000081, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IsBindingSASCode) == 0x000082, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IsBindingBrainCode) == 0x000083, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IsBindingWeapon) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingWeaponNames) == 0x000098, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingWeaponNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingCodeNames) == 0x0000A8, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingCodeNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, BindingNames) == 0x0000B8, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::BindingNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, IDText) == 0x0000C8, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::IDText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, TmpIndex) == 0x0000E0, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::TmpIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, Param_Name) == 0x0000E8, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::Param_Name' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_IsValid_ReturnValue) == 0x0000F8, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_IsValid_ReturnValue_1) == 0x0000F9, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_IsValid_ReturnValue_2) == 0x0000FA, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_GetObjectName_ReturnValue) == 0x000100, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000110, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_FindSubstring_ReturnValue) == 0x000114, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_BindingEventPlayerFromText_IsBinding) == 0x000118, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_BindingEventPlayerFromText_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_BindingEventPlayerFromText_IsBindingPlayer) == 0x000119, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_BindingEventPlayerFromText_IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_BindingEventPlayerFromText_IsBindingSASCode) == 0x00011A, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_BindingEventPlayerFromText_IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_BindingEventPlayerFromText_IsBindingBrainCode) == 0x00011B, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_BindingEventPlayerFromText_IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_BindingEventPlayerFromText_IsBindingWeapon) == 0x000120, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_BindingEventPlayerFromText_IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_GetSubstring_ReturnValue) == 0x000130, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventCharacterBase, CallFunc_Conv_StringToText_ReturnValue) == 0x000140, "Member 'BPFL_GameUtility_C_BindingEventCharacterBase::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventNPCEm
// 0x00C0 (0x00C0 - 0x0000)
struct BPFL_GameUtility_C_BindingEventNPCEm final
{
public:
	class ARSCharacterBase*                       NPC;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BindSASCode;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BindBrainCode;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Weapon;                                            // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChangeOwnerShip;                                 // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllowSuffixNo;                                     // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8196[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingPlayer;                                   // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingSASCode;                                  // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBindingBrainCode;                                // 0x0023(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8197[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsBindingWeapon;                                   // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class FText                                   IDText;                                            // 0x0038(0x0018)(Edit, BlueprintVisible)
	int32                                         TmpIndex;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8198[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           CallFunc_GetSequencerSuffixNoList_List;            // 0x0078(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_2;                          // 0x0098(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_BindingEventCharacterBase_IsBinding;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingPlayer; // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingSASCode; // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BindingEventCharacterBase_IsBindingBrainCode; // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8199[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_BindingEventCharacterBase_IsBindingWeapon; // 0x00B0(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventNPCEm) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventNPCEm");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventNPCEm) == 0x0000C0, "Wrong size on BPFL_GameUtility_C_BindingEventNPCEm");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, NPC) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::NPC' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, BindSASCode) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::BindSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, BindBrainCode) == 0x000011, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::BindBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, Weapon) == 0x000012, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::Weapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IsChangeOwnerShip) == 0x000013, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, AllowSuffixNo) == 0x000014, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::AllowSuffixNo' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IsBinding) == 0x000020, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IsBindingPlayer) == 0x000021, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IsBindingSASCode) == 0x000022, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IsBindingBrainCode) == 0x000023, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IsBindingWeapon) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IsBindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, IDText) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::IDText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, TmpIndex) == 0x000050, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::TmpIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, Param_Name) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::Param_Name' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, K2Node_MakeArray_Array) == 0x000068, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, CallFunc_GetSequencerSuffixNoList_List) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::CallFunc_GetSequencerSuffixNoList_List' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, K2Node_MakeArray_Array_1) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, K2Node_MakeArray_Array_2) == 0x000098, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, CallFunc_BindingEventCharacterBase_IsBinding) == 0x0000A8, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::CallFunc_BindingEventCharacterBase_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, CallFunc_BindingEventCharacterBase_IsBindingPlayer) == 0x0000A9, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::CallFunc_BindingEventCharacterBase_IsBindingPlayer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, CallFunc_BindingEventCharacterBase_IsBindingSASCode) == 0x0000AA, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::CallFunc_BindingEventCharacterBase_IsBindingSASCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, CallFunc_BindingEventCharacterBase_IsBindingBrainCode) == 0x0000AB, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::CallFunc_BindingEventCharacterBase_IsBindingBrainCode' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventNPCEm, CallFunc_BindingEventCharacterBase_IsBindingWeapon) == 0x0000B0, "Member 'BPFL_GameUtility_C_BindingEventNPCEm::CallFunc_BindingEventCharacterBase_IsBindingWeapon' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventPlayerWeaponFromText
// 0x0128 (0x0128 - 0x0000)
struct BPFL_GameUtility_C_BindingEventPlayerWeaponFromText final
{
public:
	TArray<class AActor*>                         Weapons;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           BindingWeaponBaseText;                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          IsChangeOwnerShip;                                 // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_819A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  IsBinding;                                         // 0x0038(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class AActor*>                         BindingWeapon;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	int32                                         WeaponIndex;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_819B[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   IndexText;                                         // 0x0060(0x0018)(Edit, BlueprintVisible)
	TArray<class FText>                           TmpBindingNames;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<bool>                                  Ret;                                               // 0x0088(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_819C[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_819D[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_819E[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x00D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Private_BindingEventPlayer_IsBinding;     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_819F[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00E8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00E9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A0[0x2];                                     // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A1[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A2[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_2;                          // 0x0110(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Private_BindingEventPlayer_IsBinding_1;   // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventPlayerWeaponFromText");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText) == 0x000128, "Wrong size on BPFL_GameUtility_C_BindingEventPlayerWeaponFromText");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Weapons) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Weapons' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Sequencer) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, BindingWeaponBaseText) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::BindingWeaponBaseText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, IsChangeOwnerShip) == 0x000028, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::IsChangeOwnerShip' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, __WorldContext) == 0x000030, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, IsBinding) == 0x000038, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, BindingWeapon) == 0x000048, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::BindingWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, WeaponIndex) == 0x000058, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::WeaponIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, IndexText) == 0x000060, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::IndexText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, TmpBindingNames) == 0x000078, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::TmpBindingNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Ret) == 0x000088, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Ret' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000098, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0000A0, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, K2Node_MakeArray_Array_1) == 0x0000D0, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Private_BindingEventPlayer_IsBinding) == 0x0000E0, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Private_BindingEventPlayer_IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_Length_ReturnValue_1) == 0x0000E4, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_bool_Variable) == 0x0000E8, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_bool_Variable_1) == 0x0000E9, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_int_Loop_Counter_Variable) == 0x0000EC, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Add_IntInt_ReturnValue) == 0x0000F0, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Array_Length_ReturnValue_2) == 0x0000F4, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000F8, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000FC, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_int_Loop_Num_Variable) == 0x000100, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_int_Variable) == 0x000104, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_int_Array_Index_Variable) == 0x00010C, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, K2Node_MakeArray_Array_2) == 0x000110, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, Temp_bool_True_if_break_was_hit_Variable) == 0x000120, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Private_BindingEventPlayer_IsBinding_1) == 0x000121, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Private_BindingEventPlayer_IsBinding_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_Not_PreBool_ReturnValue) == 0x000122, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventPlayerWeaponFromText, CallFunc_BooleanAND_ReturnValue) == 0x000123, "Member 'BPFL_GameUtility_C_BindingEventPlayerWeaponFromText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.InternalBindingEventCharacterBaseTextList
// 0x0220 (0x0220 - 0x0000)
struct BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList final
{
public:
	TArray<class FText>                           OutTextList;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class FText                                   BaseText;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FText>                           PrefixList;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           SuffixList;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0050(0x0018)(Edit, BlueprintVisible)
	int32                                         Param_Index;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SuffixNum;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A3[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A4[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00A0(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81A5[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00E8(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81A6[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0140(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81A7[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0160(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81A8[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x01E8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01F8(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList");
static_assert(sizeof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList) == 0x000220, "Wrong size on BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, OutTextList) == 0x000000, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::OutTextList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, BaseText) == 0x000010, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::BaseText' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, PrefixList) == 0x000028, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::PrefixList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, SuffixList) == 0x000038, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::SuffixList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, __WorldContext) == 0x000048, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Text) == 0x000050, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Text' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Param_Index) == 0x000068, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, SuffixNum) == 0x00006C, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::SuffixNum' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Loop_Num_Variable) == 0x000074, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Variable) == 0x00007C, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Loop_Counter_Variable_1) == 0x000088, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Loop_Num_Variable_1) == 0x000094, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Less_IntInt_ReturnValue_1) == 0x000098, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, Temp_int_Variable_1) == 0x00009C, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, K2Node_MakeStruct_FormatArgumentData) == 0x0000A0, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000E0, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000E8, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Add_IntInt_ReturnValue_3) == 0x000128, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, K2Node_MakeArray_Array) == 0x000130, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Format_ReturnValue) == 0x000140, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Array_Length_ReturnValue) == 0x000158, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, K2Node_MakeStruct_FormatArgumentData_2) == 0x000160, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Array_Length_ReturnValue_1) == 0x0001A0, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001A8, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, K2Node_MakeArray_Array_1) == 0x0001E8, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Format_ReturnValue_1) == 0x0001F8, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Array_Length_ReturnValue_2) == 0x000210, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Add_IntInt_ReturnValue_4) == 0x000214, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Array_Length_ReturnValue_3) == 0x000218, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList, CallFunc_Multiply_IntInt_ReturnValue) == 0x00021C, "Member 'BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetSequencerSuffixNoList
// 0x0060 (0x0060 - 0x0000)
struct BPFL_GameUtility_C_GetSequencerSuffixNoList final
{
public:
	bool                                          AllowSuffixNo;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           List;                                              // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, BlueprintVisible)
	int32                                         Param_Index;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SuffixNum;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetSequencerSuffixNoList) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetSequencerSuffixNoList");
static_assert(sizeof(BPFL_GameUtility_C_GetSequencerSuffixNoList) == 0x000060, "Wrong size on BPFL_GameUtility_C_GetSequencerSuffixNoList");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, AllowSuffixNo) == 0x000000, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::AllowSuffixNo' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, List) == 0x000010, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::List' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, Text) == 0x000020, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::Text' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, Param_Index) == 0x000038, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, SuffixNum) == 0x00003C, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::SuffixNum' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, K2Node_MakeArray_Array) == 0x000040, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerSuffixNoList, K2Node_MakeArray_Array_1) == 0x000050, "Member 'BPFL_GameUtility_C_GetSequencerSuffixNoList::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetBehaviorTreeTickEnable
// 0x0038 (0x0038 - 0x0000)
struct BPFL_GameUtility_C_SetBehaviorTreeTickEnable final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81AA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81AB[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBattleCharacterInterface> K2Node_DynamicCast_AsBattle_Character_Interface;   // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBehaviorTreeTickEnable_ReturnValue;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetBehaviorTreeTickEnable");
static_assert(sizeof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable) == 0x000038, "Wrong size on BPFL_GameUtility_C_SetBehaviorTreeTickEnable");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, Target) == 0x000000, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::Target' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, Enabled) == 0x000008, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::Enabled' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, __WorldContext) == 0x000010, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, CallFunc_DoesImplementInterface_ReturnValue) == 0x000018, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, K2Node_DynamicCast_AsBattle_Character_Interface) == 0x000020, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::K2Node_DynamicCast_AsBattle_Character_Interface' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetBehaviorTreeTickEnable, CallFunc_SetBehaviorTreeTickEnable_ReturnValue) == 0x000031, "Member 'BPFL_GameUtility_C_SetBehaviorTreeTickEnable::CallFunc_SetBehaviorTreeTickEnable_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CastChildRSParticleComponent
// 0x0048 (0x0048 - 0x0000)
struct BPFL_GameUtility_C_CastChildRSParticleComponent final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RSParticleSystemComponent_C*        BP_RSParticleComp;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URSParticleSystemComponentBase*         ParticleComp;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RSParticleSystemComponent_C*        K2Node_DynamicCast_AsBP_RSParticle_System_Component; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81AC[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SequencerParticle_C*                K2Node_DynamicCast_AsBP_Sequencer_Particle;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_CastChildRSParticleComponent) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CastChildRSParticleComponent");
static_assert(sizeof(BPFL_GameUtility_C_CastChildRSParticleComponent) == 0x000048, "Wrong size on BPFL_GameUtility_C_CastChildRSParticleComponent");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, SceneComponent) == 0x000000, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::SceneComponent' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, BP_RSParticleComp) == 0x000010, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::BP_RSParticleComp' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, ParticleComp) == 0x000018, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::ParticleComp' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, K2Node_DynamicCast_AsBP_RSParticle_System_Component) == 0x000020, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::K2Node_DynamicCast_AsBP_RSParticle_System_Component' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, K2Node_DynamicCast_AsBP_Sequencer_Particle) == 0x000038, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::K2Node_DynamicCast_AsBP_Sequencer_Particle' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CastChildRSParticleComponent, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BPFL_GameUtility_C_CastChildRSParticleComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SearchMeshMaterialsFromSlot
// 0x00C8 (0x00C8 - 0x0000)
struct BPFL_GameUtility_C_SearchMeshMaterialsFromSlot final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SearchSubStirng;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             FindMaterial;                                      // 0x0020(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<int32>                                 Param_Index;                                       // 0x0030(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FName>                           SlotNames;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 RetIndex;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Ret;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         LoopLastIndex;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81AD[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81AE[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetMaterialSlotNames_ReturnValue;         // 0x0088(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SearchMeshMaterialsFromSlot");
static_assert(sizeof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot) == 0x0000C8, "Wrong size on BPFL_GameUtility_C_SearchMeshMaterialsFromSlot");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, Mesh) == 0x000000, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::Mesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, SearchSubStirng) == 0x000008, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::SearchSubStirng' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, __WorldContext) == 0x000018, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, FindMaterial) == 0x000020, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::FindMaterial' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, Param_Index) == 0x000030, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, SlotNames) == 0x000040, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::SlotNames' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, RetIndex) == 0x000050, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::RetIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, Ret) == 0x000060, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::Ret' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, LoopLastIndex) == 0x000070, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::LoopLastIndex' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, Temp_int_Loop_Num_Variable) == 0x000074, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, Temp_int_Loop_Counter_Variable) == 0x00007C, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_GetMaterialSlotNames_ReturnValue) == 0x000088, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_GetMaterialSlotNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, Temp_int_Array_Index_Variable) == 0x000098, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_Array_Add_ReturnValue) == 0x00009C, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_GetMaterial_ReturnValue) == 0x0000A0, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_Array_Add_ReturnValue_1) == 0x0000A8, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_Array_Length_ReturnValue) == 0x0000AC, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_Conv_NameToString_ReturnValue) == 0x0000B0, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_FindSubstring_ReturnValue) == 0x0000C0, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SearchMeshMaterialsFromSlot, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'BPFL_GameUtility_C_SearchMeshMaterialsFromSlot::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraToDefaultFov
// 0x00E0 (0x00E0 - 0x0000)
struct BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov final
{
public:
	class UCineCameraComponent*                   A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81AF[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             B_Transform;                                       // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         B_FieldOfView;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81B0[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCineCameraComponent*                   Dst;                                               // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpTransform;                                   // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B1[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFocusSettings                   K2Node_MakeStruct_CameraFocusSettings;             // 0x0060(0x0058)()
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraFilmbackSettings                K2Node_MakeStruct_CameraFilmbackSettings;          // 0x00BC(0x000C)(NoDestructor)
	struct FCameraLensSettings                    K2Node_MakeStruct_CameraLensSettings;              // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov) == 0x000010, "Wrong alignment on BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov");
static_assert(sizeof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov) == 0x0000E0, "Wrong size on BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, A) == 0x000000, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::A' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, B_Transform) == 0x000010, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::B_Transform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, B_FieldOfView) == 0x000040, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::B_FieldOfView' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, Dst) == 0x000048, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::Dst' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, Rate) == 0x000050, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::Rate' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, InterpTransform) == 0x000054, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::InterpTransform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, __WorldContext) == 0x000058, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, K2Node_MakeStruct_CameraFocusSettings) == 0x000060, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::K2Node_MakeStruct_CameraFocusSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, CallFunc_MakeLiteralFloat_ReturnValue) == 0x0000B8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, K2Node_MakeStruct_CameraFilmbackSettings) == 0x0000BC, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::K2Node_MakeStruct_CameraFilmbackSettings' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov, K2Node_MakeStruct_CameraLensSettings) == 0x0000C8, "Member 'BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov::K2Node_MakeStruct_CameraLensSettings' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetWireVisiblity
// 0x0038 (0x0038 - 0x0000)
struct BPFL_GameUtility_C_SetWireVisiblity final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShow;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSBattlePlayer_C*                      K2Node_DynamicCast_AsRSBattle_Player;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B3[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MenuPlayerBase_C*                   K2Node_DynamicCast_AsBP_Menu_Player_Base;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SetWireVisiblity) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetWireVisiblity");
static_assert(sizeof(BPFL_GameUtility_C_SetWireVisiblity) == 0x000038, "Wrong size on BPFL_GameUtility_C_SetWireVisiblity");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, Actor) == 0x000000, "Member 'BPFL_GameUtility_C_SetWireVisiblity::Actor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, bShow) == 0x000008, "Member 'BPFL_GameUtility_C_SetWireVisiblity::bShow' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, __WorldContext) == 0x000010, "Member 'BPFL_GameUtility_C_SetWireVisiblity::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, K2Node_DynamicCast_AsRSBattle_Player) == 0x000018, "Member 'BPFL_GameUtility_C_SetWireVisiblity::K2Node_DynamicCast_AsRSBattle_Player' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_GameUtility_C_SetWireVisiblity::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BPFL_GameUtility_C_SetWireVisiblity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, K2Node_DynamicCast_AsBP_Menu_Player_Base) == 0x000028, "Member 'BPFL_GameUtility_C_SetWireVisiblity::K2Node_DynamicCast_AsBP_Menu_Player_Base' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetWireVisiblity, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BPFL_GameUtility_C_SetWireVisiblity::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetSequencerWeaponSuffixNoList
// 0x0060 (0x0060 - 0x0000)
struct BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList final
{
public:
	bool                                          AllowSuffixNo;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           List;                                              // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, BlueprintVisible)
	int32                                         Param_Index;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SuffixNum;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class FText>                           K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList");
static_assert(sizeof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList) == 0x000060, "Wrong size on BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, AllowSuffixNo) == 0x000000, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::AllowSuffixNo' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, List) == 0x000010, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::List' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, Text) == 0x000020, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::Text' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, Param_Index) == 0x000038, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::Param_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, SuffixNum) == 0x00003C, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::SuffixNum' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, K2Node_MakeArray_Array) == 0x000040, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList, K2Node_MakeArray_Array_1) == 0x000050, "Member 'BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventSheath
// 0x0048 (0x0048 - 0x0000)
struct BPFL_GameUtility_C_BindingEventSheath final
{
public:
	class AActor*                                 BindingActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSLevelSequenceActor*                  Sequencer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBinding;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B5[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Private_BindingEventPlayer_IsBinding;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_BindingEventSheath) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_BindingEventSheath");
static_assert(sizeof(BPFL_GameUtility_C_BindingEventSheath) == 0x000048, "Wrong size on BPFL_GameUtility_C_BindingEventSheath");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, BindingActor) == 0x000000, "Member 'BPFL_GameUtility_C_BindingEventSheath::BindingActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, Sequencer) == 0x000008, "Member 'BPFL_GameUtility_C_BindingEventSheath::Sequencer' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, __WorldContext) == 0x000010, "Member 'BPFL_GameUtility_C_BindingEventSheath::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, IsBinding) == 0x000018, "Member 'BPFL_GameUtility_C_BindingEventSheath::IsBinding' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, K2Node_MakeArray_Array) == 0x000020, "Member 'BPFL_GameUtility_C_BindingEventSheath::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, K2Node_MakeArray_Array_1) == 0x000030, "Member 'BPFL_GameUtility_C_BindingEventSheath::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_BindingEventSheath, CallFunc_Private_BindingEventPlayer_IsBinding) == 0x000040, "Member 'BPFL_GameUtility_C_BindingEventSheath::CallFunc_Private_BindingEventPlayer_IsBinding' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CanPlayCutScene
// 0x01B0 (0x01B0 - 0x0000)
struct BPFL_GameUtility_C_CanPlayCutScene final
{
public:
	bool                                          IsTipsCheck;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ok;                                                // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         EnemyActors;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class AActor*                                 EnemyActor;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerManager_C*                    PlayerManager;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARsBattleHero_C*                        PlayerHero;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARSCharacterBase*                       PlayerCharacter;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetOK;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B8[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARSCharacterBase*                       CallFunc_GetPlayer_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APsychicObjectManager_C*                CallFunc_GetPsychicObjectManager_PsyObjManager;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPsychicObjectAction_return;          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81B9[0x1];                                     // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81BA[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ENpcInterface_C>  K2Node_DynamicCast_AsBPI_ENpc_Interface;           // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81BB[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ENPCSequencerComponent_C*           CallFunc_GetEnpcSequencerComponent_Component;      // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81BC[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81BD[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager*                          CallFunc_GetEnemyManager_EnemyManager;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81BE[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARSCharacterBase*>               CallFunc_GetEnemyListRef_ReturnValue;              // 0x00E0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81BF[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetEnemyBossList_ReturnValue;             // 0x00F8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C0[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_BrainCrashManager_C*                CallFunc_GetBrainCrashManager_Manager;             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0138(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAnyBrainCrash_NowPlaying;        // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAny_IsPlaying;                   // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C1[0x1];                                     // 0x0153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingSequence_IsPlaying;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C2[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81C3[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C4[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerManager_C*                    CallFunc_GetPlayerManager_PlayerManager;           // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SASManager_C*                       CallFunc_GetSASManager_SAS_Manager;                // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCutInPlaying_Playing;                   // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C5[0x6];                                     // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BrainFieldManager_C*                CallFunc_GetBrainFieldManager_Manager;             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Performance_Sequencer_IsPerform;       // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C6[0x2];                                     // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable;                        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Num_Variable_1;                      // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_CanPlayCutScene) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CanPlayCutScene");
static_assert(sizeof(BPFL_GameUtility_C_CanPlayCutScene) == 0x0001B0, "Wrong size on BPFL_GameUtility_C_CanPlayCutScene");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, IsTipsCheck) == 0x000000, "Member 'BPFL_GameUtility_C_CanPlayCutScene::IsTipsCheck' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_CanPlayCutScene::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Ok) == 0x000010, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Ok' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, EnemyActors) == 0x000018, "Member 'BPFL_GameUtility_C_CanPlayCutScene::EnemyActors' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, EnemyActor) == 0x000028, "Member 'BPFL_GameUtility_C_CanPlayCutScene::EnemyActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, PlayerManager) == 0x000030, "Member 'BPFL_GameUtility_C_CanPlayCutScene::PlayerManager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, PlayerHero) == 0x000038, "Member 'BPFL_GameUtility_C_CanPlayCutScene::PlayerHero' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, PlayerCharacter) == 0x000040, "Member 'BPFL_GameUtility_C_CanPlayCutScene::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, RetOK) == 0x000048, "Member 'BPFL_GameUtility_C_CanPlayCutScene::RetOK' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_1) == 0x00004A, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_2) == 0x00004B, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetPlayer_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetPsychicObjectManager_PsyObjManager) == 0x000058, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetPsychicObjectManager_PsyObjManager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_3) == 0x000060, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_CheckPsychicObjectAction_return) == 0x000061, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_CheckPsychicObjectAction_return' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_4) == 0x000062, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, K2Node_DynamicCast_AsBPI_ENpc_Interface) == 0x000070, "Member 'BPFL_GameUtility_C_CanPlayCutScene::K2Node_DynamicCast_AsBPI_ENpc_Interface' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BPFL_GameUtility_C_CanPlayCutScene::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetEnpcSequencerComponent_Component) == 0x000088, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetEnpcSequencerComponent_Component' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetDisplayName_ReturnValue) == 0x000090, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A0, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_5) == 0x0000B0, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000B8, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Temp_int_Array_Index_Variable) == 0x0000C8, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetEnemyManager_EnemyManager) == 0x0000D0, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_6) == 0x0000D8, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetEnemyListRef_ReturnValue) == 0x0000E0, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetEnemyListRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetEnemyBossList_ReturnValue) == 0x0000F8, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetEnemyBossList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Array_Contains_ReturnValue) == 0x000108, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Conv_BoolToString_ReturnValue) == 0x000110, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000120, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetBrainCrashManager_Manager) == 0x000130, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetBrainCrashManager_Manager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Conv_StringToText_ReturnValue) == 0x000138, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_7) == 0x000150, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsPlayingAnyBrainCrash_NowPlaying) == 0x000151, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsPlayingAnyBrainCrash_NowPlaying' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsPlayingAny_IsPlaying) == 0x000152, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsPlayingAny_IsPlaying' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Temp_int_Loop_Counter_Variable_1) == 0x000154, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsPlayingSequence_IsPlaying) == 0x000158, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsPlayingSequence_IsPlaying' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Add_IntInt_ReturnValue_1) == 0x00015C, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Temp_int_Array_Index_Variable_1) == 0x000160, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000168, "Member 'BPFL_GameUtility_C_CanPlayCutScene::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'BPFL_GameUtility_C_CanPlayCutScene::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetPlayerManager_PlayerManager) == 0x000178, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetPlayerManager_PlayerManager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetSASManager_SAS_Manager) == 0x000180, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetSASManager_SAS_Manager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_8) == 0x000188, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsCutInPlaying_Playing) == 0x000189, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsCutInPlaying_Playing' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_GetBrainFieldManager_Manager) == 0x000190, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_GetBrainFieldManager_Manager' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_IsValid_ReturnValue_9) == 0x000198, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Is_Performance_Sequencer_IsPerform) == 0x000199, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Is_Performance_Sequencer_IsPerform' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Array_Length_ReturnValue_1) == 0x00019C, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Temp_int_Loop_Num_Variable) == 0x0001A0, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Temp_int_Loop_Num_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, Temp_int_Loop_Num_Variable_1) == 0x0001A4, "Member 'BPFL_GameUtility_C_CanPlayCutScene::Temp_int_Loop_Num_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Less_IntInt_ReturnValue) == 0x0001A8, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CanPlayCutScene, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001A9, "Member 'BPFL_GameUtility_C_CanPlayCutScene::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.SetSequencerMarkPause
// 0x00A0 (0x00A0 - 0x0000)
struct BPFL_GameUtility_C_SetSequencerMarkPause final
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 MarkString;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         StartFrame;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81C7[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Successsed;                                        // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQualifiedFrameTime                    SequencerFullTime;                                 // 0x002C(0x0010)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C9[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQualifiedFrameTime                    SequqncerEndFrame;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_1;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_2;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetEndTime_ReturnValue;                   // 0x0068(0x0010)(NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_3;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFrameTime                             CallFunc_GetMarkedFrameByLabel_MarkTime;           // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMarkedFrameByLabel_ReturnValue;        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81CA[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_4;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_SetSequencerMarkPause) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_SetSequencerMarkPause");
static_assert(sizeof(BPFL_GameUtility_C_SetSequencerMarkPause) == 0x0000A0, "Wrong size on BPFL_GameUtility_C_SetSequencerMarkPause");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, LevelSequenceActor) == 0x000000, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, MarkString) == 0x000008, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::MarkString' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, StartFrame) == 0x000018, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::StartFrame' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, __WorldContext) == 0x000020, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, Successsed) == 0x000028, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::Successsed' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, SequencerFullTime) == 0x00002C, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::SequencerFullTime' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, Success) == 0x00003C, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::Success' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, SequqncerEndFrame) == 0x000040, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::SequqncerEndFrame' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue) == 0x000050, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_1) == 0x000058, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_2) == 0x000060, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetEndTime_ReturnValue) == 0x000068, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_3) == 0x000078, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetMarkedFrameByLabel_MarkTime) == 0x000080, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetMarkedFrameByLabel_MarkTime' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetMarkedFrameByLabel_ReturnValue) == 0x000088, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetMarkedFrameByLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_4) == 0x000090, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_SetSequencerMarkPause, CallFunc_IsValid_ReturnValue_1) == 0x000099, "Member 'BPFL_GameUtility_C_SetSequencerMarkPause::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.CancelSequencerMarkPause
// 0x0078 (0x0078 - 0x0000)
struct BPFL_GameUtility_C_CancelSequencerMarkPause final
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 RestartMarkString;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    FullTime;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Successsed;                                        // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81CB[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ScrubToMarkedFrame_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81CC[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_1;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame;            // 0x0050(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate;        // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_2;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_3;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_CancelSequencerMarkPause) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_CancelSequencerMarkPause");
static_assert(sizeof(BPFL_GameUtility_C_CancelSequencerMarkPause) == 0x000078, "Wrong size on BPFL_GameUtility_C_CancelSequencerMarkPause");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, LevelSequenceActor) == 0x000000, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, RestartMarkString) == 0x000008, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::RestartMarkString' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, FullTime) == 0x000018, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::FullTime' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, __WorldContext) == 0x000028, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, Successsed) == 0x000030, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::Successsed' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, Success) == 0x000031, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::Success' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue) == 0x000038, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_ScrubToMarkedFrame_ReturnValue) == 0x000040, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_ScrubToMarkedFrame_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_1) == 0x000048, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_BreakQualifiedFrameTime_Frame) == 0x000050, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_BreakQualifiedFrameTime_Frame' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_BreakQualifiedFrameTime_FrameRate) == 0x000054, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_BreakQualifiedFrameTime_FrameRate' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_BreakQualifiedFrameTime_SubFrame) == 0x00005C, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_BreakQualifiedFrameTime_SubFrame' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_2) == 0x000060, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_GetSequencePlayer_ReturnValue_3) == 0x000068, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_GetSequencePlayer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_CancelSequencerMarkPause, CallFunc_IsValid_ReturnValue_1) == 0x000071, "Member 'BPFL_GameUtility_C_CancelSequencerMarkPause::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.IsPlayerActor
// 0x0028 (0x0028 - 0x0000)
struct BPFL_GameUtility_C_IsPlayerActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81CD[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARsBattleHero_C*                        K2Node_DynamicCast_AsRs_Battle_Hero;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_GameUtility_C_IsPlayerActor) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_IsPlayerActor");
static_assert(sizeof(BPFL_GameUtility_C_IsPlayerActor) == 0x000028, "Wrong size on BPFL_GameUtility_C_IsPlayerActor");
static_assert(offsetof(BPFL_GameUtility_C_IsPlayerActor, Actor) == 0x000000, "Member 'BPFL_GameUtility_C_IsPlayerActor::Actor' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_IsPlayerActor, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_IsPlayerActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_IsPlayerActor, Valid) == 0x000010, "Member 'BPFL_GameUtility_C_IsPlayerActor::Valid' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_IsPlayerActor, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BPFL_GameUtility_C_IsPlayerActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_IsPlayerActor, K2Node_DynamicCast_AsRs_Battle_Hero) == 0x000018, "Member 'BPFL_GameUtility_C_IsPlayerActor::K2Node_DynamicCast_AsRs_Battle_Hero' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_IsPlayerActor, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_GameUtility_C_IsPlayerActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetStaticMeshTriangleData
// 0x00A8 (0x00A8 - 0x0000)
struct BPFL_GameUtility_C_GetStaticMeshTriangleData final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LOD_Index;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Section_Index;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale3D;                                           // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81CE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMeshTriangleData                      MeshTriangleData;                                  // 0x0028(0x0020)(Parm, OutParm)
	struct FMeshTriangleData                      TriangleData;                                      // 0x0048(0x0020)(Edit, BlueprintVisible)
	int32                                         CurrentIdx;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81CF[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<int32>                                 TriangleList;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         IndicesNum;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81D0[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTriangleIndices>               IndicesList;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetStaticMeshTriangleData) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetStaticMeshTriangleData");
static_assert(sizeof(BPFL_GameUtility_C_GetStaticMeshTriangleData) == 0x0000A8, "Wrong size on BPFL_GameUtility_C_GetStaticMeshTriangleData");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, StaticMesh) == 0x000000, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::StaticMesh' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, LOD_Index) == 0x000008, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::LOD_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, Section_Index) == 0x00000C, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::Section_Index' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, Scale3D) == 0x000010, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::Scale3D' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, __WorldContext) == 0x000020, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, MeshTriangleData) == 0x000028, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::MeshTriangleData' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, TriangleData) == 0x000048, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::TriangleData' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, CurrentIdx) == 0x000068, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::CurrentIdx' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, Vertices) == 0x000070, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::Vertices' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, TriangleList) == 0x000080, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::TriangleList' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, IndicesNum) == 0x000090, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::IndicesNum' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetStaticMeshTriangleData, IndicesList) == 0x000098, "Member 'BPFL_GameUtility_C_GetStaticMeshTriangleData::IndicesList' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetPlayerIDFromSASKind
// 0x0020 (0x0020 - 0x0000)
struct BPFL_GameUtility_C_GetPlayerIDFromSASKind final
{
public:
	E_SASKind                                     Sas;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81D1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     PlayerId;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_7;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_8;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_9;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_10;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable_11;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetPlayerIDFromSASKind) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetPlayerIDFromSASKind");
static_assert(sizeof(BPFL_GameUtility_C_GetPlayerIDFromSASKind) == 0x000020, "Wrong size on BPFL_GameUtility_C_GetPlayerIDFromSASKind");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Sas) == 0x000000, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Sas' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, PlayerId) == 0x000010, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::PlayerId' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable) == 0x000011, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_1) == 0x000012, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_2) == 0x000013, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_3) == 0x000014, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_4) == 0x000015, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_5) == 0x000016, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_6) == 0x000017, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_7) == 0x000018, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_8) == 0x000019, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_9) == 0x00001A, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_10) == 0x00001B, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, Temp_byte_Variable_11) == 0x00001C, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetPlayerIDFromSASKind, K2Node_Select_Default) == 0x00001D, "Member 'BPFL_GameUtility_C_GetPlayerIDFromSASKind::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetSASKindFromPlayerID
// 0x0030 (0x0030 - 0x0000)
struct BPFL_GameUtility_C_GetSASKindFromPlayerID final
{
public:
	EPlayerID                                     PlayerId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81D2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Sas;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerID                                     Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_7;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_8;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_9;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_10;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_11;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_12;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_13;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_14;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_15;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_16;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_17;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_18;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_19;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_20;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_21;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_22;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_23;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_24;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_25;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_26;                             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     Temp_byte_Variable_27;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SASKind                                     K2Node_Select_Default;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_GameUtility_C_GetSASKindFromPlayerID) == 0x000008, "Wrong alignment on BPFL_GameUtility_C_GetSASKindFromPlayerID");
static_assert(sizeof(BPFL_GameUtility_C_GetSASKindFromPlayerID) == 0x000030, "Wrong size on BPFL_GameUtility_C_GetSASKindFromPlayerID");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, PlayerId) == 0x000000, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, __WorldContext) == 0x000008, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Sas) == 0x000010, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Sas' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable) == 0x000011, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_1) == 0x000012, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_2) == 0x000013, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_3) == 0x000014, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_4) == 0x000015, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_5) == 0x000016, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_6) == 0x000017, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_7) == 0x000018, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_8) == 0x000019, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_9) == 0x00001A, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_10) == 0x00001B, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_11) == 0x00001C, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_12) == 0x00001D, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_13) == 0x00001E, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_14) == 0x00001F, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_15) == 0x000020, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_16) == 0x000021, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_17) == 0x000022, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_18) == 0x000023, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_19) == 0x000024, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_20) == 0x000025, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_21) == 0x000026, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_22) == 0x000027, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_22' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_23) == 0x000028, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_23' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_24) == 0x000029, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_24' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_25) == 0x00002A, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_25' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_26) == 0x00002B, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_26' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, Temp_byte_Variable_27) == 0x00002C, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::Temp_byte_Variable_27' has a wrong offset!");
static_assert(offsetof(BPFL_GameUtility_C_GetSASKindFromPlayerID, K2Node_Select_Default) == 0x00002D, "Member 'BPFL_GameUtility_C_GetSASKindFromPlayerID::K2Node_Select_Default' has a wrong offset!");

}

