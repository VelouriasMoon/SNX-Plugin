#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerActionStateDamageBlow

#include "Basic.hpp"

#include "BP_PlayerActionStateDamageBlow_classes.hpp"
#include "BP_PlayerActionStateDamageBlow_parameters.hpp"


namespace SDK
{

// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.ExecuteUbergraph_BP_PlayerActionStateDamageBlow
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerActionStateDamageBlow_C::ExecuteUbergraph_BP_PlayerActionStateDamageBlow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "ExecuteUbergraph_BP_PlayerActionStateDamageBlow");

	Params::BP_PlayerActionStateDamageBlow_C_ExecuteUbergraph_BP_PlayerActionStateDamageBlow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.UnbindFloatingControlEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerActionStateDamageBlow_C::UnbindFloatingControlEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "UnbindFloatingControlEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.BindFloatingControlEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_PlayerActionStateDamageBlow_C::BindFloatingControlEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "BindFloatingControlEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Enter
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerActionStateDamageBlow_C::Enter(int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "Enter");

	Params::BP_PlayerActionStateDamageBlow_C_Enter Parms{};

	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Update
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerActionStateDamageBlow_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "Update");

	Params::BP_PlayerActionStateDamageBlow_C_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Transition
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PlayerActionStateDamageBlow_C::Transition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "Transition");

	Params::BP_PlayerActionStateDamageBlow_C_Transition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.Exit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextStateIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PlayerActionStateDamageBlow_C::Exit(int32 NextStateIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "Exit");

	Params::BP_PlayerActionStateDamageBlow_C_Exit Parms{};

	Parms.NextStateIndex = NextStateIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.IsInvalidDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerDamageKind                       DamageKind                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInvalidDamage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDamageBlow_C::IsInvalidDamage(EPlayerDamageKind DamageKind, bool* bInvalidDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "IsInvalidDamage");

	Params::BP_PlayerActionStateDamageBlow_C_IsInvalidDamage Parms{};

	Parms.DamageKind = DamageKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bInvalidDamage != nullptr)
		*bInvalidDamage = Parms.bInvalidDamage;
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.IsAerialBlow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerDamageKind                       DamageKind                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSkip                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDamageBlow_C::IsAerialBlow(EPlayerDamageKind DamageKind, bool* bSkip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "IsAerialBlow");

	Params::BP_PlayerActionStateDamageBlow_C_IsAerialBlow Parms{};

	Parms.DamageKind = DamageKind;

	UObject::ProcessEvent(Func, &Parms);

	if (bSkip != nullptr)
		*bSkip = Parms.bSkip;
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.OnBeginFall
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerActionStateDamageBlow_C::OnBeginFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "OnBeginFall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.OnFallFailed
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerActionStateDamageBlow_C::OnFallFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "OnFallFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerActionStateDamageBlow.BP_PlayerActionStateDamageBlow_C.IsDamageFront
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bFront                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PlayerActionStateDamageBlow_C::IsDamageFront(bool* bFront) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerActionStateDamageBlow_C", "IsDamageFront");

	Params::BP_PlayerActionStateDamageBlow_C_IsDamageFront Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bFront != nullptr)
		*bFront = Parms.bFront;
}

}

