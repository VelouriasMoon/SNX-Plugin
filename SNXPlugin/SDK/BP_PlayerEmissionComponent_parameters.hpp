#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerEmissionComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.ExecuteUbergraph_BP_PlayerEmissionComponent
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85CB[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent");
static_assert(sizeof(BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent, Temp_bool_Has_Been_Initd_Variable) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_ExecuteUbergraph_BP_PlayerEmissionComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerEmissionComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerEmissionComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerEmissionComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.Setup
// 0x00D0 (0x00D0 - 0x0000)
struct BP_PlayerEmissionComponent_C_Setup final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85CC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerInterface>      K2Node_DynamicCast_AsPlayer_Interface;             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85CD[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerInterface_C> K2Node_DynamicCast_AsBPI_Player_Interface;         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsControlAI_CallFromCPP_ReturnValue;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnemyPlayer_bEnemyPlayer;               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85CE[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerActor_Valid;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85CF[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0050(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_Setup) == 0x000008, "Wrong alignment on BP_PlayerEmissionComponent_C_Setup");
static_assert(sizeof(BP_PlayerEmissionComponent_C_Setup) == 0x0000D0, "Wrong size on BP_PlayerEmissionComponent_C_Setup");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, Temp_bool_Variable) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, K2Node_DynamicCast_AsPlayer_Interface) == 0x000010, "Member 'BP_PlayerEmissionComponent_C_Setup::K2Node_DynamicCast_AsPlayer_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlayerEmissionComponent_C_Setup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, K2Node_DynamicCast_AsBPI_Player_Interface) == 0x000028, "Member 'BP_PlayerEmissionComponent_C_Setup::K2Node_DynamicCast_AsBPI_Player_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_PlayerEmissionComponent_C_Setup::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_IsControlAI_CallFromCPP_ReturnValue) == 0x000039, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_IsControlAI_CallFromCPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_IsEnemyPlayer_bEnemyPlayer) == 0x00003A, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_IsEnemyPlayer_bEnemyPlayer' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_GetOwner_ReturnValue_1) == 0x000040, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_IsPlayerActor_Valid) == 0x000048, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_IsPlayerActor_Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_And_IntInt_ReturnValue) == 0x00004C, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, K2Node_MakeStruct_FormatArgumentData) == 0x000050, "Member 'BP_PlayerEmissionComponent_C_Setup::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, K2Node_MakeArray_Array) == 0x000090, "Member 'BP_PlayerEmissionComponent_C_Setup::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_Format_ReturnValue) == 0x0000A0, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_Conv_TextToString_ReturnValue) == 0x0000B8, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_Setup, CallFunc_Conv_StringToName_ReturnValue) == 0x0000C8, "Member 'BP_PlayerEmissionComponent_C_Setup::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.UpdateWakeInterpolate
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerEmissionComponent_C_UpdateWakeInterpolate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D1[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_UpdateWakeInterpolate");
static_assert(sizeof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate) == 0x000020, "Wrong size on BP_PlayerEmissionComponent_C_UpdateWakeInterpolate");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, DeltaSeconds) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_FMin_ReturnValue) == 0x000010, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateWakeInterpolate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_PlayerEmissionComponent_C_UpdateWakeInterpolate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.SetupMaterialParameter
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerEmissionComponent_C_SetupMaterialParameter final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_SetupMaterialParameter) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_SetupMaterialParameter");
static_assert(sizeof(BP_PlayerEmissionComponent_C_SetupMaterialParameter) == 0x000028, "Wrong size on BP_PlayerEmissionComponent_C_SetupMaterialParameter");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, Rate) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::Rate' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, CallFunc_BreakVector_Y) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, CallFunc_BreakVector_Z) == 0x000010, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, CallFunc_MakeColor_ReturnValue) == 0x000014, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupMaterialParameter, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_PlayerEmissionComponent_C_SetupMaterialParameter::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.UpdateCheckSAS
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerEmissionComponent_C_UpdateCheckSAS final
{
public:
	float                                         Delta_Seconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempIsActiveSAS;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActiveSAS_bActive;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_UpdateCheckSAS) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_UpdateCheckSAS");
static_assert(sizeof(BP_PlayerEmissionComponent_C_UpdateCheckSAS) == 0x000008, "Wrong size on BP_PlayerEmissionComponent_C_UpdateCheckSAS");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateCheckSAS, Delta_Seconds) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_UpdateCheckSAS::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateCheckSAS, TempIsActiveSAS) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_UpdateCheckSAS::TempIsActiveSAS' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateCheckSAS, CallFunc_IsActiveSAS_bActive) == 0x000005, "Member 'BP_PlayerEmissionComponent_C_UpdateCheckSAS::CallFunc_IsActiveSAS_bActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateCheckSAS, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000006, "Member 'BP_PlayerEmissionComponent_C_UpdateCheckSAS::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.SetupStart
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_SetupStart final
{
public:
	struct FVector                                CallFunc_GetEmissionColor_Color;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_SetupStart) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_SetupStart");
static_assert(sizeof(BP_PlayerEmissionComponent_C_SetupStart) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_SetupStart");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupStart, CallFunc_GetEmissionColor_Color) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_SetupStart::CallFunc_GetEmissionColor_Color' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupStart, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_SetupStart::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.SetupColorBlend
// 0x000C (0x000C - 0x0000)
struct BP_PlayerEmissionComponent_C_SetupColorBlend final
{
public:
	struct FVector                                NextColor;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_SetupColorBlend) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_SetupColorBlend");
static_assert(sizeof(BP_PlayerEmissionComponent_C_SetupColorBlend) == 0x00000C, "Wrong size on BP_PlayerEmissionComponent_C_SetupColorBlend");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetupColorBlend, NextColor) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_SetupColorBlend::NextColor' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.GetEmissionColor
// 0x0064 (0x0064 - 0x0000)
struct BP_PlayerEmissionComponent_C_GetEmissionColor final
{
public:
	struct FVector                                Color;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetBrainFieldEmissionColor_ReturnValue;   // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D3[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_1;   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue_1;    // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue_2;   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_GetEmissionColor) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_GetEmissionColor");
static_assert(sizeof(BP_PlayerEmissionComponent_C_GetEmissionColor) == 0x000064, "Wrong size on BP_PlayerEmissionComponent_C_GetEmissionColor");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, Color) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::Color' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_GetBrainFieldEmissionColor_ReturnValue) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_GetBrainFieldEmissionColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x00001C, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_BooleanOR_ReturnValue) == 0x000028, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_GetVectorParameterValue_ReturnValue) == 0x00002C, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_Conv_LinearColorToVector_ReturnValue_1) == 0x00003C, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_Conv_LinearColorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_GetVectorParameterValue_ReturnValue_1) == 0x000048, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_GetVectorParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetEmissionColor, CallFunc_Conv_LinearColorToVector_ReturnValue_2) == 0x000058, "Member 'BP_PlayerEmissionComponent_C_GetEmissionColor::CallFunc_Conv_LinearColorToVector_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.UpdateColorBlend
// 0x003C (0x003C - 0x0000)
struct BP_PlayerEmissionComponent_C_UpdateColorBlend final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D4[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_UpdateColorBlend) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_UpdateColorBlend");
static_assert(sizeof(BP_PlayerEmissionComponent_C_UpdateColorBlend) == 0x00003C, "Wrong size on BP_PlayerEmissionComponent_C_UpdateColorBlend");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, DeltaSeconds) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_VLerp_ReturnValue) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_BreakVector_X) == 0x000014, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_BreakVector_Z) == 0x00001C, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_FMin_ReturnValue) == 0x000020, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_MakeColor_ReturnValue) == 0x000024, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateColorBlend, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_PlayerEmissionComponent_C_UpdateColorBlend::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.UpdateDamage
// 0x002C (0x002C - 0x0000)
struct BP_PlayerEmissionComponent_C_UpdateDamage final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DamagePattern2;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DamageRate;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D5[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D6[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_UpdateDamage) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_UpdateDamage");
static_assert(sizeof(BP_PlayerEmissionComponent_C_UpdateDamage) == 0x00002C, "Wrong size on BP_PlayerEmissionComponent_C_UpdateDamage");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, DeltaTime) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, DamagePattern2) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::DamagePattern2' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, DamageRate) == 0x000005, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::DamageRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, Temp_bool_Variable) == 0x000006, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, Temp_float_Variable) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, Temp_float_Variable_1) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, Temp_bool_Variable_1) == 0x000010, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, Temp_float_Variable_2) == 0x000014, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, Temp_float_Variable_3) == 0x000018, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, K2Node_Select_Default) == 0x00001C, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, K2Node_Select_Default_1) == 0x000020, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000024, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, CallFunc_BooleanOR_ReturnValue) == 0x000025, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x000026, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, CallFunc_BooleanOR_ReturnValue_1) == 0x000027, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, CallFunc_BooleanOR_ReturnValue_2) == 0x000028, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateDamage, CallFunc_BooleanOR_ReturnValue_3) == 0x000029, "Member 'BP_PlayerEmissionComponent_C_UpdateDamage::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.IncSASActiveCount
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerEmissionComponent_C_IncSASActiveCount final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_IncSASActiveCount) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_IncSASActiveCount");
static_assert(sizeof(BP_PlayerEmissionComponent_C_IncSASActiveCount) == 0x000008, "Wrong size on BP_PlayerEmissionComponent_C_IncSASActiveCount");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IncSASActiveCount, Temp_int_Variable) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_IncSASActiveCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IncSASActiveCount, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_IncSASActiveCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.DecSASActiveCount
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerEmissionComponent_C_DecSASActiveCount final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_DecSASActiveCount) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_DecSASActiveCount");
static_assert(sizeof(BP_PlayerEmissionComponent_C_DecSASActiveCount) == 0x000008, "Wrong size on BP_PlayerEmissionComponent_C_DecSASActiveCount");
static_assert(offsetof(BP_PlayerEmissionComponent_C_DecSASActiveCount, Temp_int_Variable) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_DecSASActiveCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_DecSASActiveCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_DecSASActiveCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.IsContinueEmissionColor
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_IsContinueEmissionColor final
{
public:
	bool                                          OffMaskPsychic;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OffMaskAccelerator;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OffMaskBrainField;                                 // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OffMaskDrive;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsContinue;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor) == 0x000001, "Wrong alignment on BP_PlayerEmissionComponent_C_IsContinueEmissionColor");
static_assert(sizeof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_IsContinueEmissionColor");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, OffMaskPsychic) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::OffMaskPsychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, OffMaskAccelerator) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::OffMaskAccelerator' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, OffMaskBrainField) == 0x000002, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::OffMaskBrainField' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, OffMaskDrive) == 0x000003, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::OffMaskDrive' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, IsContinue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::IsContinue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_Not_PreBool_ReturnValue_1) == 0x000006, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_Not_PreBool_ReturnValue_3) == 0x000009, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanAND_ReturnValue_2) == 0x00000B, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanAND_ReturnValue_3) == 0x00000C, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanOR_ReturnValue) == 0x00000D, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanOR_ReturnValue_1) == 0x00000E, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsContinueEmissionColor, CallFunc_BooleanOR_ReturnValue_2) == 0x00000F, "Member 'BP_PlayerEmissionComponent_C_IsContinueEmissionColor::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.ChangeBrainField
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_ChangeBrainField final
{
public:
	bool                                          Param_BrainField;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinueEmissionColor_IsContinue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D7[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEmissionColor_Color;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_ChangeBrainField) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_ChangeBrainField");
static_assert(sizeof(BP_PlayerEmissionComponent_C_ChangeBrainField) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_ChangeBrainField");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeBrainField, Param_BrainField) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_ChangeBrainField::Param_BrainField' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeBrainField, CallFunc_IsContinueEmissionColor_IsContinue) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_ChangeBrainField::CallFunc_IsContinueEmissionColor_IsContinue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeBrainField, CallFunc_GetEmissionColor_Color) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_ChangeBrainField::CallFunc_GetEmissionColor_Color' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.ChangeSAS
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_ChangeSAS final
{
public:
	bool                                          Param_Accelerator;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinueEmissionColor_IsContinue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D8[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEmissionColor_Color;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_ChangeSAS) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_ChangeSAS");
static_assert(sizeof(BP_PlayerEmissionComponent_C_ChangeSAS) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_ChangeSAS");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeSAS, Param_Accelerator) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_ChangeSAS::Param_Accelerator' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeSAS, CallFunc_IsContinueEmissionColor_IsContinue) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_ChangeSAS::CallFunc_IsContinueEmissionColor_IsContinue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeSAS, CallFunc_GetEmissionColor_Color) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_ChangeSAS::CallFunc_GetEmissionColor_Color' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.ChangePhychicEmission
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_ChangePhychicEmission final
{
public:
	bool                                          Phychic;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinueEmissionColor_IsContinue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85D9[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEmissionColor_Color;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_ChangePhychicEmission) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_ChangePhychicEmission");
static_assert(sizeof(BP_PlayerEmissionComponent_C_ChangePhychicEmission) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_ChangePhychicEmission");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangePhychicEmission, Phychic) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_ChangePhychicEmission::Phychic' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangePhychicEmission, CallFunc_IsContinueEmissionColor_IsContinue) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_ChangePhychicEmission::CallFunc_IsContinueEmissionColor_IsContinue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangePhychicEmission, CallFunc_GetEmissionColor_Color) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_ChangePhychicEmission::CallFunc_GetEmissionColor_Color' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.UpdateBrainField
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerEmissionComponent_C_UpdateBrainField final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetBrainFieldEmissionColor_ReturnValue;   // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_UpdateBrainField) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_UpdateBrainField");
static_assert(sizeof(BP_PlayerEmissionComponent_C_UpdateBrainField) == 0x000020, "Wrong size on BP_PlayerEmissionComponent_C_UpdateBrainField");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateBrainField, DeltaTime) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_UpdateBrainField::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateBrainField, CallFunc_GetBrainFieldEmissionColor_ReturnValue) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_UpdateBrainField::CallFunc_GetBrainFieldEmissionColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_UpdateBrainField, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000014, "Member 'BP_PlayerEmissionComponent_C_UpdateBrainField::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.GetBrainFieldEmissionColor
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue_1;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor");
static_assert(sizeof(BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor) == 0x000040, "Wrong size on BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor, ReturnValue) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000010, "Member 'BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor, CallFunc_GetVectorParameterValue_ReturnValue_1) == 0x000020, "Member 'BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor::CallFunc_GetVectorParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor, CallFunc_LinearColorLerp_ReturnValue) == 0x000030, "Member 'BP_PlayerEmissionComponent_C_GetBrainFieldEmissionColor::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.SetOutlineParamValue
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerEmissionComponent_C_SetOutlineParamValue final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetDebuggingManager_Manager;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_SetOutlineParamValue) == 0x000008, "Wrong alignment on BP_PlayerEmissionComponent_C_SetOutlineParamValue");
static_assert(sizeof(BP_PlayerEmissionComponent_C_SetOutlineParamValue) == 0x000020, "Wrong size on BP_PlayerEmissionComponent_C_SetOutlineParamValue");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetOutlineParamValue, Color) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_SetOutlineParamValue::Color' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetOutlineParamValue, CallFunc_GetDebuggingManager_Manager) == 0x000010, "Member 'BP_PlayerEmissionComponent_C_SetOutlineParamValue::CallFunc_GetDebuggingManager_Manager' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetOutlineParamValue, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_PlayerEmissionComponent_C_SetOutlineParamValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_SetOutlineParamValue, CallFunc_NotEqual_NameName_ReturnValue) == 0x000019, "Member 'BP_PlayerEmissionComponent_C_SetOutlineParamValue::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.HideSAS
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerEmissionComponent_C_HideSAS final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinueEmissionColor_IsContinue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_HideSAS) == 0x000001, "Wrong alignment on BP_PlayerEmissionComponent_C_HideSAS");
static_assert(sizeof(BP_PlayerEmissionComponent_C_HideSAS) == 0x000002, "Wrong size on BP_PlayerEmissionComponent_C_HideSAS");
static_assert(offsetof(BP_PlayerEmissionComponent_C_HideSAS, Hidden) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_HideSAS::Hidden' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_HideSAS, CallFunc_IsContinueEmissionColor_IsContinue) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_HideSAS::CallFunc_IsContinueEmissionColor_IsContinue' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.ChangeDrive
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerEmissionComponent_C_ChangeDrive final
{
public:
	bool                                          Param_Drive;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsContinueEmissionColor_IsContinue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85DA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEmissionColor_Color;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_ChangeDrive) == 0x000004, "Wrong alignment on BP_PlayerEmissionComponent_C_ChangeDrive");
static_assert(sizeof(BP_PlayerEmissionComponent_C_ChangeDrive) == 0x000010, "Wrong size on BP_PlayerEmissionComponent_C_ChangeDrive");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeDrive, Param_Drive) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_ChangeDrive::Param_Drive' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeDrive, CallFunc_IsContinueEmissionColor_IsContinue) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_ChangeDrive::CallFunc_IsContinueEmissionColor_IsContinue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_ChangeDrive, CallFunc_GetEmissionColor_Color) == 0x000004, "Member 'BP_PlayerEmissionComponent_C_ChangeDrive::CallFunc_GetEmissionColor_Color' has a wrong offset!");

// Function BP_PlayerEmissionComponent.BP_PlayerEmissionComponent_C.IsActiveSAS
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerEmissionComponent_C_IsActiveSAS final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerEmissionComponent_C_IsActiveSAS) == 0x000001, "Wrong alignment on BP_PlayerEmissionComponent_C_IsActiveSAS");
static_assert(sizeof(BP_PlayerEmissionComponent_C_IsActiveSAS) == 0x000004, "Wrong size on BP_PlayerEmissionComponent_C_IsActiveSAS");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsActiveSAS, bActive) == 0x000000, "Member 'BP_PlayerEmissionComponent_C_IsActiveSAS::bActive' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsActiveSAS, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PlayerEmissionComponent_C_IsActiveSAS::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsActiveSAS, CallFunc_Greater_IntInt_ReturnValue) == 0x000002, "Member 'BP_PlayerEmissionComponent_C_IsActiveSAS::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerEmissionComponent_C_IsActiveSAS, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_PlayerEmissionComponent_C_IsActiveSAS::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

