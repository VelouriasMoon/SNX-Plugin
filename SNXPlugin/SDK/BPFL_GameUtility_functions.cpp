#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_GameUtility

#include "Basic.hpp"

#include "BPFL_GameUtility_classes.hpp"
#include "BPFL_GameUtility_parameters.hpp"


namespace SDK
{

// Function BPFL_GameUtility.BPFL_GameUtility_C.GetLowLODIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::GetLowLODIndex(class UStaticMesh* StaticMesh, class UObject* __WorldContext, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetLowLODIndex");

	Params::BPFL_GameUtility_C_GetLowLODIndex Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SearchMaterialFromName
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Primitive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SearchSubStirng                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               FindMaterial                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SearchMaterialFromName(class UPrimitiveComponent* Primitive, const class FString& SearchSubStirng, class UObject* __WorldContext, class UMaterialInterface** FindMaterial, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SearchMaterialFromName");

	Params::BPFL_GameUtility_C_SearchMaterialFromName Parms{};

	Parms.Primitive = Primitive;
	Parms.SearchSubStirng = std::move(SearchSubStirng);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FindMaterial != nullptr)
		*FindMaterial = Parms.FindMaterial;

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SearchMeshMaterialFromSlot
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SearchSubStirng                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               FindMaterial                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SearchMeshMaterialFromSlot(class USkinnedMeshComponent* Mesh, const class FString& SearchSubStirng, class UObject* __WorldContext, class UMaterialInterface** FindMaterial, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SearchMeshMaterialFromSlot");

	Params::BPFL_GameUtility_C_SearchMeshMaterialFromSlot Parms{};

	Parms.Mesh = Mesh;
	Parms.SearchSubStirng = std::move(SearchSubStirng);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FindMaterial != nullptr)
		*FindMaterial = Parms.FindMaterial;

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetHoodVisible
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForceReset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InvisibleMask                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InvisibleBFHood                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetHoodVisible(class USkinnedMeshComponent* Mesh, bool Visible, bool ForceReset, bool InvisibleMask, bool InvisibleBFHood, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetHoodVisible");

	Params::BPFL_GameUtility_C_SetHoodVisible Parms{};

	Parms.Mesh = Mesh;
	Parms.Visible = Visible;
	Parms.ForceReset = ForceReset;
	Parms.InvisibleMask = InvisibleMask;
	Parms.InvisibleBFHood = InvisibleBFHood;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CreateAllDynamicMaterialInstance
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstanceDynamic*> DMArray                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::CreateAllDynamicMaterialInstance(class UMeshComponent* Mesh, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* DMArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CreateAllDynamicMaterialInstance");

	Params::BPFL_GameUtility_C_CreateAllDynamicMaterialInstance Parms{};

	Parms.Mesh = Mesh;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DMArray != nullptr)
		*DMArray = std::move(Parms.DMArray);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventPlayer
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindSASCode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BindBrainCode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingPlayer                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingSASCode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingBrainCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<bool>                            IsBindingWeapon                                        (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::BindingEventPlayer(class ARSCharacterBase* Player, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, bool AllowSuffixNo, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventPlayer");

	Params::BPFL_GameUtility_C_BindingEventPlayer Parms{};

	Parms.Player = Player;
	Parms.Sequencer = Sequencer;
	Parms.BindSASCode = BindSASCode;
	Parms.BindBrainCode = BindBrainCode;
	Parms.Weapon = Weapon;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;

	if (IsBindingPlayer != nullptr)
		*IsBindingPlayer = Parms.IsBindingPlayer;

	if (IsBindingSASCode != nullptr)
		*IsBindingSASCode = Parms.IsBindingSASCode;

	if (IsBindingBrainCode != nullptr)
		*IsBindingBrainCode = Parms.IsBindingBrainCode;

	if (IsBindingWeapon != nullptr)
		*IsBindingWeapon = std::move(Parms.IsBindingWeapon);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.Private_BindingEventPlayer
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   BindingActors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingNames                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::Private_BindingEventPlayer(TArray<class AActor*>& BindingActors, TArray<class FText>& BindingNames, class ARSLevelSequenceActor* Sequencer, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "Private_BindingEventPlayer");

	Params::BPFL_GameUtility_C_Private_BindingEventPlayer Parms{};

	Parms.BindingActors = std::move(BindingActors);
	Parms.BindingNames = std::move(BindingNames);
	Parms.Sequencer = Sequencer;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	BindingActors = std::move(Parms.BindingActors);
	BindingNames = std::move(Parms.BindingNames);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetAllEnableTick
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableTick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetAllEnableTick(class AActor* Actor, bool EnableTick, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetAllEnableTick");

	Params::BPFL_GameUtility_C_SetAllEnableTick Parms{};

	Parms.Actor = Actor;
	Parms.EnableTick = EnableTick;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CreateAllDynamicMaterialInstanceFromParticle
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystemComponent*         Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstanceDynamic*> DMArray                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::CreateAllDynamicMaterialInstanceFromParticle(class UParticleSystemComponent* Particle, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* DMArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CreateAllDynamicMaterialInstanceFromParticle");

	Params::BPFL_GameUtility_C_CreateAllDynamicMaterialInstanceFromParticle Parms{};

	Parms.Particle = Particle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DMArray != nullptr)
		*DMArray = std::move(Parms.DMArray);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetScalarParameterFromSearchMaterial
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MaterialName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetScalarParameterFromSearchMaterial(class USkinnedMeshComponent* Mesh, float Value, const class FString& MaterialName, class FName ParameterName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetScalarParameterFromSearchMaterial");

	Params::BPFL_GameUtility_C_SetScalarParameterFromSearchMaterial Parms{};

	Parms.Mesh = Mesh;
	Parms.Value = Value;
	Parms.MaterialName = std::move(MaterialName);
	Parms.ParameterName = ParameterName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventPlayerFromText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindSASCode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BindBrainCode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FText>                     BindingNames                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingCodeBaseText                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingWeaponBaseText                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingPlayer                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingSASCode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingBrainCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<bool>                            IsBindingWeapon                                        (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::BindingEventPlayerFromText(class ARSCharacterBase* Player, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, TArray<class FText>& BindingNames, TArray<class FText>& BindingCodeBaseText, TArray<class FText>& BindingWeaponBaseText, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventPlayerFromText");

	Params::BPFL_GameUtility_C_BindingEventPlayerFromText Parms{};

	Parms.Player = Player;
	Parms.Sequencer = Sequencer;
	Parms.BindSASCode = BindSASCode;
	Parms.BindBrainCode = BindBrainCode;
	Parms.Weapon = Weapon;
	Parms.BindingNames = std::move(BindingNames);
	Parms.BindingCodeBaseText = std::move(BindingCodeBaseText);
	Parms.BindingWeaponBaseText = std::move(BindingWeaponBaseText);
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	BindingNames = std::move(Parms.BindingNames);
	BindingCodeBaseText = std::move(Parms.BindingCodeBaseText);
	BindingWeaponBaseText = std::move(Parms.BindingWeaponBaseText);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;

	if (IsBindingPlayer != nullptr)
		*IsBindingPlayer = Parms.IsBindingPlayer;

	if (IsBindingSASCode != nullptr)
		*IsBindingSASCode = Parms.IsBindingSASCode;

	if (IsBindingBrainCode != nullptr)
		*IsBindingBrainCode = Parms.IsBindingBrainCode;

	if (IsBindingWeapon != nullptr)
		*IsBindingWeapon = std::move(Parms.IsBindingWeapon);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CheckWallHeight
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckLimitHeight                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          GroundPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::CheckWallHeight(const struct FVector& Start, const struct FVector& End, float CheckLimitHeight, class UObject* __WorldContext, bool* bHit, struct FVector* GroundPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CheckWallHeight");

	Params::BPFL_GameUtility_C_CheckWallHeight Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.CheckLimitHeight = CheckLimitHeight;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;

	if (GroundPoint != nullptr)
		*GroundPoint = std::move(Parms.GroundPoint);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.GetScalarParameterValueOnMaterialByCaptureActor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCaptureActor_C*                Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaterialIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::GetScalarParameterValueOnMaterialByCaptureActor(class ABPCaptureActor_C* Actor, int32 MaterialIndex, class FName ParameterName, class UObject* __WorldContext, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetScalarParameterValueOnMaterialByCaptureActor");

	Params::BPFL_GameUtility_C_GetScalarParameterValueOnMaterialByCaptureActor Parms{};

	Parms.Actor = Actor;
	Parms.MaterialIndex = MaterialIndex;
	Parms.ParameterName = ParameterName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CalcPlayerCameraToTarget
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BaseActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::CalcPlayerCameraToTarget(class AActor* BaseActor, class AActor* TargetActor, const struct FVector& TargetOffset, float Pitch, class UObject* __WorldContext, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CalcPlayerCameraToTarget");

	Params::BPFL_GameUtility_C_CalcPlayerCameraToTarget Parms{};

	Parms.BaseActor = BaseActor;
	Parms.TargetActor = TargetActor;
	Parms.TargetOffset = std::move(TargetOffset);
	Parms.Pitch = Pitch;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetPlayerCameraToTarget
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSBattlePlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetPlayerCameraToTarget(class ARSBattlePlayer_C* Player, class AActor* TargetActor, const struct FVector& TargetOffset, float Pitch, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetPlayerCameraToTarget");

	Params::BPFL_GameUtility_C_SetPlayerCameraToTarget Parms{};

	Parms.Player = Player;
	Parms.TargetActor = TargetActor;
	Parms.TargetOffset = std::move(TargetOffset);
	Parms.Pitch = Pitch;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventEnemy
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::BindingEventEnemy(class ARSCharacterBase* Enemy, class ARSLevelSequenceActor* Sequencer, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventEnemy");

	Params::BPFL_GameUtility_C_BindingEventEnemy Parms{};

	Parms.Enemy = Enemy;
	Parms.Sequencer = Sequencer;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventEnemyFromText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     BindingTags                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::BindingEventEnemyFromText(class ARSCharacterBase* Enemy, class ARSLevelSequenceActor* Sequencer, TArray<class FName>& BindingTags, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventEnemyFromText");

	Params::BPFL_GameUtility_C_BindingEventEnemyFromText Parms{};

	Parms.Enemy = Enemy;
	Parms.Sequencer = Sequencer;
	Parms.BindingTags = std::move(BindingTags);
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	BindingTags = std::move(Parms.BindingTags);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.Private_BindingEventEnemy
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   BindingActors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FName>                     BindingTags                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::Private_BindingEventEnemy(TArray<class AActor*>& BindingActors, TArray<class FName>& BindingTags, class ARSLevelSequenceActor* Sequencer, bool IsChangeOwnerShip, class UObject* __WorldContext, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "Private_BindingEventEnemy");

	Params::BPFL_GameUtility_C_Private_BindingEventEnemy Parms{};

	Parms.BindingActors = std::move(BindingActors);
	Parms.BindingTags = std::move(BindingTags);
	Parms.Sequencer = Sequencer;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	BindingActors = std::move(Parms.BindingActors);
	BindingTags = std::move(Parms.BindingTags);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCamera
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCineCameraComponent*             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCineCameraComponent*             B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCineCameraComponent*             Dst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::InterpolateCineCamera(class UCineCameraComponent* A, class UCineCameraComponent* B, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "InterpolateCineCamera");

	Params::BPFL_GameUtility_C_InterpolateCineCamera Parms{};

	Parms.A = A;
	Parms.B = B;
	Parms.Dst = Dst;
	Parms.Rate = Rate;
	Parms.InterpTransform = InterpTransform;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraToDefault
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCineCameraComponent*             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       B_Transform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UCineCameraComponent*             Dst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::InterpolateCineCameraToDefault(class UCineCameraComponent* A, const struct FTransform& B_Transform, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "InterpolateCineCameraToDefault");

	Params::BPFL_GameUtility_C_InterpolateCineCameraToDefault Parms{};

	Parms.A = A;
	Parms.B_Transform = std::move(B_Transform);
	Parms.Dst = Dst;
	Parms.Rate = Rate;
	Parms.InterpTransform = InterpTransform;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraParam
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCineCameraComponent*             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCameraFilmbackSettings          B_FilmbackSettings                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FCameraLensSettings              B_LensSettings                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FCameraFocusSettings             BFocusSettings                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   B_CurrentFocalLength                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   B_Current_Aperture                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       B_Transform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UCineCameraComponent*             Dst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::InterpolateCineCameraParam(class UCineCameraComponent* A, const struct FCameraFilmbackSettings& B_FilmbackSettings, const struct FCameraLensSettings& B_LensSettings, const struct FCameraFocusSettings& BFocusSettings, float B_CurrentFocalLength, float B_Current_Aperture, const struct FTransform& B_Transform, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "InterpolateCineCameraParam");

	Params::BPFL_GameUtility_C_InterpolateCineCameraParam Parms{};

	Parms.A = A;
	Parms.B_FilmbackSettings = std::move(B_FilmbackSettings);
	Parms.B_LensSettings = std::move(B_LensSettings);
	Parms.BFocusSettings = std::move(BFocusSettings);
	Parms.B_CurrentFocalLength = B_CurrentFocalLength;
	Parms.B_Current_Aperture = B_Current_Aperture;
	Parms.B_Transform = std::move(B_Transform);
	Parms.Dst = Dst;
	Parms.Rate = Rate;
	Parms.InterpTransform = InterpTransform;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraParamFromFov
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCineCameraComponent*             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCameraFilmbackSettings          B_FilmbackSettings                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FCameraLensSettings              B_LensSettings                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FCameraFocusSettings             B_FocusSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   B_Current_Aperture                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   B_Field_Of_View                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       B_Transform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UCineCameraComponent*             Dst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::InterpolateCineCameraParamFromFov(class UCineCameraComponent* A, const struct FCameraFilmbackSettings& B_FilmbackSettings, const struct FCameraLensSettings& B_LensSettings, const struct FCameraFocusSettings& B_FocusSettings, float B_Current_Aperture, float B_Field_Of_View, const struct FTransform& B_Transform, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "InterpolateCineCameraParamFromFov");

	Params::BPFL_GameUtility_C_InterpolateCineCameraParamFromFov Parms{};

	Parms.A = A;
	Parms.B_FilmbackSettings = std::move(B_FilmbackSettings);
	Parms.B_LensSettings = std::move(B_LensSettings);
	Parms.B_FocusSettings = std::move(B_FocusSettings);
	Parms.B_Current_Aperture = B_Current_Aperture;
	Parms.B_Field_Of_View = B_Field_Of_View;
	Parms.B_Transform = std::move(B_Transform);
	Parms.Dst = Dst;
	Parms.Rate = Rate;
	Parms.InterpTransform = InterpTransform;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventNPC
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 NPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindSASCode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BindBrainCode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingPlayer                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingSASCode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingBrainCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<bool>                            IsBindingWeapon                                        (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::BindingEventNPC(class ARSCharacterBase* NPC, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, bool AllowSuffixNo, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventNPC");

	Params::BPFL_GameUtility_C_BindingEventNPC Parms{};

	Parms.NPC = NPC;
	Parms.Sequencer = Sequencer;
	Parms.BindSASCode = BindSASCode;
	Parms.BindBrainCode = BindBrainCode;
	Parms.Weapon = Weapon;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;

	if (IsBindingPlayer != nullptr)
		*IsBindingPlayer = Parms.IsBindingPlayer;

	if (IsBindingSASCode != nullptr)
		*IsBindingSASCode = Parms.IsBindingSASCode;

	if (IsBindingBrainCode != nullptr)
		*IsBindingBrainCode = Parms.IsBindingBrainCode;

	if (IsBindingWeapon != nullptr)
		*IsBindingWeapon = std::move(Parms.IsBindingWeapon);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventCharacterBase
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindSASCode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BindBrainCode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           SkeletalTextPrefix                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FText>                     BindingTextPrefix                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingCodeTextPrefix                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingWeaponTextPrefix                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     BindingSuffix                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     WeaponBindingSuffix                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingPlayer                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingSASCode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingBrainCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<bool>                            IsBindingWeapon                                        (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::BindingEventCharacterBase(class ARSCharacterBase* Character, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, const class FString& SkeletalTextPrefix, TArray<class FText>& BindingTextPrefix, TArray<class FText>& BindingCodeTextPrefix, TArray<class FText>& BindingWeaponTextPrefix, TArray<class FText>& BindingSuffix, TArray<class FText>& WeaponBindingSuffix, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventCharacterBase");

	Params::BPFL_GameUtility_C_BindingEventCharacterBase Parms{};

	Parms.Character = Character;
	Parms.Sequencer = Sequencer;
	Parms.BindSASCode = BindSASCode;
	Parms.BindBrainCode = BindBrainCode;
	Parms.Weapon = Weapon;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.SkeletalTextPrefix = std::move(SkeletalTextPrefix);
	Parms.BindingTextPrefix = std::move(BindingTextPrefix);
	Parms.BindingCodeTextPrefix = std::move(BindingCodeTextPrefix);
	Parms.BindingWeaponTextPrefix = std::move(BindingWeaponTextPrefix);
	Parms.BindingSuffix = std::move(BindingSuffix);
	Parms.WeaponBindingSuffix = std::move(WeaponBindingSuffix);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	BindingTextPrefix = std::move(Parms.BindingTextPrefix);
	BindingCodeTextPrefix = std::move(Parms.BindingCodeTextPrefix);
	BindingWeaponTextPrefix = std::move(Parms.BindingWeaponTextPrefix);
	BindingSuffix = std::move(Parms.BindingSuffix);
	WeaponBindingSuffix = std::move(Parms.WeaponBindingSuffix);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;

	if (IsBindingPlayer != nullptr)
		*IsBindingPlayer = Parms.IsBindingPlayer;

	if (IsBindingSASCode != nullptr)
		*IsBindingSASCode = Parms.IsBindingSASCode;

	if (IsBindingBrainCode != nullptr)
		*IsBindingBrainCode = Parms.IsBindingBrainCode;

	if (IsBindingWeapon != nullptr)
		*IsBindingWeapon = std::move(Parms.IsBindingWeapon);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventNPCEm
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARSCharacterBase*                 NPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BindSASCode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BindBrainCode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingPlayer                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingSASCode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBindingBrainCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<bool>                            IsBindingWeapon                                        (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::BindingEventNPCEm(class ARSCharacterBase* NPC, class ARSLevelSequenceActor* Sequencer, bool BindSASCode, bool BindBrainCode, bool Weapon, bool IsChangeOwnerShip, bool AllowSuffixNo, class UObject* __WorldContext, bool* IsBinding, bool* IsBindingPlayer, bool* IsBindingSASCode, bool* IsBindingBrainCode, TArray<bool>* IsBindingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventNPCEm");

	Params::BPFL_GameUtility_C_BindingEventNPCEm Parms{};

	Parms.NPC = NPC;
	Parms.Sequencer = Sequencer;
	Parms.BindSASCode = BindSASCode;
	Parms.BindBrainCode = BindBrainCode;
	Parms.Weapon = Weapon;
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;

	if (IsBindingPlayer != nullptr)
		*IsBindingPlayer = Parms.IsBindingPlayer;

	if (IsBindingSASCode != nullptr)
		*IsBindingSASCode = Parms.IsBindingSASCode;

	if (IsBindingBrainCode != nullptr)
		*IsBindingBrainCode = Parms.IsBindingBrainCode;

	if (IsBindingWeapon != nullptr)
		*IsBindingWeapon = std::move(Parms.IsBindingWeapon);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventPlayerWeaponFromText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Weapons                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     BindingWeaponBaseText                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsChangeOwnerShip                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<bool>                            IsBinding                                              (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::BindingEventPlayerWeaponFromText(TArray<class AActor*>& Weapons, class ARSLevelSequenceActor* Sequencer, TArray<class FText>& BindingWeaponBaseText, bool IsChangeOwnerShip, class UObject* __WorldContext, TArray<bool>* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventPlayerWeaponFromText");

	Params::BPFL_GameUtility_C_BindingEventPlayerWeaponFromText Parms{};

	Parms.Weapons = std::move(Weapons);
	Parms.Sequencer = Sequencer;
	Parms.BindingWeaponBaseText = std::move(BindingWeaponBaseText);
	Parms.IsChangeOwnerShip = IsChangeOwnerShip;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Weapons = std::move(Parms.Weapons);
	BindingWeaponBaseText = std::move(Parms.BindingWeaponBaseText);

	if (IsBinding != nullptr)
		*IsBinding = std::move(Parms.IsBinding);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.InternalBindingEventCharacterBaseTextList
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     OutTextList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class FText                             BaseText                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FText>                     PrefixList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// TArray<class FText>                     SuffixList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::InternalBindingEventCharacterBaseTextList(TArray<class FText>& OutTextList, class FText& BaseText, TArray<class FText>& PrefixList, TArray<class FText>& SuffixList, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "InternalBindingEventCharacterBaseTextList");

	Params::BPFL_GameUtility_C_InternalBindingEventCharacterBaseTextList Parms{};

	Parms.OutTextList = std::move(OutTextList);
	Parms.BaseText = std::move(BaseText);
	Parms.PrefixList = std::move(PrefixList);
	Parms.SuffixList = std::move(SuffixList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	OutTextList = std::move(Parms.OutTextList);
	BaseText = std::move(Parms.BaseText);
	PrefixList = std::move(Parms.PrefixList);
	SuffixList = std::move(Parms.SuffixList);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.GetSequencerSuffixNoList
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     List                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::GetSequencerSuffixNoList(bool AllowSuffixNo, class UObject* __WorldContext, TArray<class FText>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetSequencerSuffixNoList");

	Params::BPFL_GameUtility_C_GetSequencerSuffixNoList Parms{};

	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetBehaviorTreeTickEnable
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetBehaviorTreeTickEnable(class AActor* Target, bool Enabled, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetBehaviorTreeTickEnable");

	Params::BPFL_GameUtility_C_SetBehaviorTreeTickEnable Parms{};

	Parms.Target = Target;
	Parms.Enabled = Enabled;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CastChildRSParticleComponent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_RSParticleSystemComponent_C*  BP_RSParticleComp                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class URSParticleSystemComponentBase*   ParticleComp                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::CastChildRSParticleComponent(class USceneComponent* SceneComponent, class UObject* __WorldContext, class UBP_RSParticleSystemComponent_C** BP_RSParticleComp, class URSParticleSystemComponentBase** ParticleComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CastChildRSParticleComponent");

	Params::BPFL_GameUtility_C_CastChildRSParticleComponent Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BP_RSParticleComp != nullptr)
		*BP_RSParticleComp = Parms.BP_RSParticleComp;

	if (ParticleComp != nullptr)
		*ParticleComp = Parms.ParticleComp;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SearchMeshMaterialsFromSlot
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SearchSubStirng                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>       FindMaterial                                           (Parm, OutParm, HasGetValueTypeHash)
// TArray<int32>                           Param_Index                                            (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SearchMeshMaterialsFromSlot(class UMeshComponent* Mesh, const class FString& SearchSubStirng, class UObject* __WorldContext, TArray<class UMaterialInterface*>* FindMaterial, TArray<int32>* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SearchMeshMaterialsFromSlot");

	Params::BPFL_GameUtility_C_SearchMeshMaterialsFromSlot Parms{};

	Parms.Mesh = Mesh;
	Parms.SearchSubStirng = std::move(SearchSubStirng);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FindMaterial != nullptr)
		*FindMaterial = std::move(Parms.FindMaterial);

	if (Param_Index != nullptr)
		*Param_Index = std::move(Parms.Param_Index);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.InterpolateCineCameraToDefaultFov
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCineCameraComponent*             A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       B_Transform                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   B_FieldOfView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCineCameraComponent*             Dst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::InterpolateCineCameraToDefaultFov(class UCineCameraComponent* A, const struct FTransform& B_Transform, float B_FieldOfView, class UCineCameraComponent* Dst, float Rate, bool InterpTransform, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "InterpolateCineCameraToDefaultFov");

	Params::BPFL_GameUtility_C_InterpolateCineCameraToDefaultFov Parms{};

	Parms.A = A;
	Parms.B_Transform = std::move(B_Transform);
	Parms.B_FieldOfView = B_FieldOfView;
	Parms.Dst = Dst;
	Parms.Rate = Rate;
	Parms.InterpTransform = InterpTransform;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetWireVisiblity
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetWireVisiblity(class AActor* Actor, bool bShow, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetWireVisiblity");

	Params::BPFL_GameUtility_C_SetWireVisiblity Parms{};

	Parms.Actor = Actor;
	Parms.bShow = bShow;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.GetSequencerWeaponSuffixNoList
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    AllowSuffixNo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     List                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPFL_GameUtility_C::GetSequencerWeaponSuffixNoList(bool AllowSuffixNo, class UObject* __WorldContext, TArray<class FText>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetSequencerWeaponSuffixNoList");

	Params::BPFL_GameUtility_C_GetSequencerWeaponSuffixNoList Parms{};

	Parms.AllowSuffixNo = AllowSuffixNo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.BindingEventSheath
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BindingActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARSLevelSequenceActor*            Sequencer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBinding                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::BindingEventSheath(class AActor* BindingActor, class ARSLevelSequenceActor* Sequencer, class UObject* __WorldContext, bool* IsBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "BindingEventSheath");

	Params::BPFL_GameUtility_C_BindingEventSheath Parms{};

	Parms.BindingActor = BindingActor;
	Parms.Sequencer = Sequencer;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsBinding != nullptr)
		*IsBinding = Parms.IsBinding;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CanPlayCutScene
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTipsCheck                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ok                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::CanPlayCutScene(bool IsTipsCheck, class UObject* __WorldContext, bool* Ok)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CanPlayCutScene");

	Params::BPFL_GameUtility_C_CanPlayCutScene Parms{};

	Parms.IsTipsCheck = IsTipsCheck;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Ok != nullptr)
		*Ok = Parms.Ok;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.SetSequencerMarkPause
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              LevelSequenceActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MarkString                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   StartFrame                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Successsed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FQualifiedFrameTime              SequencerFullTime                                      (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::SetSequencerMarkPause(class ALevelSequenceActor* LevelSequenceActor, const class FString& MarkString, int32 StartFrame, class UObject* __WorldContext, bool* Successsed, struct FQualifiedFrameTime* SequencerFullTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "SetSequencerMarkPause");

	Params::BPFL_GameUtility_C_SetSequencerMarkPause Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;
	Parms.MarkString = std::move(MarkString);
	Parms.StartFrame = StartFrame;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Successsed != nullptr)
		*Successsed = Parms.Successsed;

	if (SequencerFullTime != nullptr)
		*SequencerFullTime = std::move(Parms.SequencerFullTime);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.CancelSequencerMarkPause
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              LevelSequenceActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RestartMarkString                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FQualifiedFrameTime              FullTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Successsed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::CancelSequencerMarkPause(class ALevelSequenceActor* LevelSequenceActor, const class FString& RestartMarkString, const struct FQualifiedFrameTime& FullTime, class UObject* __WorldContext, bool* Successsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "CancelSequencerMarkPause");

	Params::BPFL_GameUtility_C_CancelSequencerMarkPause Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;
	Parms.RestartMarkString = std::move(RestartMarkString);
	Parms.FullTime = std::move(FullTime);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Successsed != nullptr)
		*Successsed = Parms.Successsed;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.IsPlayerActor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_GameUtility_C::IsPlayerActor(class AActor* Actor, class UObject* __WorldContext, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "IsPlayerActor");

	Params::BPFL_GameUtility_C_IsPlayerActor Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.GetStaticMeshTriangleData
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LOD_Index                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Section_Index                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Scale3D                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMeshTriangleData                MeshTriangleData                                       (Parm, OutParm)

void UBPFL_GameUtility_C::GetStaticMeshTriangleData(class UStaticMesh* StaticMesh, int32 LOD_Index, int32 Section_Index, const struct FVector& Scale3D, class UObject* __WorldContext, struct FMeshTriangleData* MeshTriangleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetStaticMeshTriangleData");

	Params::BPFL_GameUtility_C_GetStaticMeshTriangleData Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LOD_Index = LOD_Index;
	Parms.Section_Index = Section_Index;
	Parms.Scale3D = std::move(Scale3D);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MeshTriangleData != nullptr)
		*MeshTriangleData = std::move(Parms.MeshTriangleData);
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.GetPlayerIDFromSASKind
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SASKind                               Sas                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerID                               PlayerId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::GetPlayerIDFromSASKind(E_SASKind Sas, class UObject* __WorldContext, EPlayerID* PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetPlayerIDFromSASKind");

	Params::BPFL_GameUtility_C_GetPlayerIDFromSASKind Parms{};

	Parms.Sas = Sas;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PlayerId != nullptr)
		*PlayerId = Parms.PlayerId;
}


// Function BPFL_GameUtility.BPFL_GameUtility_C.GetSASKindFromPlayerID
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EPlayerID                               PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SASKind                               Sas                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_GameUtility_C::GetSASKindFromPlayerID(EPlayerID PlayerId, class UObject* __WorldContext, E_SASKind* Sas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_GameUtility_C", "GetSASKindFromPlayerID");

	Params::BPFL_GameUtility_C_GetSASKindFromPlayerID Parms{};

	Parms.PlayerId = PlayerId;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Sas != nullptr)
		*Sas = Parms.Sas;
}

}

